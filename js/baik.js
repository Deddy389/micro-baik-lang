// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = false;
var ENVIRONMENT_IS_WORKER = false;
var ENVIRONMENT_IS_NODE = false;
var ENVIRONMENT_IS_SHELL = false;

// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)

if (Module['ENVIRONMENT']) {
  if (Module['ENVIRONMENT'] === 'WEB') {
    ENVIRONMENT_IS_WEB = true;
  } else if (Module['ENVIRONMENT'] === 'WORKER') {
    ENVIRONMENT_IS_WORKER = true;
  } else if (Module['ENVIRONMENT'] === 'NODE') {
    ENVIRONMENT_IS_NODE = true;
  } else if (Module['ENVIRONMENT'] === 'SHELL') {
    ENVIRONMENT_IS_SHELL = true;
  } else {
    throw new Error('The provided Module[\'ENVIRONMENT\'] value is not valid. It must be one of: WEB|WORKER|NODE|SHELL.');
  }
} else {
  ENVIRONMENT_IS_WEB = typeof window === 'object';
  ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
  ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
  ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
}


if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = console.log;
  if (!Module['printErr']) Module['printErr'] = console.warn;

  var nodeFS;
  var nodePath;

  Module['read'] = function read(filename, binary) {
    if (!nodeFS) nodeFS = require('fs');
    if (!nodePath) nodePath = require('path');
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    return binary ? ret : ret.toString();
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  Module['readAsync'] = function readAsync(url, onload, onerror) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, true);
    xhr.responseType = 'arraybuffer';
    xhr.onload = function xhr_onload() {
      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
        onload(xhr.response);
      } else {
        onerror();
      }
    };
    xhr.onerror = onerror;
    xhr.send(null);
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.warn(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}
// Free the object hierarchy contained in the overrides, this lets the GC
// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.
moduleOverrides = undefined;



// {{PREAMBLE_ADDITIONS}}

// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in:
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at:
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, [ptr].concat(args));
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      // optimize away arguments usage in common cases
      if (sig.length === 1) {
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func);
        };
      } else if (sig.length === 2) {
        sigCache[func] = function dynCall_wrapper(arg) {
          return Runtime.dynCall(sig, func, [arg]);
        };
      } else {
        // general case
        sigCache[func] = function dynCall_wrapper() {
          return Runtime.dynCall(sig, func, Array.prototype.slice.call(arguments));
        };
      }
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { assert(DYNAMICTOP_PTR);var ret = HEAP32[DYNAMICTOP_PTR>>2];var end = (((ret + size + 15)|0) & -16);HEAP32[DYNAMICTOP_PTR>>2] = end;if (end >= TOTAL_MEMORY) {var success = enlargeMemory();if (!success) {HEAP32[DYNAMICTOP_PTR>>2] = ret;return 0;}}return ret;},
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;



//========================================
// Runtime essentials
//========================================

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try { func = eval('_' + ident); } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        var len = (str.length << 2) + 1;
        ret = Runtime.stackAlloc(len);
        stringToUTF8(str, ret, len);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface.
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*[a-zA-Z$_0-9]*\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }

  // sources of useful functions. we create this lazily as it can trigger a source decompression on this entire file
  var JSsource = null;
  function ensureJSsource() {
    if (!JSsource) {
      JSsource = {};
      for (var fun in JSfuncs) {
        if (JSfuncs.hasOwnProperty(fun)) {
          // Elements of toCsource are arrays of three items:
          // the code, and the return value
          JSsource[fun] = parseJSFunc(JSfuncs[fun]);
        }
      }
    }
  }

  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      ensureJSsource();
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=(' + convertCode.returnValue + ');';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      ensureJSsource();
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [typeof _malloc === 'function' ? _malloc : Runtime.staticAlloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if (!runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))>>0)];
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = HEAP8[((ptr++)>>0)];
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;
function UTF8ArrayToString(u8Array, idx) {
  var endPtr = idx;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  while (u8Array[endPtr]) ++endPtr;

  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {
    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));
  } else {
    var u0, u1, u2, u3, u4, u5;

    var str = '';
    while (1) {
      // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
      u0 = u8Array[idx++];
      if (!u0) return str;
      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
      u1 = u8Array[idx++] & 63;
      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
      u2 = u8Array[idx++] & 63;
      if ((u0 & 0xF0) == 0xE0) {
        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
      } else {
        u3 = u8Array[idx++] & 63;
        if ((u0 & 0xF8) == 0xF0) {
          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
        } else {
          u4 = u8Array[idx++] & 63;
          if ((u0 & 0xFC) == 0xF8) {
            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
          } else {
            u5 = u8Array[idx++] & 63;
            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
          }
        }
      }
      if (u0 < 0x10000) {
        str += String.fromCharCode(u0);
      } else {
        var ch = u0 - 0x10000;
        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
      }
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;
function UTF16ToString(ptr) {
  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');
  var endPtr = ptr;
  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.
  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.
  var idx = endPtr >> 1;
  while (HEAP16[idx]) ++idx;
  endPtr = idx << 1;

  if (endPtr - ptr > 32 && UTF16Decoder) {
    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));
  } else {
    var i = 0;

    var str = '';
    while (1) {
      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
      if (codeUnit == 0) return str;
      ++i;
      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
      str += String.fromCharCode(codeUnit);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[((outPtr)>>1)]=codeUnit;
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[((outPtr)>>1)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}


function UTF32ToString(ptr) {
  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}


// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[((outPtr)>>2)]=codeUnit;
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[((outPtr)>>2)]=0;
  return outPtr - startPtr;
}


// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}


function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var s = func.substr(1);
      var len = lengthBytesUTF8(s)+1;
      var buf = _malloc(len);
      stringToUTF8(s, buf, len);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed
    } catch(e) {
      // ignore problems here
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
    // failure when using libcxxabi, don't demangle
    return func;
  }
  Runtime.warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  return func;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  var js = jsStackTrace();
  if (Module['extraStackTrace']) js += '\n' + Module['extraStackTrace']();
  return demangleAll(js);
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var buffer;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

function updateGlobalBuffer(buf) {
  Module['buffer'] = buffer = buf;
}

function updateGlobalBufferViews() {
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
}

var STATIC_BASE, STATICTOP, staticSealed; // static area
var STACK_BASE, STACKTOP, STACK_MAX; // stack area
var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk

  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;
  staticSealed = false;


// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.
function writeStackCookie() {
  assert((STACK_MAX & 3) == 0);
  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;
  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;
}

function checkStackCookie() {
  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {
    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));
  }
  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.
  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';
}

function abortStackOverflow(allocSize) {
  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - asm.stackSave() + allocSize) + ' bytes available!');
}

function abortOnCannotGrowMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which adjusts the size at runtime but prevents some optimizations, (3) set Module.TOTAL_MEMORY to a higher value before the program runs, or if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');
}


function enlargeMemory() {
  abortOnCannotGrowMemory();
}


var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');



// Use a provided buffer, if there is one, or else allocate a new one
if (Module['buffer']) {
  buffer = Module['buffer'];
  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);
} else {
  buffer = new ArrayBuffer(TOTAL_MEMORY);
}
updateGlobalBufferViews();


function getTotalMemory() {
  return TOTAL_MEMORY;
}

// Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 0x63736d65; /* 'emsc' */
HEAP16[1] = 0x6373;
if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  checkStackCookie();
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  checkStackCookie();
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  checkStackCookie();
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  checkStackCookie();
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

// Deprecated: This function should not be called because it is unsafe and does not provide
// a maximum length limit of how many bytes it is allowed to write. Prefer calling the
// function stringToUTF8Array() instead, which takes in a maximum length that can be used
// to be secure from out of bounds writes.
function writeStringToMemory(string, buffer, dontAddNull) {
  Runtime.warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');

  var lastChar, end;
  if (dontAddNull) {
    // stringToUTF8Array always appends null. If we don't want to do that, remember the
    // character that existed at the location where the null will be placed, and restore
    // that after the write (below).
    end = buffer + lengthBytesUTF8(string);
    lastChar = HEAP8[end];
  }
  stringToUTF8(string, buffer, Infinity);
  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  HEAP8.set(array, buffer);    
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

if (!Math['trunc']) Math['trunc'] = function(x) {
  return x < 0 ? Math.ceil(x) : Math.floor(x);
};
Math.trunc = Math['trunc'];

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;
var Math_trunc = Math.trunc;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;





// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 1360224;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([1,0,0,0,1,0,0,0,1,0,0,0,255,255,255,255,28,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,3,0,0,0,54,185,20,0,0,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,0,0,3,0,0,0,62,189,20,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,5,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,0,0,0,3,0,0,0,70,189,20,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,1,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,95,112,137,0,255,9,47,15,32,0,0,0,9,0,0,0,10,0,0,0,13,0,0,0,11,0,0,0,12,0,0,0,133,0,0,0,0,32,0,0,1,32,0,0,2,32,0,0,3,32,0,0,4,32,0,0,5,32,0,0,6,32,0,0,8,32,0,0,9,32,0,0,10,32,0,0,40,32,0,0,41,32,0,0,95,32,0,0,0,48,0,0,0,0,0,0,116,0,0,0,48,110,0,0,110,0,0,0,50,110,0,0,114,0,0,0,52,110,0,0,102,0,0,0,54,110,0,0,97,0,0,0,56,110,0,0,101,0,0,0,58,110,0,0,119,0,0,0,60,110,0,0,87,0,0,0,73,110,0,0,115,0,0,0,87,110,0,0,83,0,0,0,99,110,0,0,100,0,0,0,112,110,0,0,68,0,0,0,124,110,0,0,0,0,0,0,0,0,0,0,73,0,49,1,83,0,127,1,48,1,105,0,120,1,255,0,129,1,83,2,130,1,131,1,132,1,133,1,134,1,84,2,135,1,136,1,137,1,86,2,138,1,87,2,139,1,140,1,142,1,221,1,143,1,89,2,144,1,91,2,145,1,146,1,147,1,96,2,148,1,99,2,150,1,105,2,151,1,104,2,152,1,153,1,156,1,111,2,157,1,114,2,159,1,117,2,166,1,128,2,167,1,168,1,169,1,131,2,172,1,173,1,174,1,136,2,175,1,176,1,177,1,138,2,178,1,139,2,183,1,146,2,184,1,185,1,188,1,189,1,196,1,198,1,196,1,197,1,197,1,198,1,199,1,201,1,199,1,200,1,200,1,201,1,202,1,204,1,202,1,203,1,203,1,204,1,241,1,243,1,241,1,242,1,242,1,243,1,244,1,245,1,246,1,149,1,247,1,191,1,32,2,158,1,134,3,172,3,136,3,173,3,137,3,174,3,138,3,175,3,140,3,204,3,142,3,205,3,143,3,206,3,153,3,69,3,153,3,190,31,163,3,194,3,247,3,248,3,250,3,251,3,96,30,155,30,223,0,223,0,158,30,223,0,89,31,81,31,91,31,83,31,93,31,85,31,95,31,87,31,188,31,179,31,204,31,195,31,236,31,229,31,252,31,243,31,58,2,101,44,59,2,60,2,61,2,154,1,62,2,102,44,65,2,66,2,67,2,128,1,68,2,137,2,69,2,140,2,244,3,184,3,249,3,242,3,253,3,123,3,254,3,124,3,255,3,125,3,192,4,207,4,38,33,201,3,42,33,107,0,43,33,229,0,50,33,78,33,131,33,132,33,96,44,97,44,98,44,107,2,99,44,125,29,100,44,125,2,109,44,81,2,110,44,113,2,111,44,80,2,112,44,82,2,114,44,115,44,117,44,118,44,126,44,63,2,127,44,64,2,242,44,243,44,125,167,121,29,139,167,140,167,141,167,101,2,170,167,102,2,199,16,39,45,205,16,45,45,118,3,119,3,156,3,181,0,146,3,208,3,152,3,209,3,166,3,213,3,160,3,214,3,154,3,240,3,161,3,241,3,149,3,245,3,207,3,215,3,0,0,0,0,65,0,32,26,192,0,32,31,0,1,1,47,50,1,1,5,57,1,1,15,74,1,1,45,121,1,1,5,112,3,1,3,145,3,32,17,163,3,32,9,0,4,80,16,16,4,32,32,96,4,1,33,138,4,1,53,193,4,1,13,208,4,1,63,20,5,1,19,49,5,48,38,160,1,1,5,179,1,1,3,205,1,1,15,222,1,1,17,248,1,1,39,34,2,1,17,216,3,1,23,0,30,1,149,160,30,1,95,8,31,248,8,24,31,248,6,40,31,248,8,56,31,248,8,72,31,248,6,104,31,248,8,136,31,248,8,152,31,248,8,168,31,248,8,184,31,248,2,186,31,182,2,200,31,170,4,216,31,248,2,218,31,156,2,232,31,248,2,234,31,144,2,248,31,128,2,250,31,130,2,70,2,1,9,16,5,1,3,96,33,16,16,0,44,48,47,103,44,1,5,128,44,1,99,235,44,1,3,64,166,1,45,128,166,1,23,34,167,1,13,50,167,1,61,121,167,1,3,126,167,1,9,144,167,1,3,160,167,1,9,33,255,32,26,0,0,0,0,75,101,115,97,108,97,104,97,110,32,73,110,116,101,114,110,97,108,58,32,109,101,109,111,114,105,32,116,105,100,97,107,32,99,117,107,117,112,0,48,37,100,0,37,115,48,37,115,48,37,115,0,37,115,48,37,115,37,115,0,37,115,37,115,48,37,115,0,37,115,37,115,37,115,0,48,37,115,48,37,115,48,37,115,0,48,37,115,48,37,115,37,115,0,48,37,115,37,115,48,37,115,0,48,37,115,37,115,37,115,0,37,115,37,115,0,37,115,45,0,37,115,45,48,37,115,45,48,37,115,0,37,115,45,48,37,115,45,37,115,0,37,115,45,37,115,45,48,37,115,0,37,115,45,37,115,45,37,115,0,48,37,115,58,48,37,115,58,48,37,115,0,48,37,115,58,48,37,115,58,37,115,0,48,37,115,58,37,115,58,48,37,115,0,48,37,115,58,37,115,58,37,115,0,37,115,58,48,37,115,58,48,37,115,0,37,115,58,48,37,115,58,37,115,0,37,115,58,37,115,58,48,37,115,0,37,115,58,37,115,58,37,115,0,37,115,32,37,115,0,109,105,110,103,103,117,0,115,101,110,105,110,0,115,101,108,97,115,97,0,114,97,98,117,0,107,97,109,105,115,0,106,117,109,97,116,0,115,97,98,116,117,0,83,97,108,97,104,58,32,84,105,100,97,107,32,98,105,115,97,32,116,117,108,105,115,32,107,101,32,70,105,108,101,10,0,37,115,32,10,0,68,97,108,97,109,32,83,117,98,32,37,115,58,32,83,97,108,97,104,32,100,105,32,115,101,107,105,116,97,114,32,98,97,114,105,115,32,37,117,58,32,0,112,111,115,105,115,105,32,112,97,100,97,32,97,116,97,117,32,115,101,98,101,108,117,109,58,32,37,115,32,37,115,10,0,80,114,111,103,114,97,109,32,85,116,97,109,97,32,58,32,83,97,108,97,104,32,100,105,32,115,101,107,105,116,97,114,32,98,97,114,105,115,32,37,117,32,10,0,99,114,111,116,32,58,32,37,100,10,0,37,115,32,61,32,37,115,32,0,109,101,109,111,114,105,32,116,105,100,97,107,32,99,117,107,117,112,33,32,10,0,109,101,108,101,98,105,104,105,32,107,97,112,97,115,105,116,97,115,32,77,65,88,95,83,84,82,73,78,71,95,76,69,78,0,115,116,114,116,111,100,98,108,58,32,105,110,118,97,108,105,100,32,105,110,112,117,116,0,115,116,114,116,111,100,98,108,58,32,110,111,32,115,116,97,116,101,0,115,116,114,116,111,100,98,108,58,32,110,111,116,32,100,105,103,105,116,0,84,105,100,97,107,32,97,100,97,32,100,101,102,105,110,105,115,105,32,37,115,32,115,101,98,97,103,97,105,32,66,69,78,68,65,0,84,105,100,97,107,32,97,100,97,32,112,97,114,97,109,101,116,101,114,32,37,115,32,112,97,100,97,32,37,115,0,37,115,32,58,32,99,97,107,117,112,97,110,32,108,111,107,97,108,44,32,116,105,100,97,107,32,98,105,115,97,32,100,105,114,101,102,101,114,101,110,115,105,32,100,97,114,105,32,108,117,97,114,46,0,37,115,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,107,97,110,32,115,101,98,97,103,97,105,32,105,110,115,116,97,110,115,32,66,69,78,68,65,0,84,105,100,97,107,32,97,100,97,32,102,117,110,103,115,105,32,37,115,32,112,97,100,97,32,37,115,0,85,68,80,0,71,97,103,97,108,32,98,117,97,116,32,115,111,107,101,116,32,37,115,10,0,116,105,100,97,107,32,98,105,115,97,32,97,109,98,105,108,32,37,115,32,115,101,114,118,105,99,101,32,101,110,116,114,121,10,0,84,105,100,97,107,32,98,105,115,97,32,115,97,109,98,117,110,103,32,115,111,107,101,116,32,107,101,32,37,115,10,0,116,105,100,97,107,32,98,105,115,97,32,98,105,110,100,32,107,101,32,112,111,114,116,58,32,37,115,10,0,116,105,100,97,107,32,98,105,115,97,32,108,105,115,116,101,110,32,112,97,100,97,32,112,111,114,116,58,32,37,115,10,0,115,97,108,97,104,58,32,115,111,107,101,116,32,97,99,99,101,112,116,32,10,0,71,97,103,97,108,32,98,117,97,116,32,83,111,107,101,116,10,0,115,32,37,115,32,112,32,37,100,32,10,0,84,105,100,97,107,32,98,105,115,97,32,115,97,109,98,117,110,103,32,107,101,32,109,97,105,108,32,115,101,114,118,101,114,10,0,115,118,114,58,32,37,115,10,0,50,50,48,0,77,97,105,108,32,115,101,114,118,101,114,32,116,105,100,97,107,32,109,101,114,101,115,112,111,110,32,79,75,10,0,72,69,76,79,32,83,69,82,86,69,82,10,0,50,53,48,0,77,65,73,76,32,70,82,79,77,58,32,37,115,13,10,0,82,67,80,84,32,84,79,58,32,37,115,13,10,0,68,65,84,65,10,0,51,53,52,0,84,111,58,32,37,115,13,10,0,83,117,98,106,101,99,116,58,32,37,115,13,10,10,0,37,115,13,10,0,13,10,46,10,0,81,85,73,84,13,10,0,117,66,65,73,75,32,40,66,97,104,97,115,97,32,65,110,97,107,32,73,110,100,111,110,101,115,105,97,32,117,110,116,117,107,32,75,111,109,112,117,116,101,114,41,32,118,101,114,115,105,32,56,46,53,10,0,109,101,108,101,98,105,104,105,32,107,97,112,97,115,105,116,97,115,32,77,65,88,95,73,68,69,78,84,95,76,69,78,0,84,85,76,73,83,0,116,117,108,105,115,0,84,117,108,105,115,0,84,85,76,73,83,95,82,73,78,67,73,0,116,117,108,105,115,95,114,105,110,99,105,0,84,117,108,105,115,95,82,105,110,99,105,0,84,117,108,105,115,95,114,105,110,99,105,0,84,85,76,73,83,76,79,71,0,116,117,108,105,115,108,111,103,0,84,117,108,105,115,108,111,103,0,84,85,76,73,83,95,65,82,83,73,80,0,116,117,108,105,115,95,97,114,115,105,112,0,84,117,108,105,115,95,97,114,115,105,112,0,80,69,82,73,78,84,65,72,0,112,101,114,105,110,116,97,104,0,80,101,114,105,110,116,97,104,0,77,85,83,73,75,0,109,117,115,105,107,0,77,117,115,105,107,0,77,85,83,73,75,95,80,69,78,71,72,73,65,83,0,109,117,115,105,107,95,112,101,110,103,104,105,97,115,0,77,117,115,105,107,95,80,101,110,103,104,105,97,115,0,74,69,78,68,69,76,65,0,106,101,110,100,101,108,97,0,74,101,110,100,101,108,97,0,84,85,78,71,71,85,0,116,117,110,103,103,117,0,84,117,110,103,103,117,0,75,79,78,69,75,83,73,0,107,111,110,101,107,115,105,0,75,111,110,101,107,115,105,0,84,85,84,85,80,0,116,117,116,117,112,0,84,117,116,117,112,0,83,85,82,65,84,0,115,117,114,97,116,0,83,117,114,97,116,0,77,65,83,85,75,0,109,97,115,117,107,0,77,97,115,117,107,0,75,65,76,65,85,0,107,97,108,97,117,0,75,97,108,97,117,0,74,73,75,65,0,106,105,107,97,0,74,105,107,97,0,76,65,73,78,75,65,76,65,85,0,108,97,105,110,107,97,108,97,117,0,76,97,105,110,75,97,108,97,117,0,76,65,73,78,74,73,75,65,0,108,97,105,110,106,105,107,97,0,76,97,105,110,74,105,107,97,0,77,97,107,97,0,76,97,105,110,110,121,97,0,83,84,79,80,75,65,76,65,85,0,115,116,111,112,107,97,108,97,117,0,83,116,111,112,107,97,108,97,117,0,72,65,66,73,83,0,104,97,98,105,115,0,72,97,98,105,115,0,65,75,72,73,82,75,65,76,65,85,0,97,107,104,105,114,107,97,108,97,117,0,65,107,104,105,114,107,97,108,97,117,0,65,107,104,105,114,75,97,108,97,117,0,65,75,72,73,82,74,73,75,65,0,97,107,104,105,114,106,105,107,97,0,65,107,104,105,114,106,105,107,97,0,65,107,104,105,114,74,105,107,97,0,83,69,76,65,71,73,0,115,101,108,97,103,105,0,83,101,108,97,103,105,0,76,65,75,85,75,65,78,0,108,97,107,117,107,97,110,0,76,97,107,117,107,97,110,0,66,65,76,73,75,76,65,71,73,0,98,97,108,105,107,108,97,103,105,0,66,97,108,105,107,108,97,103,105,0,85,78,84,85,75,0,117,110,116,117,107,0,85,110,116,117,107,0,85,76,65,78,71,0,117,108,97,110,103,0,85,108,97,110,103,0,76,65,71,73,0,108,97,103,105,0,76,97,103,105,0,76,79,78,67,65,84,76,65,66,69,76,0,108,111,110,99,97,116,108,97,98,101,108,0,76,111,110,99,97,116,76,97,98,101,108,0,83,85,66,0,115,117,98,0,83,117,98,0,70,85,78,71,83,73,0,102,117,110,103,115,105,0,70,117,110,103,115,105,0,66,65,76,73,75,0,98,97,108,105,107,0,66,97,108,105,107,0,76,79,78,67,65,84,0,108,111,110,99,97,116,0,76,111,110,99,97,116,0,101,110,100,0,69,110,100,0,84,65,77,65,84,0,116,97,109,97,116,0,84,97,109,97,116,0,80,79,83,84,95,67,71,73,0,112,111,115,116,95,99,103,105,0,80,111,115,116,95,67,103,105,0,80,65,75,65,73,95,67,71,73,0,112,97,107,97,105,95,99,103,105,0,80,97,107,97,105,95,67,103,105,0,85,78,84,65,73,65,78,0,117,110,116,97,105,97,110,0,85,110,116,97,105,97,110,0,76,65,82,73,75,0,108,97,114,105,107,0,76,97,114,105,107,0,72,97,112,117,115,0,68,97,110,0,65,116,97,117,0,78,79,84,0,110,111,116,0,78,111,116,0,66,117,107,97,110,0,71,65,77,66,65,82,71,65,82,73,83,0,103,97,109,98,97,114,103,97,114,105,115,0,71,97,109,98,97,114,71,97,114,105,115,0,71,65,77,66,65,82,71,65,82,73,83,80,85,84,85,83,0,103,97,109,98,97,114,103,97,114,105,115,112,117,116,117,115,0,71,97,109,98,97,114,71,97,114,105,115,80,117,116,117,115,0,71,65,77,66,65,82,80,79,76,73,71,79,78,0,103,97,109,98,97,114,112,111,108,105,103,111,110,0,71,97,109,98,97,114,80,111,108,105,103,111,110,0,71,65,77,66,65,82,80,79,76,73,71,79,78,73,83,73,0,103,97,109,98,97,114,112,111,108,105,103,111,110,105,115,105,0,71,97,109,98,97,114,80,111,108,105,103,111,110,73,115,105,0,71,65,77,66,65,82,75,79,84,65,75,0,103,97,109,98,97,114,107,111,116,97,107,0,71,97,109,98,97,114,75,111,116,97,107,0,71,65,77,66,65,82,75,79,84,65,75,73,83,73,0,103,97,109,98,97,114,107,111,116,97,107,105,115,105,0,71,97,109,98,97,114,75,111,116,97,107,73,115,105,0,71,65,77,66,65,82,76,73,78,71,75,65,82,65,78,0,103,97,109,98,97,114,108,105,110,103,107,97,114,97,110,0,71,97,109,98,97,114,76,105,110,103,107,97,114,97,110,0,71,65,77,66,65,82,76,73,78,71,75,65,82,65,78,73,83,73,0,103,97,109,98,97,114,108,105,110,103,107,97,114,97,110,105,115,105,0,71,97,109,98,97,114,76,105,110,103,107,97,114,97,110,73,115,105,0,83,73,77,80,65,78,71,65,77,66,65,82,80,78,71,0,115,105,109,112,97,110,103,97,109,98,97,114,112,110,103,0,83,105,109,112,97,110,71,97,109,98,97,114,80,110,103,0,83,73,77,80,65,78,71,65,77,66,65,82,74,80,71,0,115,105,109,112,97,110,103,97,109,98,97,114,106,112,103,0,83,105,109,112,97,110,71,97,109,98,97,114,74,112,103,0,72,65,80,85,83,71,65,77,66,65,82,0,104,97,112,117,115,103,97,109,98,97,114,0,72,97,112,117,115,71,97,109,98,97,114,0,71,65,77,66,65,82,72,85,82,85,70,0,103,97,109,98,97,114,104,117,114,117,102,0,71,97,109,98,97,114,72,117,114,117,102,0,83,69,68,73,65,95,87,69,66,83,84,89,76,69,0,115,101,100,105,97,95,119,101,98,115,116,121,108,101,0,83,101,100,105,97,95,87,101,98,115,116,121,108,101,0,83,69,68,73,65,95,75,69,82,84,65,83,87,69,66,0,115,101,100,105,97,95,107,101,114,116,97,115,119,101,98,0,83,101,100,105,97,95,75,101,114,116,97,115,119,101,98,0,83,101,100,105,97,95,107,101,114,116,97,115,119,101,98,0,72,84,77,76,95,65,87,65,76,0,104,116,109,108,95,97,119,97,108,0,72,116,109,108,95,65,119,97,108,0,75,69,82,84,65,83,87,69,66,95,65,87,65,76,0,107,101,114,116,97,115,119,101,98,95,97,119,97,108,0,75,101,114,116,97,115,119,101,98,95,65,119,97,108,0,75,101,114,116,97,115,119,101,98,95,97,119,97,108,0,72,84,77,76,95,83,84,89,76,69,0,104,116,109,108,95,115,116,121,108,101,0,72,116,109,108,95,83,116,121,108,101,0,75,69,82,84,65,83,87,69,66,95,77,79,68,69,76,0,107,101,114,116,97,115,119,101,98,95,109,111,100,101,108,0,75,101,114,116,97,115,119,101,98,95,109,111,100,101,108,0,72,84,77,76,95,77,69,78,85,95,65,87,65,76,0,104,116,109,108,95,109,101,110,117,95,97,119,97,108,0,72,116,109,108,95,77,101,110,117,95,65,119,97,108,0,75,69,82,84,65,83,87,69,66,95,77,69,78,85,95,65,87,65,76,0,107,101,114,116,97,115,119,101,98,95,109,101,110,117,95,97,119,97,108,0,75,101,114,116,97,115,119,101,98,95,77,101,110,117,95,65,119,97,108,0,75,101,114,116,97,115,119,101,98,95,109,101,110,117,95,97,119,97,108,0,72,84,77,76,95,77,69,78,85,95,65,75,72,73,82,0,104,116,109,108,95,109,101,110,117,95,97,107,104,105,114,0,72,116,109,108,95,77,101,110,117,95,65,107,104,105,114,0,75,69,82,84,65,83,87,69,66,95,77,69,78,85,95,65,75,72,73,82,0,107,101,114,116,97,115,119,101,98,95,109,101,110,117,95,97,107,104,105,114,0,75,101,114,116,97,115,119,101,98,95,77,101,110,117,95,65,107,104,105,114,0,75,101,114,116,97,115,119,101,98,95,109,101,110,117,95,97,107,104,105,114,0,72,84,77,76,95,77,69,78,85,0,104,116,109,108,95,109,101,110,117,0,72,116,109,108,95,77,101,110,117,0,75,69,82,84,65,83,87,69,66,95,77,69,78,85,0,107,101,114,116,97,115,119,101,98,95,109,101,110,117,0,75,101,114,116,97,115,119,101,98,95,77,101,110,117,0,75,101,114,116,97,115,119,101,98,95,109,101,110,117,0,72,84,77,76,95,72,65,75,67,73,80,84,65,0,104,116,109,108,95,104,97,107,99,105,112,116,97,0,72,116,109,108,95,72,97,107,99,105,112,116,97,0,75,69,82,84,65,83,87,69,66,95,72,65,75,67,73,80,84,65,0,107,101,114,116,97,115,119,101,98,95,104,97,107,99,105,112,116,97,0,75,101,114,116,97,115,119,101,98,95,72,97,107,99,105,112,116,97,0,75,101,114,116,97,115,119,101,98,95,104,97,107,99,105,112,116,97,0,73,83,73,87,69,66,95,84,73,84,69,76,0,105,115,105,119,101,98,95,116,105,116,101,108,0,73,115,105,119,101,98,95,84,105,116,101,108,0,73,83,73,87,69,66,95,65,87,65,76,0,105,115,105,119,101,98,95,97,119,97,108,0,73,115,105,119,101,98,95,65,119,97,108,0,73,83,73,87,69,66,95,65,75,72,73,82,0,105,115,105,119,101,98,95,97,107,104,105,114,0,73,115,105,119,101,98,95,65,107,104,105,114,0,72,84,77,76,95,65,75,72,73,82,0,104,116,109,108,95,97,107,104,105,114,0,72,116,109,108,95,65,107,104,105,114,0,75,69,82,84,65,83,87,69,66,95,65,75,72,73,82,0,75,101,114,116,97,115,119,101,98,95,65,107,104,105,114,0,75,101,114,116,97,115,119,101,98,95,97,107,104,105,114,0,75,79,68,69,0,107,111,100,101,0,75,111,100,101,0,107,111,100,101,95,108,117,97,114,0,75,79,68,69,95,76,85,65,82,0,75,79,68,69,76,85,65,82,0,75,111,100,101,76,117,97,114,0,69,78,68,95,75,79,68,69,0,101,110,100,95,107,111,100,101,0,65,75,72,73,82,95,75,79,68,69,95,76,85,65,82,0,97,107,104,105,114,95,107,111,100,101,95,108,117,97,114,0,65,107,104,105,114,95,75,111,100,101,95,76,117,97,114,0,65,107,104,105,114,95,107,111,100,101,95,108,117,97,114,0,80,105,108,105,104,0,83,65,77,65,0,115,97,109,97,0,83,97,109,97,0,65,75,72,73,82,80,73,76,73,72,0,97,107,104,105,114,112,105,108,105,104,0,65,107,104,105,114,112,105,108,105,104,0,65,107,104,105,114,80,105,108,105,104,0,72,84,77,76,74,83,95,71,65,77,66,65,82,83,84,89,76,69,0,104,116,109,108,106,115,95,103,97,109,98,97,114,115,116,121,108,101,0,72,116,109,108,106,115,95,71,97,109,98,97,114,115,116,121,108,101,0,72,116,109,108,106,115,95,71,97,109,98,97,114,83,116,121,108,101,0,75,65,78,86,65,83,87,69,66,95,77,79,68,69,76,0,107,97,110,118,97,115,119,101,98,95,109,111,100,101,108,0,75,97,110,118,97,115,119,101,98,95,77,111,100,101,108,0,75,97,110,118,97,115,119,101,98,95,109,111,100,101,108,0,72,84,77,76,74,83,95,65,87,65,76,71,65,77,66,65,82,0,104,116,109,108,106,115,95,97,119,97,108,103,97,109,98,97,114,0,72,116,109,108,106,115,95,65,119,97,108,103,97,109,98,97,114,0,72,116,109,108,106,115,95,65,119,97,108,71,97,109,98,97,114,0,75,65,78,86,65,83,87,69,66,95,65,87,65,76,71,65,77,66,65,82,0,107,97,110,118,97,115,119,101,98,95,97,119,97,108,103,97,109,98,97,114,0,75,97,110,118,97,115,119,101,98,95,65,119,97,108,103,97,109,98,97,114,0,75,97,110,118,97,115,119,101,98,95,65,119,97,108,71,97,109,98,97,114,0,72,84,77,76,74,83,95,65,75,72,73,82,71,65,77,66,65,82,0,104,116,109,108,106,115,95,97,107,104,105,114,103,97,109,98,97,114,0,72,116,109,108,106,115,95,65,107,104,105,114,103,97,109,98,97,114,0,72,116,109,108,106,115,95,65,107,104,105,114,71,97,109,98,97,114,0,75,65,78,86,65,83,87,69,66,95,65,75,72,73,82,71,65,77,66,65,82,0,107,97,110,118,97,115,119,101,98,95,97,107,104,105,114,103,97,109,98,97,114,0,75,97,110,118,97,115,119,101,98,95,65,107,104,105,114,103,97,109,98,97,114,0,75,97,110,118,97,115,119,101,98,95,65,107,104,105,114,71,97,109,98,97,114,0,72,84,77,76,74,83,95,87,65,82,78,65,0,104,116,109,108,106,115,95,119,97,114,110,97,0,72,116,109,108,106,115,95,87,97,114,110,97,0,72,116,109,108,106,115,95,119,97,114,110,97,0,75,65,78,86,65,83,87,69,66,95,87,65,82,78,65,0,107,97,110,118,97,115,119,101,98,95,119,97,114,110,97,0,75,97,110,118,97,115,119,101,98,95,87,97,114,110,97,0,75,97,110,118,97,115,119,101,98,95,119,97,114,110,97,0,72,84,77,76,74,83,95,71,65,82,73,83,0,104,116,109,108,106,115,95,103,97,114,105,115,0,72,116,109,108,106,115,95,71,97,114,105,115,0,72,116,109,108,106,115,95,103,97,114,105,115,0,75,65,78,86,65,83,87,69,66,95,71,65,82,73,83,0,107,97,110,118,97,115,119,101,98,95,103,97,114,105,115,0,75,97,110,118,97,115,119,101,98,95,71,97,114,105,115,0,75,97,110,118,97,115,119,101,98,95,103,97,114,105,115,0,72,84,77,76,74,83,95,84,69,66,65,76,71,65,82,73,83,0,104,116,109,108,106,115,95,116,101,98,97,108,103,97,114,105,115,0,72,116,109,108,106,115,95,84,101,98,97,108,103,97,114,105,115,0,72,116,109,108,106,115,95,84,101,98,97,108,71,97,114,105,115,0,75,65,78,86,65,83,87,69,66,95,84,69,66,65,76,71,65,82,73,83,0,107,97,110,118,97,115,119,101,98,95,116,101,98,97,108,103,97,114,105,115,0,75,97,110,118,97,115,119,101,98,95,84,101,98,97,108,103,97,114,105,115,0,75,97,110,118,97,115,119,101,98,95,84,101,98,97,108,71,97,114,105,115,0,72,84,77,76,74,83,95,75,79,84,65,75,0,104,116,109,108,106,115,95,107,111,116,97,107,0,72,116,109,108,106,115,95,75,111,116,97,107,0,72,116,109,108,106,115,95,107,111,116,97,107,0,75,65,78,86,65,83,87,69,66,95,75,79,84,65,75,0,107,97,110,118,97,115,119,101,98,95,107,111,116,97,107,0,75,97,110,118,97,115,119,101,98,95,75,111,116,97,107,0,75,97,110,118,97,115,119,101,98,95,107,111,116,97,107,0,72,84,77,76,74,83,95,75,79,84,65,75,73,83,73,0,104,116,109,108,106,115,95,107,111,116,97,107,105,115,105,0,72,116,109,108,106,115,95,75,111,116,97,107,73,115,105,0,72,116,109,108,106,115,95,107,111,116,97,107,105,115,105,0,75,65,78,86,65,83,87,69,66,95,75,79,84,65,75,73,83,73,0,107,97,110,118,97,115,119,101,98,95,107,111,116,97,107,105,115,105,0,75,110,97,118,97,115,119,101,98,95,75,111,116,97,107,73,115,105,0,75,97,110,118,97,115,119,101,98,95,107,111,116,97,107,105,115,105,0,72,84,77,76,74,83,95,76,73,78,71,75,65,82,65,78,0,104,116,109,108,106,115,95,108,105,110,103,107,97,114,97,110,0,72,116,109,108,106,115,95,76,105,110,103,107,97,114,97,110,0,72,116,109,108,106,115,95,108,105,110,103,107,97,114,97,110,0,75,65,78,86,65,83,87,69,66,95,76,73,78,71,75,65,82,65,78,0,107,97,110,118,97,115,119,101,98,95,108,105,110,103,107,97,114,97,110,0,75,97,110,118,97,115,119,101,98,95,76,105,110,103,107,97,114,97,110,0,75,97,110,118,97,115,119,101,98,95,108,105,110,103,107,97,114,97,110,0,72,84,77,76,74,83,95,76,73,78,71,75,65,82,65,78,73,83,73,0,104,116,109,108,106,115,95,108,105,110,103,107,97,114,97,110,105,115,105,0,72,116,109,108,106,115,95,76,105,110,103,107,97,114,97,110,73,115,105,0,72,116,109,108,106,115,95,108,105,110,103,107,97,114,97,110,105,115,105,0,75,65,78,86,65,83,87,69,66,95,76,73,78,71,75,65,82,65,78,73,83,73,0,107,97,110,118,97,115,119,101,98,95,108,105,110,103,107,97,114,97,110,105,115,105,0,75,97,110,118,97,115,119,101,98,95,76,105,110,103,107,97,114,97,110,73,115,105,0,75,97,110,118,97,115,119,101,98,95,108,105,110,103,107,97,114,97,110,105,115,105,0,72,84,77,76,74,83,95,84,85,76,73,83,0,104,116,109,108,106,115,95,116,117,108,105,115,0,72,116,109,108,106,115,95,84,117,108,105,115,0,72,116,109,108,106,115,95,116,117,108,105,115,0,75,65,78,86,65,83,87,69,66,95,84,85,76,73,83,0,107,97,110,118,97,115,119,101,98,95,116,117,108,105,115,0,75,97,110,118,97,115,119,101,98,95,84,117,108,105,115,0,75,97,110,118,97,115,119,101,98,95,116,117,108,105,115,0,72,84,77,76,74,83,95,72,85,82,85,70,66,69,83,65,82,0,104,116,109,108,106,115,95,104,117,114,117,102,98,101,115,97,114,0,72,116,109,108,106,115,95,72,117,114,117,102,66,101,115,97,114,0,72,116,109,108,106,115,95,104,117,114,117,102,98,101,115,97,114,0,75,65,78,86,65,83,87,69,66,95,72,85,82,85,70,66,69,83,65,82,0,107,97,110,118,97,115,119,101,98,95,104,117,114,117,102,98,101,115,97,114,0,75,97,110,118,97,115,119,101,98,95,72,117,114,117,102,66,101,115,97,114,0,75,97,110,118,97,115,119,101,98,95,104,117,114,117,102,98,101,115,97,114,0,72,84,77,76,74,83,95,72,85,82,85,70,83,69,68,65,78,71,0,104,116,109,108,106,115,95,104,117,114,117,102,115,101,100,97,110,103,0,72,116,109,108,106,115,95,72,117,114,117,102,83,101,100,97,110,103,0,72,116,109,108,106,115,95,104,117,114,117,102,115,101,100,97,110,103,0,75,65,78,86,65,83,87,69,66,95,72,85,82,85,70,83,69,68,65,78,71,0,107,97,110,118,97,115,119,101,98,95,104,117,114,117,102,115,101,100,97,110,103,0,75,97,110,118,97,115,119,101,98,95,72,117,114,117,102,83,101,100,97,110,103,0,75,97,110,118,97,115,119,101,98,95,104,117,114,117,102,115,101,100,97,110,103,0,72,84,77,76,74,83,95,72,85,82,85,70,75,69,67,73,76,0,104,116,109,108,106,115,95,104,117,114,117,102,107,101,99,105,108,0,72,116,109,108,106,115,95,72,117,114,117,102,75,101,99,105,108,0,72,116,109,108,106,115,95,104,117,114,117,102,107,101,99,105,108,0,75,65,78,86,65,83,87,69,66,95,72,85,82,85,70,75,69,67,73,76,0,107,97,110,118,97,115,119,101,98,95,104,117,114,117,102,107,101,99,105,108,0,75,97,110,118,97,115,119,101,98,95,72,117,114,117,102,75,101,99,105,108,0,75,97,110,118,97,115,119,101,98,95,104,117,114,117,102,107,101,99,105,108,0,72,84,77,76,74,83,95,72,85,82,85,70,83,69,68,65,78,71,84,69,66,65,76,0,104,116,109,108,106,115,95,104,117,114,117,102,115,101,100,97,110,103,116,101,98,97,108,0,72,116,109,108,106,115,95,72,117,114,117,102,83,101,100,97,110,103,84,101,98,97,108,0,72,116,109,108,106,115,95,104,117,114,117,102,115,101,100,97,110,103,116,101,98,97,108,0,75,65,78,86,65,83,87,69,66,95,72,85,82,85,70,83,69,68,65,78,71,84,69,66,65,76,0,107,97,110,118,97,115,119,101,98,95,104,117,114,117,102,115,101,100,97,110,103,116,101,98,97,108,0,75,97,110,118,97,115,119,101,98,95,72,117,114,117,102,83,101,100,97,110,103,84,101,98,97,108,0,75,97,110,118,97,115,119,101,98,95,104,117,114,117,102,115,101,100,97,110,103,116,101,98,97,108,0,72,84,77,76,74,83,95,72,85,82,85,70,83,69,68,65,78,71,77,73,82,73,78,71,0,104,116,109,108,106,115,95,104,117,114,117,102,115,101,100,97,110,103,109,105,114,105,110,103,0,72,116,109,108,106,115,95,72,117,114,117,102,83,101,100,97,110,103,77,105,114,105,110,103,0,72,116,109,108,106,115,95,104,117,114,117,102,115,101,100,97,110,103,109,105,114,105,110,103,0,75,65,78,86,65,83,87,69,66,95,72,85,82,85,70,83,69,68,65,78,71,77,73,82,73,78,71,0,107,97,110,118,97,115,119,101,98,95,104,117,114,117,102,115,101,100,97,110,103,109,105,114,105,110,103,0,75,97,110,118,97,115,119,101,98,95,72,117,114,117,102,83,101,100,97,110,103,77,105,114,105,110,103,0,75,97,110,118,97,115,119,101,98,95,104,117,114,117,102,115,101,100,97,110,103,109,105,114,105,110,103,0,75,69,76,85,65,82,83,69,76,65,71,73,0,107,101,108,117,97,114,115,101,108,97,103,105,0,75,101,108,117,97,114,83,101,108,97,103,105,0,75,69,76,85,65,82,95,83,69,76,65,71,73,0,107,101,108,117,97,114,95,115,101,108,97,103,105,0,75,101,108,117,97,114,95,83,101,108,97,103,105,0,75,69,76,85,65,82,85,78,84,85,75,0,107,101,108,117,97,114,117,110,116,117,107,0,75,101,108,117,97,114,85,110,116,117,107,0,75,69,76,85,65,82,95,85,78,84,85,75,0,107,101,108,117,97,114,95,117,110,116,117,107,0,75,101,108,117,97,114,95,85,110,116,117,107,0,76,65,78,74,85,84,0,108,97,110,106,117,116,0,76,97,110,106,117,116,0,66,69,78,68,65,0,98,101,110,100,97,0,66,101,110,100,97,0,68,69,70,73,78,73,83,73,66,69,78,68,65,0,100,101,102,105,110,105,115,105,98,101,110,100,97,0,68,101,102,105,110,105,115,105,98,101,110,100,97,0,68,101,102,105,110,105,115,105,66,101,110,100,97,0,68,69,70,66,69,78,68,65,0,100,101,102,98,101,110,100,97,0,68,101,102,66,101,110,100,97,0,76,79,75,65,76,0,108,111,107,97,108,0,76,111,107,97,108,0,71,76,79,66,65,76,0,103,108,111,98,97,108,0,71,108,111,98,97,108,0,83,69,77,69,83,84,65,0,115,101,109,101,115,116,97,0,83,101,109,101,115,116,97,0,83,65,75,76,65,82,95,72,73,68,85,80,0,115,97,107,108,97,114,95,104,105,100,117,112,0,83,97,107,108,97,114,95,72,105,100,117,112,0,83,65,75,76,65,82,95,77,65,84,73,0,115,97,107,108,97,114,95,109,97,116,105,0,83,97,107,108,97,114,95,77,97,116,105,0,95,67,69,75,95,77,69,77,79,82,73,0,95,99,101,107,95,109,101,109,111,114,105,0,95,67,101,107,95,77,101,109,111,114,105,0,100,101,101,112,71,76,79,66,95,37,115,0,100,101,101,112,37,100,95,37,115,0,118,97,114,32,112,97,100,97,32,105,110,116,105,32,66,97,105,107,32,115,97,108,97,104,0,86,97,108,95,76,97,98,101,108,58,32,114,111,111,116,32,78,85,76,76,33,32,10,0,73,110,116,101,114,112,114,101,116,101,114,32,115,97,108,97,104,32,58,32,77,97,107,101,65,100,100,86,97,108,76,97,98,101,108,84,114,101,101,0,45,45,45,109,101,109,32,97,119,97,108,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,45,45,45,109,101,109,32,97,107,104,105,114,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,10,0,37,115,32,32,37,108,105,10,0,37,115,32,32,37,102,10,0,37,115,32,32,37,115,10,0,37,115,32,32,110,97,109,97,45,102,117,110,103,115,105,10,0,37,115,32,32,107,111,109,112,111,110,101,110,45,108,97,121,97,114,10,0,37,115,32,32,116,121,112,101,58,37,100,10,0,109,97,108,108,111,99,32,58,32,109,101,109,111,114,105,32,116,105,100,97,107,32,99,117,107,117,112,10,0,65,110,100,79,114,58,32,80,114,111,103,114,97,109,32,98,101,114,104,101,110,116,105,32,100,105,108,117,97,114,32,112,101,114,107,105,114,97,97,110,0,78,111,116,70,117,110,99,58,32,80,114,111,103,114,97,109,32,98,101,114,104,101,110,116,105,32,100,105,108,117,97,114,32,112,101,114,107,105,114,97,97,110,0,115,97,108,97,104,32,100,97,108,97,109,32,112,101,110,106,117,109,108,97,104,97,110,0,115,97,108,97,104,32,100,97,108,97,109,32,112,101,110,103,117,114,97,110,103,97,110,0,115,97,108,97,104,32,100,97,108,97,109,32,112,101,114,107,97,108,105,97,110,0,68,105,98,97,103,105,32,100,101,110,103,97,110,32,78,111,108,0,115,97,108,97,104,32,100,97,108,97,109,32,112,101,109,98,97,103,105,97,110,0,115,97,108,97,104,32,100,97,108,97,109,32,112,101,109,97,110,103,107,97,116,97,110,0,115,97,108,97,104,32,100,97,108,97,109,32,111,112,101,114,97,115,105,32,109,111,100,117,108,117,115,0,67,111,109,112,97,114,101,58,32,80,114,111,103,114,97,109,32,98,101,114,104,101,110,116,105,32,100,105,108,117,97,114,32,112,101,114,107,105,114,97,97,110,0,33,32,118,97,114,105,97,98,101,108,32,117,110,116,97,105,97,110,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,33,32,110,105,108,97,105,32,117,110,116,97,105,97,110,32,107,97,116,97,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,103,101,116,32,100,97,116,120,32,115,116,114,32,37,115,10,0,103,101,116,32,100,97,116,120,50,32,115,116,114,32,37,115,10,0,115,101,116,101,108,97,104,32,39,61,39,44,32,97,100,97,32,115,105,109,98,111,108,32,108,97,105,110,32,115,101,108,97,105,110,32,39,61,39,32,0,115,101,116,101,108,97,104,32,39,62,39,44,32,97,100,97,32,115,105,109,98,111,108,32,108,97,105,110,32,115,101,108,97,105,110,32,39,61,39,32,0,62,32,118,97,114,105,97,98,101,108,32,117,110,116,97,105,97,110,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,62,32,110,105,108,97,105,32,117,110,116,97,105,97,110,32,107,97,116,97,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,62,50,32,118,97,114,105,97,98,101,108,32,117,110,116,97,105,97,110,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,62,50,32,110,105,108,97,105,32,117,110,116,97,105,97,110,32,107,97,116,97,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,62,51,32,118,97,114,105,97,98,101,108,32,117,110,116,97,105,97,110,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,62,51,32,110,105,108,97,105,32,117,110,116,97,105,97,110,32,107,97,116,97,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,115,101,116,101,108,97,104,32,39,60,39,44,32,97,100,97,32,115,105,109,98,111,108,32,108,97,105,110,32,115,101,108,97,105,110,32,39,62,39,32,97,116,97,117,32,39,61,39,32,0,73,110,116,101,114,110,97,108,32,67,111,109,112,97,114,101,58,32,83,97,108,97,104,32,116,97,116,97,32,107,97,108,105,109,97,116,0,116,105,100,97,107,32,98,105,115,97,32,98,117,97,116,32,115,111,99,107,101,116,40,41,0,10,72,111,115,116,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,58,32,37,115,10,0,80,105,110,103,32,37,115,32,91,37,115,93,32,100,101,110,103,97,110,32,37,100,32,98,121,116,101,115,32,100,97,116,97,0,10,80,105,110,103,32,37,115,32,91,37,115,93,32,100,101,110,103,97,110,32,37,100,32,98,121,116,101,115,32,100,97,116,97,58,10,0,115,111,99,107,101,116,32,101,114,114,111,114,10,0,37,115,32,84,105,109,101,79,117,116,10,0,82,101,115,112,111,110,32,100,97,114,105,58,32,37,115,58,32,98,121,116,101,115,61,37,100,32,116,105,109,101,61,37,100,109,115,32,84,84,76,61,37,100,0,10,82,101,115,112,111,110,32,100,97,114,105,58,32,37,115,58,32,98,121,116,101,115,61,37,100,32,116,105,109,101,61,37,100,109,115,32,84,84,76,61,37,100,0,68,97,114,105,32,37,115,32,84,117,106,117,97,110,32,72,111,115,116,32,37,115,32,116,105,100,97,107,32,98,105,115,97,32,100,105,106,97,110,103,107,97,117,10,0,99,108,111,115,101,115,111,99,107,101,116,40,41,0,114,101,99,118,102,114,111,109,40,41,0,115,101,110,100,116,111,40,41,0,10,37,115,32,112,105,110,103,32,101,114,114,111,114,10,0,37,115,32,112,105,110,103,32,101,114,114,111,114,32,0,115,97,108,97,104,32,105,110,100,101,107,115,0,68,105,108,97,114,97,110,103,32,109,101,109,98,117,97,116,32,66,101,110,100,97,32,100,97,108,97,109,32,66,101,110,100,97,0,66,101,110,100,97,66,97,114,117,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,65,75,65,82,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,97,107,97,114,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,115,97,108,97,104,32,98,105,108,97,110,103,97,110,32,109,105,110,117,115,0,115,97,108,97,104,32,98,101,110,116,117,107,32,98,105,108,97,110,103,97,110,32,109,105,110,117,115,0,65,66,83,79,76,85,84,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,97,98,115,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,83,73,78,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,115,105,110,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,67,79,83,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,99,111,115,58,32,117,107,117,114,97,110,32], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,70,65,75,84,79,82,73,65,76,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,70,65,75,84,79,82,73,65,76,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,80,69,82,77,85,84,65,83,73,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,80,69,82,77,85,84,65,83,73,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,75,79,77,66,73,78,65,83,73,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,75,79,77,66,73,78,65,83,73,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,71,67,68,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,71,67,68,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,74,85,77,76,65,72,95,85,78,84,65,73,65,78,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,74,85,77,76,65,72,95,85,78,84,65,73,65,78,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,44,32,100,105,108,97,114,97,110,103,32,97,100,97,32,98,101,115,97,114,97,110,0,74,85,77,76,65,72,95,85,78,84,65,73,65,78,58,32,73,68,69,78,84,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,82,65,84,65,82,65,84,65,95,85,78,84,65,73,65,78,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,82,65,84,65,82,65,84,65,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,44,32,100,105,108,97,114,97,110,103,32,97,100,97,32,98,101,115,97,114,97,110,0,86,65,82,73,65,78,95,85,78,84,65,73,65,78,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,86,65,82,73,65,78,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,44,32,100,105,108,97,114,97,110,103,32,97,100,97,32,98,101,115,97,114,97,110,0,83,84,68,95,68,69,86,73,65,83,73,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,83,84,68,95,68,69,86,73,65,83,73,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,44,32,100,105,108,97,114,97,110,103,32,97,100,97,32,98,101,115,97,114,97,110,0,70,73,76,69,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,116,117,108,105,115,95,115,111,107,101,116,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,119,0,97,0,70,73,76,69,58,32,116,105,112,101,32,112,101,109,98,117,107,97,97,110,32,102,105,108,101,32,116,105,100,97,107,32,100,105,112,97,104,97,109,105,0,65,80,65,75,65,72,95,65,82,83,73,80,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,65,80,65,75,65,72,95,65,82,83,73,80,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,83,116,97,116,117,115,32,65,114,115,105,112,32,83,97,108,97,104,32,58,32,37,115,32,10,0,32,115,116,114,117,107,116,117,114,32,102,105,108,101,32,116,105,100,97,107,32,98,97,105,107,32,44,0,32,107,111,109,112,111,110,101,110,47,97,114,115,105,112,110,121,97,32,116,105,100,97,107,32,97,100,97,32,44,0,32,107,111,109,112,111,110,101,110,47,97,114,115,105,112,32,112,97,116,104,32,98,117,107,97,110,32,100,105,114,101,107,116,111,114,105,32,44,0,32,116,97,107,32,97,100,97,32,105,122,105,110,32,112,101,110,103,97,107,115,101,115,97,110,32,44,0,32,109,101,108,101,98,105,104,105,32,107,97,112,97,115,105,116,97,115,32,109,101,109,111,114,121,32,44,0,32,78,97,109,97,32,102,105,108,101,32,116,101,114,108,97,108,117,32,112,97,110,106,97,110,103,32,44,0,32,65,114,115,105,112,32,83,97,108,97,104,0,66,69,83,65,82,95,65,82,83,73,80,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,98,101,115,97,114,95,97,114,115,105,112,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,37,108,100,0,87,65,75,84,85,95,65,75,83,69,83,95,65,82,83,73,80,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,87,65,75,84,85,95,65,75,83,69,83,95,65,82,83,73,80,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,37,100,45,37,109,45,37,89,32,37,72,58,37,77,58,37,83,0,87,65,75,84,85,95,82,85,66,65,72,95,65,82,83,73,80,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,87,65,75,84,85,95,82,85,66,65,72,95,65,82,83,73,80,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,97,110,103,107,97,95,107,97,104,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,65,80,65,75,65,72,32,65,78,71,75,65,32,110,105,108,97,105,32,117,110,116,97,105,97,110,32,107,97,116,97,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,104,117,114,117,102,95,107,97,104,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,65,80,65,75,65,72,95,72,85,82,85,70,58,32,110,105,108,97,105,32,117,110,116,97,105,97,110,32,107,97,116,97,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,104,117,114,117,102,95,110,111,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,110,105,108,97,105,32,117,110,116,97,105,97,110,32,107,97,116,97,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,72,85,82,85,70,95,78,79,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,110,105,108,97,105,32,112,111,115,105,115,105,32,104,117,114,117,102,32,115,97,108,97,104,0,75,69,95,65,78,71,75,65,58,32,115,97,108,97,104,32,109,97,115,117,107,97,110,32,58,32,97,110,103,107,97,0,75,69,95,65,78,71,75,65,58,32,115,97,108,97,104,32,109,97,115,117,107,97,110,32,58,32,112,101,99,97,104,97,110,0,107,101,95,97,110,103,107,97,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,75,69,95,72,85,82,85,70,58,32,115,97,108,97,104,32,109,97,115,117,107,97,110,32,58,32,107,97,116,97,0,107,101,95,104,117,114,117,102,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,75,69,95,72,85,82,85,70,58,32,115,97,108,97,104,32,109,97,115,117,107,97,110,0,83,65,77,66,85,78,71,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,115,97,109,98,117,110,103,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,71,65,66,85,78,71,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,71,65,66,85,78,71,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,69,75,83,80,82,69,83,73,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,65,77,66,73,76,95,68,73,82,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,65,77,66,73,76,95,68,73,82,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,115,97,108,97,104,32,98,117,107,97,32,100,105,114,0,66,85,65,84,95,68,73,82,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,98,117,97,116,95,100,105,114,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,72,65,80,85,83,95,68,73,82,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,71,65,78,84,73,95,68,73,82,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,103,97,110,116,105,95,100,105,114,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,103,101,116,99,119,100,0,80,73,78,71,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,73,75,65,84,95,83,79,75,69,84,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,84,82,73,77,65,95,83,79,75,69,84,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,115,111,99,107,101,116,32,110,117,108,108,0,66,65,67,65,95,83,79,75,69,84,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,84,85,76,73,83,95,83,79,75,69,84,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,75,79,78,69,75,95,83,79,75,69,84,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,120,0,80,65,78,74,65,78,71,0,112,97,110,106,97,110,103,0,80,97,110,106,97,110,103,0,76,73,78,71,75,85,80,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,108,105,110,103,107,117,112,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,75,79,78,70,73,71,85,82,65,83,73,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,32,10,0,103,97,103,97,108,32,98,117,107,97,32,102,105,108,101,32,58,32,37,115,32,10,0,115,113,108,114,48,48,116,0,83,97,108,97,104,58,32,77,101,109,111,114,105,32,117,110,116,117,107,32,115,113,108,32,116,105,100,97,107,32,98,101,114,101,115,33,0,39,37,115,39,32,0,97,109,98,105,108,0,65,77,66,73,76,0,116,117,110,103,103,97,108,0,84,85,78,71,71,65,76,0,115,101,108,101,99,116,32,100,105,115,116,105,110,99,116,32,0,115,101,108,101,99,116,32,37,115,32,0,100,97,114,105,0,68,65,82,73,0,32,102,114,111,109,32,0,109,97,115,117,107,107,97,110,0,77,65,83,85,75,75,65,78,0,105,110,115,101,114,116,32,105,110,116,111,32,0,108,101,98,117,114,107,97,110,0,76,69,66,85,82,75,65,78,0,109,101,114,103,101,32,105,110,116,111,32,0,98,101,114,110,105,108,97,105,0,66,69,82,78,73,76,65,73,0,118,97,108,117,101,115,32,0,112,101,114,98,97,114,117,105,0,80,69,82,66,65,82,85,73,0,117,112,100,97,116,101,32,0,104,97,112,117,115,0,72,65,80,85,83,0,100,101,108,101,116,101,32,0,112,97,110,103,107,97,115,0,80,65,78,71,75,65,83,0,116,97,98,101,108,0,116,114,117,110,99,97,116,101,32,116,97,98,108,101,32,0,98,117,97,116,0,66,85,65,84,0,84,65,66,69,76,0,99,114,101,97,116,101,32,116,97,98,108,101,32,0,107,117,110,99,105,0,75,85,78,67,73,0,117,116,97,109,97,0,85,84,65,77,65,0,80,82,73,77,65,82,89,32,75,69,89,32,0,100,105,109,97,110,97,0,68,73,77,65,78,65,0,119,104,101,114,101,32,37,115,32,0,115,101,116,0,83,69,84,0,83,69,84,32,0,100,97,110,0,68,65,78,0,97,110,100,32,0,97,116,97,117,0,65,84,65,85,0,111,114,32,0,105,97,108,97,104,0,73,65,76,65,72,0,105,115,32,0,107,111,115,111,110,103,0,75,79,83,79,78,71,0,78,73,76,0,78,85,76,76,32,0,106,105,107,97,95,110,105,108,0,74,73,75,65,95,78,73,76,0,78,86,76,32,0,106,105,107,97,95,107,111,115,111,110,103,0,74,73,75,65,95,75,79,83,79,78,71,0,73,83,78,85,76,76,32,0,97,100,97,0,65,68,65,0,32,69,88,73,83,84,83,32,0,115,101,109,117,97,110,121,97,0,83,69,77,85,65,78,89,65,0,32,65,76,76,32,0,98,117,107,97,110,0,66,85,75,65,78,0,78,79,84,32,0,115,101,112,101,114,116,105,0,83,69,80,69,82,84,73,0,108,105,107,101,32,0,100,101,110,103,97,110,0,68,69,78,71,65,78,0,117,114,117,116,97,110,0,85,82,85,84,65,78,0,79,82,68,69,82,32,66,89,32,0,103,114,117,112,0,71,82,85,80,0,71,82,79,85,80,32,66,89,32,0,109,101,110,97,110,106,97,107,0,77,69,78,65,78,74,65,75,0,65,83,67,32,0,109,101,110,117,114,117,110,0,77,69,78,85,82,85,78,0,68,69,83,67,32,0,100,97,108,97,109,0,68,65,76,65,77,0,73,78,32,0,109,101,109,105,108,105,107,105,0,77,69,77,73,76,73,75,73,0,104,97,118,105,110,103,32,0,106,117,109,108,97,104,0,74,85,77,76,65,72,0,115,117,109,32,0,114,97,116,97,45,114,97,116,97,0,82,65,84,65,45,82,65,84,65,0,97,118,103,32,0,116,111,116,97,108,0,84,79,84,65,76,0,99,111,117,110,116,32,0,97,116,97,115,0,65,84,65,83,0,116,111,112,32,0,98,97,116,97,115,97,110,0,66,65,84,65,83,65,78,0,108,105,109,105,116,32,0,104,117,98,117,110,103,97,110,0,72,85,66,85,78,71,65,78,0,105,110,110,101,114,32,106,111,105,110,32,0,115,105,108,97,110,103,0,83,73,76,65,78,71,0,99,114,111,115,115,32,106,111,105,110,32,0,108,117,97,114,0,76,85,65,82,0,107,105,114,105,0,75,73,82,73,0,108,101,102,116,32,111,117,116,101,114,32,106,111,105,110,32,0,107,97,110,97,110,0,75,65,78,65,78,0,114,105,103,104,116,32,111,117,116,101,114,32,106,111,105,110,32,0,112,101,110,117,104,0,80,69,78,85,72,0,102,117,108,108,32,111,117,116,101,114,32,106,111,105,110,32,0,111,117,116,101,114,32,106,111,105,110,32,0,106,111,105,110,32,0,116,97,110,103,103,97,108,97,110,0,84,65,78,71,71,65,76,65,78,0,83,89,83,68,65,84,69,32,0,102,111,114,109,97,116,95,116,97,110,103,103,97,108,0,70,79,82,77,65,84,95,84,65,78,71,71,65,76,0,68,65,84,69,95,70,79,82,77,65,84,32,0,102,111,114,109,97,116,95,119,97,107,116,117,0,70,79,82,77,65,84,95,87,65,75,84,85,0,84,73,77,69,95,70,79,82,77,65,84,32,0,107,101,95,104,117,114,117,102,0,75,69,95,72,85,82,85,70,0,84,79,95,67,72,65,82,32,0,107,101,95,116,97,110,103,103,97,108,0,75,69,95,84,65,78,71,71,65,76,0,84,79,95,68,65,84,69,32,0,116,97,98,101,108,95,115,105,115,116,101,109,0,84,65,66,69,76,95,83,73,83,84,69,77,0,100,117,109,109,121,32,0,112,105,108,105,104,0,80,73,76,73,72,0,67,65,83,69,32,0,107,101,116,105,107,97,0,75,69,84,73,75,65,0,87,72,69,78,32,0,109,97,107,97,0,77,65,75,65,0,84,72,69,78,32,0,108,97,105,110,110,121,97,0,76,65,73,78,78,89,65,0,69,76,83,69,32,0,115,101,108,101,115,97,105,0,83,69,76,69,83,65,73,0,69,78,68,32,0,115,101,98,97,103,97,105,0,83,69,66,65,71,65,73,0,65,83,32,0,103,97,98,117,110,103,97,110,0,71,65,66,85,78,71,65,78,0,85,78,73,79,78,32,0,112,111,116,111,110,103,97,110,0,80,79,84,79,78,71,65,78,0,73,78,84,69,82,67,69,83,84,32,0,115,97,108,97,104,58,32,116,105,100,97,107,32,98,105,115,97,32,100,105,116,114,97,110,115,108,97,115,105,32,33,0,115,97,108,97,104,33,32,107,97,116,97,32,116,97,110,112,97,32,116,97,110,100,97,32,112,101,116,105,107,0,115,97,108,97,104,33,32,109,101,108,101,98,105,104,105,32,77,65,88,95,83,84,82,73,78,71,95,76,69,78,0,115,97,108,97,104,32,58,32,109,101,108,101,98,105,104,105,32,112,97,110,106,97,110,103,32,107,97,112,97,115,105,116,97,115,32,37,100,0,76,65,66,69,76,0,69,78,68,0,98,97,114,105,115,32,37,117,58,32,0,115,97,108,97,104,32,33,32,109,101,109,111,114,105,32,77,97,107,101,65,100,100,86,97,108,76,97,98,101,108,84,114,101,101,0,84,82,65,78,83,95,83,81,76,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,84,82,65,78,83,95,83,81,76,58,32,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,83,65,75,76,65,82,95,83,84,65,84,85,83,0,115,97,107,108,97,114,95,115,116,97,116,117,115,0,65,75,65,82,0,97,107,97,114,0,65,66,83,79,76,85,84,0,97,98,115,111,108,117,116,0,65,66,83,0,97,98,115,0,83,73,78,85,83,0,115,105,110,117,115,0,83,73,78,0,115,105,110,0,67,79,83,73,78,85,83,0,99,111,115,105,110,117,115,0,67,79,83,0,99,111,115,0,70,65,75,84,79,82,73,65,76,0,102,97,107,116,111,114,105,97,108,0,80,69,82,77,85,84,65,83,73,0,112,101,114,109,117,116,97,115,105,0,75,79,77,66,73,78,65,83,73,0,107,111,109,98,105,110,97,115,105,0,71,67,68,0,103,99,100,0,70,65,75,84,79,82,95,84,69,82,66,69,83,65,82,0,102,97,107,116,111,114,95,116,101,114,98,101,115,97,114,0,74,85,77,76,65,72,95,85,78,84,65,73,65,78,0,106,117,109,108,97,104,95,117,110,116,97,105,97,110,0,82,65,84,65,82,65,84,65,95,85,78,84,65,73,65,78,0,114,97,116,97,114,97,116,97,95,117,110,116,97,105,97,110,0,86,65,82,73,65,78,95,85,78,84,65,73,65,78,0,118,97,114,105,97,110,95,117,110,116,97,105,97,110,0,83,84,68,95,68,69,86,73,65,83,73,95,85,78,84,65,73,65,78,0,115,116,100,95,100,101,118,105,97,115,105,95,117,110,116,97,105,97,110,0,65,78,71,75,65,95,75,65,72,0,97,110,103,107,97,95,107,97,104,0,72,85,82,85,70,95,75,65,72,0,104,117,114,117,102,95,107,97,104,0,75,69,95,65,78,71,75,65,0,107,101,95,97,110,103,107,97,0,72,85,82,85,70,95,78,79,0,104,117,114,117,102,95,110,111,0,83,65,77,66,85,78,71,0,83,97,109,98,117,110,103,0,115,97,109,98,117,110,103,0,71,65,66,85,78,71,0,71,97,98,117,110,103,0,103,97,98,117,110,103,0,69,75,83,80,82,69,83,73,0,101,107,115,112,114,101,115,105,0,87,65,75,84,85,0,119,97,107,116,117,0,72,65,82,73,0,104,97,114,105,0,82,65,78,68,79,77,0,114,97,110,100,111,109,0,65,67,65,75,0,97,99,97,107,0,80,73,78,71,0,112,105,110,103,0,80,105,110,103,0,116,101,109,98,97,107,0,83,79,75,69,84,0,115,111,107,101,116,0,116,99,112,0,83,79,75,69,84,95,85,68,80,0,115,111,107,101,116,95,117,100,112,0,117,100,112,0,73,75,65,84,95,83,79,75,69,84,0,105,107,97,116,95,115,111,107,101,116,0,84,82,73,77,65,95,83,79,75,69,84,0,116,114,105,109,97,95,115,111,107,101,116,0,66,65,67,65,95,83,79,75,69,84,0,98,97,99,97,95,115,111,107,101,116,0,84,85,76,73,83,95,83,79,75,69,84,0,116,117,108,105,115,95,115,111,107,101,116,0,75,79,78,69,75,95,83,79,75,69,84,0,107,111,110,101,107,95,115,111,107,101,116,0,76,73,78,71,75,85,80,0,108,105,110,103,107,117,112,0,75,79,78,70,73,71,85,82,65,83,73,0,107,111,110,102,105,103,117,114,97,115,105,0,65,77,66,73,76,95,68,73,82,0,97,109,98,105,108,95,100,105,114,0,66,85,65,84,95,68,73,82,0,98,117,97,116,95,100,105,114,0,72,65,80,85,83,95,68,73,82,0,104,97,112,117,115,95,100,105,114,0,71,65,78,84,73,95,68,73,82,0,103,97,110,116,105,95,100,105,114,0,80,79,83,73,83,73,95,68,73,82,0,112,111,115,105,115,105,95,100,105,114,0,70,73,76,69,0,102,105,108,101,0,65,82,83,73,80,0,97,114,115,105,112,0,66,65,67,65,95,65,82,83,73,80,0,98,97,99,97,95,97,114,115,105,112,0,65,80,65,75,65,72,95,65,82,83,73,80,0,97,112,97,107,97,104,95,97,114,115,105,112,0,66,69,83,65,82,95,65,82,83,73,80,0,98,101,115,97,114,95,97,114,115,105,112,0,87,65,75,84,85,95,65,75,83,69,83,95,65,82,83,73,80,0,119,97,107,116,117,95,97,107,115,101,115,95,97,114,115,105,112,0,87,65,75,84,85,95,82,85,66,65,72,95,65,82,83,73,80,0,119,97,107,116,117,95,114,117,98,97,104,95,97,114,115,105,112,0,84,82,65,78,83,95,83,81,76,0,116,114,97,110,115,95,115,113,108,0,84,114,97,110,115,95,83,113,108,0,84,114,97,110,115,95,115,113,108,0,66,69,78,68,65,66,65,82,85,0,98,101,110,100,97,98,97,114,117,0,66,101,110,100,97,66,97,114,117,0,116,105,100,97,107,32,97,100,97,32,116,97,110,100,97,32,112,101,110,117,116,117,112,32,39,41,39,0,76,97,98,101,108,47,86,97,114,105,97,98,101,108,58,32,83,97,108,97,104,32,116,97,116,97,32,107,97,108,105,109,97,116,0,37,115,45,62,37,115,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,83,65,75,76,65,82,95,72,73,68,85,80,32,115,97,108,97,104,0,47,115,121,115,47,99,108,97,115,115,47,103,112,105,111,47,101,120,112,111,114,116,0,97,98,0,67,97,110,110,111,116,32,111,112,101,110,32,71,80,73,79,32,101,120,112,111,114,116,32,102,105,108,101,46,10,0,47,115,121,115,47,99,108,97,115,115,47,103,112,105,111,47,103,112,105,111,37,115,47,100,105,114,101,99,116,105,111,110,0,114,98,43,0,67,97,110,110,111,116,32,111,112,101,110,32,100,105,114,101,99,116,105,111,110,32,102,105,108,101,46,10,0,111,117,116,0,47,115,121,115,47,99,108,97,115,115,47,103,112,105,111,47,103,112,105,111,37,115,47,118,97,108,117,101,0,67,97,110,110,111,116,32,111,112,101,110,32,118,97,108,117,101,32,102,105,108,101,46,10,0,49,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,83,65,75,76,65,82,95,77,65,84,73,32,115,97,108,97,104,0,48,0,85,110,116,97,105,97,110,32,115,97,108,97,104,32,109,97,115,117,107,97,110,0,37,108,105,0,110,105,108,32,0,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,116,105,100,97,107,32,115,101,115,117,97,105,32,107,97,112,97,115,105,116,97,115,0,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,58,32,105,110,116,0,110,105,108,0,37,100,0,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,58,32,112,101,99,97,104,97,110,0,37,102,0,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,58,32,107,97,116,97,0,110,105,108,32,37,115,0,37,99,0,37,115,10,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,84,85,76,73,83,32,115,97,108,97,104,0,118,97,114,105,97,98,101,108,32,117,110,116,97,105,97,110,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,10,0,37,46,49,56,102,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,84,85,76,73,83,95,82,73,78,67,73,32,115,97,108,97,104,0,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,98,101,108,117,109,32,116,101,114,100,101,102,105,110,105,115,105,0,78,105,108,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,84,85,76,73,83,76,79,71,32,115,97,108,97,104,0,98,101,110,116,117,107,32,112,101,114,105,110,116,97,104,32,83,85,82,65,84,32,115,97,108,97,104,0,83,85,82,65,84,32,116,105,100,97,107,32,108,101,110,103,107,97,112,0,50,53,0,75,105,114,105,109,32,109,97,105,108,32,79,75,10,0,71,97,103,97,108,32,107,105,114,105,109,32,109,97,105,108,10,0,97,119,97,108,97,110,0,65,119,97,108,97,110,0,61,0,37,115,45,62,37,115,61,37,115,45,62,37,115,0,66,101,110,100,97,32,37,115,32,98,101,108,117,109,32,97,100,97,32,97,119,97,108,97,110,32,33,0,71,97,103,97,108,32,97,109,98,105,108,32,114,101,102,101,114,101,110,115,105,32,102,117,110,103,115,105,32,117,110,116,117,107,32,66,69,78,68,65,0,66,101,110,100,97,32,37,115,32,58,32,74,117,109,108,97,104,32,112,97,114,97,109,101,116,101,114,32,102,117,110,103,115,105,32,116,105,100,97,107,32,98,101,110,97,114,32,33,0,107,111,100,101,32,108,117,97,114,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,58,32,37,115,10,0,114,0,116,105,100,97,107,32,98,105,115,97,32,98,117,107,97,32,75,111,100,101,32,76,117,97,114,32,37,115,10,0,99,97,108,108,111,99,32,101,114,114,111,114,10,0,83,85,66,32,116,105,100,97,107,32,100,105,116,101,109,117,107,97,110,0,40,0,107,111,100,101,32,83,85,66,32,115,97,108,97,104,32,58,32,116,97,110,112,97,32,116,97,110,100,97,32,40,0,68,101,102,105,110,105,115,105,32,83,85,66,32,116,105,100,97,107,32,98,101,110,97,114,0,37,115,32,0,107,111,100,101,32,83,85,66,32,115,97,108,97,104,0,82,69,84,85,82,78,32,101,114,114,111,114,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,82,69,84,85,82,78,32,115,97,108,97,104,0,83,97,108,97,104,32,107,97,108,105,109,97,116,32,77,97,115,117,107,0,80,73,76,73,72,32,116,97,110,112,97,32,116,97,110,100,97,32,112,101,110,117,116,117,112,32,125,0,75,65,76,65,85,32,116,97,110,112,97,32,83,84,79,80,75,65,76,65,85,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,71,76,79,66,65,76,32,115,97,108,97,104,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,66,69,78,68,65,32,115,97,108,97,104,0,84,89,80,69,95,73,68,69,78,84,32,115,97,108,97,104,58,32,100,105,108,117,97,114,32,112,101,114,107,105,114,97,97,110,0,115,97,108,97,104,33,32,107,97,116,97,32,102,117,110,103,115,105,32,116,105,100,97,107,32,100,105,107,101,110,97,108,44,32,98,117,107,97,110,32,109,97,115,117,107,97,110,32,97,116,97,117,32,111,112,101,114,97,115,105,32,109,97,116,101,109,97,116,105,107,0,83,97,108,97,104,32,98,101,110,116,117,107,32,98,105,108,97,110,103,97,110,32,110,101,103,97,116,105,102,0,80,101,114,105,110,116,97,104,32,116,105,100,97,107,32,100,105,109,101,110,103,101,114,116,105,58,32,37,115,32,44,32,110,105,108,97,105,32,107,111,100,101,32,37,100,32,0,123,32,0,32,125,0,115,105,109,98,111,108,32,37,99,32,10,0,117,110,116,97,105,97,110,32,115,97,108,97,104,33,32,98,117,107,97,110,32,109,97,115,117,107,97,110,32,97,116,97,117,32,111,112,101,114,97,115,105,32,109,97,116,101,109,97,116,105,107,32,0,99,99,99,32,85,110,116,97,105,97,110,32,115,97,108,97,104,32,109,97,115,117,107,97,110,0,48,32,110,105,108,97,105,32,105,110,112,117,116,32,108,97,114,105,107,32,98,101,108,117,109,32,100,105,115,117,112,112,111,114,116,0,116,105,112,101,32,110,105,108,97,105,32,121,97,110,103,32,108,97,105,110,32,98,101,108,117,109,32,100,105,115,117,112,112,111,114,116,0,85,110,116,97,105,97,110,32,107,101,45,91,48,93,32,98,101,108,117,109,32,116,101,114,105,115,105,58,32,107,97,116,97,0,91,50,53,54,93,0,98,98,98,32,117,110,116,97,105,97,110,32,115,97,108,97,104,32,109,97,115,117,107,97,110,0,112,105,115,97,104,0,80,73,83,65,72,0,80,73,83,65,72,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,123,0,100,97,116,97,32,117,110,116,97,105,97,110,58,32,115,97,108,97,104,32,109,97,115,117,107,97,110,0,100,97,116,97,32,117,110,116,97,105,97,110,32,58,32,116,97,110,112,97,32,116,97,110,100,97,32,125,0,117,110,116,97,105,97,110,58,32,109,101,108,101,98,105,104,105,32,107,97,112,97,115,105,116,97,115,0,98,97,99,97,95,100,105,114,0,66,65,67,65,95,68,73,82,0,66,65,67,65,95,68,73,82,58,32,109,97,115,117,107,97,110,32,100,97,116,97,32,115,97,108,97,104,0,118,97,114,105,97,98,101,108,32,115,117,100,97,104,32,116,101,114,112,97,107,97,105,0,110,97,109,97,32,118,97,114,105,97,98,101,108,32,115,117,100,97,104,32,116,101,114,112,97,107,97,105,33,32,10,0,83,97,108,97,104,32,100,97,108,97,109,32,112,101,110,100,101,102,105,110,105,115,105,97,110,32,85,110,116,97,105,97,110,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,85,78,84,65,73,65,78,32,115,97,108,97,104,0,44,0,98,101,110,100,97,32,115,97,108,97,104,32,109,97,115,117,107,97,110,0,84,101,114,108,97,108,117,32,98,97,110,121,97,107,32,112,101,110,103,117,108,97,110,103,97,110,32,83,69,76,65,71,73,0,83,69,76,65,71,73,32,116,97,110,112,97,32,76,65,75,85,75,65,78,0,83,69,76,65,71,73,32,116,97,110,112,97,32,66,65,76,73,75,76,65,71,73,0,41,0,59,0,84,101,114,108,97,108,117,32,98,97,110,121,97,107,32,112,101,110,103,117,108,97,110,103,97,110,32,85,78,84,85,75,0,85,78,84,85,75,32,115,97,108,97,104,32,58,32,116,97,110,112,97,32,116,97,110,100,97,32,40,0,107,111,100,101,32,85,78,84,85,75,32,115,97,108,97,104,32,58,32,115,101,116,101,108,97,104,32,105,110,105,115,105,97,108,105,115,97,115,105,32,104,97,114,117,115,32,97,100,97,32,116,97,110,100,97,32,59,0,85,78,84,85,75,32,115,97,108,97,104,32,58,32,116,97,110,112,97,32,116,97,110,100,97,32,59,0,107,111,100,101,32,85,78,84,85,75,32,115,97,108,97,104,32,58,32,115,101,116,101,108,97,104,32,107,111,110,100,105,115,105,32,104,97,114,117,115,32,97,100,97,32,116,97,110,100,97,32,59,0,85,78,84,85,75,32,115,97,108,97,104,32,58,32,116,97,110,112,97,32,116,97,110,100,97,32,41,0,85,78,84,85,75,32,116,97,110,112,97,32,85,76,65,78,71,0,85,78,84,85,75,32,116,97,110,112,97,32,76,65,71,73,0,115,97,108,97,104,32,112,97,114,97,109,101,116,101,114,32,85,110,116,117,107,33,32,98,117,107,97,110,32,109,97,115,117,107,97,110,32,97,116,97,117,32,111,112,101,114,97,115,105,32,109,97,116,101,109,97,116,105,107,0,76,65,73,78,75,65,76,65,85,32,116,97,110,112,97,32,77,65,75,65,0,75,65,76,65,85,32,116,97,110,112,97,32,77,65,75,65,0,107,111,100,101,32,80,73,76,73,72,32,115,97,108,97,104,32,58,32,116,97,110,112,97,32,116,97,110,100,97,32,112,101,109,98,117,107,97,32,123,0,80,73,76,73,72,32,116,97,110,112,97,32,65,75,72,73,82,80,73,76,73,72,0,85,110,116,97,105,97,110,32,115,97,108,97,104,32,109,97,115,117,107,97,110,32,112,49,0,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,116,105,100,97,107,32,115,101,115,117,97,105,32,107,97,112,97,115,105,116,97,115,32,112,49,0,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,116,105,100,97,107,32,115,101,115,117,97,105,32,107,97,112,97,115,105,116,97,115,32,112,51,51,51,32,0,85,110,116,97,105,97,110,32,115,97,108,97,104,32,109,97,115,117,107,97,110,32,112,50,0,117,107,117,114,97,110,32,85,110,116,97,105,97,110,32,116,105,100,97,107,32,115,101,115,117,97,105,32,107,97,112,97,115,105,116,97,115,32,112,50,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,72,65,80,85,83,32,115,97,108,97,104,0,118,97,114,105,97,98,101,108,32,104,97,114,117,115,32,100,101,110,103,97,110,32,98,105,108,97,110,103,97,110,32,100,101,115,105,109,97,108,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,84,85,78,71,71,85,32,115,97,108,97,104,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,80,69,82,73,78,84,65,72,32,115,97,108,97,104,0,118,97,114,105,97,98,101,108,32,104,97,114,117,115,32,115,101,98,97,103,97,105,32,83,79,75,69,84,47,65,82,83,73,80,47,75,79,78,69,75,83,73,68,66,0,107,111,100,101,32,112,101,114,105,110,116,97,104,32,84,85,84,85,80,32,115,97,108,97,104,0,98,101,110,116,117,107,32,112,101,114,105,110,116,97,104,32,84,85,76,73,83,95,65,82,83,73,80,32,115,97,108,97,104,0,114,48,48,116,0,73,110,116,101,114,112,114,101,116,101,114,32,115,97,108,97,104,58,32,116,105,100,97,107,32,98,105,115,97,32,98,117,97,116,32,115,101,97,114,99,104,105,110,103,32,116,114,101,101,47,109,101,109,111,114,105,32,116,105,100,97,107,32,99,117,107,117,112,0,83,97,108,97,104,32,107,97,108,105,109,97,116,32,76,79,78,67,65,84,76,65,66,69,76,0,107,111,100,101,32,83,85,66,32,115,97,108,97,104,32,48,0,107,111,100,101,32,83,85,66,32,115,97,108,97,104,32,49,0,107,111,100,101,32,83,85,66,32,115,97,108,97,104,32,58,32,116,97,110,112,97,32,116,97,110,100,97,32,123,0,107,111,100,101,32,68,101,102,105,110,105,115,105,66,101,110,100,97,32,115,97,108,97,104,0,91,0,107,111,100,101,32,68,101,102,105,110,105,115,105,66,101,110,100,97,32,115,97,108,97,104,32,58,32,116,97,110,112,97,32,116,97,110,100,97,32,91,0,112,101,110,117,108,105,115,97,110,32,112,97,114,97,109,101,116,101,114,32,112,97,100,97,32,68,101,102,105,110,105,115,105,66,101,110,100,97,32,115,97,108,97,104,0,37,115,61,37,108,105,0,37,115,61,37,102,0,34,0,112,101,110,117,108,105,115,97,110,32,83,85,66,32,102,117,110,103,115,105,32,112,97,100,97,32,68,101,102,105,110,105,115,105,66,101,110,100,97,32,115,97,108,97,104,0,65,87,65,76,65,78,0,107,111,100,101,32,83,85,66,32,112,97,100,97,32,68,101,102,105,110,105,115,105,66,101,110,100,97,32,115,97,108,97,104,32,58,32,116,105,100,97,107,32,98,111,108,101,104,32,100,101,110,103,97,110,32,110,97,109,97,32,65,87,65,76,65,78,0,37,115,45,62,97,119,97,108,97,110,0,107,111,100,101,32,83,85,66,32,112,97,100,97,32,68,101,102,105,110,105,115,105,66,101,110,100,97,32,115,97,108,97,104,32,58,32,116,97,110,112,97,32,116,97,110,100,97,32,40,0,107,111,100,101,32,83,85,66,32,112,97,100,97,32,68,101,102,105,110,105,115,105,66,101,110,100,97,32,115,97,108,97,104,0,84,105,100,97,107,32,97,100,97,32,102,117,110,103,115,105,32,117,116,97,109,97,32,100,97,108,97,109,32,68,101,102,105,110,105,115,105,66,101,110,100,97,0,77,101,108,101,98,105,104,105,32,107,97,112,97,115,105,116,97,115,32,114,101,107,117,114,115,105,102,0,125,0,37,115,0,105,110,116,101,114,117,112,115,105,32,121,97,110,103,32,116,105,100,97,107,32,100,105,105,110,103,105,110,107,97,110,0,105,100,101,110,116,32,115,97,108,97,104,32,109,97,115,117,107,97,110,0,17,0,10,0,17,17,17,0,0,0,0,5,0,0,0,0,0,0,9,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,15,10,17,17,17,3,10,7,0,1,19,9,11,11,0,0,9,6,11,0,0,11,0,6,17,0,0,0,17,17,17,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,17,0,10,10,17,17,17,0,10,0,0,2,0,9,11,0,0,0,9,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,0,0,0,0,0,0,0,0,0,0,0,13,0,0,0,4,13,0,0,0,0,9,14,0,0,0,0,0,14,0,0,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,15,0,0,0,0,9,16,0,0,0,0,0,16,0,0,16,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0,0,0,18,18,18,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,10,0,0,0,0,10,0,0,0,0,9,11,0,0,0,0,0,11,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,0,0,0,0,0,0,0,12,0,0,0,0,12,0,0,0,0,9,12,0,0,0,0,0,12,0,0,12,0,0,48,49,50,51,52,53,54,55,56,57,65,66,67,68,69,70,45,43,32,32,32,48,88,48,120,0,40,110,117,108,108,41,0,45,48,88,43,48,88,32,48,88,45,48,120,43,48,120,32,48,120,0,105,110,102,0,73,78,70,0,78,65,78,0,46,0,84,33,34,25,13,1,2,3,17,75,28,12,16,4,11,29,18,30,39,104,110,111,112,113,98,32,5,6,15,19,20,21,26,8,22,7,40,36,23,24,9,10,14,27,31,37,35,131,130,125,38,42,43,60,61,62,63,67,71,74,77,88,89,90,91,92,93,94,95,96,97,99,100,101,102,103,105,106,107,108,114,115,116,121,122,123,124,0,73,108,108,101,103,97,108,32,98,121,116,101,32,115,101,113,117,101,110,99,101,0,68,111,109,97,105,110,32,101,114,114,111,114,0,82,101,115,117,108,116,32,110,111,116,32,114,101,112,114,101,115,101,110,116,97,98,108,101,0,78,111,116,32,97,32,116,116,121,0,80,101,114,109,105,115,115,105,111,110,32,100,101,110,105,101,100,0,79,112,101,114,97,116,105,111,110,32,110,111,116,32,112,101,114,109,105,116,116,101,100,0,78,111,32,115,117,99,104,32,102,105,108,101,32,111,114,32,100,105,114,101,99,116,111,114,121,0,78,111,32,115,117,99,104,32,112,114,111,99,101,115,115,0,70,105,108,101,32,101,120,105,115,116,115,0,86,97,108,117,101,32,116,111,111,32,108,97,114,103,101,32,102,111,114,32,100,97,116,97,32,116,121,112,101,0,78,111,32,115,112,97,99,101,32,108,101,102,116,32,111,110,32,100,101,118,105,99,101,0,79,117,116,32,111,102,32,109,101,109,111,114,121,0,82,101,115,111,117,114,99,101,32,98,117,115,121,0,73,110,116,101,114,114,117,112,116,101,100,32,115,121,115,116,101,109,32,99,97,108,108,0,82,101,115,111,117,114,99,101,32,116,101,109,112,111,114,97,114,105,108,121,32,117,110,97,118,97,105,108,97,98,108,101,0,73,110,118,97,108,105,100,32,115,101,101,107,0,67,114,111,115,115,45,100,101,118,105,99,101,32,108,105,110,107,0,82,101,97,100,45,111,110,108,121,32,102,105,108,101,32,115,121,115,116,101,109,0,68,105,114,101,99,116,111,114,121,32,110,111,116,32,101,109,112,116,121,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,112,101,101,114,0,79,112,101,114,97,116,105,111,110,32,116,105,109,101,100,32,111,117,116,0,67,111,110,110,101,99,116,105,111,110,32,114,101,102,117,115,101,100,0,72,111,115,116,32,105,115,32,100,111,119,110,0,72,111,115,116,32,105,115,32,117,110,114,101,97,99,104,97,98,108,101,0,65,100,100,114,101,115,115,32,105,110,32,117,115,101,0,66,114,111,107,101,110,32,112,105,112,101,0,73,47,79,32,101,114,114,111,114,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,32,111,114,32,97,100,100,114,101,115,115,0,66,108,111,99,107,32,100,101,118,105,99,101,32,114,101,113,117,105,114,101,100,0,78,111,32,115,117,99,104,32,100,101,118,105,99,101,0,78,111,116,32,97,32,100,105,114], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
/* memory initializer */ allocate([101,99,116,111,114,121,0,73,115,32,97,32,100,105,114,101,99,116,111,114,121,0,84,101,120,116,32,102,105,108,101,32,98,117,115,121,0,69,120,101,99,32,102,111,114,109,97,116,32,101,114,114,111,114,0,73,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,0,65,114,103,117,109,101,110,116,32,108,105,115,116,32,116,111,111,32,108,111,110,103,0,83,121,109,98,111,108,105,99,32,108,105,110,107,32,108,111,111,112,0,70,105,108,101,110,97,109,101,32,116,111,111,32,108,111,110,103,0,84,111,111,32,109,97,110,121,32,111,112,101,110,32,102,105,108,101,115,32,105,110,32,115,121,115,116,101,109,0,78,111,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,115,32,97,118,97,105,108,97,98,108,101,0,66,97,100,32,102,105,108,101,32,100,101,115,99,114,105,112,116,111,114,0,78,111,32,99,104,105,108,100,32,112,114,111,99,101,115,115,0,66,97,100,32,97,100,100,114,101,115,115,0,70,105,108,101,32,116,111,111,32,108,97,114,103,101,0,84,111,111,32,109,97,110,121,32,108,105,110,107,115,0,78,111,32,108,111,99,107,115,32,97,118,97,105,108,97,98,108,101,0,82,101,115,111,117,114,99,101,32,100,101,97,100,108,111,99,107,32,119,111,117,108,100,32,111,99,99,117,114,0,83,116,97,116,101,32,110,111,116,32,114,101,99,111,118,101,114,97,98,108,101,0,80,114,101,118,105,111,117,115,32,111,119,110,101,114,32,100,105,101,100,0,79,112,101,114,97,116,105,111,110,32,99,97,110,99,101,108,101,100,0,70,117,110,99,116,105,111,110,32,110,111,116,32,105,109,112,108,101,109,101,110,116,101,100,0,78,111,32,109,101,115,115,97,103,101,32,111,102,32,100,101,115,105,114,101,100,32,116,121,112,101,0,73,100,101,110,116,105,102,105,101,114,32,114,101,109,111,118,101,100,0,68,101,118,105,99,101,32,110,111,116,32,97,32,115,116,114,101,97,109,0,78,111,32,100,97,116,97,32,97,118,97,105,108,97,98,108,101,0,68,101,118,105,99,101,32,116,105,109,101,111,117,116,0,79,117,116,32,111,102,32,115,116,114,101,97,109,115,32,114,101,115,111,117,114,99,101,115,0,76,105,110,107,32,104,97,115,32,98,101,101,110,32,115,101,118,101,114,101,100,0,80,114,111,116,111,99,111,108,32,101,114,114,111,114,0,66,97,100,32,109,101,115,115,97,103,101,0,70,105,108,101,32,100,101,115,99,114,105,112,116,111,114,32,105,110,32,98,97,100,32,115,116,97,116,101,0,78,111,116,32,97,32,115,111,99,107,101,116,0,68,101,115,116,105,110,97,116,105,111,110,32,97,100,100,114,101,115,115,32,114,101,113,117,105,114,101,100,0,77,101,115,115,97,103,101,32,116,111,111,32,108,97,114,103,101,0,80,114,111,116,111,99,111,108,32,119,114,111,110,103,32,116,121,112,101,32,102,111,114,32,115,111,99,107,101,116,0,80,114,111,116,111,99,111,108,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,80,114,111,116,111,99,111,108,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,83,111,99,107,101,116,32,116,121,112,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,78,111,116,32,115,117,112,112,111,114,116,101,100,0,80,114,111,116,111,99,111,108,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,65,100,100,114,101,115,115,32,102,97,109,105,108,121,32,110,111,116,32,115,117,112,112,111,114,116,101,100,32,98,121,32,112,114,111,116,111,99,111,108,0,65,100,100,114,101,115,115,32,110,111,116,32,97,118,97,105,108,97,98,108,101,0,78,101,116,119,111,114,107,32,105,115,32,100,111,119,110,0,78,101,116,119,111,114,107,32,117,110,114,101,97,99,104,97,98,108,101,0,67,111,110,110,101,99,116,105,111,110,32,114,101,115,101,116,32,98,121,32,110,101,116,119,111,114,107,0,67,111,110,110,101,99,116,105,111,110,32,97,98,111,114,116,101,100,0,78,111,32,98,117,102,102,101,114,32,115,112,97,99,101,32,97,118,97,105,108,97,98,108,101,0,83,111,99,107,101,116,32,105,115,32,99,111,110,110,101,99,116,101,100,0,83,111,99,107,101,116,32,110,111,116,32,99,111,110,110,101,99,116,101,100,0,67,97,110,110,111,116,32,115,101,110,100,32,97,102,116,101,114,32,115,111,99,107,101,116,32,115,104,117,116,100,111,119,110,0,79,112,101,114,97,116,105,111,110,32,97,108,114,101,97,100,121,32,105,110,32,112,114,111,103,114,101,115,115,0,79,112,101,114,97,116,105,111,110,32,105,110,32,112,114,111,103,114,101,115,115,0,83,116,97,108,101,32,102,105,108,101,32,104,97,110,100,108,101,0,82,101,109,111,116,101,32,73,47,79,32,101,114,114,111,114,0,81,117,111,116,97,32,101,120,99,101,101,100,101,100,0,78,111,32,109,101,100,105,117,109,32,102,111,117,110,100,0,87,114,111,110,103,32,109,101,100,105,117,109,32,116,121,112,101,0,78,111,32,101,114,114,111,114,32,105,110,102,111,114,109,97,116,105,111,110,0,0,114,119,97,0,105,110,102,105,110,105,116,121,0,110,97,110,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,3,4,5,6,7,8,9,255,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,1,2,4,7,3,6,5,0,18,17,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,17,34,35,36,17,37,38,39,40,41,42,43,44,17,45,46,47,16,16,48,16,16,16,16,16,16,16,49,50,51,16,52,53,16,16,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,54,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,55,17,17,17,17,56,17,57,58,59,60,61,62,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,63,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,64,65,17,66,67,68,69,70,71,72,73,16,16,16,74,75,76,77,78,16,16,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,17,17,17,82,83,16,16,16,16,16,16,16,16,16,16,16,17,17,17,17,84,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,17,17,85,16,16,16,16,86,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,87,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,88,89,90,91,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,92,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,254,255,255,7,254,255,255,7,0,0,0,0,0,4,32,4,255,255,127,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,195,255,3,0,31,80,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,223,60,64,215,255,255,251,255,255,255,255,255,255,255,255,255,191,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,3,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,254,255,255,255,127,2,254,255,255,255,255,0,0,0,0,0,255,191,182,0,255,255,255,7,7,0,0,0,255,7,255,255,255,255,255,255,255,254,255,195,255,255,255,255,255,255,255,255,255,255,255,255,239,31,254,225,255,159,0,0,255,255,255,255,255,255,0,224,255,255,255,255,255,255,255,255,255,255,255,255,3,0,255,255,255,255,255,7,48,4,255,255,255,252,255,31,0,0,255,255,255,1,0,0,0,0,0,0,0,0,253,31,0,0,0,0,0,0,240,3,255,127,255,255,255,255,255,255,255,239,255,223,225,255,207,255,254,254,238,159,249,255,255,253,197,227,159,89,128,176,207,255,3,0,238,135,249,255,255,253,109,195,135,25,2,94,192,255,63,0,238,191,251,255,255,253,237,227,191,27,1,0,207,255,0,0,238,159,249,255,255,253,237,227,159,25,192,176,207,255,2,0,236,199,61,214,24,199,255,195,199,29,129,0,192,255,0,0,238,223,253,255,255,253,239,227,223,29,96,3,207,255,0,0,236,223,253,255,255,253,239,227,223,29,96,64,207,255,6,0,236,223,253,255,255,255,255,231,223,93,128,0,207,255,0,252,236,255,127,252,255,255,251,47,127,128,95,255,0,0,12,0,254,255,255,255,255,127,255,7,63,32,255,3,0,0,0,0,150,37,240,254,174,236,255,59,95,32,255,243,0,0,0,0,1,0,0,0,255,3,0,0,255,254,255,255,255,31,254,255,3,255,255,254,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,249,255,3,255,255,231,193,255,255,127,64,255,51,255,255,255,255,191,32,255,255,255,255,255,247,255,255,255,255,255,255,255,255,255,61,127,61,255,255,255,255,255,61,255,255,255,255,61,127,61,255,127,255,255,255,255,255,255,255,61,255,255,255,255,255,255,255,255,135,0,0,0,0,255,255,0,0,255,255,255,255,255,255,255,255,255,255,31,0,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,159,255,255,254,255,255,7,255,255,255,255,255,255,255,255,255,199,1,0,255,223,15,0,255,255,15,0,255,255,15,0,255,223,13,0,255,255,255,255,255,255,207,255,255,1,128,16,255,3,0,0,0,0,255,3,255,255,255,255,255,255,255,255,255,255,255,0,255,255,255,255,255,7,255,255,255,255,255,255,255,255,63,0,255,255,255,31,255,15,255,1,192,255,255,255,255,63,31,0,255,255,255,255,255,15,255,255,255,3,255,3,0,0,0,0,255,255,255,15,255,255,255,255,255,255,255,127,254,255,31,0,255,3,255,3,128,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,239,255,239,15,255,3,0,0,0,0,255,255,255,255,255,243,255,255,255,255,255,255,191,255,3,0,255,255,255,255,255,255,63,0,255,227,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,222,111,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,255,255,63,63,255,255,255,255,63,63,255,170,255,255,255,63,255,255,255,255,255,255,223,95,220,31,207,15,255,31,220,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,128,0,0,255,31,0,0,0,0,0,0,0,0,0,0,0,0,132,252,47,62,80,189,255,243,224,67,0,0,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,255,255,255,255,255,255,3,0,0,255,255,255,255,255,127,255,255,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,120,12,0,255,255,255,255,191,32,255,255,255,255,255,255,255,128,0,0,255,255,127,0,127,127,127,127,127,127,127,127,255,255,255,255,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,0,0,0,254,3,62,31,254,255,255,255,255,255,255,255,255,255,127,224,254,255,255,255,255,255,255,255,255,255,255,247,224,255,255,255,255,63,254,255,255,255,255,255,255,255,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,255,255,255,255,255,63,255,31,255,255,255,15,0,0,255,255,255,255,255,127,240,143,255,255,255,128,255,255,255,255,255,255,255,255,255,255,0,0,0,0,128,255,252,255,255,255,255,255,255,255,255,255,255,255,255,121,15,0,255,7,0,0,0,0,0,0,0,0,0,255,187,247,255,255,255,0,0,0,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,15,0,255,3,0,0,252,8,255,255,255,255,255,7,255,255,255,255,7,0,255,255,255,31,255,255,255,255,255,255,247,255,0,128,255,3,0,0,0,0,255,255,255,255,255,255,127,0,255,63,255,3,255,255,127,4,255,255,255,255,255,255,255,127,5,0,0,56,255,255,60,0,126,126,126,0,127,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,7,255,3,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,127,248,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,0,127,0,248,224,255,253,127,95,219,255,255,255,255,255,255,255,255,255,255,255,255,255,3,0,0,0,248,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,0,0,0,0,0,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,223,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,0,0,255,3,254,255,255,7,254,255,255,7,192,255,255,255,255,255,255,255,255,255,255,127,252,252,252,28,0,0,0,0,255,239,255,255,127,255,255,183,255,63,255,63,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,255,255,255,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,31,255,255,255,255,255,255,1,0,0,0,0,0,255,255,255,127,0,0,255,255,255,7,0,0,0,0,0,0,255,255,255,63,255,255,255,255,15,255,62,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,3,0,0,0,0,0,0,0,0,0,0,63,253,255,255,255,255,191,145,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,63,0,255,255,255,3,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,192,0,0,0,0,0,0,0,0,111,240,239,254,255,255,15,0,0,0,0,0,255,255,255,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,255,63,0,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,192,255,0,0,252,255,255,255,255,255,255,1,0,0,255,255,255,1,255,3,255,255,255,255,255,255,199,255,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,30,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,63,0,255,3,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,31,0,255,255,255,255,255,127,0,0,248,255,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,255,255,255,223,100,222,255,235,239,255,255,255,255,255,255,255,191,231,223,223,255,255,255,123,95,252,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,255,255,255,253,255,255,247,255,255,255,247,255,255,223,255,255,255,223,255,255,127,255,255,255,127,255,255,255,253,255,255,255,253,255,255,247,207,255,255,255,255,255,255,239,255,255,255,150,254,247,10,132,234,150,170,150,247,247,94,255,251,255,15,238,251,255,15,0,0,0,0,0,0,0,0,18,16,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,16,16,34,35,16,36,37,38,39,40,41,42,43,16,44,45,46,17,47,48,17,17,49,17,17,17,50,51,52,53,54,55,56,57,17,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,58,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,59,16,60,61,62,63,64,65,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,66,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,67,16,16,68,16,69,70,71,16,72,16,73,16,16,16,16,74,75,76,77,16,16,78,16,79,80,16,16,16,16,81,16,16,16,16,16,16,16,16,16,16,16,16,16,82,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,83,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,84,85,86,87,16,16,88,89,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,90,16,91,92,93,94,95,96,97,98,16,16,16,16,16,16,16,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,0,0,0,254,255,0,252,1,0,0,248,1,0,0,120,0,0,0,0,255,251,223,251,0,0,128,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,60,0,252,255,224,175,255,255,255,255,255,255,255,255,255,255,223,255,255,255,255,255,32,64,176,0,0,0,0,0,0,0,0,0,0,0,0,0,64,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,134,254,255,255,255,0,64,73,0,0,0,0,0,24,0,223,255,0,200,0,0,0,0,0,0,0,1,0,60,0,0,0,0,0,0,0,0,0,0,0,0,16,224,1,30,0,96,255,191,0,0,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,207,3,0,0,0,3,0,32,255,127,0,0,0,78,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,0,0,16,0,32,30,0,48,0,1,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,252,15,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,3,0,0,0,0,0,0,0,0,16,0,32,0,0,0,0,253,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,255,7,0,0,0,0,0,0,0,0,0,32,0,0,0,0,0,255,0,0,0,0,0,0,0,16,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,0,0,0,0,63,2,0,0,0,0,0,0,0,0,0,4,0,0,0,0,16,0,0,0,0,0,0,128,0,128,192,223,0,12,0,0,0,0,0,0,0,0,0,0,0,0,0,31,0,0,0,0,0,0,254,255,255,255,0,252,255,255,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,192,255,223,255,7,0,0,0,0,0,0,0,0,0,0,128,6,0,252,0,0,24,62,0,0,128,191,0,204,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,96,255,255,255,31,0,0,255,3,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,96,0,0,1,0,0,24,0,0,0,0,0,0,0,0,0,56,0,0,0,0,16,0,0,0,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,254,127,47,0,0,255,3,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,49,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,196,255,255,255,255,0,0,0,192,0,0,0,0,0,0,0,0,1,0,224,159,0,0,0,0,127,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0,16,0,0,252,255,255,255,31,0,0,0,0,0,12,0,0,0,0,0,0,64,0,12,240,0,0,0,0,0,0,192,248,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,255,0,255,255,255,33,16,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,127,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,3,224,0,224,0,224,0,96,128,248,255,255,255,252,255,255,255,255,255,127,31,252,241,127,255,127,0,0,255,255,255,3,0,0,255,255,255,255,1,0,123,3,208,193,175,66,0,12,31,188,255,255,0,0,0,0,0,2,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,127,0,0,0,255,7,0,0,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,252,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,31,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,135,3,254,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,127,255,15,0,0,0,0,0,0,0,0,255,255,255,251,255,255,255,255,255,255,255,255,255,255,15,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,255,15,30,255,255,255,1,252,193,224,0,0,0,0,0,0,0,0,0,0,0,30,1,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,0,0,0,0,255,255,255,255,15,0,0,0,255,255,255,127,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,127,0,0,0,0,0,0,192,0,224,0,0,0,0,0,0,0,0,0,0,0,128,15,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,0,255,255,127,0,3,0,0,0,0,0,0,0,0,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,68,8,0,0,0,15,255,3,0,0,0,0,0,0,240,0,0,0,0,0,0,0,0,0,16,192,0,0,255,255,3,7,0,0,0,0,0,248,0,0,0,0,8,128,0,0,0,0,0,0,0,0,0,0,8,0,255,63,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,0,0,128,11,0,0,0,0,0,0,0,128,2,0,0,192,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,255,255,255,3,127,0,255,255,255,255,247,255,127,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,254,255,0,252,1,0,0,248,1,0,0,248,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,127,0,48,135,255,255,255,255,255,143,255,0,0,0,0,0,0,224,255,255,7,255,15,0,0,0,0,0,0,255,255,255,255,255,63,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,143,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,135,255,0,255,1,0,0,0,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,254,0,0,0,255,0,0,0,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,127,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,63,252,255,63,0,0,0,3,0,0,0,0,0,0,254,3,0,0,0,0,0,0,0,0,0,0,0,0,0,24,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,225,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,7,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,255,255,255,255,127,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,63,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,127,0,255,255,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,0,0,8,0,0,0,8,0,0,32,0,0,0,32,0,0,128,0,0,0,128,0,0,0,2,0,0,0,2,0,0,8,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,255,255,255,255,255,15,255,255,255,255,255,255,255,255,255,255,255,255,15,0,255,127,254,127,254,255,254,255,0,0,0,0,255,7,255,255,255,127,255,255,255,255,255,255,255,15,255,255,255,255,255,7,0,0,0,0,0,0,0,0,192,255,255,255,7,0,255,255,255,255,255,7,255,1,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,255,255,255,255,1,0,191,255,255,255,255,255,255,255,255,31,255,255,15,0,255,255,255,255,223,7,0,0,255,255,1,0,255,255,255,255,255,255,255,127,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,30,255,255,255,255,255,255,255,63,15,0,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,255,255,255,255,255,255,255,255,225,255,0,0,0,0,0,0,255,255,255,255,255,255,255,255,63,0,0,0,0,0,0,0,255,255,255,255,255,255,255,255,255,255,255,255,255,255,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,97,108,110,117,109,0,97,108,112,104,97,0,98,108,97,110,107,0,99,110,116,114,108,0,100,105,103,105,116,0,103,114,97,112,104,0,108,111,119,101,114,0,112,114,105,110,116,0,112,117,110,99,116,0,115,112,97,99,101,0,117,112,112,101,114,0,120,100,105,103,105,116,0,9,0,10,0,13,0,12,0,7,0,27,0,91,91,58,97,108,110,117,109,58,93,95,93,0,91,94,91,58,97,108,110,117,109,58,93,95,93,0,91,91,58,115,112,97,99,101,58,93,93,0,91,94,91,58,115,112,97,99,101,58,93,93,0,91,91,58,100,105,103,105,116,58,93,93,0,91,94,91,58,100,105,103,105,116,58,93,93,0,37,100,46,37,100,46,37,100,46,37,100,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+20480);





/* no memory initializer */
var tempDoublePtr = STATICTOP; STATICTOP += 16;

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

   
  Module["_i64Add"] = _i64Add;

   
  Module["_memset"] = _memset;

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  function ___setErrNo(value) {
      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var isPosixPlatform = (process.platform != 'win32'); // Node doesn't offer a direct check, so test by exclusion
  
              var fd = process.stdin.fd;
              if (isPosixPlatform) {
                // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
                var usingDevice = false;
                try {
                  fd = fs.openSync('/dev/stdin', 'r');
                  usingDevice = true;
                } catch (e) {}
              }
  
              try {
                bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
              } catch(e) {
                // Cross-platform differences: on Windows, reading EOF throws an exception, but on other OSes,
                // reading EOF returns 0. Uniformize behavior by treating the EOF exception to return 0.
                if (e.toString().indexOf('EOF') != -1) bytesRead = 0;
                else throw e;
              }
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        if (!req) {
          return callback("Unable to connect to IndexedDB");
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0x200000 /*O_PATH*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x800 /*O_NONBLOCK*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x8000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        flags &= ~0x80000 /*O_CLOEXEC*/; // Some applications may pass it; it makes no sense for a single process.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            // Issue 4254: Using curr as a node name will prevent the node
            // from being found in FS.nameTable when FS.open is called on
            // a path which holds a child of this node,
            // given that all FS functions assume node names
            // are just their corresponding parts within their given path,
            // rather than incremental aggregates which include their parent's
            // directories.
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=STATICTOP; STATICTOP += 16;;
  
  var _stdout=STATICTOP; STATICTOP += 16;;
  
  var _stderr=STATICTOP; STATICTOP += 16;;var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,syncFSRequests:0,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if (FS.flagsToPermissionString(flags) !== 'r' || // opening for write
              (flags & 512)) { // TODO: check for O_SEARCH? (== search for dir only)
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        FS.syncFSRequests++;
  
        if (FS.syncFSRequests > 1) {
          console.log('warning: ' + FS.syncFSRequests + ' FS.syncfs operations in flight at once, probably just doing extra work');
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function doCallback(err) {
          assert(FS.syncFSRequests > 0);
          FS.syncFSRequests--;
          return callback(err);
        }
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return doCallback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            doCallback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // According to POSIX, we should map EISDIR to EPERM, but
          // we instead do what Linux does (and we must, as we use
          // the musl linux libc).
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 511 /* 0777 */, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
  
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          if (usesGzip || !datalength) {
            // if the server uses gzip or doesn't supply the length, we have to download the whole file to get the (uncompressed) length
            chunkSize = datalength = 1; // this will force getter(0)/doXHR do download the whole file
            datalength = this.getter(0).length;
            chunkSize = datalength;
            console.log("LazyFiles on gzip forces download of the whole file when length is accessed");
          }
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperties(lazyArray, {
            length: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._length;
              }
            },
            chunkSize: {
              get: function() {
                if(!this.lengthKnown) {
                  this.cacheLength();
                }
                return this._chunkSize;
              }
            }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperties(node, {
          usedBytes: {
            get: function() { return this.contents.length; }
          }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init(); // XXX perhaps this method should move onto Browser?
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        HEAP32[((buf)>>2)]=stat.dev;
        HEAP32[(((buf)+(4))>>2)]=0;
        HEAP32[(((buf)+(8))>>2)]=stat.ino;
        HEAP32[(((buf)+(12))>>2)]=stat.mode;
        HEAP32[(((buf)+(16))>>2)]=stat.nlink;
        HEAP32[(((buf)+(20))>>2)]=stat.uid;
        HEAP32[(((buf)+(24))>>2)]=stat.gid;
        HEAP32[(((buf)+(28))>>2)]=stat.rdev;
        HEAP32[(((buf)+(32))>>2)]=0;
        HEAP32[(((buf)+(36))>>2)]=stat.size;
        HEAP32[(((buf)+(40))>>2)]=4096;
        HEAP32[(((buf)+(44))>>2)]=stat.blocks;
        HEAP32[(((buf)+(48))>>2)]=(stat.atime.getTime() / 1000)|0;
        HEAP32[(((buf)+(52))>>2)]=0;
        HEAP32[(((buf)+(56))>>2)]=(stat.mtime.getTime() / 1000)|0;
        HEAP32[(((buf)+(60))>>2)]=0;
        HEAP32[(((buf)+(64))>>2)]=(stat.ctime.getTime() / 1000)|0;
        HEAP32[(((buf)+(68))>>2)]=0;
        HEAP32[(((buf)+(72))>>2)]=stat.ino;
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
  
        var len = Math.min(bufsize, lengthBytesUTF8(ret));
        var endChar = HEAP8[buf+len];
        stringToUTF8(ret, buf, bufsize+1);
        // readlink is one of the rare functions that write out a C string, but does never append a null to the output buffer(!)
        // stringToUTF8() always appends a null byte, so restore the character under the null byte after the write.
        HEAP8[buf+len] = endChar;
  
        return len;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = HEAP32[(((iov)+(i*8))>>2)];
          var len = HEAP32[(((iov)+(i*8 + 4))>>2)];
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall39(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // mkdir
      var path = SYSCALLS.getStr(), mode = SYSCALLS.get();
      return SYSCALLS.doMkdir(path, mode);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _abort() {
      Module['abort']();
    }

  function ___syscall195(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_stat64
      var path = SYSCALLS.getStr(), buf = SYSCALLS.get();
      return SYSCALLS.doStat(FS.stat, path, buf);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___lock() {}

  function ___unlock() {}

  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      if ((ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && self['performance'] && self['performance']['now']) {
        var start = self['performance']['now']();
        while (self['performance']['now']() - start < msec) {
          // Do nothing.
        }
      } else {
        var start = Date.now();
        while (Date.now() - start < msec) {
          // Do nothing.
        }
      }
      return 0;
    }
  Module["_usleep"] = _usleep;function _nanosleep(rqtp, rmtp) {
      // int nanosleep(const struct timespec  *rqtp, struct timespec *rmtp);
      var seconds = HEAP32[((rqtp)>>2)];
      var nanoseconds = HEAP32[(((rqtp)+(4))>>2)];
      if (rmtp !== 0) {
        HEAP32[((rmtp)>>2)]=0;
        HEAP32[(((rmtp)+(4))>>2)]=0;
      }
      return _usleep((seconds * 1e6) + (nanoseconds / 1000));
    }

  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }function _inet_addr(ptr) {
      var addr = __inet_pton4_raw(Pointer_stringify(ptr));
      if (addr === null) {
        return -1;
      }
      return addr;
    }

  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy;

  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
  
      var tm_zone = HEAP32[(((tm)+(40))>>2)];
  
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)],
        tm_gmtoff: HEAP32[(((tm)+(36))>>2)],
        tm_zone: tm_zone ? Pointer_stringify(tm_zone) : ''
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S'                  // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls((year/100)|0,2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          var twelveHour = date.tm_hour;
          if (twelveHour == 0) twelveHour = 12;
          else if (twelveHour > 12) twelveHour -= 12;
          return leadingNulls(twelveHour, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour >= 0 && date.tm_hour < 12) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ).
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich).
          var off = date.tm_gmtoff;
          var ahead = off >= 0;
          off = Math.abs(off) / 60;
          // convert from minutes into hhmm format (which means 60 minutes = 100 units)
          off = (off / 60)*100 + (off % 60);
          return (ahead ? '+' : '-') + String("0000" + off).slice(-4);
        },
        '%Z': function(date) {
          return date.tm_zone;
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }

  
  var ___tm_formatted=STATICTOP; STATICTOP += 48;;
  
  
  
  
  var _tzname=STATICTOP; STATICTOP += 16;;
  
  var _daylight=STATICTOP; STATICTOP += 16;;
  
  var _timezone=STATICTOP; STATICTOP += 16;;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (_tzset.called) return;
      _tzset.called = true;
  
      HEAP32[((_timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60;
  
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((_daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset());
  
      function extractZone(date) {
        var match = date.toTimeString().match(/\(([A-Za-z ]+)\)$/);
        return match ? match[1] : "GMT";
      };
      var winterName = extractZone(winter);
      var summerName = extractZone(summer);
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      if (summer.getTimezoneOffset() < winter.getTimezoneOffset()) {
        // Northern hemisphere
        HEAP32[((_tzname)>>2)]=winterNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=summerNamePtr;
      } else {
        HEAP32[((_tzname)>>2)]=summerNamePtr;
        HEAP32[(((_tzname)+(4))>>2)]=winterNamePtr;
      }
    }function _mktime(tmPtr) {
      _tzset();
      var date = new Date(HEAP32[(((tmPtr)+(20))>>2)] + 1900,
                          HEAP32[(((tmPtr)+(16))>>2)],
                          HEAP32[(((tmPtr)+(12))>>2)],
                          HEAP32[(((tmPtr)+(8))>>2)],
                          HEAP32[(((tmPtr)+(4))>>2)],
                          HEAP32[((tmPtr)>>2)],
                          0);
  
      // There's an ambiguous hour when the time goes back; the tm_isdst field is
      // used to disambiguate it.  Date() basically guesses, so we fix it up if it
      // guessed wrong, or fill in tm_isdst with the guess if it's -1.
      var dst = HEAP32[(((tmPtr)+(32))>>2)];
      var guessedOffset = date.getTimezoneOffset();
      var start = new Date(date.getFullYear(), 0, 1);
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dstOffset = Math.min(winterOffset, summerOffset); // DST is in December in South
      if (dst < 0) {
        HEAP32[(((tmPtr)+(32))>>2)]=Number(dstOffset == guessedOffset);
      } else if ((dst > 0) != (dstOffset == guessedOffset)) {
        var nonDstOffset = Math.max(winterOffset, summerOffset);
        var trueOffset = dst > 0 ? dstOffset : nonDstOffset;
        // Don't try setMinutes(date.getMinutes() + ...) -- it's messed up.
        date.setTime(date.getTime() + (trueOffset - guessedOffset)*60000);
      }
  
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
  
      return (date.getTime() / 1000)|0;
    }function _asctime_r(tmPtr, buf) {
      var date = {
        tm_sec: HEAP32[((tmPtr)>>2)],
        tm_min: HEAP32[(((tmPtr)+(4))>>2)],
        tm_hour: HEAP32[(((tmPtr)+(8))>>2)],
        tm_mday: HEAP32[(((tmPtr)+(12))>>2)],
        tm_mon: HEAP32[(((tmPtr)+(16))>>2)],
        tm_year: HEAP32[(((tmPtr)+(20))>>2)],
        tm_wday: HEAP32[(((tmPtr)+(24))>>2)]
      };
      var days = [ "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" ];
      var months = [ "Jan", "Feb", "Mar", "Apr", "May", "Jun",
                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec" ];
      var s = days[date.tm_wday] + ' ' + months[date.tm_mon] +
          (date.tm_mday < 10 ? '  ' : ' ') + date.tm_mday +
          (date.tm_hour < 10 ? ' 0' : ' ') + date.tm_hour +
          (date.tm_min < 10 ? ':0' : ':') + date.tm_min +
          (date.tm_sec < 10 ? ':0' : ':') + date.tm_sec +
          ' ' + (1900 + date.tm_year) + "\n";
  
      // asctime_r is specced to behave in an undefined manner if the algorithm would attempt
      // to write out more than 26 bytes (including the null terminator).
      // See http://pubs.opengroup.org/onlinepubs/9699919799/functions/asctime.html
      // Our undefined behavior is to truncate the write to at most 26 bytes, including null terminator.
      stringToUTF8(s, buf, 26);
      return buf;
    }function _asctime(tmPtr) {
      return _asctime_r(tmPtr, ___tm_formatted);
    }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          HEAP32[((argp)>>2)]=0;
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  var ___tm_current=STATICTOP; STATICTOP += 48;;
  
  
  var ___tm_timezone=allocate(intArrayFromString("GMT"), "i8", ALLOC_STATIC);function _localtime_r(time, tmPtr) {
      _tzset();
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[((tmPtr)>>2)]=date.getSeconds();
      HEAP32[(((tmPtr)+(4))>>2)]=date.getMinutes();
      HEAP32[(((tmPtr)+(8))>>2)]=date.getHours();
      HEAP32[(((tmPtr)+(12))>>2)]=date.getDate();
      HEAP32[(((tmPtr)+(16))>>2)]=date.getMonth();
      HEAP32[(((tmPtr)+(20))>>2)]=date.getFullYear()-1900;
      HEAP32[(((tmPtr)+(24))>>2)]=date.getDay();
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = ((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24))|0;
      HEAP32[(((tmPtr)+(28))>>2)]=yday;
      HEAP32[(((tmPtr)+(36))>>2)]=-(date.getTimezoneOffset() * 60);
  
      // DST is in December in South
      var summerOffset = new Date(2000, 6, 1).getTimezoneOffset();
      var winterOffset = start.getTimezoneOffset();
      var dst = (date.getTimezoneOffset() == Math.min(winterOffset, summerOffset))|0;
      HEAP32[(((tmPtr)+(32))>>2)]=dst;
  
      var zonePtr = HEAP32[(((_tzname)+(dst ? Runtime.QUANTUM_SIZE : 0))>>2)];
      HEAP32[(((tmPtr)+(40))>>2)]=zonePtr;
  
      return tmPtr;
    }function _localtime(time) {
      return _localtime_r(time, ___tm_current);
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  
  
  
  
  var _environ=STATICTOP; STATICTOP += 16;;var ___environ=_environ;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (!___buildEnvironment.called) {
        ___buildEnvironment.called = true;
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = ENV['LOGNAME'] = 'web_user';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/web_user';
        ENV['LANG'] = 'C';
        ENV['_'] = Module['thisProgram'];
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr;
        HEAP32[((_environ)>>2)]=envPtr;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        writeAsciiToMemory(line, poolPtr);
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  
  
  var _htons=undefined;
  Module["_htons"] = _htons;function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res !== null) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res !== null) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};function _gethostbyname(name) {
      name = Pointer_stringify(name);
  
      // generate hostent
      var ret = _malloc(20); // XXX possibly leaked, as are others here
      var nameBuf = _malloc(name.length+1);
      stringToUTF8(name, nameBuf, name.length+1);
      HEAP32[((ret)>>2)]=nameBuf;
      var aliasesBuf = _malloc(4);
      HEAP32[((aliasesBuf)>>2)]=0;
      HEAP32[(((ret)+(4))>>2)]=aliasesBuf;
      var afinet = 2;
      HEAP32[(((ret)+(8))>>2)]=afinet;
      HEAP32[(((ret)+(12))>>2)]=4;
      var addrListBuf = _malloc(12);
      HEAP32[((addrListBuf)>>2)]=addrListBuf+8;
      HEAP32[(((addrListBuf)+(4))>>2)]=0;
      HEAP32[(((addrListBuf)+(8))>>2)]=__inet_pton4_raw(DNS.lookup_name(name));
      HEAP32[(((ret)+(16))>>2)]=addrListBuf;
      return ret;
    }

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function ___syscall183(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // getcwd
      var buf = SYSCALLS.get(), size = SYSCALLS.get();
      if (size === 0) return -ERRNO_CODES.EINVAL;
      var cwd = FS.cwd();
      if (size < cwd.length + 1) return -ERRNO_CODES.ERANGE;
      writeAsciiToMemory(cwd, buf);
      return buf;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall12(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // chdir
      var path = SYSCALLS.getStr();
      FS.chdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall5(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // open
      var pathname = SYSCALLS.getStr(), flags = SYSCALLS.get(), mode = SYSCALLS.get() // optional TODO
      var stream = FS.open(pathname, flags, mode);
      return stream.fd;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall4(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // write
      var stream = SYSCALLS.getStreamFromFD(), buf = SYSCALLS.get(), count = SYSCALLS.get();
      return FS.write(stream, HEAP8,buf, count);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  
  
  var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_STATIC); 
  Module["_llvm_cttz_i32"] = _llvm_cttz_i32; 
  Module["___udivmoddi4"] = ___udivmoddi4; 
  Module["___udivdi3"] = ___udivdi3;

  
   
  Module["___muldsi3"] = ___muldsi3; 
  Module["___muldi3"] = ___muldi3;

  var _llvm_pow_f64=Math_pow;

   
  Module["_sbrk"] = _sbrk;

  
  var SOCKFS={mount:function (mount) {
        // If Module['websocket'] has already been defined (e.g. for configuring
        // the subprotocol/url) use that, if not initialise it to a new object.
        Module['websocket'] = (Module['websocket'] && 
                               ('object' === typeof Module['websocket'])) ? Module['websocket'] : {};
  
        // Add the Event registration mechanism to the exported websocket configuration
        // object so we can register network callbacks from native JavaScript too.
        // For more documentation see system/include/emscripten/emscripten.h
        Module['websocket']._callbacks = {};
        Module['websocket']['on'] = function(event, callback) {
  	    if ('function' === typeof callback) {
  		  this._callbacks[event] = callback;
          }
  	    return this;
        };
  
        Module['websocket'].emit = function(event, param) {
  	    if ('function' === typeof this._callbacks[event]) {
  		  this._callbacks[event].call(this, param);
          }
        };
  
        // If debug is enabled register simple default logging callbacks for each Event.
  
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          error: null, // Used in getsockopt for SOL_SOCKET/SO_ERROR test
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces '//' comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the '#' for '//' again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                var parts = addr.split('/');
                url = url + parts[0] + ":" + port + "/" + parts.slice(1).join('/');
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocketConstructor;
              if (ENVIRONMENT_IS_NODE) {
                WebSocketConstructor = require('ws');
              } else if (ENVIRONMENT_IS_WEB) {
                WebSocketConstructor = window['WebSocket'];
              } else {
                WebSocketConstructor = WebSocket;
              }
              ws = new WebSocketConstructor(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
  
            Module['websocket'].emit('open', sock.stream.fd);
  
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
  
            // An empty ArrayBuffer will emit a pseudo disconnect event
            // as recv/recvmsg will return zero which indicates that a socket
            // has performed a shutdown although the connection has not been disconnected yet.
            if (data.byteLength == 0) {
              return;
            }
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
            Module['websocket'].emit('message', sock.stream.fd);
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('close', function() {
              Module['websocket'].emit('close', sock.stream.fd);
            });
            peer.socket.on('error', function(error) {
              // Although the ws library may pass errors that may be more descriptive than
              // ECONNREFUSED they are not necessarily the expected error code e.g. 
              // ENOTFOUND on getaddrinfo seems to be node.js specific, so using ECONNREFUSED
              // is still probably the most useful thing to do.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onclose = function() {
              Module['websocket'].emit('close', sock.stream.fd);
            };
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
            peer.socket.onerror = function(error) {
              // The WebSocket spec only allows a 'simple event' to be thrown on error,
              // so we only really know as much as ECONNREFUSED.
              sock.error = ERRNO_CODES.ECONNREFUSED; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
              Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'ECONNREFUSED: Connection refused']);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port;
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
          Module['websocket'].emit('listen', sock.stream.fd); // Send Event with listen fd.
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
              Module['websocket'].emit('connection', newsock.stream.fd);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
              Module['websocket'].emit('connection', sock.stream.fd);
            }
          });
          sock.server.on('closed', function() {
            Module['websocket'].emit('close', sock.stream.fd);
            sock.server = null;
          });
          sock.server.on('error', function(error) {
            // Although the ws library may pass errors that may be more descriptive than
            // ECONNREFUSED they are not necessarily the expected error code e.g. 
            // ENOTFOUND on getaddrinfo seems to be node.js specific, so using EHOSTUNREACH
            // is still probably the most useful thing to do. This error shouldn't
            // occur in a well written app as errors should get trapped in the compiled
            // app's own getaddrinfo call.
            sock.error = ERRNO_CODES.EHOSTUNREACH; // Used in getsockopt for SOL_SOCKET/SO_ERROR test.
            Module['websocket'].emit('error', [sock.stream.fd, sock.error, 'EHOSTUNREACH: Host is unreachable']);
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }
  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          HEAP32[(((sa)+(4))>>2)]=0;
          HEAP32[(((sa)+(24))>>2)]=0;
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }function ___syscall102(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // socketcall
      var call = SYSCALLS.get(), socketvararg = SYSCALLS.get();
      // socketcalls pass the rest of the arguments in a struct
      SYSCALLS.varargs = socketvararg;
      switch (call) {
        case 1: { // socket
          var domain = SYSCALLS.get(), type = SYSCALLS.get(), protocol = SYSCALLS.get();
          var sock = SOCKFS.createSocket(domain, type, protocol);
          assert(sock.stream.fd < 64); // XXX ? select() assumes socket fd values are in 0..63
          return sock.stream.fd;
        }
        case 2: { // bind
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.bind(sock, info.addr, info.port);
          return 0;
        }
        case 3: { // connect
          var sock = SYSCALLS.getSocketFromFD(), info = SYSCALLS.getSocketAddress();
          sock.sock_ops.connect(sock, info.addr, info.port);
          return 0;
        }
        case 4: { // listen
          var sock = SYSCALLS.getSocketFromFD(), backlog = SYSCALLS.get();
          sock.sock_ops.listen(sock, backlog);
          return 0;
        }
        case 5: { // accept
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var newsock = sock.sock_ops.accept(sock);
          if (addr) {
            var res = __write_sockaddr(addr, newsock.family, DNS.lookup_name(newsock.daddr), newsock.dport);
            assert(!res.errno);
          }
          return newsock.stream.fd;
        }
        case 6: { // getsockname
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          // TODO: sock.saddr should never be undefined, see TODO in websocket_sock_ops.getname
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.saddr || '0.0.0.0'), sock.sport);
          assert(!res.errno);
          return 0;
        }
        case 7: { // getpeername
          var sock = SYSCALLS.getSocketFromFD(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          if (!sock.daddr) {
            return -ERRNO_CODES.ENOTCONN; // The socket is not connected.
          }
          var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(sock.daddr), sock.dport);
          assert(!res.errno);
          return 0;
        }
        case 11: { // sendto
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), length = SYSCALLS.get(), flags = SYSCALLS.get(), dest = SYSCALLS.getSocketAddress(true);
          if (!dest) {
            // send, no address provided
            return FS.write(sock.stream, HEAP8,message, length);
          } else {
            // sendto an address
            return sock.sock_ops.sendmsg(sock, HEAP8,message, length, dest.addr, dest.port);
          }
        }
        case 12: { // recvfrom
          var sock = SYSCALLS.getSocketFromFD(), buf = SYSCALLS.get(), len = SYSCALLS.get(), flags = SYSCALLS.get(), addr = SYSCALLS.get(), addrlen = SYSCALLS.get();
          var msg = sock.sock_ops.recvmsg(sock, len);
          if (!msg) return 0; // socket is closed
          if (addr) {
            var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          HEAPU8.set(msg.buffer, buf);
          return msg.buffer.byteLength;
        }
        case 14: { // setsockopt
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 15: { // getsockopt
          var sock = SYSCALLS.getSocketFromFD(), level = SYSCALLS.get(), optname = SYSCALLS.get(), optval = SYSCALLS.get(), optlen = SYSCALLS.get();
          // Minimal getsockopt aimed at resolving https://github.com/kripken/emscripten/issues/2211
          // so only supports SOL_SOCKET with SO_ERROR.
          if (level === 1) {
            if (optname === 4) {
              HEAP32[((optval)>>2)]=sock.error;
              HEAP32[((optlen)>>2)]=4;
              sock.error = null; // Clear the error (The SO_ERROR option obtains and then clears this field).
              return 0;
            }
          }
          return -ERRNO_CODES.ENOPROTOOPT; // The option is unknown at the level indicated.
        }
        case 16: { // sendmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // read the address and port to send to
          var addr, port;
          var name = HEAP32[((message)>>2)];
          var namelen = HEAP32[(((message)+(4))>>2)];
          if (name) {
            var info = __read_sockaddr(name, namelen);
            if (info.errno) return -info.errno;
            port = info.port;
            addr = DNS.lookup_addr(info.addr) || info.addr;
          }
          // concatenate scatter-gather arrays into one message buffer
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          var view = new Uint8Array(total);
          var offset = 0;
          for (var i = 0; i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            for (var j = 0; j < iovlen; j++) {  
              view[offset++] = HEAP8[(((iovbase)+(j))>>0)];
            }
          }
          // write the buffer
          return sock.sock_ops.sendmsg(sock, view, 0, total, addr, port);
        }
        case 17: { // recvmsg
          var sock = SYSCALLS.getSocketFromFD(), message = SYSCALLS.get(), flags = SYSCALLS.get();
          var iov = HEAP32[(((message)+(8))>>2)];
          var num = HEAP32[(((message)+(12))>>2)];
          // get the total amount of data we can read across all arrays
          var total = 0;
          for (var i = 0; i < num; i++) {
            total += HEAP32[(((iov)+((8 * i) + 4))>>2)];
          }
          // try to read total data
          var msg = sock.sock_ops.recvmsg(sock, total);
          if (!msg) return 0; // socket is closed
  
          // TODO honor flags:
          // MSG_OOB
          // Requests out-of-band data. The significance and semantics of out-of-band data are protocol-specific.
          // MSG_PEEK
          // Peeks at the incoming message.
          // MSG_WAITALL
          // Requests that the function block until the full amount of data requested can be returned. The function may return a smaller amount of data if a signal is caught, if the connection is terminated, if MSG_PEEK was specified, or if an error is pending for the socket.
  
          // write the source address out
          var name = HEAP32[((message)>>2)];
          if (name) {
            var res = __write_sockaddr(name, sock.family, DNS.lookup_name(msg.addr), msg.port);
            assert(!res.errno);
          }
          // write the buffer out to the scatter-gather arrays
          var bytesRead = 0;
          var bytesRemaining = msg.buffer.byteLength;
          for (var i = 0; bytesRemaining > 0 && i < num; i++) {
            var iovbase = HEAP32[(((iov)+((8 * i) + 0))>>2)];
            var iovlen = HEAP32[(((iov)+((8 * i) + 4))>>2)];
            if (!iovlen) {
              continue;
            }
            var length = Math.min(iovlen, bytesRemaining);
            var buf = msg.buffer.subarray(bytesRead, bytesRead + length);
            HEAPU8.set(buf, iovbase + bytesRead);
            bytesRead += length;
            bytesRemaining -= length;
          }
  
          // TODO set msghdr.msg_flags
          // MSG_EOR
          // End of record was received (if supported by the protocol).
          // MSG_OOB
          // Out-of-band data was received.
          // MSG_TRUNC
          // Normal data was truncated.
          // MSG_CTRUNC
  
          return bytesRead;
        }
        default: abort('unsupported socketcall syscall ' + call);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["___uremdi3"] = ___uremdi3;

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall40(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // rmdir
      var path = SYSCALLS.getStr();
      FS.rmdir(path);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_llvm_bswap_i16"] = _llvm_bswap_i16;

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  function ___syscall142(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // newselect
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      var nfds = SYSCALLS.get(), readfds = SYSCALLS.get(), writefds = SYSCALLS.get(), exceptfds = SYSCALLS.get(), timeout = SYSCALLS.get();
  
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits // TODO: this could be 1024 based on current musl headers
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      function check(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      }
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(check(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
  
        var flags = SYSCALLS.DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && check(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && check(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && check(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_pthread_self"] = _pthread_self;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      HEAP32[((result)>>2)]=stream.position;
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall145(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // readv
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doReadv(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall221(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // fcntl64
      var stream = SYSCALLS.getStreamFromFD(), cmd = SYSCALLS.get();
      switch (cmd) {
        case 0: {
          var arg = SYSCALLS.get();
          if (arg < 0) {
            return -ERRNO_CODES.EINVAL;
          }
          var newStream;
          newStream = FS.open(stream.path, stream.flags, 0, arg);
          return newStream.fd;
        }
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4: {
          var arg = SYSCALLS.get();
          stream.flags |= arg;
          return 0;
        }
        case 12:
        case 12: {
          var arg = SYSCALLS.get();
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        }
        case 13:
        case 14:
        case 13:
        case 14:
          return 0; // Pretend that the locking is successful.
        case 16:
        case 8:
          return -ERRNO_CODES.EINVAL; // These are for sockets. We don't have them fully implemented yet.
        case 9:
          // musl trusts getown return values, due to a bug where they must be, as they overlap with errors. just return -1 here, so fnctl() returns that, and we set errno ourselves.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default: {
          return -ERRNO_CODES.EINVAL;
        }
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall220(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // SYS_getdents64
      var stream = SYSCALLS.getStreamFromFD(), dirp = SYSCALLS.get(), count = SYSCALLS.get();
      if (!stream.getdents) {
        stream.getdents = FS.readdir(stream.path);
      }
      var pos = 0;
      while (stream.getdents.length > 0 && pos + 268 < count) {
        var id;
        var type;
        var name = stream.getdents.pop();
        assert(name.length < 256); // limit of dirent struct
        if (name[0] === '.') {
          id = 1;
          type = 4; // DT_DIR
        } else {
          var child = FS.lookupNode(stream.node, name);
          id = child.id;
          type = FS.isChrdev(child.mode) ? 2 :  // DT_CHR, character device.
                 FS.isDir(child.mode) ? 4 :     // DT_DIR, directory.
                 FS.isLink(child.mode) ? 10 :   // DT_LNK, symbolic link.
                 8;                             // DT_REG, regular file.
        }
        HEAP32[((dirp + pos)>>2)]=id;
        HEAP32[(((dirp + pos)+(4))>>2)]=stream.position;
        HEAP16[(((dirp + pos)+(8))>>1)]=268;
        HEAP8[(((dirp + pos)+(10))>>0)]=type;
        for (var i = 0; i < name.length; i++) {
          HEAP8[(((dirp + pos)+(11 + i))>>0)]=name.charCodeAt(i);
        }
        HEAP8[(((dirp + pos)+(11 + i))>>0)]=0;
        pos += 268;
      }
      return pos;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });;
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); };
___buildEnvironment(ENV);;
__ATINIT__.push(function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); });;
DYNAMICTOP_PTR = allocate(1, "i32", ALLOC_STATIC);

STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = Runtime.alignMemory(STACK_MAX);

HEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;

staticSealed = true; // seal the static portion of memory

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "enlargeMemory": enlargeMemory, "getTotalMemory": getTotalMemory, "abortOnCannotGrowMemory": abortOnCannotGrowMemory, "abortStackOverflow": abortStackOverflow, "nullFunc_ii": nullFunc_ii, "nullFunc_iiii": nullFunc_iiii, "nullFunc_iii": nullFunc_iii, "nullFunc_vi": nullFunc_vi, "invoke_ii": invoke_ii, "invoke_iiii": invoke_iiii, "invoke_iii": invoke_iii, "invoke_vi": invoke_vi, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___syscall221": ___syscall221, "__inet_pton4_raw": __inet_pton4_raw, "__inet_ntop6_raw": __inet_ntop6_raw, "___syscall102": ___syscall102, "_llvm_pow_f64": _llvm_pow_f64, "__inet_ntop4_raw": __inet_ntop4_raw, "___syscall40": ___syscall40, "_inet_addr": _inet_addr, "_pthread_cleanup_push": _pthread_cleanup_push, "__inet_pton6_raw": __inet_pton6_raw, "__read_sockaddr": __read_sockaddr, "_usleep": _usleep, "___buildEnvironment": ___buildEnvironment, "__isLeapYear": __isLeapYear, "__addDays": __addDays, "_localtime_r": _localtime_r, "_tzset": _tzset, "___setErrNo": ___setErrNo, "_emscripten_memcpy_big": _emscripten_memcpy_big, "__exit": __exit, "_mktime": _mktime, "_strftime": _strftime, "_nanosleep": _nanosleep, "___syscall195": ___syscall195, "_abort": _abort, "_exit": _exit, "_asctime_r": _asctime_r, "_getenv": _getenv, "___syscall54": ___syscall54, "___unlock": ___unlock, "__write_sockaddr": __write_sockaddr, "___syscall39": ___syscall39, "___syscall12": ___syscall12, "___syscall220": ___syscall220, "_gethostbyname": _gethostbyname, "_asctime": _asctime, "___lock": ___lock, "__arraySum": __arraySum, "___syscall6": ___syscall6, "___syscall5": ___syscall5, "___syscall183": ___syscall183, "_time": _time, "___syscall140": ___syscall140, "_localtime": _localtime, "___syscall142": ___syscall142, "___syscall145": ___syscall145, "___syscall146": ___syscall146, "___syscall4": ___syscall4, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "DYNAMICTOP_PTR": DYNAMICTOP_PTR, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var HEAP8 = new global.Int8Array(buffer);
  var HEAP16 = new global.Int16Array(buffer);
  var HEAP32 = new global.Int32Array(buffer);
  var HEAPU8 = new global.Uint8Array(buffer);
  var HEAPU16 = new global.Uint16Array(buffer);
  var HEAPU32 = new global.Uint32Array(buffer);
  var HEAPF32 = new global.Float32Array(buffer);
  var HEAPF64 = new global.Float64Array(buffer);


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var DYNAMICTOP_PTR=env.DYNAMICTOP_PTR|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;
  var tempRet0 = 0;

  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_max=global.Math.max;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var enlargeMemory=env.enlargeMemory;
  var getTotalMemory=env.getTotalMemory;
  var abortOnCannotGrowMemory=env.abortOnCannotGrowMemory;
  var abortStackOverflow=env.abortStackOverflow;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_vi=env.nullFunc_vi;
  var invoke_ii=env.invoke_ii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_iii=env.invoke_iii;
  var invoke_vi=env.invoke_vi;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___syscall221=env.___syscall221;
  var __inet_pton4_raw=env.__inet_pton4_raw;
  var __inet_ntop6_raw=env.__inet_ntop6_raw;
  var ___syscall102=env.___syscall102;
  var _llvm_pow_f64=env._llvm_pow_f64;
  var __inet_ntop4_raw=env.__inet_ntop4_raw;
  var ___syscall40=env.___syscall40;
  var _inet_addr=env._inet_addr;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var __inet_pton6_raw=env.__inet_pton6_raw;
  var __read_sockaddr=env.__read_sockaddr;
  var _usleep=env._usleep;
  var ___buildEnvironment=env.___buildEnvironment;
  var __isLeapYear=env.__isLeapYear;
  var __addDays=env.__addDays;
  var _localtime_r=env._localtime_r;
  var _tzset=env._tzset;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var __exit=env.__exit;
  var _mktime=env._mktime;
  var _strftime=env._strftime;
  var _nanosleep=env._nanosleep;
  var ___syscall195=env.___syscall195;
  var _abort=env._abort;
  var _exit=env._exit;
  var _asctime_r=env._asctime_r;
  var _getenv=env._getenv;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var __write_sockaddr=env.__write_sockaddr;
  var ___syscall39=env.___syscall39;
  var ___syscall12=env.___syscall12;
  var ___syscall220=env.___syscall220;
  var _gethostbyname=env._gethostbyname;
  var _asctime=env._asctime;
  var ___lock=env.___lock;
  var __arraySum=env.__arraySum;
  var ___syscall6=env.___syscall6;
  var ___syscall5=env.___syscall5;
  var ___syscall183=env.___syscall183;
  var _time=env._time;
  var ___syscall140=env.___syscall140;
  var _localtime=env._localtime;
  var ___syscall142=env.___syscall142;
  var ___syscall145=env.___syscall145;
  var ___syscall146=env.___syscall146;
  var ___syscall4=env.___syscall4;
  var tempFloat = 0.0;

// EMSCRIPTEN_START_FUNCS

function stackAlloc(size) {
  size = size|0;
  var ret = 0;
  ret = STACKTOP;
  STACKTOP = (STACKTOP + size)|0;
  STACKTOP = (STACKTOP + 15)&-16;
  if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(size|0);

  return ret|0;
}
function stackSave() {
  return STACKTOP|0;
}
function stackRestore(top) {
  top = top|0;
  STACKTOP = top;
}
function establishStackSpace(stackBase, stackMax) {
  stackBase = stackBase|0;
  stackMax = stackMax|0;
  STACKTOP = stackBase;
  STACK_MAX = stackMax;
}

function setThrew(threw, value) {
  threw = threw|0;
  value = value|0;
  if ((__THREW__|0) == 0) {
    __THREW__ = threw;
    threwValue = value;
  }
}

function setTempRet0(value) {
  value = value|0;
  tempRet0 = value;
}
function getTempRet0() {
  return tempRet0|0;
}

function _Error($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0;
 var $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr12 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer13 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 48|0;
 $3 = sp + 72|0;
 $1 = $0;
 _memset(($3|0),0,256)|0;
 $4 = (_strlen(127780)|0);
 $5 = ($4>>>0)>(0);
 $6 = HEAP32[35]|0;
 $7 = (_LineCounter()|0);
 if ($5) {
  HEAP32[$vararg_buffer>>2] = 127780;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  (_fprintf($6,1995,$vararg_buffer)|0);
  $8 = HEAP32[35]|0;
  HEAP32[$vararg_buffer2>>2] = 128080;
  $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
  HEAP32[$vararg_ptr5>>2] = (31976);
  (_fprintf($8,2037,$vararg_buffer2)|0);
 } else {
  HEAP32[$vararg_buffer6>>2] = $7;
  (_fprintf($6,2070,$vararg_buffer6)|0);
  $9 = HEAP32[35]|0;
  HEAP32[$vararg_buffer9>>2] = 128080;
  $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
  HEAP32[$vararg_ptr12>>2] = (31976);
  (_fprintf($9,2037,$vararg_buffer9)|0);
 }
 HEAP32[$2>>2] = $varargs;
 $10 = HEAP32[35]|0;
 $11 = $1;
 (_vfprintf($10,$11,$2)|0);
 $12 = HEAP32[35]|0;
 (_fprintf($12,28210,$vararg_buffer13)|0);
 $13 = HEAP32[(73800)>>2]|0;
 $14 = ($13|0)!=(0);
 if ($14) {
  $15 = HEAP32[(73796)>>2]|0;
  HEAP32[$vararg_buffer15>>2] = $15;
  (_printf(2114,$vararg_buffer15)|0);
  STACKTOP = sp;return;
 } else {
  _BaikGarbageCollection();
  _exit(0);
  // unreachable;
 }
}
function _stackStr_addFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = 0;
 $2 = (_malloc(264)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_printf(1664,$vararg_buffer)|0);
 }
 $5 = $1;
 _memcpy(($5|0),($0|0),264)|0;
 $6 = HEAP32[8071]|0;
 $7 = $1;
 $8 = ((($7)) + 260|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 HEAP32[8071] = $9;
 STACKTOP = sp;return;
}
function _stackStr_removeAll() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $1 = 0;
 $2 = HEAP32[8071]|0;
 $0 = $2;
 while(1) {
  $3 = $0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = ((($5)) + 260|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
  $8 = $0;
  _free($8);
  $9 = $1;
  $0 = $9;
 }
 HEAP32[8071] = 0;
 HEAP32[8070] = 0;
 STACKTOP = sp;return;
}
function _stackStr_getID($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = 0;
 $3 = HEAP32[8071]|0;
 $2 = $3;
 while(1) {
  $4 = $2;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = ((($0)) + 4|0);
  $7 = $2;
  $8 = ((($7)) + 4|0);
  $9 = ((($0)) + 4|0);
  $10 = (_strlen($9)|0);
  $11 = (_strncmp($6,$8,$10)|0);
  $12 = ($11|0)==(0);
  $13 = $2;
  if ($12) {
   label = 4;
   break;
  }
  $15 = ((($13)) + 260|0);
  $16 = HEAP32[$15>>2]|0;
  $2 = $16;
 }
 if ((label|0) == 4) {
  $14 = HEAP32[$13>>2]|0;
  $1 = $14;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $1 = -1;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _string_addFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = 0;
 $2 = (_malloc(312)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_printf(1664,$vararg_buffer)|0);
 }
 $5 = $1;
 _memcpy(($5|0),($0|0),312)|0;
 $6 = HEAP32[8073]|0;
 $7 = $1;
 $8 = ((($7)) + 308|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 HEAP32[8073] = $9;
 STACKTOP = sp;return;
}
function _string_removeAll() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $1 = 0;
 $2 = HEAP32[8073]|0;
 $0 = $2;
 while(1) {
  $3 = $0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = ((($5)) + 308|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
  $8 = $0;
  _free($8);
  $9 = $1;
  $0 = $9;
 }
 HEAP32[8073] = 0;
 HEAP32[8072] = 0;
 STACKTOP = sp;return;
}
function _string_removeFirst($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $1 = sp;
 _memset(($1|0),0,312)|0;
 $2 = ((($1)) + 8|0);
 _memset(($2|0),0,300)|0;
 $3 = HEAP32[8073]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = HEAP32[8073]|0;
  _memcpy(($1|0),($5|0),312)|0;
  $6 = HEAP32[8073]|0;
  _free($6);
  $7 = ((($1)) + 308|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[8073] = $8;
  $9 = HEAP32[8073]|0;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   HEAP32[8072] = 0;
  }
 }
 $11 = ((($1)) + 308|0);
 HEAP32[$11>>2] = 0;
 _memcpy(($0|0),($1|0),312)|0;
 STACKTOP = sp;return;
}
function _string_getElement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $4 = sp;
 $2 = $1;
 $3 = 0;
 _memset(($4|0),0,312)|0;
 $5 = ((($4)) + 8|0);
 _memset(($5|0),0,300)|0;
 $6 = ((($4)) + 308|0);
 HEAP32[$6>>2] = 0;
 $7 = $2;
 $8 = ($7|0)<(0);
 if ($8) {
  _memcpy(($0|0),($4|0),312)|0;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[8073]|0;
 $3 = $9;
 while(1) {
  $10 = $3;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   label = 8;
   break;
  }
  $12 = $2;
  $13 = (($12) + -1)|0;
  $2 = $13;
  $14 = ($12|0)==(0);
  $15 = $3;
  if ($14) {
   label = 6;
   break;
  }
  $16 = ((($15)) + 308|0);
  $17 = HEAP32[$16>>2]|0;
  $3 = $17;
 }
 if ((label|0) == 6) {
  _memcpy(($0|0),($15|0),312)|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  _memcpy(($0|0),($4|0),312)|0;
  STACKTOP = sp;return;
 }
}
function _string_removeAt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $4 = sp;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $5 = $1;
 $6 = ($5|0)<(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ($7|0)==(0);
 if ($8) {
  _string_removeFirst($4);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[8073]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[8073]|0;
 $3 = $11;
 $12 = HEAP32[8073]|0;
 $13 = ((($12)) + 308|0);
 $14 = HEAP32[$13>>2]|0;
 $2 = $14;
 $15 = $1;
 $16 = (($15) + -1)|0;
 $1 = $16;
 while(1) {
  $17 = $2;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 10;
   break;
  }
  $19 = $1;
  $20 = (($19) + -1)|0;
  $1 = $20;
  $21 = ($19|0)==(0);
  $22 = $2;
  if ($21) {
   break;
  }
  $3 = $22;
  $28 = $2;
  $29 = ((($28)) + 308|0);
  $30 = HEAP32[$29>>2]|0;
  $2 = $30;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $23 = ((($22)) + 308|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $3;
 $26 = ((($25)) + 308|0);
 HEAP32[$26>>2] = $24;
 $27 = $2;
 _free($27);
 STACKTOP = sp;return;
}
function _string_findData($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = 0;
 $2 = 0;
 $4 = ((($0)) + 8|0);
 _memset(($4|0),0,300)|0;
 $5 = HEAP32[8073]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ($6|0)!=(0|0);
  if (!($7)) {
   label = 7;
   break;
  }
  $8 = HEAP32[$0>>2]|0;
  $9 = $2;
  $10 = HEAP32[$9>>2]|0;
  $11 = ($8|0)==($10|0);
  if ($11) {
   $12 = ((($0)) + 4|0);
   $13 = HEAP32[$12>>2]|0;
   $14 = $2;
   $15 = ((($14)) + 4|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = ($13|0)==($16|0);
   if ($17) {
    label = 5;
    break;
   }
  }
  $19 = $3;
  $20 = (($19) + 1)|0;
  $3 = $20;
  $21 = $2;
  $22 = ((($21)) + 308|0);
  $23 = HEAP32[$22>>2]|0;
  $2 = $23;
 }
 if ((label|0) == 5) {
  $18 = $3;
  $1 = $18;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 else if ((label|0) == 7) {
  $1 = -1;
  $24 = $1;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _stackInt_addFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = 0;
 $2 = (_malloc(264)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_printf(1664,$vararg_buffer)|0);
 }
 $5 = $1;
 _memcpy(($5|0),($0|0),264)|0;
 $6 = HEAP32[8076]|0;
 $7 = $1;
 $8 = ((($7)) + 260|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 HEAP32[8076] = $9;
 STACKTOP = sp;return;
}
function _stackInt_removeAll() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $1 = 0;
 $2 = HEAP32[8076]|0;
 $0 = $2;
 while(1) {
  $3 = $0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = ((($5)) + 260|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
  $8 = $0;
  _free($8);
  $9 = $1;
  $0 = $9;
 }
 HEAP32[8076] = 0;
 HEAP32[8075] = 0;
 STACKTOP = sp;return;
}
function _stackInt_getID($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = -1;
 $2 = 0;
 $4 = HEAP32[8076]|0;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 6;
   break;
  }
  $7 = ((($0)) + 4|0);
  $8 = $2;
  $9 = ((($8)) + 4|0);
  $10 = ((($0)) + 4|0);
  $11 = (_strlen($10)|0);
  $12 = (_strncmp($7,$9,$11)|0);
  $13 = ($12|0)==(0);
  $14 = $2;
  if ($13) {
   label = 4;
   break;
  }
  $17 = ((($14)) + 260|0);
  $18 = HEAP32[$17>>2]|0;
  $2 = $18;
 }
 if ((label|0) == 4) {
  $15 = HEAP32[$14>>2]|0;
  $3 = $15;
  $16 = $3;
  $1 = $16;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 else if ((label|0) == 6) {
  $19 = $3;
  $1 = $19;
  $20 = $1;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _int_addFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = 0;
 $2 = (_malloc(16)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_printf(1664,$vararg_buffer)|0);
 }
 $5 = $1;
 ;HEAP32[$5>>2]=HEAP32[$0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$0+12>>2]|0;
 $6 = HEAP32[8078]|0;
 $7 = $1;
 $8 = ((($7)) + 12|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 HEAP32[8078] = $9;
 STACKTOP = sp;return;
}
function _int_removeAll() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $1 = 0;
 $2 = HEAP32[8078]|0;
 $0 = $2;
 while(1) {
  $3 = $0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = ((($5)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
  $8 = $0;
  _free($8);
  $9 = $1;
  $0 = $9;
 }
 HEAP32[8078] = 0;
 HEAP32[8077] = 0;
 STACKTOP = sp;return;
}
function _int_removeFirst($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;
 $2 = HEAP32[8078]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[8078]|0;
  ;HEAP32[$1>>2]=HEAP32[$4>>2]|0;HEAP32[$1+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$4+12>>2]|0;
  $5 = HEAP32[8078]|0;
  _free($5);
  $6 = ((($1)) + 12|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[8078] = $7;
  $8 = HEAP32[8078]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   HEAP32[8077] = 0;
  }
 }
 $10 = ((($1)) + 12|0);
 HEAP32[$10>>2] = 0;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;
 STACKTOP = sp;return;
}
function _int_getElement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $1;
 $3 = 0;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 $5 = ((($4)) + 12|0);
 HEAP32[$5>>2] = 0;
 $6 = $2;
 $7 = ($6|0)<(0);
 if ($7) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
 $8 = HEAP32[8078]|0;
 $3 = $8;
 while(1) {
  $9 = $3;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = $2;
  $12 = (($11) + -1)|0;
  $2 = $12;
  $13 = ($11|0)==(0);
  $14 = $3;
  if ($13) {
   label = 6;
   break;
  }
  $15 = ((($14)) + 12|0);
  $16 = HEAP32[$15>>2]|0;
  $3 = $16;
 }
 if ((label|0) == 6) {
  ;HEAP32[$0>>2]=HEAP32[$14>>2]|0;HEAP32[$0+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$14+12>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;
  STACKTOP = sp;return;
 }
}
function _int_removeAt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $5 = $1;
 $6 = ($5|0)<(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ($7|0)==(0);
 if ($8) {
  _int_removeFirst($4);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[8078]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[8078]|0;
 $3 = $11;
 $12 = HEAP32[8078]|0;
 $13 = ((($12)) + 12|0);
 $14 = HEAP32[$13>>2]|0;
 $2 = $14;
 $15 = $1;
 $16 = (($15) + -1)|0;
 $1 = $16;
 while(1) {
  $17 = $2;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 10;
   break;
  }
  $19 = $1;
  $20 = (($19) + -1)|0;
  $1 = $20;
  $21 = ($19|0)==(0);
  $22 = $2;
  if ($21) {
   break;
  }
  $3 = $22;
  $28 = $2;
  $29 = ((($28)) + 12|0);
  $30 = HEAP32[$29>>2]|0;
  $2 = $30;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $3;
 $26 = ((($25)) + 12|0);
 HEAP32[$26>>2] = $24;
 $27 = $2;
 _free($27);
 STACKTOP = sp;return;
}
function _int_findData($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = 0;
 HEAP32[8079] = 0;
 $4 = HEAP32[8078]|0;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = HEAP32[$0>>2]|0;
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)==($9|0);
  if ($10) {
   $11 = ((($0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $2;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($12|0)==($15|0);
   if ($16) {
    label = 5;
    break;
   }
  }
  $18 = $3;
  $19 = (($18) + 1)|0;
  $3 = $19;
  $20 = $2;
  $21 = ((($20)) + 12|0);
  $22 = HEAP32[$21>>2]|0;
  $2 = $22;
 }
 if ((label|0) == 5) {
  $17 = $3;
  $1 = $17;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 7) {
  ;HEAP32[$0>>2]=0|0;HEAP32[$0+4>>2]=0|0;HEAP32[$0+8>>2]=0|0;HEAP32[$0+12>>2]=0|0;
  $1 = -1;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _stackDbl_addFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = 0;
 $2 = (_malloc(264)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_printf(1664,$vararg_buffer)|0);
 }
 $5 = $1;
 _memcpy(($5|0),($0|0),264)|0;
 $6 = HEAP32[8082]|0;
 $7 = $1;
 $8 = ((($7)) + 260|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 HEAP32[8082] = $9;
 STACKTOP = sp;return;
}
function _stackDbl_removeAll() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $1 = 0;
 $2 = HEAP32[8082]|0;
 $0 = $2;
 while(1) {
  $3 = $0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = ((($5)) + 260|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
  $8 = $0;
  _free($8);
  $9 = $1;
  $0 = $9;
 }
 HEAP32[8082] = 0;
 HEAP32[8081] = 0;
 STACKTOP = sp;return;
}
function _stackDbl_getID($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = 0;
 $3 = HEAP32[8082]|0;
 $2 = $3;
 while(1) {
  $4 = $2;
  $5 = ($4|0)!=(0|0);
  if (!($5)) {
   label = 6;
   break;
  }
  $6 = ((($0)) + 4|0);
  $7 = $2;
  $8 = ((($7)) + 4|0);
  $9 = ((($0)) + 4|0);
  $10 = (_strlen($9)|0);
  $11 = (_strncmp($6,$8,$10)|0);
  $12 = ($11|0)==(0);
  $13 = $2;
  if ($12) {
   label = 4;
   break;
  }
  $15 = ((($13)) + 260|0);
  $16 = HEAP32[$15>>2]|0;
  $2 = $16;
 }
 if ((label|0) == 4) {
  $14 = HEAP32[$13>>2]|0;
  $1 = $14;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 else if ((label|0) == 6) {
  $1 = -1;
  $17 = $1;
  STACKTOP = sp;return ($17|0);
 }
 return (0)|0;
}
function _dbl_addFirst($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = 0;
 $2 = (_malloc(24)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_printf(1664,$vararg_buffer)|0);
 }
 $5 = $1;
 ;HEAP32[$5>>2]=HEAP32[$0>>2]|0;HEAP32[$5+4>>2]=HEAP32[$0+4>>2]|0;HEAP32[$5+8>>2]=HEAP32[$0+8>>2]|0;HEAP32[$5+12>>2]=HEAP32[$0+12>>2]|0;HEAP32[$5+16>>2]=HEAP32[$0+16>>2]|0;HEAP32[$5+20>>2]=HEAP32[$0+20>>2]|0;
 $6 = HEAP32[8084]|0;
 $7 = $1;
 $8 = ((($7)) + 16|0);
 HEAP32[$8>>2] = $6;
 $9 = $1;
 HEAP32[8084] = $9;
 STACKTOP = sp;return;
}
function _dbl_removeAll() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $1 = 0;
 $2 = HEAP32[8084]|0;
 $0 = $2;
 while(1) {
  $3 = $0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = ((($5)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
  $8 = $0;
  _free($8);
  $9 = $1;
  $0 = $9;
 }
 HEAP32[8084] = 0;
 HEAP32[8083] = 0;
 STACKTOP = sp;return;
}
function _dbl_removeFirst($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = sp;
 ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
 $2 = HEAP32[8084]|0;
 $3 = ($2|0)!=(0|0);
 if ($3) {
  $4 = HEAP32[8084]|0;
  ;HEAP32[$1>>2]=HEAP32[$4>>2]|0;HEAP32[$1+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$1+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$1+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$1+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$1+20>>2]=HEAP32[$4+20>>2]|0;
  $5 = HEAP32[8084]|0;
  _free($5);
  $6 = ((($1)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  HEAP32[8084] = $7;
  $8 = HEAP32[8084]|0;
  $9 = ($8|0)!=(0|0);
  if (!($9)) {
   HEAP32[8083] = 0;
  }
 }
 $10 = ((($1)) + 16|0);
 HEAP32[$10>>2] = 0;
 ;HEAP32[$0>>2]=HEAP32[$1>>2]|0;HEAP32[$0+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$1+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$1+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$1+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$1+20>>2]|0;
 STACKTOP = sp;return;
}
function _dbl_getElement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = sp;
 $2 = $1;
 $3 = 0;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;HEAP32[$4+16>>2]=0|0;HEAP32[$4+20>>2]=0|0;
 $5 = ((($4)) + 16|0);
 HEAP32[$5>>2] = 0;
 $6 = $2;
 $7 = ($6|0)<(0);
 if ($7) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
  STACKTOP = sp;return;
 }
 $8 = HEAP32[8084]|0;
 $3 = $8;
 while(1) {
  $9 = $3;
  $10 = ($9|0)!=(0|0);
  if (!($10)) {
   label = 8;
   break;
  }
  $11 = $2;
  $12 = (($11) + -1)|0;
  $2 = $12;
  $13 = ($11|0)==(0);
  $14 = $3;
  if ($13) {
   label = 6;
   break;
  }
  $15 = ((($14)) + 16|0);
  $16 = HEAP32[$15>>2]|0;
  $3 = $16;
 }
 if ((label|0) == 6) {
  ;HEAP32[$0>>2]=HEAP32[$14>>2]|0;HEAP32[$0+4>>2]=HEAP32[$14+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$14+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$14+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$14+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$14+20>>2]|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  ;HEAP32[$0>>2]=HEAP32[$4>>2]|0;HEAP32[$0+4>>2]=HEAP32[$4+4>>2]|0;HEAP32[$0+8>>2]=HEAP32[$4+8>>2]|0;HEAP32[$0+12>>2]=HEAP32[$4+12>>2]|0;HEAP32[$0+16>>2]=HEAP32[$4+16>>2]|0;HEAP32[$0+20>>2]=HEAP32[$4+20>>2]|0;
  STACKTOP = sp;return;
 }
}
function _dbl_removeAt($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $4 = sp;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $5 = $1;
 $6 = ($5|0)<(0);
 if ($6) {
  STACKTOP = sp;return;
 }
 $7 = $1;
 $8 = ($7|0)==(0);
 if ($8) {
  _dbl_removeFirst($4);
  STACKTOP = sp;return;
 }
 $9 = HEAP32[8084]|0;
 $10 = ($9|0)!=(0|0);
 if (!($10)) {
  STACKTOP = sp;return;
 }
 $11 = HEAP32[8084]|0;
 $3 = $11;
 $12 = HEAP32[8084]|0;
 $13 = ((($12)) + 16|0);
 $14 = HEAP32[$13>>2]|0;
 $2 = $14;
 $15 = $1;
 $16 = (($15) + -1)|0;
 $1 = $16;
 while(1) {
  $17 = $2;
  $18 = ($17|0)!=(0|0);
  if (!($18)) {
   label = 10;
   break;
  }
  $19 = $1;
  $20 = (($19) + -1)|0;
  $1 = $20;
  $21 = ($19|0)==(0);
  $22 = $2;
  if ($21) {
   break;
  }
  $3 = $22;
  $28 = $2;
  $29 = ((($28)) + 16|0);
  $30 = HEAP32[$29>>2]|0;
  $2 = $30;
 }
 if ((label|0) == 10) {
  STACKTOP = sp;return;
 }
 $23 = ((($22)) + 16|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = $3;
 $26 = ((($25)) + 16|0);
 HEAP32[$26>>2] = $24;
 $27 = $2;
 _free($27);
 STACKTOP = sp;return;
}
function _dbl_findData($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = 0;
 $2 = 0;
 $4 = HEAP32[8084]|0;
 $2 = $4;
 while(1) {
  $5 = $2;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 7;
   break;
  }
  $7 = HEAP32[$0>>2]|0;
  $8 = $2;
  $9 = HEAP32[$8>>2]|0;
  $10 = ($7|0)==($9|0);
  if ($10) {
   $11 = ((($0)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = $2;
   $14 = ((($13)) + 4|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($12|0)==($15|0);
   if ($16) {
    label = 5;
    break;
   }
  }
  $18 = $3;
  $19 = (($18) + 1)|0;
  $3 = $19;
  $20 = $2;
  $21 = ((($20)) + 16|0);
  $22 = HEAP32[$21>>2]|0;
  $2 = $22;
 }
 if ((label|0) == 5) {
  $17 = $3;
  $1 = $17;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 else if ((label|0) == 7) {
  $1 = -1;
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 return (0)|0;
}
function _createRenban($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer30 = 0;
 var $vararg_buffer35 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer45 = 0, $vararg_buffer50 = 0, $vararg_buffer55 = 0, $vararg_buffer60 = 0, $vararg_buffer65 = 0, $vararg_buffer7 = 0, $vararg_buffer70 = 0, $vararg_buffer75 = 0, $vararg_buffer80 = 0, $vararg_buffer85 = 0, $vararg_ptr28 = 0, $vararg_ptr29 = 0, $vararg_ptr33 = 0, $vararg_ptr34 = 0, $vararg_ptr38 = 0, $vararg_ptr39 = 0, $vararg_ptr43 = 0;
 var $vararg_ptr44 = 0, $vararg_ptr48 = 0, $vararg_ptr49 = 0, $vararg_ptr53 = 0, $vararg_ptr54 = 0, $vararg_ptr58 = 0, $vararg_ptr59 = 0, $vararg_ptr63 = 0, $vararg_ptr64 = 0, $vararg_ptr68 = 0, $vararg_ptr69 = 0, $vararg_ptr73 = 0, $vararg_ptr74 = 0, $vararg_ptr78 = 0, $vararg_ptr79 = 0, $vararg_ptr83 = 0, $vararg_ptr84 = 0, $vararg_ptr88 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(416|0);
 $vararg_buffer85 = sp + 264|0;
 $vararg_buffer80 = sp + 248|0;
 $vararg_buffer75 = sp + 232|0;
 $vararg_buffer70 = sp + 216|0;
 $vararg_buffer65 = sp + 200|0;
 $vararg_buffer60 = sp + 184|0;
 $vararg_buffer55 = sp + 168|0;
 $vararg_buffer50 = sp + 152|0;
 $vararg_buffer45 = sp + 136|0;
 $vararg_buffer40 = sp + 120|0;
 $vararg_buffer35 = sp + 104|0;
 $vararg_buffer30 = sp + 88|0;
 $vararg_buffer25 = sp + 72|0;
 $vararg_buffer22 = sp + 64|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 308|0;
 $11 = sp + 400|0;
 $12 = sp + 396|0;
 $13 = sp + 392|0;
 $14 = sp + 388|0;
 $15 = sp + 384|0;
 $16 = sp + 368|0;
 $17 = sp + 360|0;
 $18 = sp + 338|0;
 $19 = sp + 327|0;
 $20 = sp + 316|0;
 $1 = $0;
 $3 = 0;
 $4 = 0;
 $21 = 0;
 ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;HEAP8[$11+4>>0]=0|0;HEAP8[$11+5>>0]=0|0;HEAP8[$11+6>>0]=0|0;HEAP8[$11+7>>0]=0|0;
 ;HEAP8[$12>>0]=0|0;HEAP8[$12+1>>0]=0|0;HEAP8[$12+2>>0]=0|0;HEAP8[$12+3>>0]=0|0;
 ;HEAP8[$13>>0]=0|0;HEAP8[$13+1>>0]=0|0;HEAP8[$13+2>>0]=0|0;HEAP8[$13+3>>0]=0|0;
 ;HEAP8[$14>>0]=0|0;HEAP8[$14+1>>0]=0|0;HEAP8[$14+2>>0]=0|0;HEAP8[$14+3>>0]=0|0;
 ;HEAP8[$15>>0]=0|0;HEAP8[$15+1>>0]=0|0;HEAP8[$15+2>>0]=0|0;HEAP8[$15+3>>0]=0|0;
 dest=$16; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 ;HEAP8[$17>>0]=0|0;HEAP8[$17+1>>0]=0|0;HEAP8[$17+2>>0]=0|0;HEAP8[$17+3>>0]=0|0;
 dest=$19; stop=dest+11|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$20; stop=dest+11|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $22 = $1;
 HEAP32[$vararg_buffer>>2] = $22;
 (_snprintf($17,4,16176,$vararg_buffer)|0);
 $23 = (_strlen($17)|0);
 $24 = ($23>>>0)<(2);
 $25 = $1;
 if ($24) {
  HEAP32[$vararg_buffer1>>2] = $25;
  (_snprintf($17,4,1703,$vararg_buffer1)|0);
 } else {
  HEAP32[$vararg_buffer4>>2] = $25;
  (_snprintf($17,4,16176,$vararg_buffer4)|0);
 }
 $1 = 0;
 (_time(($2|0))|0);
 $26 = (_localtime(($2|0))|0);
 $3 = $26;
 $27 = $3;
 $28 = (_asctime(($27|0))|0);
 $4 = $28;
 $29 = $3;
 $30 = ((($29)) + 20|0);
 $31 = HEAP32[$30>>2]|0;
 $32 = (($31) + 1900)|0;
 $5 = $32;
 $33 = $3;
 $34 = ((($33)) + 16|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = (($35) + 1)|0;
 $6 = $36;
 $37 = $3;
 $38 = ((($37)) + 12|0);
 $39 = HEAP32[$38>>2]|0;
 $7 = $39;
 $40 = $3;
 $41 = ((($40)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $8 = $42;
 $43 = $3;
 $44 = ((($43)) + 4|0);
 $45 = HEAP32[$44>>2]|0;
 $9 = $45;
 $46 = $3;
 $47 = HEAP32[$46>>2]|0;
 $10 = $47;
 $48 = $5;
 HEAP32[$vararg_buffer7>>2] = $48;
 (_snprintf($11,8,16176,$vararg_buffer7)|0);
 $49 = $6;
 HEAP32[$vararg_buffer10>>2] = $49;
 (_snprintf($12,4,16176,$vararg_buffer10)|0);
 $50 = $7;
 HEAP32[$vararg_buffer13>>2] = $50;
 (_snprintf($13,4,16176,$vararg_buffer13)|0);
 $51 = $8;
 HEAP32[$vararg_buffer16>>2] = $51;
 (_snprintf($14,4,16176,$vararg_buffer16)|0);
 $52 = $9;
 HEAP32[$vararg_buffer19>>2] = $52;
 (_snprintf($15,4,16176,$vararg_buffer19)|0);
 $53 = $10;
 HEAP32[$vararg_buffer22>>2] = $53;
 (_snprintf($16,16,16176,$vararg_buffer22)|0);
 dest=$18; stop=dest+22|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 (_strcpy($18,$11)|0);
 $54 = (_strlen($12)|0);
 $55 = ($54>>>0)<(2);
 $56 = (_strlen($13)|0);
 $57 = ($56>>>0)<(2);
 do {
  if ($55) {
   if ($57) {
    HEAP32[$vararg_buffer25>>2] = $11;
    $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
    HEAP32[$vararg_ptr28>>2] = $12;
    $vararg_ptr29 = ((($vararg_buffer25)) + 8|0);
    HEAP32[$vararg_ptr29>>2] = $13;
    (_snprintf($19,11,1707,$vararg_buffer25)|0);
    break;
   } else {
    HEAP32[$vararg_buffer30>>2] = $11;
    $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
    HEAP32[$vararg_ptr33>>2] = $12;
    $vararg_ptr34 = ((($vararg_buffer30)) + 8|0);
    HEAP32[$vararg_ptr34>>2] = $13;
    (_snprintf($19,11,1716,$vararg_buffer30)|0);
    break;
   }
  } else {
   if ($57) {
    HEAP32[$vararg_buffer35>>2] = $11;
    $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
    HEAP32[$vararg_ptr38>>2] = $12;
    $vararg_ptr39 = ((($vararg_buffer35)) + 8|0);
    HEAP32[$vararg_ptr39>>2] = $13;
    (_snprintf($19,11,1724,$vararg_buffer35)|0);
    break;
   } else {
    HEAP32[$vararg_buffer40>>2] = $11;
    $vararg_ptr43 = ((($vararg_buffer40)) + 4|0);
    HEAP32[$vararg_ptr43>>2] = $12;
    $vararg_ptr44 = ((($vararg_buffer40)) + 8|0);
    HEAP32[$vararg_ptr44>>2] = $13;
    (_snprintf($19,11,1732,$vararg_buffer40)|0);
    break;
   }
  }
 } while(0);
 $58 = (_strlen($14)|0);
 $59 = ($58>>>0)<(2);
 $60 = (_strlen($15)|0);
 $61 = ($60>>>0)<(2);
 do {
  if ($59) {
   if ($61) {
    $62 = (_strlen($16)|0);
    $63 = ($62>>>0)<(2);
    if ($63) {
     HEAP32[$vararg_buffer45>>2] = $14;
     $vararg_ptr48 = ((($vararg_buffer45)) + 4|0);
     HEAP32[$vararg_ptr48>>2] = $15;
     $vararg_ptr49 = ((($vararg_buffer45)) + 8|0);
     HEAP32[$vararg_ptr49>>2] = $16;
     (_snprintf($20,11,1739,$vararg_buffer45)|0);
     break;
    } else {
     HEAP32[$vararg_buffer50>>2] = $14;
     $vararg_ptr53 = ((($vararg_buffer50)) + 4|0);
     HEAP32[$vararg_ptr53>>2] = $15;
     $vararg_ptr54 = ((($vararg_buffer50)) + 8|0);
     HEAP32[$vararg_ptr54>>2] = $16;
     (_snprintf($20,11,1749,$vararg_buffer50)|0);
     break;
    }
   } else {
    $64 = (_strlen($13)|0);
    $65 = ($64>>>0)<(2);
    if ($65) {
     HEAP32[$vararg_buffer55>>2] = $14;
     $vararg_ptr58 = ((($vararg_buffer55)) + 4|0);
     HEAP32[$vararg_ptr58>>2] = $15;
     $vararg_ptr59 = ((($vararg_buffer55)) + 8|0);
     HEAP32[$vararg_ptr59>>2] = $16;
     (_snprintf($20,11,1758,$vararg_buffer55)|0);
     break;
    } else {
     HEAP32[$vararg_buffer60>>2] = $14;
     $vararg_ptr63 = ((($vararg_buffer60)) + 4|0);
     HEAP32[$vararg_ptr63>>2] = $15;
     $vararg_ptr64 = ((($vararg_buffer60)) + 8|0);
     HEAP32[$vararg_ptr64>>2] = $16;
     (_snprintf($20,11,1767,$vararg_buffer60)|0);
     break;
    }
   }
  } else {
   if ($61) {
    $66 = (_strlen($16)|0);
    $67 = ($66>>>0)<(2);
    if ($67) {
     HEAP32[$vararg_buffer65>>2] = $14;
     $vararg_ptr68 = ((($vararg_buffer65)) + 4|0);
     HEAP32[$vararg_ptr68>>2] = $15;
     $vararg_ptr69 = ((($vararg_buffer65)) + 8|0);
     HEAP32[$vararg_ptr69>>2] = $16;
     (_snprintf($20,11,1707,$vararg_buffer65)|0);
     break;
    } else {
     HEAP32[$vararg_buffer70>>2] = $14;
     $vararg_ptr73 = ((($vararg_buffer70)) + 4|0);
     HEAP32[$vararg_ptr73>>2] = $15;
     $vararg_ptr74 = ((($vararg_buffer70)) + 8|0);
     HEAP32[$vararg_ptr74>>2] = $16;
     (_snprintf($20,11,1716,$vararg_buffer70)|0);
     break;
    }
   } else {
    $68 = (_strlen($13)|0);
    $69 = ($68>>>0)<(2);
    if ($69) {
     HEAP32[$vararg_buffer75>>2] = $14;
     $vararg_ptr78 = ((($vararg_buffer75)) + 4|0);
     HEAP32[$vararg_ptr78>>2] = $15;
     $vararg_ptr79 = ((($vararg_buffer75)) + 8|0);
     HEAP32[$vararg_ptr79>>2] = $16;
     (_snprintf($20,11,1724,$vararg_buffer75)|0);
     break;
    } else {
     HEAP32[$vararg_buffer80>>2] = $14;
     $vararg_ptr83 = ((($vararg_buffer80)) + 4|0);
     HEAP32[$vararg_ptr83>>2] = $15;
     $vararg_ptr84 = ((($vararg_buffer80)) + 8|0);
     HEAP32[$vararg_ptr84>>2] = $16;
     (_snprintf($20,11,1732,$vararg_buffer80)|0);
     break;
    }
   }
  }
 } while(0);
 HEAP32[$vararg_buffer85>>2] = $20;
 $vararg_ptr88 = ((($vararg_buffer85)) + 4|0);
 HEAP32[$vararg_ptr88>>2] = $17;
 (_snprintf($18,22,1775,$vararg_buffer85)|0);
 $70 = (_atol($18)|0);
 $21 = $70;
 $71 = $21;
 STACKTOP = sp;return ($71|0);
}
function _BaikGarbageCollection() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 9648|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(9648|0);
 $$byval_copy = sp + 6432|0;
 $0 = sp + 3216|0;
 $1 = sp;
 _memset(($0|0),0,3216)|0;
 _memcpy(($$byval_copy|0),($0|0),3216)|0;
 _ValLabel($1,1358125,0,$$byval_copy,235);
 _node_removeAll();
 _int_removeAll();
 _stackInt_removeAll();
 _dbl_removeAll();
 _stackDbl_removeAll();
 _string_removeAll();
 _stackStr_removeAll();
 $2 = HEAP32[(73792)>>2]|0;
 _free($2);
 $3 = HEAP32[(73816)>>2]|0;
 _free($3);
 $4 = HEAP32[(73796)>>2]|0;
 _free($4);
 STACKTOP = sp;return;
}
function _createTime() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer24 = 0, $vararg_buffer29 = 0, $vararg_buffer34 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer44 = 0, $vararg_buffer49 = 0, $vararg_buffer54 = 0, $vararg_buffer59 = 0, $vararg_buffer64 = 0;
 var $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer74 = 0, $vararg_buffer79 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0;
 var $vararg_ptr62 = 0, $vararg_ptr63 = 0, $vararg_ptr67 = 0, $vararg_ptr68 = 0, $vararg_ptr72 = 0, $vararg_ptr73 = 0, $vararg_ptr77 = 0, $vararg_ptr78 = 0, $vararg_ptr82 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $vararg_buffer79 = sp + 248|0;
 $vararg_buffer74 = sp + 232|0;
 $vararg_buffer69 = sp + 216|0;
 $vararg_buffer64 = sp + 200|0;
 $vararg_buffer59 = sp + 184|0;
 $vararg_buffer54 = sp + 168|0;
 $vararg_buffer49 = sp + 152|0;
 $vararg_buffer44 = sp + 136|0;
 $vararg_buffer39 = sp + 120|0;
 $vararg_buffer34 = sp + 104|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 292|0;
 $9 = sp + 376|0;
 $10 = sp + 372|0;
 $11 = sp + 368|0;
 $12 = sp + 364|0;
 $13 = sp + 360|0;
 $14 = sp + 344|0;
 $15 = sp + 318|0;
 $16 = sp + 307|0;
 $17 = sp + 296|0;
 $1 = 0;
 $2 = 0;
 $18 = 0;
 ;HEAP8[$9>>0]=0|0;HEAP8[$9+1>>0]=0|0;HEAP8[$9+2>>0]=0|0;HEAP8[$9+3>>0]=0|0;HEAP8[$9+4>>0]=0|0;HEAP8[$9+5>>0]=0|0;HEAP8[$9+6>>0]=0|0;HEAP8[$9+7>>0]=0|0;
 ;HEAP8[$10>>0]=0|0;HEAP8[$10+1>>0]=0|0;HEAP8[$10+2>>0]=0|0;HEAP8[$10+3>>0]=0|0;
 ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;
 ;HEAP8[$12>>0]=0|0;HEAP8[$12+1>>0]=0|0;HEAP8[$12+2>>0]=0|0;HEAP8[$12+3>>0]=0|0;
 ;HEAP8[$13>>0]=0|0;HEAP8[$13+1>>0]=0|0;HEAP8[$13+2>>0]=0|0;HEAP8[$13+3>>0]=0|0;
 dest=$14; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $18 = 0;
 (_time(($0|0))|0);
 $19 = (_localtime(($0|0))|0);
 $1 = $19;
 $20 = $1;
 $21 = (_asctime(($20|0))|0);
 $2 = $21;
 $22 = $1;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1900)|0;
 $3 = $25;
 $26 = $1;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 1)|0;
 $4 = $29;
 $30 = $1;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $5 = $32;
 $33 = $1;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $6 = $35;
 $36 = $1;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $7 = $38;
 $39 = $1;
 $40 = HEAP32[$39>>2]|0;
 $8 = $40;
 $41 = $3;
 HEAP32[$vararg_buffer>>2] = $41;
 (_snprintf($9,8,16176,$vararg_buffer)|0);
 $42 = $4;
 HEAP32[$vararg_buffer1>>2] = $42;
 (_snprintf($10,4,16176,$vararg_buffer1)|0);
 $43 = $5;
 HEAP32[$vararg_buffer4>>2] = $43;
 (_snprintf($11,4,16176,$vararg_buffer4)|0);
 $44 = $6;
 HEAP32[$vararg_buffer7>>2] = $44;
 (_snprintf($12,4,16176,$vararg_buffer7)|0);
 $45 = $7;
 HEAP32[$vararg_buffer10>>2] = $45;
 (_snprintf($13,4,16176,$vararg_buffer10)|0);
 $46 = $8;
 HEAP32[$vararg_buffer13>>2] = $46;
 (_snprintf($14,16,16176,$vararg_buffer13)|0);
 dest=$15; stop=dest+22|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer16>>2] = $9;
 (_snprintf($15,22,1780,$vararg_buffer16)|0);
 $47 = (_strlen($10)|0);
 $48 = ($47>>>0)<(2);
 $49 = (_strlen($11)|0);
 $50 = ($49>>>0)<(2);
 do {
  if ($48) {
   if ($50) {
    HEAP32[$vararg_buffer19>>2] = $9;
    $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
    HEAP32[$vararg_ptr22>>2] = $10;
    $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
    HEAP32[$vararg_ptr23>>2] = $11;
    (_snprintf($16,11,1784,$vararg_buffer19)|0);
    break;
   } else {
    HEAP32[$vararg_buffer24>>2] = $9;
    $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
    HEAP32[$vararg_ptr27>>2] = $10;
    $vararg_ptr28 = ((($vararg_buffer24)) + 8|0);
    HEAP32[$vararg_ptr28>>2] = $11;
    (_snprintf($16,11,1795,$vararg_buffer24)|0);
    break;
   }
  } else {
   if ($50) {
    HEAP32[$vararg_buffer29>>2] = $9;
    $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
    HEAP32[$vararg_ptr32>>2] = $10;
    $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
    HEAP32[$vararg_ptr33>>2] = $11;
    (_snprintf($16,11,1805,$vararg_buffer29)|0);
    break;
   } else {
    HEAP32[$vararg_buffer34>>2] = $9;
    $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
    HEAP32[$vararg_ptr37>>2] = $10;
    $vararg_ptr38 = ((($vararg_buffer34)) + 8|0);
    HEAP32[$vararg_ptr38>>2] = $11;
    (_snprintf($16,11,1815,$vararg_buffer34)|0);
    break;
   }
  }
 } while(0);
 $51 = (_strlen($12)|0);
 $52 = ($51>>>0)<(2);
 $53 = (_strlen($13)|0);
 $54 = ($53>>>0)<(2);
 do {
  if ($52) {
   if ($54) {
    $55 = (_strlen($14)|0);
    $56 = ($55>>>0)<(2);
    if ($56) {
     HEAP32[$vararg_buffer39>>2] = $12;
     $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
     HEAP32[$vararg_ptr42>>2] = $13;
     $vararg_ptr43 = ((($vararg_buffer39)) + 8|0);
     HEAP32[$vararg_ptr43>>2] = $14;
     (_snprintf($17,11,1824,$vararg_buffer39)|0);
     break;
    } else {
     HEAP32[$vararg_buffer44>>2] = $12;
     $vararg_ptr47 = ((($vararg_buffer44)) + 4|0);
     HEAP32[$vararg_ptr47>>2] = $13;
     $vararg_ptr48 = ((($vararg_buffer44)) + 8|0);
     HEAP32[$vararg_ptr48>>2] = $14;
     (_snprintf($17,11,1836,$vararg_buffer44)|0);
     break;
    }
   } else {
    $57 = (_strlen($11)|0);
    $58 = ($57>>>0)<(2);
    if ($58) {
     HEAP32[$vararg_buffer49>>2] = $12;
     $vararg_ptr52 = ((($vararg_buffer49)) + 4|0);
     HEAP32[$vararg_ptr52>>2] = $13;
     $vararg_ptr53 = ((($vararg_buffer49)) + 8|0);
     HEAP32[$vararg_ptr53>>2] = $14;
     (_snprintf($17,11,1847,$vararg_buffer49)|0);
     break;
    } else {
     HEAP32[$vararg_buffer54>>2] = $12;
     $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
     HEAP32[$vararg_ptr57>>2] = $13;
     $vararg_ptr58 = ((($vararg_buffer54)) + 8|0);
     HEAP32[$vararg_ptr58>>2] = $14;
     (_snprintf($17,11,1858,$vararg_buffer54)|0);
     break;
    }
   }
  } else {
   if ($54) {
    $59 = (_strlen($14)|0);
    $60 = ($59>>>0)<(2);
    if ($60) {
     HEAP32[$vararg_buffer59>>2] = $12;
     $vararg_ptr62 = ((($vararg_buffer59)) + 4|0);
     HEAP32[$vararg_ptr62>>2] = $13;
     $vararg_ptr63 = ((($vararg_buffer59)) + 8|0);
     HEAP32[$vararg_ptr63>>2] = $14;
     (_snprintf($17,11,1868,$vararg_buffer59)|0);
     break;
    } else {
     HEAP32[$vararg_buffer64>>2] = $12;
     $vararg_ptr67 = ((($vararg_buffer64)) + 4|0);
     HEAP32[$vararg_ptr67>>2] = $13;
     $vararg_ptr68 = ((($vararg_buffer64)) + 8|0);
     HEAP32[$vararg_ptr68>>2] = $14;
     (_snprintf($17,11,1879,$vararg_buffer64)|0);
     break;
    }
   } else {
    $61 = (_strlen($11)|0);
    $62 = ($61>>>0)<(2);
    if ($62) {
     HEAP32[$vararg_buffer69>>2] = $12;
     $vararg_ptr72 = ((($vararg_buffer69)) + 4|0);
     HEAP32[$vararg_ptr72>>2] = $13;
     $vararg_ptr73 = ((($vararg_buffer69)) + 8|0);
     HEAP32[$vararg_ptr73>>2] = $14;
     (_snprintf($17,11,1889,$vararg_buffer69)|0);
     break;
    } else {
     HEAP32[$vararg_buffer74>>2] = $12;
     $vararg_ptr77 = ((($vararg_buffer74)) + 4|0);
     HEAP32[$vararg_ptr77>>2] = $13;
     $vararg_ptr78 = ((($vararg_buffer74)) + 8|0);
     HEAP32[$vararg_ptr78>>2] = $14;
     (_snprintf($17,11,1899,$vararg_buffer74)|0);
     break;
    }
   }
  }
 } while(0);
 HEAP32[$vararg_buffer79>>2] = $16;
 $vararg_ptr82 = ((($vararg_buffer79)) + 4|0);
 HEAP32[$vararg_ptr82>>2] = $17;
 (_snprintf($15,22,1908,$vararg_buffer79)|0);
 $18 = $15;
 $63 = $18;
 STACKTOP = sp;return ($63|0);
}
function _createTime2() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer24 = 0, $vararg_buffer29 = 0, $vararg_buffer34 = 0, $vararg_buffer39 = 0, $vararg_buffer4 = 0, $vararg_buffer44 = 0, $vararg_buffer49 = 0, $vararg_buffer54 = 0, $vararg_buffer59 = 0, $vararg_buffer64 = 0;
 var $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer74 = 0, $vararg_buffer79 = 0, $vararg_ptr22 = 0, $vararg_ptr23 = 0, $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr33 = 0, $vararg_ptr37 = 0, $vararg_ptr38 = 0, $vararg_ptr42 = 0, $vararg_ptr43 = 0, $vararg_ptr47 = 0, $vararg_ptr48 = 0, $vararg_ptr52 = 0, $vararg_ptr53 = 0, $vararg_ptr57 = 0, $vararg_ptr58 = 0;
 var $vararg_ptr62 = 0, $vararg_ptr63 = 0, $vararg_ptr67 = 0, $vararg_ptr68 = 0, $vararg_ptr72 = 0, $vararg_ptr73 = 0, $vararg_ptr77 = 0, $vararg_ptr78 = 0, $vararg_ptr82 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $vararg_buffer79 = sp + 248|0;
 $vararg_buffer74 = sp + 232|0;
 $vararg_buffer69 = sp + 216|0;
 $vararg_buffer64 = sp + 200|0;
 $vararg_buffer59 = sp + 184|0;
 $vararg_buffer54 = sp + 168|0;
 $vararg_buffer49 = sp + 152|0;
 $vararg_buffer44 = sp + 136|0;
 $vararg_buffer39 = sp + 120|0;
 $vararg_buffer34 = sp + 104|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer19 = sp + 56|0;
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 292|0;
 $9 = sp + 376|0;
 $10 = sp + 372|0;
 $11 = sp + 368|0;
 $12 = sp + 364|0;
 $13 = sp + 360|0;
 $14 = sp + 344|0;
 $15 = sp + 318|0;
 $16 = sp + 307|0;
 $17 = sp + 296|0;
 $1 = 0;
 $2 = 0;
 $18 = 0;
 ;HEAP8[$9>>0]=0|0;HEAP8[$9+1>>0]=0|0;HEAP8[$9+2>>0]=0|0;HEAP8[$9+3>>0]=0|0;HEAP8[$9+4>>0]=0|0;HEAP8[$9+5>>0]=0|0;HEAP8[$9+6>>0]=0|0;HEAP8[$9+7>>0]=0|0;
 ;HEAP8[$10>>0]=0|0;HEAP8[$10+1>>0]=0|0;HEAP8[$10+2>>0]=0|0;HEAP8[$10+3>>0]=0|0;
 ;HEAP8[$11>>0]=0|0;HEAP8[$11+1>>0]=0|0;HEAP8[$11+2>>0]=0|0;HEAP8[$11+3>>0]=0|0;
 ;HEAP8[$12>>0]=0|0;HEAP8[$12+1>>0]=0|0;HEAP8[$12+2>>0]=0|0;HEAP8[$12+3>>0]=0|0;
 ;HEAP8[$13>>0]=0|0;HEAP8[$13+1>>0]=0|0;HEAP8[$13+2>>0]=0|0;HEAP8[$13+3>>0]=0|0;
 dest=$14; stop=dest+16|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $18 = 0;
 (_time(($0|0))|0);
 $19 = (_localtime(($0|0))|0);
 $1 = $19;
 $20 = $1;
 $21 = (_asctime(($20|0))|0);
 $2 = $21;
 $22 = $1;
 $23 = ((($22)) + 20|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = (($24) + 1900)|0;
 $3 = $25;
 $26 = $1;
 $27 = ((($26)) + 16|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = (($28) + 1)|0;
 $4 = $29;
 $30 = $1;
 $31 = ((($30)) + 12|0);
 $32 = HEAP32[$31>>2]|0;
 $5 = $32;
 $33 = $1;
 $34 = ((($33)) + 8|0);
 $35 = HEAP32[$34>>2]|0;
 $6 = $35;
 $36 = $1;
 $37 = ((($36)) + 4|0);
 $38 = HEAP32[$37>>2]|0;
 $7 = $38;
 $39 = $1;
 $40 = HEAP32[$39>>2]|0;
 $8 = $40;
 $41 = $3;
 HEAP32[$vararg_buffer>>2] = $41;
 (_snprintf($9,8,16176,$vararg_buffer)|0);
 $42 = $4;
 HEAP32[$vararg_buffer1>>2] = $42;
 (_snprintf($10,4,16176,$vararg_buffer1)|0);
 $43 = $5;
 HEAP32[$vararg_buffer4>>2] = $43;
 (_snprintf($11,4,16176,$vararg_buffer4)|0);
 $44 = $6;
 HEAP32[$vararg_buffer7>>2] = $44;
 (_snprintf($12,4,16176,$vararg_buffer7)|0);
 $45 = $7;
 HEAP32[$vararg_buffer10>>2] = $45;
 (_snprintf($13,4,16176,$vararg_buffer10)|0);
 $46 = $8;
 HEAP32[$vararg_buffer13>>2] = $46;
 (_snprintf($14,16,16176,$vararg_buffer13)|0);
 dest=$15; stop=dest+22|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer16>>2] = $9;
 (_snprintf($15,22,1780,$vararg_buffer16)|0);
 $47 = (_strlen($10)|0);
 $48 = ($47>>>0)<(2);
 $49 = (_strlen($11)|0);
 $50 = ($49>>>0)<(2);
 do {
  if ($48) {
   if ($50) {
    HEAP32[$vararg_buffer19>>2] = $9;
    $vararg_ptr22 = ((($vararg_buffer19)) + 4|0);
    HEAP32[$vararg_ptr22>>2] = $10;
    $vararg_ptr23 = ((($vararg_buffer19)) + 8|0);
    HEAP32[$vararg_ptr23>>2] = $11;
    (_snprintf($16,11,1784,$vararg_buffer19)|0);
    break;
   } else {
    HEAP32[$vararg_buffer24>>2] = $9;
    $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
    HEAP32[$vararg_ptr27>>2] = $10;
    $vararg_ptr28 = ((($vararg_buffer24)) + 8|0);
    HEAP32[$vararg_ptr28>>2] = $11;
    (_snprintf($16,11,1795,$vararg_buffer24)|0);
    break;
   }
  } else {
   if ($50) {
    HEAP32[$vararg_buffer29>>2] = $9;
    $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
    HEAP32[$vararg_ptr32>>2] = $10;
    $vararg_ptr33 = ((($vararg_buffer29)) + 8|0);
    HEAP32[$vararg_ptr33>>2] = $11;
    (_snprintf($16,11,1805,$vararg_buffer29)|0);
    break;
   } else {
    HEAP32[$vararg_buffer34>>2] = $9;
    $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
    HEAP32[$vararg_ptr37>>2] = $10;
    $vararg_ptr38 = ((($vararg_buffer34)) + 8|0);
    HEAP32[$vararg_ptr38>>2] = $11;
    (_snprintf($16,11,1815,$vararg_buffer34)|0);
    break;
   }
  }
 } while(0);
 $51 = (_strlen($12)|0);
 $52 = ($51>>>0)<(2);
 $53 = (_strlen($13)|0);
 $54 = ($53>>>0)<(2);
 do {
  if ($52) {
   if ($54) {
    $55 = (_strlen($14)|0);
    $56 = ($55>>>0)<(2);
    if ($56) {
     HEAP32[$vararg_buffer39>>2] = $12;
     $vararg_ptr42 = ((($vararg_buffer39)) + 4|0);
     HEAP32[$vararg_ptr42>>2] = $13;
     $vararg_ptr43 = ((($vararg_buffer39)) + 8|0);
     HEAP32[$vararg_ptr43>>2] = $14;
     (_snprintf($17,11,1824,$vararg_buffer39)|0);
     break;
    } else {
     HEAP32[$vararg_buffer44>>2] = $12;
     $vararg_ptr47 = ((($vararg_buffer44)) + 4|0);
     HEAP32[$vararg_ptr47>>2] = $13;
     $vararg_ptr48 = ((($vararg_buffer44)) + 8|0);
     HEAP32[$vararg_ptr48>>2] = $14;
     (_snprintf($17,11,1836,$vararg_buffer44)|0);
     break;
    }
   } else {
    $57 = (_strlen($11)|0);
    $58 = ($57>>>0)<(2);
    if ($58) {
     HEAP32[$vararg_buffer49>>2] = $12;
     $vararg_ptr52 = ((($vararg_buffer49)) + 4|0);
     HEAP32[$vararg_ptr52>>2] = $13;
     $vararg_ptr53 = ((($vararg_buffer49)) + 8|0);
     HEAP32[$vararg_ptr53>>2] = $14;
     (_snprintf($17,11,1847,$vararg_buffer49)|0);
     break;
    } else {
     HEAP32[$vararg_buffer54>>2] = $12;
     $vararg_ptr57 = ((($vararg_buffer54)) + 4|0);
     HEAP32[$vararg_ptr57>>2] = $13;
     $vararg_ptr58 = ((($vararg_buffer54)) + 8|0);
     HEAP32[$vararg_ptr58>>2] = $14;
     (_snprintf($17,11,1858,$vararg_buffer54)|0);
     break;
    }
   }
  } else {
   if ($54) {
    $59 = (_strlen($14)|0);
    $60 = ($59>>>0)<(2);
    if ($60) {
     HEAP32[$vararg_buffer59>>2] = $12;
     $vararg_ptr62 = ((($vararg_buffer59)) + 4|0);
     HEAP32[$vararg_ptr62>>2] = $13;
     $vararg_ptr63 = ((($vararg_buffer59)) + 8|0);
     HEAP32[$vararg_ptr63>>2] = $14;
     (_snprintf($17,11,1868,$vararg_buffer59)|0);
     break;
    } else {
     HEAP32[$vararg_buffer64>>2] = $12;
     $vararg_ptr67 = ((($vararg_buffer64)) + 4|0);
     HEAP32[$vararg_ptr67>>2] = $13;
     $vararg_ptr68 = ((($vararg_buffer64)) + 8|0);
     HEAP32[$vararg_ptr68>>2] = $14;
     (_snprintf($17,11,1879,$vararg_buffer64)|0);
     break;
    }
   } else {
    $61 = (_strlen($11)|0);
    $62 = ($61>>>0)<(2);
    if ($62) {
     HEAP32[$vararg_buffer69>>2] = $12;
     $vararg_ptr72 = ((($vararg_buffer69)) + 4|0);
     HEAP32[$vararg_ptr72>>2] = $13;
     $vararg_ptr73 = ((($vararg_buffer69)) + 8|0);
     HEAP32[$vararg_ptr73>>2] = $14;
     (_snprintf($17,11,1889,$vararg_buffer69)|0);
     break;
    } else {
     HEAP32[$vararg_buffer74>>2] = $12;
     $vararg_ptr77 = ((($vararg_buffer74)) + 4|0);
     HEAP32[$vararg_ptr77>>2] = $13;
     $vararg_ptr78 = ((($vararg_buffer74)) + 8|0);
     HEAP32[$vararg_ptr78>>2] = $14;
     (_snprintf($17,11,1899,$vararg_buffer74)|0);
     break;
    }
   }
  }
 } while(0);
 HEAP32[$vararg_buffer79>>2] = $16;
 $vararg_ptr82 = ((($vararg_buffer79)) + 4|0);
 HEAP32[$vararg_ptr82>>2] = $17;
 (_snprintf($15,22,1908,$vararg_buffer79)|0);
 $18 = $15;
 $63 = $18;
 STACKTOP = sp;return ($63|0);
}
function _dayofweek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = $4;
 $7 = ($6|0)<=(2);
 if ($7) {
  $8 = $3;
  $9 = (($8) + -1)|0;
  $3 = $9;
  $10 = $4;
  $11 = (($10) + 12)|0;
  $4 = $11;
 }
 $12 = $3;
 $13 = $3;
 $14 = (($13|0) / 4)&-1;
 $15 = (($12) + ($14))|0;
 $16 = $3;
 $17 = (($16|0) / 100)&-1;
 $18 = (($15) - ($17))|0;
 $19 = $3;
 $20 = (($19|0) / 400)&-1;
 $21 = (($18) + ($20))|0;
 $22 = $4;
 $23 = ($22*13)|0;
 $24 = (($23) + 8)|0;
 $25 = (($24|0) / 5)&-1;
 $26 = (($21) + ($25))|0;
 $27 = $5;
 $28 = (($26) + ($27))|0;
 $29 = (($28|0) % 7)&-1;
 STACKTOP = sp;return ($29|0);
}
function _getDay2() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $0 = sp + 40|0;
 $10 = sp + 66|0;
 $11 = sp + 44|0;
 $1 = 0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $12 = 0;
 $12 = 0;
 (_time(($0|0))|0);
 $13 = (_localtime(($0|0))|0);
 $1 = $13;
 $14 = $1;
 $15 = (_asctime(($14|0))|0);
 $2 = $15;
 $16 = $1;
 $17 = ((($16)) + 20|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($18) + 1900)|0;
 $3 = $19;
 $20 = $1;
 $21 = ((($20)) + 16|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = (($22) + 1)|0;
 $4 = $23;
 $24 = $1;
 $25 = ((($24)) + 12|0);
 $26 = HEAP32[$25>>2]|0;
 $5 = $26;
 $27 = $1;
 $28 = ((($27)) + 8|0);
 $29 = HEAP32[$28>>2]|0;
 $6 = $29;
 $30 = $1;
 $31 = ((($30)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $7 = $32;
 $33 = $1;
 $34 = HEAP32[$33>>2]|0;
 $8 = $34;
 dest=$10; stop=dest+22|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$11; stop=dest+22|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $35 = $3;
 $36 = $4;
 $37 = $5;
 $38 = (_dayofweek($35,$36,$37)|0);
 $9 = $38;
 $39 = $9;
 $40 = ($39|0)==(0);
 do {
  if ($40) {
   (_strcpy($10,1914)|0);
  } else {
   $41 = $9;
   $42 = ($41|0)==(1);
   if ($42) {
    (_strcpy($10,1921)|0);
    break;
   }
   $43 = $9;
   $44 = ($43|0)==(2);
   if ($44) {
    (_strcpy($10,1927)|0);
    break;
   }
   $45 = $9;
   $46 = ($45|0)==(3);
   if ($46) {
    (_strcpy($10,1934)|0);
    break;
   }
   $47 = $9;
   $48 = ($47|0)==(4);
   if ($48) {
    (_strcpy($10,1939)|0);
    break;
   }
   $49 = $9;
   $50 = ($49|0)==(5);
   if ($50) {
    (_strcpy($10,1945)|0);
    break;
   }
   $51 = $9;
   $52 = ($51|0)==(6);
   if ($52) {
    (_strcpy($10,1951)|0);
    break;
   } else {
    (_strcpy($10,16408)|0);
    break;
   }
  }
 } while(0);
 (_strcpy($11,$10)|0);
 $12 = $10;
 $53 = $12;
 STACKTOP = sp;return ($53|0);
}
function _writeLog($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0;
 var $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 358|0;
 $4 = sp + 336|0;
 $5 = sp + 36|0;
 $1 = $0;
 $2 = 0;
 dest=$3; stop=dest+11|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$4; stop=dest+22|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($5|0),0,300)|0;
 $6 = (_createFilename()|0);
 (_strcpy($3,$6)|0);
 $7 = (_createTime()|0);
 (_strcpy($4,$7)|0);
 $8 = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $8;
 (_snprintf($5,300,1908,$vararg_buffer)|0);
 $9 = (_fopen($3,11022)|0);
 $2 = $9;
 $10 = $2;
 $11 = ($10|0)==(0|0);
 if ($11) {
  (_printf(1957,$vararg_buffer2)|0);
 }
 $12 = $2;
 HEAP32[$vararg_buffer4>>2] = $5;
 $13 = (_fprintf($12,1990,$vararg_buffer4)|0);
 $14 = (-1)==($13|0);
 if ($14) {
  (_printf(1957,$vararg_buffer7)|0);
 }
 $15 = $2;
 (_fflush($15)|0);
 $16 = $2;
 (_fclose($16)|0);
 dest=$3; stop=dest+11|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 dest=$4; stop=dest+22|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($5|0),0,300)|0;
 STACKTOP = sp;return;
}
function _createFilename() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer17 = 0, $vararg_buffer22 = 0, $vararg_buffer27 = 0, $vararg_buffer4 = 0;
 var $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr25 = 0, $vararg_ptr26 = 0, $vararg_ptr30 = 0, $vararg_ptr31 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer27 = sp + 88|0;
 $vararg_buffer22 = sp + 72|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $0 = sp + 124|0;
 $6 = sp + 152|0;
 $7 = sp + 144|0;
 $8 = sp + 140|0;
 $9 = sp + 128|0;
 $1 = 0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $10 = 0;
 ;HEAP8[$6>>0]=0|0;HEAP8[$6+1>>0]=0|0;HEAP8[$6+2>>0]=0|0;HEAP8[$6+3>>0]=0|0;HEAP8[$6+4>>0]=0|0;HEAP8[$6+5>>0]=0|0;HEAP8[$6+6>>0]=0|0;HEAP8[$6+7>>0]=0|0;
 ;HEAP8[$7>>0]=0|0;HEAP8[$7+1>>0]=0|0;HEAP8[$7+2>>0]=0|0;HEAP8[$7+3>>0]=0|0;
 ;HEAP8[$8>>0]=0|0;HEAP8[$8+1>>0]=0|0;HEAP8[$8+2>>0]=0|0;HEAP8[$8+3>>0]=0|0;
 (_time(($0|0))|0);
 $11 = (_localtime(($0|0))|0);
 $1 = $11;
 $12 = $1;
 $13 = (_asctime(($12|0))|0);
 $2 = $13;
 $14 = $1;
 $15 = ((($14)) + 20|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = (($16) + 1900)|0;
 $3 = $17;
 $18 = $1;
 $19 = ((($18)) + 16|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = (($20) + 1)|0;
 $4 = $21;
 $22 = $1;
 $23 = ((($22)) + 12|0);
 $24 = HEAP32[$23>>2]|0;
 $5 = $24;
 $25 = $3;
 HEAP32[$vararg_buffer>>2] = $25;
 (_snprintf($6,8,16176,$vararg_buffer)|0);
 $26 = $4;
 HEAP32[$vararg_buffer1>>2] = $26;
 (_snprintf($7,4,16176,$vararg_buffer1)|0);
 $27 = $5;
 HEAP32[$vararg_buffer4>>2] = $27;
 (_snprintf($8,4,16176,$vararg_buffer4)|0);
 dest=$9; stop=dest+11|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 HEAP32[$vararg_buffer7>>2] = $6;
 $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
 HEAP32[$vararg_ptr10>>2] = $7;
 $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
 HEAP32[$vararg_ptr11>>2] = $8;
 (_snprintf($9,11,1732,$vararg_buffer7)|0);
 $28 = (_strlen($7)|0);
 $29 = ($28>>>0)<(2);
 $30 = (_strlen($8)|0);
 $31 = ($30>>>0)<(2);
 if ($29) {
  if ($31) {
   HEAP32[$vararg_buffer12>>2] = $6;
   $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
   HEAP32[$vararg_ptr15>>2] = $7;
   $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
   HEAP32[$vararg_ptr16>>2] = $8;
   (_snprintf($9,11,1707,$vararg_buffer12)|0);
   $10 = $9;
   $32 = $10;
   STACKTOP = sp;return ($32|0);
  } else {
   HEAP32[$vararg_buffer17>>2] = $6;
   $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
   HEAP32[$vararg_ptr20>>2] = $7;
   $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
   HEAP32[$vararg_ptr21>>2] = $8;
   (_snprintf($9,11,1716,$vararg_buffer17)|0);
   $10 = $9;
   $32 = $10;
   STACKTOP = sp;return ($32|0);
  }
 } else {
  if ($31) {
   HEAP32[$vararg_buffer22>>2] = $6;
   $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
   HEAP32[$vararg_ptr25>>2] = $7;
   $vararg_ptr26 = ((($vararg_buffer22)) + 8|0);
   HEAP32[$vararg_ptr26>>2] = $8;
   (_snprintf($9,11,1724,$vararg_buffer22)|0);
   $10 = $9;
   $32 = $10;
   STACKTOP = sp;return ($32|0);
  } else {
   HEAP32[$vararg_buffer27>>2] = $6;
   $vararg_ptr30 = ((($vararg_buffer27)) + 4|0);
   HEAP32[$vararg_ptr30>>2] = $7;
   $vararg_ptr31 = ((($vararg_buffer27)) + 8|0);
   HEAP32[$vararg_ptr31>>2] = $8;
   (_snprintf($9,11,1732,$vararg_buffer27)|0);
   $10 = $9;
   $32 = $10;
   STACKTOP = sp;return ($32|0);
  }
 }
 return (0)|0;
}
function _LineCounter() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $1 = 1;
 $2 = HEAP32[(73792)>>2]|0;
 $0 = $2;
 while(1) {
  $3 = $0;
  $4 = HEAP32[(73792)>>2]|0;
  $5 = HEAP32[18446]|0;
  $6 = (($4) + ($5)|0);
  $7 = ($3>>>0)<($6>>>0);
  if (!($7)) {
   break;
  }
  $8 = $0;
  $9 = HEAP8[$8>>0]|0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)==(10);
  if ($11) {
   $12 = $1;
   $13 = (($12) + 1)|0;
   $1 = $13;
  }
  $14 = $0;
  $15 = ((($14)) + 1|0);
  $0 = $15;
 }
 $16 = (_strlen(127780)|0);
 $17 = ($16>>>0)>(0);
 if (!($17)) {
  $23 = $1;
  STACKTOP = sp;return ($23|0);
 }
 $18 = $1;
 $19 = HEAP32[8088]|0;
 $20 = (32368 + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (($18) - ($21))|0;
 $1 = $22;
 $23 = $1;
 STACKTOP = sp;return ($23|0);
}
function _checkParamNum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 $10 = $3;
 $11 = (_split($10,17719)|0);
 $8 = $11;
 $12 = $8;
 $13 = ($12|0)!=(0|0);
 L1: do {
  if ($13) {
   $7 = 0;
   while(1) {
    $14 = $7;
    $15 = $8;
    $16 = (($15) + ($14<<2)|0);
    $17 = HEAP32[$16>>2]|0;
    $18 = ($17|0)!=(0|0);
    if (!($18)) {
     break L1;
    }
    $19 = $7;
    $20 = $8;
    $21 = (($20) + ($19<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = (_strlen($22)|0);
    $24 = ($23>>>0)>(0);
    if (!($24)) {
     break L1;
    }
    $25 = $7;
    $26 = (($25) + 1)|0;
    $7 = $26;
    $27 = $5;
    $28 = (($27) + 1)|0;
    $5 = $28;
   }
  }
 } while(0);
 $29 = $4;
 $30 = (_split($29,17719)|0);
 $9 = $30;
 $31 = $9;
 $32 = ($31|0)!=(0|0);
 L8: do {
  if ($32) {
   $7 = 0;
   while(1) {
    $33 = $7;
    $34 = $9;
    $35 = (($34) + ($33<<2)|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)!=(0|0);
    if (!($37)) {
     break L8;
    }
    $38 = $7;
    $39 = $9;
    $40 = (($39) + ($38<<2)|0);
    $41 = HEAP32[$40>>2]|0;
    $42 = (_strlen($41)|0);
    $43 = ($42>>>0)>(0);
    if (!($43)) {
     break L8;
    }
    $44 = $7;
    $45 = (($44) + 1)|0;
    $7 = $45;
    $46 = $6;
    $47 = (($46) + 1)|0;
    $6 = $47;
   }
  }
 } while(0);
 $48 = $8;
 $49 = ($48|0)!=(0|0);
 if ($49) {
  $50 = $8;
  _split_free($50);
 }
 $51 = $9;
 $52 = ($51|0)!=(0|0);
 if ($52) {
  $53 = $9;
  _split_free($53);
 }
 $8 = 0;
 $9 = 0;
 $54 = $5;
 $55 = $6;
 $56 = ($54|0)==($55|0);
 if ($56) {
  $2 = 0;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 } else {
  $2 = -1;
  $57 = $2;
  STACKTOP = sp;return ($57|0);
 }
 return (0)|0;
}
function _split($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $10 = $3;
 $11 = ($10|0)==(0|0);
 $12 = $4;
 $13 = ($12|0)==(0|0);
 $or$cond = $11 | $13;
 if ($or$cond) {
  $2 = 0;
  $53 = $2;
  STACKTOP = sp;return ($53|0);
 }
 $14 = $3;
 $15 = (_strlen($14)|0);
 $16 = (($15) + 1)|0;
 $17 = (_malloc($16)|0);
 $7 = $17;
 $18 = $7;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $2 = 0;
  $53 = $2;
  STACKTOP = sp;return ($53|0);
 }
 $20 = $7;
 $21 = $3;
 (_strcpy($20,$21)|0);
 $22 = $7;
 $23 = $4;
 $24 = (_strtok($22,$23)|0);
 $8 = $24;
 while(1) {
  $25 = $8;
  $26 = ($25|0)!=(0|0);
  $27 = $5;
  if (!($26)) {
   break;
  }
  $28 = $6;
  $29 = (($28) + 3)|0;
  $30 = $29<<2;
  $31 = (_realloc($27,$30)|0);
  $9 = $31;
  $32 = $9;
  $33 = ($32|0)==(0|0);
  if ($33) {
   label = 8;
   break;
  }
  $36 = $8;
  $37 = $6;
  $38 = (($37) + 1)|0;
  $6 = $38;
  $39 = $9;
  $40 = (($39) + ($38<<2)|0);
  HEAP32[$40>>2] = $36;
  $41 = $9;
  $5 = $41;
  $42 = $4;
  $43 = (_strtok(0,$42)|0);
  $8 = $43;
 }
 if ((label|0) == 8) {
  $34 = $5;
  _free($34);
  $35 = $7;
  _free($35);
  $2 = 0;
  $53 = $2;
  STACKTOP = sp;return ($53|0);
 }
 $44 = ($27|0)!=(0|0);
 $45 = $7;
 if ($44) {
  $46 = $5;
  HEAP32[$46>>2] = $45;
  $47 = $5;
  $48 = ((($47)) + 4|0);
  $5 = $48;
  $49 = $6;
  $50 = $5;
  $51 = (($50) + ($49<<2)|0);
  HEAP32[$51>>2] = 0;
 } else {
  _free($45);
 }
 $52 = $5;
 $2 = $52;
 $53 = $2;
 STACKTOP = sp;return ($53|0);
}
function _split_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + -4|0);
 $1 = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = $1;
 _free($8);
 STACKTOP = sp;return;
}
function _subtituteParam($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 944|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(944|0);
 $vararg_buffer = sp;
 $6 = sp + 336|0;
 $7 = sp + 32|0;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $8 = 0;
 _memset(($6|0),0,600)|0;
 _memset(($7|0),0,300)|0;
 $9 = 0;
 $10 = 0;
 $11 = $4;
 $12 = (_split($11,17719)|0);
 $9 = $12;
 $13 = $5;
 $14 = (_split($13,17719)|0);
 $10 = $14;
 (_strcpy($6,17193)|0);
 $15 = $9;
 $16 = ($15|0)!=(0|0);
 L1: do {
  if ($16) {
   $8 = 0;
   while(1) {
    $17 = $8;
    $18 = $9;
    $19 = (($18) + ($17<<2)|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)!=(0|0);
    if (!($21)) {
     break L1;
    }
    $22 = $8;
    $23 = $9;
    $24 = (($23) + ($22<<2)|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = (_strlen($25)|0);
    $27 = ($26>>>0)>(0);
    if (!($27)) {
     break L1;
    }
    _memset(($7|0),0,300)|0;
    $28 = $8;
    $29 = $10;
    $30 = (($29) + ($28<<2)|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = $8;
    $33 = $9;
    $34 = (($33) + ($32<<2)|0);
    $35 = HEAP32[$34>>2]|0;
    HEAP32[$vararg_buffer>>2] = $31;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = $35;
    (_snprintf($7,300,2125,$vararg_buffer)|0);
    (_strcat($6,$7)|0);
    $36 = $8;
    $37 = (($36) + 1)|0;
    $8 = $37;
   }
  }
 } while(0);
 $38 = $9;
 _split_free($38);
 $39 = $10;
 _split_free($39);
 (_strcat($6,17196)|0);
 $40 = $3;
 (_strcpy($40,$6)|0);
 STACKTOP = sp;return;
}
function _class_params_init() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 128;
 $1 = 0;
 _memset((32896|0),0,38916)|0;
 $1 = 0;
 while(1) {
  $2 = $1;
  $3 = $0;
  $4 = ($2|0)<($3|0);
  if (!($4)) {
   break;
  }
  $5 = $1;
  $6 = (32896 + ($5<<7)|0);
  (_strcpy($6,1358125)|0);
  $7 = $1;
  $8 = (($7) + 1)|0;
  $1 = $8;
 }
 STACKTOP = sp;return;
}
function _node_addLast($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = 0;
 $2 = (_malloc(920)|0);
 $1 = $2;
 $3 = $1;
 $4 = ($3|0)==(0|0);
 if ($4) {
  (_printf(2134,$vararg_buffer)|0);
 }
 $5 = HEAP32[17953]|0;
 $6 = ($5|0)!=(0|0);
 $7 = $1;
 if ($6) {
  $8 = HEAP32[17953]|0;
  $9 = ((($8)) + 916|0);
  HEAP32[$9>>2] = $7;
 } else {
  HEAP32[17954] = $7;
 }
 $10 = $1;
 HEAP32[17953] = $10;
 $11 = HEAP32[17953]|0;
 _memcpy(($11|0),($0|0),920)|0;
 $12 = HEAP32[17953]|0;
 $13 = ((($12)) + 916|0);
 HEAP32[$13>>2] = 0;
 STACKTOP = sp;return;
}
function _node_removeAll() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = HEAP32[17954]|0;
 $0 = $2;
 while(1) {
  $3 = $0;
  $4 = ($3|0)!=(0|0);
  if (!($4)) {
   break;
  }
  $5 = $0;
  $6 = ((($5)) + 916|0);
  $7 = HEAP32[$6>>2]|0;
  $1 = $7;
  $8 = $0;
  _free($8);
  $9 = $1;
  $0 = $9;
 }
 HEAP32[17954] = 0;
 HEAP32[17953] = 0;
 STACKTOP = sp;return;
}
function _node_getElement($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 928|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(928|0);
 $4 = sp;
 $2 = $1;
 $3 = 0;
 _memset(($4|0),0,920)|0;
 $5 = ((($4)) + 4|0);
 HEAP8[$5>>0] = 0;
 $6 = ((($4)) + 916|0);
 HEAP32[$6>>2] = 0;
 $7 = $2;
 $8 = ($7|0)<(0);
 if ($8) {
  _memcpy(($0|0),($4|0),920)|0;
  STACKTOP = sp;return;
 }
 $9 = HEAP32[17954]|0;
 $3 = $9;
 while(1) {
  $10 = $3;
  $11 = ($10|0)!=(0|0);
  if (!($11)) {
   label = 8;
   break;
  }
  $12 = $2;
  $13 = (($12) + -1)|0;
  $2 = $13;
  $14 = ($12|0)==(0);
  $15 = $3;
  if ($14) {
   label = 6;
   break;
  }
  $16 = ((($15)) + 916|0);
  $17 = HEAP32[$16>>2]|0;
  $3 = $17;
 }
 if ((label|0) == 6) {
  _memcpy(($0|0),($15|0),920)|0;
  STACKTOP = sp;return;
 }
 else if ((label|0) == 8) {
  _memcpy(($0|0),($4|0),920)|0;
  STACKTOP = sp;return;
 }
}
function _node_findData($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = 0;
 $2 = 0;
 $4 = HEAP32[17954]|0;
 $2 = $4;
 L1: while(1) {
  $5 = $2;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   label = 12;
   break;
  }
  $7 = ((($0)) + 12|0);
  $8 = $2;
  $9 = ((($8)) + 12|0);
  $10 = ((($0)) + 12|0);
  $11 = (_strlen($10)|0);
  $12 = (_strncmp($7,$9,$11)|0);
  $13 = ($12|0)==(0);
  do {
   if ($13) {
    $14 = ((($0)) + 908|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ($15|0)==(1);
    if ($16) {
     $17 = ((($0)) + 140|0);
     $18 = $2;
     $19 = ((($18)) + 140|0);
     $20 = (_strcmp($17,$19)|0);
     $21 = ($20|0)!=(0);
     if ($21) {
      break;
     }
     $22 = $2;
     $23 = ((($22)) + 140|0);
     $24 = (_strlen($23)|0);
     $25 = ($24>>>0)>(0);
     if ($25) {
      label = 7;
      break L1;
     } else {
      break;
     }
    } else {
     $27 = ((($0)) + 908|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(2);
     if (!($29)) {
      break;
     }
     $30 = ((($0)) + 780|0);
     $31 = $2;
     $32 = ((($31)) + 780|0);
     $33 = (_strcmp($30,$32)|0);
     $34 = ($33|0)!=(0);
     if ($34) {
      break;
     } else {
      label = 10;
      break L1;
     }
    }
   }
  } while(0);
  $36 = $3;
  $37 = (($36) + 1)|0;
  $3 = $37;
  $38 = $2;
  $39 = ((($38)) + 916|0);
  $40 = HEAP32[$39>>2]|0;
  $2 = $40;
 }
 if ((label|0) == 7) {
  $26 = $3;
  $1 = $26;
  $41 = $1;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 10) {
  $35 = $3;
  $1 = $35;
  $41 = $1;
  STACKTOP = sp;return ($41|0);
 }
 else if ((label|0) == 12) {
  $1 = -1;
  $41 = $1;
  STACKTOP = sp;return ($41|0);
 }
 return (0)|0;
}
function _class_findParams($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = 0;
 $3 = 0;
 $1 = 0;
 $4 = HEAP32[17954]|0;
 $1 = $4;
 while(1) {
  $5 = $1;
  $6 = ($5|0)!=(0|0);
  if (!($6)) {
   break;
  }
  $7 = ((($0)) + 12|0);
  $8 = $1;
  $9 = ((($8)) + 12|0);
  $10 = ((($0)) + 12|0);
  $11 = (_strlen($10)|0);
  $12 = (_strncmp($7,$9,$11)|0);
  $13 = ($12|0)==(0);
  if ($13) {
   $14 = $1;
   $15 = ((($14)) + 140|0);
   $16 = (_strlen($15)|0);
   $17 = ($16>>>0)>(0);
   if ($17) {
    $18 = $2;
    $19 = $3;
    $20 = ((71296) + ($19<<2)|0);
    HEAP32[$20>>2] = $18;
    $21 = $3;
    $22 = (32896 + ($21<<7)|0);
    $23 = $1;
    $24 = ((($23)) + 140|0);
    (_strcpy($22,$24)|0);
    $25 = $3;
    $26 = (($25) + 1)|0;
    $3 = $26;
   }
  }
  $27 = $2;
  $28 = (($27) + 1)|0;
  $2 = $28;
  $29 = $1;
  $30 = ((($29)) + 916|0);
  $31 = HEAP32[$30>>2]|0;
  $1 = $31;
 }
 $32 = $3;
 HEAP32[(71808)>>2] = $32;
 STACKTOP = sp;return;
}
function _getlex() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = 0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $5 = HEAP32[7954]|0;
 $6 = ($5|0)==(28);
 do {
  if ($6) {
   $0 = 0;
  } else {
   $7 = HEAP32[18446]|0;
   HEAP32[(73788)>>2] = $7;
   $8 = (_GetChar()|0);
   $1 = $8;
   _memset((31816|0),0,464)|0;
   $9 = $1;
   $10 = $9 << 24 >> 24;
   $11 = ($10|0)==(10);
   if (!($11)) {
    $12 = $1;
    $13 = $12 << 24 >> 24;
    $14 = ($13|0)==(13);
    if (!($14)) {
     $15 = $1;
     $16 = $15 << 24 >> 24;
     $17 = (_isdigit($16)|0);
     $18 = ($17|0)!=(0);
     if ($18) {
      $19 = (_checkFloat()|0);
      $2 = $19;
      $20 = $2;
      $21 = ($20|0)==(1);
      if ($21) {
       $22 = (_lex_double()|0);
       $0 = $22;
       break;
      } else {
       $23 = (_lex_const()|0);
       $0 = $23;
       break;
      }
     }
     $24 = $1;
     $25 = $24 << 24 >> 24;
     $26 = ($25|0)==(34);
     if ($26) {
      $27 = (_lex_string()|0);
      $0 = $27;
      break;
     }
     $28 = $1;
     $29 = $28 << 24 >> 24;
     $30 = (_isalpha($29)|0);
     $31 = ($30|0)!=(0);
     if (!($31)) {
      $32 = $1;
      $33 = $32 << 24 >> 24;
      $34 = ($33|0)==(95);
      if (!($34)) {
       $49 = $1;
       $50 = $49 << 24 >> 24;
       $51 = ($50|0)==(0);
       if ($51) {
        HEAP32[7954] = 28;
        $0 = 0;
        break;
       } else {
        HEAP32[7954] = 227;
        $52 = $1;
        HEAP8[(31976)>>0] = $52;
        $53 = HEAP32[18446]|0;
        $54 = (($53) + 1)|0;
        HEAP32[18446] = $54;
        $55 = HEAP32[8087]|0;
        $56 = (($55) + 1)|0;
        HEAP32[8087] = $56;
        $0 = 0;
        break;
       }
      }
     }
     $35 = (_checkArray()|0);
     $2 = $35;
     $36 = $2;
     $37 = ($36|0)==(1);
     if ($37) {
      $38 = (_lex_array()|0);
      $0 = $38;
      break;
     }
     $39 = (_checkObject()|0);
     $3 = $39;
     $40 = $3;
     $41 = ($40|0)==(1);
     if (!($41)) {
      $47 = HEAP32[18446]|0;
      HEAP32[17955] = $47;
      $48 = (_lex_ident()|0);
      $0 = $48;
      break;
     }
     $42 = (_checkObjectFunc()|0);
     $4 = $42;
     $43 = $4;
     $44 = ($43|0)==(1);
     if ($44) {
      $45 = (_lex_object_func()|0);
      $0 = $45;
      break;
     } else {
      $46 = (_lex_object()|0);
      $0 = $46;
      break;
     }
    }
   }
   $0 = 0;
  }
 } while(0);
 $57 = $0;
 STACKTOP = sp;return ($57|0);
}
function _GetChar() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $1 = 0;
 $2 = 0;
 $3 = 0;
 _memset((128080|0),0,300)|0;
 $4 = HEAP32[17955]|0;
 $5 = HEAP32[18446]|0;
 $6 = ($4|0)<($5|0);
 if ($6) {
  $7 = HEAP32[17955]|0;
  $3 = $7;
  $2 = 0;
  while(1) {
   $8 = $3;
   $9 = HEAP32[(73792)>>2]|0;
   $10 = (($9) + ($8)|0);
   $11 = HEAP8[$10>>0]|0;
   $1 = $11;
   $12 = $1;
   $13 = $2;
   $14 = (128080 + ($13)|0);
   HEAP8[$14>>0] = $12;
   $15 = $3;
   $16 = (($15) + 1)|0;
   $3 = $16;
   $17 = $2;
   $18 = (($17) + 1)|0;
   $2 = $18;
   $19 = $1;
   $20 = $19 << 24 >> 24;
   $21 = (_isspace($20)|0);
   $22 = ($21|0)!=(0);
   if ($22) {
    break;
   }
   $23 = $1;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)!=(0);
   if (!($25)) {
    break;
   }
  }
  $26 = $2;
  $27 = (128080 + ($26)|0);
  HEAP8[$27>>0] = 0;
 }
 while(1) {
  $28 = HEAP32[18446]|0;
  $29 = (($28) + 1)|0;
  HEAP32[18446] = $29;
  $30 = HEAP32[(73792)>>2]|0;
  $31 = (($30) + ($28)|0);
  $32 = HEAP8[$31>>0]|0;
  $0 = $32;
  $33 = HEAP32[8087]|0;
  $34 = (($33) + 1)|0;
  HEAP32[8087] = $34;
  $35 = $0;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)==(35);
  L9: do {
   if ($37) {
    while(1) {
     $38 = HEAP32[18446]|0;
     $39 = (($38) + 1)|0;
     HEAP32[18446] = $39;
     $40 = HEAP32[(73792)>>2]|0;
     $41 = (($40) + ($38)|0);
     $42 = HEAP8[$41>>0]|0;
     $0 = $42;
     $43 = HEAP32[8087]|0;
     $44 = (($43) + 1)|0;
     HEAP32[8087] = $44;
     $45 = $0;
     $46 = $45 << 24 >> 24;
     $47 = ($46|0)!=(0);
     if (!($47)) {
      break L9;
     }
     $48 = $0;
     $49 = $48 << 24 >> 24;
     $50 = ($49|0)!=(10);
     if (!($50)) {
      break L9;
     }
     $51 = $0;
     $52 = $51 << 24 >> 24;
     $53 = ($52|0)!=(13);
     if (!($53)) {
      break;
     }
    }
   }
  } while(0);
  $54 = $0;
  $55 = $54 << 24 >> 24;
  $56 = (_isspace($55)|0);
  $57 = ($56|0)!=(0);
  if (!($57)) {
   label = 12;
   break;
  }
  $58 = $0;
  $59 = $58 << 24 >> 24;
  $60 = ($59|0)!=(0);
  if (!($60)) {
   label = 12;
   break;
  }
 }
 if ((label|0) == 12) {
  $61 = HEAP32[18446]|0;
  $62 = (($61) + -1)|0;
  HEAP32[18446] = $62;
  $63 = HEAP32[8087]|0;
  $64 = (($63) + -1)|0;
  HEAP32[8087] = $64;
  $65 = $0;
  STACKTOP = sp;return ($65|0);
 }
 return (0)|0;
}
function _checkFloat() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $0 = 0;
 $1 = 0;
 $2 = 0;
 $3 = 0;
 while(1) {
  $4 = HEAP32[18446]|0;
  $5 = (($4) + 1)|0;
  HEAP32[18446] = $5;
  $6 = HEAP32[(73792)>>2]|0;
  $7 = (($6) + ($4)|0);
  $8 = HEAP8[$7>>0]|0;
  $0 = $8;
  $9 = $3;
  $10 = (($9) + 1)|0;
  $3 = $10;
  $11 = $0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(46);
  if ($13) {
   $1 = 1;
  }
  $14 = $0;
  $15 = $14 << 24 >> 24;
  $16 = (_isspace($15)|0);
  $17 = ($16|0)!=(0);
  if ($17) {
   break;
  }
  $18 = $0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   break;
  }
 }
 $2 = 0;
 while(1) {
  $21 = $2;
  $22 = $3;
  $23 = ($21|0)<($22|0);
  if (!($23)) {
   break;
  }
  $24 = HEAP32[18446]|0;
  $25 = (($24) + -1)|0;
  HEAP32[18446] = $25;
  $26 = $2;
  $27 = (($26) + 1)|0;
  $2 = $27;
 }
 $28 = $1;
 STACKTOP = sp;return ($28|0);
}
function _lex_double() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = 0;
 _memset((31816|0),0,464)|0;
 while(1) {
  $2 = HEAP32[18446]|0;
  $3 = (($2) + 1)|0;
  HEAP32[18446] = $3;
  $4 = HEAP32[(73792)>>2]|0;
  $5 = (($4) + ($2)|0);
  $6 = HEAP8[$5>>0]|0;
  $0 = $6;
  $7 = HEAP32[8087]|0;
  $8 = (($7) + 1)|0;
  HEAP32[8087] = $8;
  $9 = $0;
  $10 = $9 << 24 >> 24;
  $11 = ($10|0)==(0);
  if ($11) {
   break;
  }
  $12 = $0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)==(13);
  if ($14) {
   break;
  }
  $15 = $0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)==(10);
  if ($17) {
   break;
  }
  $18 = $0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(8);
  if ($20) {
   break;
  }
  $21 = $0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)==(12);
  if ($23) {
   break;
  }
  $24 = $0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)==(9);
  if ($26) {
   break;
  }
  $27 = $1;
  $28 = ($27|0)>(299);
  if ($28) {
   _Error(2156,$vararg_buffer);
  }
  $29 = $0;
  $30 = $1;
  $31 = (($30) + 1)|0;
  $1 = $31;
  $32 = ((31976) + ($30)|0);
  HEAP8[$32>>0] = $29;
  $33 = $0;
  $34 = $33 << 24 >> 24;
  $35 = (_isspace($34)|0);
  $36 = ($35|0)!=(0);
  if ($36) {
   break;
  }
  $37 = $0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)!=(0);
  if (!($39)) {
   break;
  }
  $40 = $0;
  $41 = $40 << 24 >> 24;
  $42 = ($41|0)!=(44);
  if (!($42)) {
   break;
  }
  $43 = $0;
  $44 = $43 << 24 >> 24;
  $45 = ($44|0)!=(40);
  if (!($45)) {
   break;
  }
  $46 = $0;
  $47 = $46 << 24 >> 24;
  $48 = ($47|0)!=(41);
  if (!($48)) {
   break;
  }
  $49 = $0;
  $50 = $49 << 24 >> 24;
  $51 = ($50|0)!=(123);
  if (!($51)) {
   break;
  }
  $52 = $0;
  $53 = $52 << 24 >> 24;
  $54 = ($53|0)!=(125);
  if (!($54)) {
   break;
  }
  $55 = $0;
  $56 = $55 << 24 >> 24;
  $57 = ($56|0)!=(59);
  if (!($57)) {
   break;
  }
 }
 $58 = $1;
 $59 = (($58) - 1)|0;
 $60 = ((31976) + ($59)|0);
 $61 = HEAP8[$60>>0]|0;
 $62 = $61 << 24 >> 24;
 $63 = ($62|0)==(44);
 if (!($63)) {
  $64 = $1;
  $65 = (($64) - 1)|0;
  $66 = ((31976) + ($65)|0);
  $67 = HEAP8[$66>>0]|0;
  $68 = $67 << 24 >> 24;
  $69 = ($68|0)==(40);
  if (!($69)) {
   $70 = $1;
   $71 = (($70) - 1)|0;
   $72 = ((31976) + ($71)|0);
   $73 = HEAP8[$72>>0]|0;
   $74 = $73 << 24 >> 24;
   $75 = ($74|0)==(41);
   if (!($75)) {
    $76 = $1;
    $77 = (($76) - 1)|0;
    $78 = ((31976) + ($77)|0);
    $79 = HEAP8[$78>>0]|0;
    $80 = $79 << 24 >> 24;
    $81 = ($80|0)==(123);
    if (!($81)) {
     $82 = $1;
     $83 = (($82) - 1)|0;
     $84 = ((31976) + ($83)|0);
     $85 = HEAP8[$84>>0]|0;
     $86 = $85 << 24 >> 24;
     $87 = ($86|0)==(125);
     if (!($87)) {
      $88 = $1;
      $89 = (($88) - 1)|0;
      $90 = ((31976) + ($89)|0);
      $91 = HEAP8[$90>>0]|0;
      $92 = $91 << 24 >> 24;
      $93 = ($92|0)==(59);
      if (!($93)) {
       $97 = HEAP32[18446]|0;
       $98 = (($97) + -1)|0;
       HEAP32[18446] = $98;
       $99 = $1;
       $100 = ((31976) + ($99)|0);
       HEAP8[$100>>0] = 0;
       $101 = (+_strtodbl((31976)));
       HEAPF64[(31976)>>3] = $101;
       HEAP32[7954] = 226;
       STACKTOP = sp;return 0;
      }
     }
    }
   }
  }
 }
 $94 = $1;
 $95 = (($94) - 1)|0;
 $96 = ((31976) + ($95)|0);
 HEAP8[$96>>0] = 0;
 $97 = HEAP32[18446]|0;
 $98 = (($97) + -1)|0;
 HEAP32[18446] = $98;
 $99 = $1;
 $100 = ((31976) + ($99)|0);
 HEAP8[$100>>0] = 0;
 $101 = (+_strtodbl((31976)));
 HEAPF64[(31976)>>3] = $101;
 HEAP32[7954] = 226;
 STACKTOP = sp;return 0;
}
function _lex_const() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = 0;
 while(1) {
  $2 = HEAP32[18446]|0;
  $3 = (($2) + 1)|0;
  HEAP32[18446] = $3;
  $4 = HEAP32[(73792)>>2]|0;
  $5 = (($4) + ($2)|0);
  $6 = HEAP8[$5>>0]|0;
  $0 = $6;
  $7 = $6 << 24 >> 24;
  $8 = (_isdigit($7)|0);
  $9 = ($8|0)!=(0);
  $10 = $1;
  if (!($9)) {
   break;
  }
  $11 = ($10*10)|0;
  $12 = $0;
  $13 = $12 << 24 >> 24;
  $14 = (($13) - 48)|0;
  $15 = (($11) + ($14))|0;
  $1 = $15;
  $16 = HEAP32[8087]|0;
  $17 = (($16) + 1)|0;
  HEAP32[8087] = $17;
 }
 HEAP32[(31976)>>2] = $10;
 $18 = HEAP32[18446]|0;
 $19 = (($18) + -1)|0;
 HEAP32[18446] = $19;
 $20 = HEAP32[8087]|0;
 $21 = (($20) + -1)|0;
 HEAP32[8087] = $21;
 HEAP32[7954] = 223;
 STACKTOP = sp;return 0;
}
function _lex_string() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = 81;
 $1 = 0;
 _memset((31816|0),0,464)|0;
 $2 = HEAP32[18446]|0;
 $3 = (($2) + 1)|0;
 HEAP32[18446] = $3;
 $4 = HEAP32[8087]|0;
 $5 = (($4) + 1)|0;
 HEAP32[8087] = $5;
 while(1) {
  $6 = HEAP32[18446]|0;
  $7 = (($6) + 1)|0;
  HEAP32[18446] = $7;
  $8 = HEAP32[(73792)>>2]|0;
  $9 = (($8) + ($6)|0);
  $10 = HEAP8[$9>>0]|0;
  $0 = $10;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)!=(34);
  if (!($12)) {
   break;
  }
  $13 = HEAP32[8087]|0;
  $14 = (($13) + 1)|0;
  HEAP32[8087] = $14;
  $15 = $0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)==(0);
  if ($17) {
   break;
  }
  $18 = $0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)==(13);
  if ($20) {
   continue;
  }
  $21 = $0;
  $22 = $21 << 24 >> 24;
  $23 = ($22|0)==(10);
  if ($23) {
   continue;
  }
  $24 = $0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)==(8);
  if ($26) {
   continue;
  }
  $27 = $0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(12);
  if ($29) {
   continue;
  }
  $30 = $0;
  $31 = $30 << 24 >> 24;
  $32 = ($31|0)==(9);
  if ($32) {
   continue;
  }
  $33 = $0;
  $34 = $33 << 24 >> 24;
  $35 = ($34|0)==(92);
  L10: do {
   if ($35) {
    $36 = HEAP32[18446]|0;
    $37 = (($36) + 1)|0;
    HEAP32[18446] = $37;
    $38 = HEAP32[(73792)>>2]|0;
    $39 = (($38) + ($36)|0);
    $40 = HEAP8[$39>>0]|0;
    $0 = $40;
    $41 = HEAP32[8087]|0;
    $42 = (($41) + 1)|0;
    HEAP32[8087] = $42;
    $43 = $0;
    $44 = $43 << 24 >> 24;
    switch ($44|0) {
    case 98:  {
     $0 = 8;
     break L10;
     break;
    }
    case 102:  {
     $0 = 12;
     break L10;
     break;
    }
    case 114:  {
     $0 = 13;
     break L10;
     break;
    }
    case 110:  {
     $0 = 10;
     break L10;
     break;
    }
    case 116:  {
     $0 = 9;
     break L10;
     break;
    }
    default: {
     break L10;
    }
    }
   }
  } while(0);
  $45 = $1;
  $46 = ($45|0)>(299);
  if ($46) {
   _Error(2156,$vararg_buffer);
  }
  $47 = $0;
  $48 = $1;
  $49 = (($48) + 1)|0;
  $1 = $49;
  $50 = ((31976) + ($48)|0);
  HEAP8[$50>>0] = $47;
 }
 $51 = $1;
 $52 = ((31976) + ($51)|0);
 HEAP8[$52>>0] = 0;
 HEAP32[7954] = 225;
 $53 = HEAP8[(31976)>>0]|0;
 $54 = $53 << 24 >> 24;
 $55 = ($54|0)==(0);
 if (!($55)) {
  $56 = (_strlen((31976))|0);
  $57 = ($56>>>0)<=(0);
  if (!($57)) {
   STACKTOP = sp;return 0;
  }
 }
 (_strcpy((31976),1358125)|0);
 STACKTOP = sp;return 0;
}
function _checkArray() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = 0;
 $1 = 0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 while(1) {
  $9 = HEAP32[18446]|0;
  $10 = (($9) + 1)|0;
  HEAP32[18446] = $10;
  $11 = HEAP32[(73792)>>2]|0;
  $12 = (($11) + ($9)|0);
  $13 = HEAP8[$12>>0]|0;
  $0 = $13;
  $14 = $3;
  $15 = (($14) + 1)|0;
  $3 = $15;
  $16 = $0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)==(91);
  do {
   if ($18) {
    $19 = HEAP32[18446]|0;
    $4 = $19;
    $20 = $6;
    $21 = (($20) + 1)|0;
    $6 = $21;
   } else {
    $22 = $0;
    $23 = $22 << 24 >> 24;
    $24 = ($23|0)==(93);
    if ($24) {
     $25 = HEAP32[18446]|0;
     $5 = $25;
     $26 = $7;
     $27 = (($26) + 1)|0;
     $7 = $27;
     break;
    }
    $28 = $0;
    $29 = $28 << 24 >> 24;
    $30 = ($29|0)==(40);
    if ($30) {
     $8 = 1;
    }
   }
  } while(0);
  $31 = $0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(13);
  if ($33) {
   break;
  }
  $34 = $0;
  $35 = $34 << 24 >> 24;
  $36 = ($35|0)==(10);
  if ($36) {
   break;
  }
  $37 = $0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)==(8);
  if ($39) {
   break;
  }
  $40 = $0;
  $41 = $40 << 24 >> 24;
  $42 = ($41|0)==(12);
  if ($42) {
   break;
  }
  $43 = $0;
  $44 = $43 << 24 >> 24;
  $45 = ($44|0)==(9);
  if ($45) {
   break;
  }
  $46 = $0;
  $47 = $46 << 24 >> 24;
  $48 = (_isspace($47)|0);
  $49 = ($48|0)!=(0);
  if ($49) {
   break;
  }
  $50 = $0;
  $51 = $50 << 24 >> 24;
  $52 = ($51|0)!=(61);
  if (!($52)) {
   break;
  }
  $53 = $0;
  $54 = $53 << 24 >> 24;
  $55 = ($54|0)!=(44);
  if (!($55)) {
   break;
  }
  $56 = $0;
  $57 = $56 << 24 >> 24;
  $58 = ($57|0)!=(40);
  if (!($58)) {
   break;
  }
  $59 = $0;
  $60 = $59 << 24 >> 24;
  $61 = ($60|0)!=(0);
  if (!($61)) {
   break;
  }
 }
 $62 = $6;
 $63 = ($62|0)==(1);
 $64 = $7;
 $65 = ($64|0)==(1);
 $or$cond = $63 & $65;
 if ($or$cond) {
  $66 = $4;
  $67 = $5;
  $68 = ($66|0)<($67|0);
  $69 = $8;
  $70 = ($69|0)==(0);
  $or$cond6 = $68 & $70;
  if ($or$cond6) {
   $1 = 1;
  }
 }
 $2 = 0;
 while(1) {
  $71 = $2;
  $72 = $3;
  $73 = ($71|0)<($72|0);
  if (!($73)) {
   break;
  }
  $74 = HEAP32[18446]|0;
  $75 = (($74) + -1)|0;
  HEAP32[18446] = $75;
  $76 = $2;
  $77 = (($76) + 1)|0;
  $2 = $77;
 }
 $78 = $1;
 STACKTOP = sp;return ($78|0);
}
function _lex_array() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp;
 $0 = sp + 16|0;
 $2 = 0;
 $3 = 0;
 _memset(($0|0),0,300)|0;
 while(1) {
  $4 = HEAP32[18446]|0;
  $5 = (($4) + 1)|0;
  HEAP32[18446] = $5;
  $6 = HEAP32[(73792)>>2]|0;
  $7 = (($6) + ($4)|0);
  $8 = HEAP8[$7>>0]|0;
  $1 = $8;
  $9 = HEAP32[8087]|0;
  $10 = (($9) + 1)|0;
  HEAP32[8087] = $10;
  $11 = $1;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(0);
  if ($13) {
   break;
  }
  $14 = $1;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)==(13);
  if ($16) {
   break;
  }
  $17 = $1;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)==(10);
  if ($19) {
   break;
  }
  $20 = $1;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)==(8);
  if ($22) {
   break;
  }
  $23 = $1;
  $24 = $23 << 24 >> 24;
  $25 = ($24|0)==(12);
  if ($25) {
   break;
  }
  $26 = $1;
  $27 = $26 << 24 >> 24;
  $28 = ($27|0)==(9);
  if ($28) {
   break;
  }
  $29 = $2;
  $30 = ($29|0)>(299);
  if ($30) {
   _Error(2156,$vararg_buffer);
  }
  $31 = $1;
  $32 = $2;
  $33 = (($32) + 1)|0;
  $2 = $33;
  $34 = ((31976) + ($32)|0);
  HEAP8[$34>>0] = $31;
  $35 = $2;
  $3 = $35;
  $36 = $3;
  $37 = (($36) - 2)|0;
  $38 = ((31976) + ($37)|0);
  $39 = HEAP8[$38>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = ($40|0)==(93);
  if ($41) {
   $42 = $3;
   $43 = (($42) - 1)|0;
   $44 = ((31976) + ($43)|0);
   $45 = HEAP8[$44>>0]|0;
   $46 = $45 << 24 >> 24;
   $47 = ($46|0)==(43);
   if ($47) {
    break;
   }
  }
  $48 = $3;
  $49 = (($48) - 2)|0;
  $50 = ((31976) + ($49)|0);
  $51 = HEAP8[$50>>0]|0;
  $52 = $51 << 24 >> 24;
  $53 = ($52|0)==(93);
  if ($53) {
   $54 = $3;
   $55 = (($54) - 1)|0;
   $56 = ((31976) + ($55)|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = $57 << 24 >> 24;
   $59 = ($58|0)==(45);
   if ($59) {
    break;
   }
  }
  $60 = $1;
  $61 = $60 << 24 >> 24;
  $62 = (_isspace($61)|0);
  $63 = ($62|0)!=(0);
  if ($63) {
   break;
  }
  $64 = $1;
  $65 = $64 << 24 >> 24;
  $66 = ($65|0)!=(61);
  if (!($66)) {
   break;
  }
  $67 = $1;
  $68 = $67 << 24 >> 24;
  $69 = ($68|0)!=(44);
  if (!($69)) {
   break;
  }
  $70 = $1;
  $71 = $70 << 24 >> 24;
  $72 = ($71|0)!=(0);
  if (!($72)) {
   break;
  }
  $73 = $1;
  $74 = $73 << 24 >> 24;
  $75 = ($74|0)!=(40);
  if (!($75)) {
   break;
  }
  $76 = $1;
  $77 = $76 << 24 >> 24;
  $78 = ($77|0)!=(41);
  if (!($78)) {
   break;
  }
  $79 = $1;
  $80 = $79 << 24 >> 24;
  $81 = ($80|0)!=(123);
  if (!($81)) {
   break;
  }
  $82 = $1;
  $83 = $82 << 24 >> 24;
  $84 = ($83|0)!=(125);
  if (!($84)) {
   break;
  }
  $85 = $1;
  $86 = $85 << 24 >> 24;
  $87 = ($86|0)!=(59);
  if (!($87)) {
   break;
  }
 }
 $88 = $2;
 $89 = (($88) - 1)|0;
 $90 = ((31976) + ($89)|0);
 $91 = HEAP8[$90>>0]|0;
 $92 = $91 << 24 >> 24;
 $93 = ($92|0)==(44);
 if ($93) {
  label = 30;
 } else {
  $94 = $2;
  $95 = (($94) - 1)|0;
  $96 = ((31976) + ($95)|0);
  $97 = HEAP8[$96>>0]|0;
  $98 = $97 << 24 >> 24;
  $99 = ($98|0)==(40);
  if ($99) {
   label = 30;
  } else {
   $100 = $2;
   $101 = (($100) - 1)|0;
   $102 = ((31976) + ($101)|0);
   $103 = HEAP8[$102>>0]|0;
   $104 = $103 << 24 >> 24;
   $105 = ($104|0)==(41);
   if ($105) {
    label = 30;
   } else {
    $106 = $2;
    $107 = (($106) - 1)|0;
    $108 = ((31976) + ($107)|0);
    $109 = HEAP8[$108>>0]|0;
    $110 = $109 << 24 >> 24;
    $111 = ($110|0)==(61);
    if ($111) {
     label = 30;
    } else {
     $112 = $2;
     $113 = (($112) - 1)|0;
     $114 = ((31976) + ($113)|0);
     $115 = HEAP8[$114>>0]|0;
     $116 = $115 << 24 >> 24;
     $117 = ($116|0)==(123);
     if ($117) {
      label = 30;
     } else {
      $118 = $2;
      $119 = (($118) - 1)|0;
      $120 = ((31976) + ($119)|0);
      $121 = HEAP8[$120>>0]|0;
      $122 = $121 << 24 >> 24;
      $123 = ($122|0)==(125);
      if ($123) {
       label = 30;
      } else {
       $124 = $2;
       $125 = (($124) - 1)|0;
       $126 = ((31976) + ($125)|0);
       $127 = HEAP8[$126>>0]|0;
       $128 = $127 << 24 >> 24;
       $129 = ($128|0)==(59);
       if ($129) {
        label = 30;
       }
      }
     }
    }
   }
  }
 }
 if ((label|0) == 30) {
  $130 = $2;
  $131 = (($130) - 1)|0;
  $132 = ((31976) + ($131)|0);
  HEAP8[$132>>0] = 0;
 }
 $133 = $3;
 $134 = (($133) - 2)|0;
 $135 = ((31976) + ($134)|0);
 $136 = HEAP8[$135>>0]|0;
 $137 = $136 << 24 >> 24;
 $138 = ($137|0)==(93);
 if ($138) {
  $139 = $3;
  $140 = (($139) - 1)|0;
  $141 = ((31976) + ($140)|0);
  $142 = HEAP8[$141>>0]|0;
  $143 = $142 << 24 >> 24;
  $144 = ($143|0)==(43);
  if ($144) {
   $145 = $2;
   $146 = (($145) - 1)|0;
   $147 = ((31976) + ($146)|0);
   HEAP8[$147>>0] = 0;
  }
 }
 $148 = $3;
 $149 = (($148) - 2)|0;
 $150 = ((31976) + ($149)|0);
 $151 = HEAP8[$150>>0]|0;
 $152 = $151 << 24 >> 24;
 $153 = ($152|0)==(93);
 if (!($153)) {
  $163 = HEAP32[18446]|0;
  $164 = (($163) + -1)|0;
  HEAP32[18446] = $164;
  $165 = HEAP32[8087]|0;
  $166 = (($165) + -1)|0;
  HEAP32[8087] = $166;
  $167 = $2;
  $168 = ((31976) + ($167)|0);
  HEAP8[$168>>0] = 0;
  (_strcpy($0,(31976))|0);
  HEAP32[7954] = 228;
  STACKTOP = sp;return 0;
 }
 $154 = $3;
 $155 = (($154) - 1)|0;
 $156 = ((31976) + ($155)|0);
 $157 = HEAP8[$156>>0]|0;
 $158 = $157 << 24 >> 24;
 $159 = ($158|0)==(45);
 if (!($159)) {
  $163 = HEAP32[18446]|0;
  $164 = (($163) + -1)|0;
  HEAP32[18446] = $164;
  $165 = HEAP32[8087]|0;
  $166 = (($165) + -1)|0;
  HEAP32[8087] = $166;
  $167 = $2;
  $168 = ((31976) + ($167)|0);
  HEAP8[$168>>0] = 0;
  (_strcpy($0,(31976))|0);
  HEAP32[7954] = 228;
  STACKTOP = sp;return 0;
 }
 $160 = $2;
 $161 = (($160) - 1)|0;
 $162 = ((31976) + ($161)|0);
 HEAP8[$162>>0] = 0;
 $163 = HEAP32[18446]|0;
 $164 = (($163) + -1)|0;
 HEAP32[18446] = $164;
 $165 = HEAP32[8087]|0;
 $166 = (($165) + -1)|0;
 HEAP32[8087] = $166;
 $167 = $2;
 $168 = ((31976) + ($167)|0);
 HEAP8[$168>>0] = 0;
 (_strcpy($0,(31976))|0);
 HEAP32[7954] = 228;
 STACKTOP = sp;return 0;
}
function _checkObject() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $0 = 0;
 $1 = 0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 while(1) {
  $8 = HEAP32[18446]|0;
  $9 = (($8) + 1)|0;
  HEAP32[18446] = $9;
  $10 = HEAP32[(73792)>>2]|0;
  $11 = (($10) + ($8)|0);
  $12 = HEAP8[$11>>0]|0;
  $0 = $12;
  $13 = $3;
  $14 = (($13) + 1)|0;
  $3 = $14;
  $15 = $0;
  $16 = $15 << 24 >> 24;
  $17 = ($16|0)==(45);
  if ($17) {
   $18 = HEAP32[18446]|0;
   $4 = $18;
   $19 = $6;
   $20 = (($19) + 1)|0;
   $6 = $20;
  } else {
   $21 = $0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==(62);
   if ($23) {
    $24 = HEAP32[18446]|0;
    $5 = $24;
    $25 = $7;
    $26 = (($25) + 1)|0;
    $7 = $26;
   }
  }
  $27 = $0;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(13);
  if ($29) {
   break;
  }
  $30 = $0;
  $31 = $30 << 24 >> 24;
  $32 = ($31|0)==(10);
  if ($32) {
   break;
  }
  $33 = $0;
  $34 = $33 << 24 >> 24;
  $35 = ($34|0)==(8);
  if ($35) {
   break;
  }
  $36 = $0;
  $37 = $36 << 24 >> 24;
  $38 = ($37|0)==(12);
  if ($38) {
   break;
  }
  $39 = $0;
  $40 = $39 << 24 >> 24;
  $41 = ($40|0)==(9);
  if ($41) {
   break;
  }
  $42 = $0;
  $43 = $42 << 24 >> 24;
  $44 = (_isspace($43)|0);
  $45 = ($44|0)!=(0);
  if ($45) {
   break;
  }
  $46 = $0;
  $47 = $46 << 24 >> 24;
  $48 = ($47|0)!=(61);
  if (!($48)) {
   break;
  }
  $49 = $0;
  $50 = $49 << 24 >> 24;
  $51 = ($50|0)!=(0);
  if (!($51)) {
   break;
  }
 }
 $52 = $6;
 $53 = ($52|0)==(1);
 $54 = $7;
 $55 = ($54|0)==(1);
 $or$cond = $53 & $55;
 if ($or$cond) {
  $56 = $5;
  $57 = $4;
  $58 = (($57) + 1)|0;
  $59 = ($56|0)==($58|0);
  if ($59) {
   $1 = 1;
  }
 }
 $2 = 0;
 while(1) {
  $60 = $2;
  $61 = $3;
  $62 = ($60|0)<($61|0);
  if (!($62)) {
   break;
  }
  $63 = HEAP32[18446]|0;
  $64 = (($63) + -1)|0;
  HEAP32[18446] = $64;
  $65 = $2;
  $66 = (($65) + 1)|0;
  $2 = $66;
 }
 $67 = $1;
 STACKTOP = sp;return ($67|0);
}
function _checkObjectFunc() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $or$cond = 0, $or$cond4 = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $0 = 0;
 $1 = 0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 while(1) {
  $12 = HEAP32[18446]|0;
  $13 = (($12) + 1)|0;
  HEAP32[18446] = $13;
  $14 = HEAP32[(73792)>>2]|0;
  $15 = (($14) + ($12)|0);
  $16 = HEAP8[$15>>0]|0;
  $0 = $16;
  $17 = $3;
  $18 = (($17) + 1)|0;
  $3 = $18;
  $19 = $0;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(45);
  do {
   if ($21) {
    $22 = HEAP32[18446]|0;
    $4 = $22;
    $23 = $6;
    $24 = (($23) + 1)|0;
    $6 = $24;
   } else {
    $25 = $0;
    $26 = $25 << 24 >> 24;
    $27 = ($26|0)==(62);
    if ($27) {
     $28 = HEAP32[18446]|0;
     $5 = $28;
     $29 = $7;
     $30 = (($29) + 1)|0;
     $7 = $30;
     break;
    }
    $31 = $0;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)==(40);
    if ($33) {
     $34 = HEAP32[18446]|0;
     $8 = $34;
     $35 = $10;
     $36 = (($35) + 1)|0;
     $10 = $36;
     break;
    }
    $37 = $0;
    $38 = $37 << 24 >> 24;
    $39 = ($38|0)==(41);
    if ($39) {
     $40 = HEAP32[18446]|0;
     $9 = $40;
     $41 = $11;
     $42 = (($41) + 1)|0;
     $11 = $42;
    }
   }
  } while(0);
  $43 = $0;
  $44 = $43 << 24 >> 24;
  $45 = ($44|0)==(13);
  if ($45) {
   break;
  }
  $46 = $0;
  $47 = $46 << 24 >> 24;
  $48 = ($47|0)==(10);
  if ($48) {
   break;
  }
  $49 = $0;
  $50 = $49 << 24 >> 24;
  $51 = ($50|0)==(8);
  if ($51) {
   break;
  }
  $52 = $0;
  $53 = $52 << 24 >> 24;
  $54 = ($53|0)==(12);
  if ($54) {
   break;
  }
  $55 = $0;
  $56 = $55 << 24 >> 24;
  $57 = ($56|0)==(9);
  if ($57) {
   break;
  }
  $58 = $0;
  $59 = $58 << 24 >> 24;
  $60 = (_isspace($59)|0);
  $61 = ($60|0)!=(0);
  if ($61) {
   break;
  }
  $62 = $0;
  $63 = $62 << 24 >> 24;
  $64 = ($63|0)!=(61);
  if (!($64)) {
   break;
  }
  $65 = $0;
  $66 = $65 << 24 >> 24;
  $67 = ($66|0)!=(0);
  if (!($67)) {
   break;
  }
 }
 $68 = $6;
 $69 = ($68|0)==(1);
 $70 = $7;
 $71 = ($70|0)==(1);
 $or$cond = $69 & $71;
 if ($or$cond) {
  $72 = $5;
  $73 = $4;
  $74 = (($73) + 1)|0;
  $75 = ($72|0)==($74|0);
  $76 = $10;
  $77 = ($76|0)==(1);
  $or$cond4 = $75 & $77;
  $78 = $11;
  $79 = ($78|0)==(1);
  $or$cond6 = $or$cond4 & $79;
  if ($or$cond6) {
   $80 = $8;
   $81 = $9;
   $82 = ($80|0)<($81|0);
   if ($82) {
    $1 = 1;
   }
  }
 }
 $2 = 0;
 while(1) {
  $83 = $2;
  $84 = $3;
  $85 = ($83|0)<($84|0);
  if (!($85)) {
   break;
  }
  $86 = HEAP32[18446]|0;
  $87 = (($86) + -1)|0;
  HEAP32[18446] = $87;
  $88 = $2;
  $89 = (($88) + 1)|0;
  $2 = $89;
 }
 $90 = $1;
 STACKTOP = sp;return ($90|0);
}
function _lex_object_func() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = 0;
 $2 = 0;
 _memset(((31976)|0),0,300)|0;
 _memset(($0|0),0,300)|0;
 while(1) {
  $3 = HEAP32[18446]|0;
  $4 = (($3) + 1)|0;
  HEAP32[18446] = $4;
  $5 = HEAP32[(73792)>>2]|0;
  $6 = (($5) + ($3)|0);
  $7 = HEAP8[$6>>0]|0;
  $1 = $7;
  $8 = HEAP32[8087]|0;
  $9 = (($8) + 1)|0;
  HEAP32[8087] = $9;
  $10 = $1;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  }
  $13 = $1;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(13);
  if ($15) {
   break;
  }
  $16 = $1;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)==(10);
  if ($18) {
   break;
  }
  $19 = $1;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(8);
  if ($21) {
   break;
  }
  $22 = $1;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)==(12);
  if ($24) {
   break;
  }
  $25 = $1;
  $26 = $25 << 24 >> 24;
  $27 = ($26|0)==(9);
  if ($27) {
   break;
  }
  $28 = $2;
  $29 = ($28|0)>(299);
  if ($29) {
   _Error(2156,$vararg_buffer);
  }
  $30 = $1;
  $31 = $2;
  $32 = (($31) + 1)|0;
  $2 = $32;
  $33 = ((31976) + ($31)|0);
  HEAP8[$33>>0] = $30;
  $34 = $1;
  $35 = $34 << 24 >> 24;
  $36 = (_isspace($35)|0);
  $37 = ($36|0)!=(0);
  if ($37) {
   break;
  }
  $38 = $1;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)!=(61);
  if (!($40)) {
   break;
  }
  $41 = $1;
  $42 = $41 << 24 >> 24;
  $43 = ($42|0)!=(0);
  if (!($43)) {
   break;
  }
  $44 = $1;
  $45 = $44 << 24 >> 24;
  $46 = ($45|0)!=(123);
  if (!($46)) {
   break;
  }
  $47 = $1;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)!=(125);
  if (!($49)) {
   break;
  }
  $50 = $1;
  $51 = $50 << 24 >> 24;
  $52 = ($51|0)!=(59);
  if (!($52)) {
   break;
  }
 }
 $53 = $2;
 $54 = (($53) - 1)|0;
 $55 = ((31976) + ($54)|0);
 $56 = HEAP8[$55>>0]|0;
 $57 = $56 << 24 >> 24;
 $58 = ($57|0)==(61);
 if (!($58)) {
  $59 = $2;
  $60 = (($59) - 1)|0;
  $61 = ((31976) + ($60)|0);
  $62 = HEAP8[$61>>0]|0;
  $63 = $62 << 24 >> 24;
  $64 = ($63|0)==(123);
  if (!($64)) {
   $65 = $2;
   $66 = (($65) - 1)|0;
   $67 = ((31976) + ($66)|0);
   $68 = HEAP8[$67>>0]|0;
   $69 = $68 << 24 >> 24;
   $70 = ($69|0)==(125);
   if (!($70)) {
    $71 = $2;
    $72 = (($71) - 1)|0;
    $73 = ((31976) + ($72)|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74 << 24 >> 24;
    $76 = ($75|0)==(32);
    if (!($76)) {
     $77 = $2;
     $78 = (($77) - 1)|0;
     $79 = ((31976) + ($78)|0);
     $80 = HEAP8[$79>>0]|0;
     $81 = $80 << 24 >> 24;
     $82 = ($81|0)==(59);
     if (!($82)) {
      $86 = HEAP32[18446]|0;
      $87 = (($86) + -1)|0;
      HEAP32[18446] = $87;
      $88 = $2;
      $89 = ((31976) + ($88)|0);
      HEAP8[$89>>0] = 0;
      (_strcpy($0,(31976))|0);
      HEAP32[7954] = 230;
      STACKTOP = sp;return 0;
     }
    }
   }
  }
 }
 $83 = $2;
 $84 = (($83) - 1)|0;
 $85 = ((31976) + ($84)|0);
 HEAP8[$85>>0] = 0;
 $86 = HEAP32[18446]|0;
 $87 = (($86) + -1)|0;
 HEAP32[18446] = $87;
 $88 = $2;
 $89 = ((31976) + ($88)|0);
 HEAP8[$89>>0] = 0;
 (_strcpy($0,(31976))|0);
 HEAP32[7954] = 230;
 STACKTOP = sp;return 0;
}
function _lex_object() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $vararg_buffer = sp;
 $0 = sp + 12|0;
 $1 = 0;
 $2 = 0;
 _memset(($0|0),0,300)|0;
 _memset(((31976)|0),0,300)|0;
 while(1) {
  $3 = HEAP32[18446]|0;
  $4 = (($3) + 1)|0;
  HEAP32[18446] = $4;
  $5 = HEAP32[(73792)>>2]|0;
  $6 = (($5) + ($3)|0);
  $7 = HEAP8[$6>>0]|0;
  $1 = $7;
  $8 = HEAP32[8087]|0;
  $9 = (($8) + 1)|0;
  HEAP32[8087] = $9;
  $10 = $1;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)==(0);
  if ($12) {
   break;
  }
  $13 = $1;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(13);
  if ($15) {
   break;
  }
  $16 = $1;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)==(10);
  if ($18) {
   break;
  }
  $19 = $1;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(8);
  if ($21) {
   break;
  }
  $22 = $1;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)==(12);
  if ($24) {
   break;
  }
  $25 = $1;
  $26 = $25 << 24 >> 24;
  $27 = ($26|0)==(9);
  if ($27) {
   break;
  }
  $28 = $2;
  $29 = ($28|0)>(299);
  if ($29) {
   _Error(2156,$vararg_buffer);
  }
  $30 = $1;
  $31 = $2;
  $32 = (($31) + 1)|0;
  $2 = $32;
  $33 = ((31976) + ($31)|0);
  HEAP8[$33>>0] = $30;
  $34 = $1;
  $35 = $34 << 24 >> 24;
  $36 = (_isspace($35)|0);
  $37 = ($36|0)!=(0);
  if ($37) {
   break;
  }
  $38 = $1;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)!=(61);
  if (!($40)) {
   break;
  }
  $41 = $1;
  $42 = $41 << 24 >> 24;
  $43 = ($42|0)!=(44);
  if (!($43)) {
   break;
  }
  $44 = $1;
  $45 = $44 << 24 >> 24;
  $46 = ($45|0)!=(0);
  if (!($46)) {
   break;
  }
  $47 = $1;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)!=(40);
  if (!($49)) {
   break;
  }
  $50 = $1;
  $51 = $50 << 24 >> 24;
  $52 = ($51|0)!=(41);
  if (!($52)) {
   break;
  }
  $53 = $1;
  $54 = $53 << 24 >> 24;
  $55 = ($54|0)!=(123);
  if (!($55)) {
   break;
  }
  $56 = $1;
  $57 = $56 << 24 >> 24;
  $58 = ($57|0)!=(125);
  if (!($58)) {
   break;
  }
  $59 = $1;
  $60 = $59 << 24 >> 24;
  $61 = ($60|0)!=(59);
  if (!($61)) {
   break;
  }
 }
 $62 = $2;
 $63 = (($62) - 1)|0;
 $64 = ((31976) + ($63)|0);
 $65 = HEAP8[$64>>0]|0;
 $66 = $65 << 24 >> 24;
 $67 = ($66|0)==(44);
 if (!($67)) {
  $68 = $2;
  $69 = (($68) - 1)|0;
  $70 = ((31976) + ($69)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71 << 24 >> 24;
  $73 = ($72|0)==(40);
  if (!($73)) {
   $74 = $2;
   $75 = (($74) - 1)|0;
   $76 = ((31976) + ($75)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $77 << 24 >> 24;
   $79 = ($78|0)==(41);
   if (!($79)) {
    $80 = $2;
    $81 = (($80) - 1)|0;
    $82 = ((31976) + ($81)|0);
    $83 = HEAP8[$82>>0]|0;
    $84 = $83 << 24 >> 24;
    $85 = ($84|0)==(61);
    if (!($85)) {
     $86 = $2;
     $87 = (($86) - 1)|0;
     $88 = ((31976) + ($87)|0);
     $89 = HEAP8[$88>>0]|0;
     $90 = $89 << 24 >> 24;
     $91 = ($90|0)==(123);
     if (!($91)) {
      $92 = $2;
      $93 = (($92) - 1)|0;
      $94 = ((31976) + ($93)|0);
      $95 = HEAP8[$94>>0]|0;
      $96 = $95 << 24 >> 24;
      $97 = ($96|0)==(125);
      if (!($97)) {
       $98 = $2;
       $99 = (($98) - 1)|0;
       $100 = ((31976) + ($99)|0);
       $101 = HEAP8[$100>>0]|0;
       $102 = $101 << 24 >> 24;
       $103 = ($102|0)==(32);
       if (!($103)) {
        $104 = $2;
        $105 = (($104) - 1)|0;
        $106 = ((31976) + ($105)|0);
        $107 = HEAP8[$106>>0]|0;
        $108 = $107 << 24 >> 24;
        $109 = ($108|0)==(59);
        if (!($109)) {
         $113 = HEAP32[18446]|0;
         $114 = (($113) + -1)|0;
         HEAP32[18446] = $114;
         $115 = $2;
         $116 = ((31976) + ($115)|0);
         HEAP8[$116>>0] = 0;
         (_strcpy($0,(31976))|0);
         HEAP32[7954] = 229;
         STACKTOP = sp;return 0;
        }
       }
      }
     }
    }
   }
  }
 }
 $110 = $2;
 $111 = (($110) - 1)|0;
 $112 = ((31976) + ($111)|0);
 HEAP8[$112>>0] = 0;
 $113 = HEAP32[18446]|0;
 $114 = (($113) + -1)|0;
 HEAP32[18446] = $114;
 $115 = $2;
 $116 = ((31976) + ($115)|0);
 HEAP8[$116>>0] = 0;
 (_strcpy($0,(31976))|0);
 HEAP32[7954] = 229;
 STACKTOP = sp;return 0;
}
function _ungetlex() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[(73788)>>2]|0;
 HEAP32[18446] = $0;
 return;
}
function _strtodbl($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0.0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0.0, $105 = 0.0, $106 = 0.0, $107 = 0.0, $108 = 0.0, $109 = 0.0, $11 = 0.0, $110 = 0, $111 = 0, $112 = 0.0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0.0, $119 = 0, $12 = 0.0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0.0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0.0, $61 = 0.0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond4 = 0, $or$cond6 = 0, $or$cond8 = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer17 = sp + 48|0;
 $vararg_buffer15 = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $1 = $0;
 $12 = 0.0;
 $4 = 1;
 $2 = 0;
 $9 = 0.0;
 $10 = 0.0;
 $11 = 0.0;
 $3 = 0;
 $5 = 1;
 $6 = 1;
 $7 = 1;
 $8 = 1;
 while(1) {
  $13 = $1;
  $14 = HEAP8[$13>>0]|0;
  $15 = $14 << 24 >> 24;
  $16 = ($15|0)!=(0);
  if (!($16)) {
   break;
  }
  $17 = $1;
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(32);
  if (!($20)) {
   break;
  }
  $21 = $1;
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(10);
  if (!($24)) {
   break;
  }
  $25 = $1;
  $26 = HEAP8[$25>>0]|0;
  $27 = $26 << 24 >> 24;
  $28 = ($27|0)==(46);
  do {
   if ($28) {
    $29 = $4;
    $30 = ($29|0)==(1);
    if ($30) {
     $4 = 0;
     break;
    } else {
     _Error(2190,$vararg_buffer);
     break;
    }
   } else {
    $31 = $1;
    $32 = HEAP8[$31>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = ($33|0)==(101);
    if (!($34)) {
     $35 = $1;
     $36 = HEAP8[$35>>0]|0;
     $37 = $36 << 24 >> 24;
     $38 = ($37|0)==(69);
     if (!($38)) {
      $39 = $1;
      $40 = HEAP8[$39>>0]|0;
      $41 = $40 << 24 >> 24;
      $42 = ($41|0)>=(48);
      if ($42) {
       $43 = $1;
       $44 = HEAP8[$43>>0]|0;
       $45 = $44 << 24 >> 24;
       $46 = ($45|0)<=(57);
       if ($46) {
        $47 = $1;
        $48 = HEAP8[$47>>0]|0;
        $49 = $48 << 24 >> 24;
        $50 = (($49) - 48)|0;
        $2 = $50;
        $51 = $4;
        $52 = ($51|0)==(1);
        if ($52) {
         $53 = $9;
         $54 = $53 * 10.0;
         $55 = $2;
         $56 = (+($55|0));
         $57 = $54 + $56;
         $9 = $57;
         $8 = 0;
         break;
        }
        $58 = $4;
        $59 = ($58|0)==(0);
        if ($59) {
         $60 = $10;
         $61 = $60 * 10.0;
         $62 = $2;
         $63 = (+($62|0));
         $64 = $61 + $63;
         $10 = $64;
         $65 = $11;
         $66 = $65 + 1.0;
         $11 = $66;
         $8 = 0;
         break;
        }
        $67 = $4;
        $68 = ($67|0)==(2);
        if (!($68)) {
         break;
        }
        $69 = $3;
        $70 = ($69*10)|0;
        $71 = $2;
        $72 = (($70) + ($71))|0;
        $3 = $72;
        $7 = 0;
        break;
       }
      }
      $73 = $1;
      $74 = HEAP8[$73>>0]|0;
      $75 = $74 << 24 >> 24;
      $76 = ($75|0)==(45);
      if (!($76)) {
       $97 = $1;
       $98 = HEAP8[$97>>0]|0;
       $99 = $98 << 24 >> 24;
       $100 = (_isdigit($99)|0);
       $101 = ($100|0)!=(0);
       if ($101) {
        break;
       }
       _Error(2233,$vararg_buffer17);
       break;
      }
      $77 = $4;
      $78 = ($77|0)==(1);
      $79 = $8;
      $80 = ($79|0)==(1);
      $or$cond = $78 & $80;
      $81 = $5;
      $82 = ($81|0)!=(0);
      $or$cond4 = $or$cond & $82;
      if ($or$cond4) {
       $5 = 0;
       break;
      }
      $83 = $4;
      $84 = ($83|0)==(0);
      $85 = $9;
      $86 = $85 == 0.0;
      $or$cond6 = $84 & $86;
      $87 = $8;
      $88 = ($87|0)==(1);
      $or$cond8 = $or$cond6 & $88;
      $89 = $5;
      $90 = ($89|0)!=(0);
      $or$cond10 = $or$cond8 & $90;
      if ($or$cond10) {
       $5 = 0;
       break;
      }
      $91 = $4;
      $92 = ($91|0)==(2);
      $93 = $7;
      $94 = ($93|0)==(1);
      $or$cond12 = $92 & $94;
      $95 = $6;
      $96 = ($95|0)!=(0);
      $or$cond14 = $or$cond12 & $96;
      if ($or$cond14) {
       $6 = 0;
       break;
      } else {
       _Error(2214,$vararg_buffer15);
       break;
      }
     }
    }
    $4 = 2;
   }
  } while(0);
  $102 = $1;
  $103 = ((($102)) + 1|0);
  $1 = $103;
 }
 $104 = $9;
 $105 = $10;
 $106 = $11;
 $107 = (+Math_pow(10.0,(+$106)));
 $108 = $105 / $107;
 $109 = $104 + $108;
 $12 = $109;
 $110 = $5;
 $111 = ($110|0)==(0);
 if ($111) {
  $112 = $12;
  $113 = -$112;
  $12 = $113;
 }
 $114 = $6;
 $115 = ($114|0)==(0);
 if (!($115)) {
  $118 = $12;
  $119 = $3;
  $120 = (+($119|0));
  $121 = (+Math_pow(10.0,(+$120)));
  $122 = $118 * $121;
  $12 = $122;
  $123 = $12;
  STACKTOP = sp;return (+$123);
 }
 $116 = $3;
 $117 = (0 - ($116))|0;
 $3 = $117;
 $118 = $12;
 $119 = $3;
 $120 = (+($119|0));
 $121 = (+Math_pow(10.0,(+$120)));
 $122 = $118 * $121;
 $12 = $122;
 $123 = $12;
 STACKTOP = sp;return (+$123);
}
function _getArrayName($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $6 = 0;
 while(1) {
  $7 = $5;
  $8 = $2;
  $9 = (($8) + ($7)|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $5;
  $12 = (($4) + ($11)|0);
  HEAP8[$12>>0] = $10;
  $13 = $5;
  $14 = (($13) + 1)|0;
  $5 = $14;
  $15 = $5;
  $16 = $2;
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(91);
  if (!($20)) {
   label = 4;
   break;
  }
  $21 = $5;
  $22 = $2;
  $23 = (($22) + ($21)|0);
  $24 = HEAP8[$23>>0]|0;
  $25 = $24 << 24 >> 24;
  $26 = ($25|0)!=(0);
  if (!($26)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  $27 = $5;
  $28 = (($4) + ($27)|0);
  HEAP8[$28>>0] = 0;
  $29 = $3;
  (_strcpy($29,$4)|0);
  STACKTOP = sp;return;
 }
}
function _getArrayIdx($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $4 = sp + 16|0;
 $2 = $0;
 $3 = $1;
 $5 = 0;
 $6 = 0;
 while(1) {
  $7 = $5;
  $8 = (($7) + 1)|0;
  $5 = $8;
  $9 = $5;
  $10 = $2;
  $11 = (($10) + ($9)|0);
  $12 = HEAP8[$11>>0]|0;
  $13 = $12 << 24 >> 24;
  $14 = ($13|0)!=(91);
  if (!($14)) {
   break;
  }
  $15 = $5;
  $16 = $2;
  $17 = (($16) + ($15)|0);
  $18 = HEAP8[$17>>0]|0;
  $19 = $18 << 24 >> 24;
  $20 = ($19|0)!=(0);
  if (!($20)) {
   break;
  }
 }
 $6 = 0;
 $21 = $5;
 $22 = (($21) + 1)|0;
 $5 = $22;
 while(1) {
  $23 = $5;
  $24 = $2;
  $25 = (($24) + ($23)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $6;
  $28 = (($4) + ($27)|0);
  HEAP8[$28>>0] = $26;
  $29 = $5;
  $30 = (($29) + 1)|0;
  $5 = $30;
  $31 = $6;
  $32 = (($31) + 1)|0;
  $6 = $32;
  $33 = $5;
  $34 = $2;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = ($37|0)!=(93);
  if (!($38)) {
   label = 7;
   break;
  }
  $39 = $5;
  $40 = $2;
  $41 = (($40) + ($39)|0);
  $42 = HEAP8[$41>>0]|0;
  $43 = $42 << 24 >> 24;
  $44 = ($43|0)!=(0);
  if (!($44)) {
   label = 7;
   break;
  }
 }
 if ((label|0) == 7) {
  $45 = $6;
  $46 = (($4) + ($45)|0);
  HEAP8[$46>>0] = 0;
  $47 = $3;
  (_strcpy($47,$4)|0);
  STACKTOP = sp;return;
 }
}
function _checkDummyArray($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 while(1) {
  $10 = $3;
  $11 = (($10) + 1)|0;
  $3 = $11;
  $12 = $1;
  $13 = (($12) + ($10)|0);
  $14 = HEAP8[$13>>0]|0;
  $2 = $14;
  $15 = $5;
  $16 = (($15) + 1)|0;
  $5 = $16;
  $17 = $2;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)==(91);
  if ($19) {
   $20 = $3;
   $6 = $20;
   $21 = $8;
   $22 = (($21) + 1)|0;
   $8 = $22;
  } else {
   $23 = $2;
   $24 = $23 << 24 >> 24;
   $25 = ($24|0)==(93);
   if ($25) {
    $26 = $3;
    $7 = $26;
    $27 = $9;
    $28 = (($27) + 1)|0;
    $9 = $28;
   }
  }
  $29 = $2;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)==(13);
  if ($31) {
   break;
  }
  $32 = $2;
  $33 = $32 << 24 >> 24;
  $34 = ($33|0)==(10);
  if ($34) {
   break;
  }
  $35 = $2;
  $36 = $35 << 24 >> 24;
  $37 = ($36|0)==(8);
  if ($37) {
   break;
  }
  $38 = $2;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)==(12);
  if ($40) {
   break;
  }
  $41 = $2;
  $42 = $41 << 24 >> 24;
  $43 = ($42|0)==(9);
  if ($43) {
   break;
  }
  $44 = $2;
  $45 = $44 << 24 >> 24;
  $46 = (_isspace($45)|0);
  $47 = ($46|0)!=(0);
  if ($47) {
   break;
  }
  $48 = $2;
  $49 = $48 << 24 >> 24;
  $50 = ($49|0)!=(61);
  if (!($50)) {
   break;
  }
  $51 = $2;
  $52 = $51 << 24 >> 24;
  $53 = ($52|0)!=(0);
  if (!($53)) {
   break;
  }
 }
 $54 = $8;
 $55 = ($54|0)==(1);
 $56 = $9;
 $57 = ($56|0)==(1);
 $or$cond = $55 & $57;
 if (!($or$cond)) {
  $62 = $4;
  STACKTOP = sp;return ($62|0);
 }
 $58 = $6;
 $59 = (($58) + 1)|0;
 $60 = $7;
 $61 = ($59|0)==($60|0);
 if (!($61)) {
  $62 = $4;
  STACKTOP = sp;return ($62|0);
 }
 $4 = 1;
 $62 = $4;
 STACKTOP = sp;return ($62|0);
}
function _getObjectName($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $2 = sp + 12|0;
 $1 = $0;
 $4 = 0;
 $3 = 0;
 _memset(($2|0),0,300)|0;
 while(1) {
  $5 = $4;
  $6 = $1;
  $7 = (($6) + ($5)|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = $4;
  $10 = (($2) + ($9)|0);
  HEAP8[$10>>0] = $8;
  $11 = $4;
  $12 = (($11) + 1)|0;
  $4 = $12;
  $13 = $4;
  $14 = $1;
  $15 = (($14) + ($13)|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)!=(45);
  if (!($18)) {
   break;
  }
  $19 = $4;
  $20 = $1;
  $21 = (($20) + ($19)|0);
  $22 = HEAP8[$21>>0]|0;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)!=(0);
  if (!($24)) {
   break;
  }
 }
 $25 = $4;
 $26 = (($2) + ($25)|0);
 HEAP8[$26>>0] = 0;
 $3 = $2;
 (_strcat($2,1358125)|0);
 $27 = $3;
 STACKTOP = sp;return ($27|0);
}
function _getObjectParam($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $2 = sp + 16|0;
 $1 = $0;
 $4 = 0;
 $5 = 0;
 $3 = 0;
 _memset(($2|0),0,300)|0;
 while(1) {
  $6 = $4;
  $7 = (($6) + 1)|0;
  $4 = $7;
  $8 = $4;
  $9 = $1;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(45);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = $1;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
 }
 $20 = $4;
 $21 = (($20) + 1)|0;
 $4 = $21;
 $22 = $4;
 $23 = (($22) + 1)|0;
 $4 = $23;
 $5 = 0;
 while(1) {
  $24 = $4;
  $25 = $1;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $5;
  $29 = (($2) + ($28)|0);
  HEAP8[$29>>0] = $27;
  $30 = $4;
  $31 = (($30) + 1)|0;
  $4 = $31;
  $32 = $5;
  $33 = (($32) + 1)|0;
  $5 = $33;
  $34 = $4;
  $35 = $1;
  $36 = (($35) + ($34)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)!=(0);
  if (!($39)) {
   break;
  }
 }
 $40 = $5;
 $41 = (($2) + ($40)|0);
 HEAP8[$41>>0] = 0;
 $3 = $2;
 (_strcat($2,1358125)|0);
 $42 = $3;
 STACKTOP = sp;return ($42|0);
}
function _getObjectFunction($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $2 = sp + 16|0;
 $1 = $0;
 $4 = 0;
 $5 = 0;
 $3 = 0;
 _memset(($2|0),0,300)|0;
 while(1) {
  $6 = $4;
  $7 = (($6) + 1)|0;
  $4 = $7;
  $8 = $4;
  $9 = $1;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(45);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = $1;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
 }
 $20 = $4;
 $21 = (($20) + 1)|0;
 $4 = $21;
 $22 = $4;
 $23 = (($22) + 1)|0;
 $4 = $23;
 $5 = 0;
 while(1) {
  $24 = $4;
  $25 = $1;
  $26 = (($25) + ($24)|0);
  $27 = HEAP8[$26>>0]|0;
  $28 = $5;
  $29 = (($2) + ($28)|0);
  HEAP8[$29>>0] = $27;
  $30 = $4;
  $31 = (($30) + 1)|0;
  $4 = $31;
  $32 = $5;
  $33 = (($32) + 1)|0;
  $5 = $33;
  $34 = $4;
  $35 = $1;
  $36 = (($35) + ($34)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $37 << 24 >> 24;
  $39 = ($38|0)!=(40);
  if (!($39)) {
   break;
  }
 }
 $40 = $5;
 $41 = (($2) + ($40)|0);
 HEAP8[$41>>0] = 0;
 $3 = $2;
 (_strcat($2,1358125)|0);
 $42 = $3;
 STACKTOP = sp;return ($42|0);
}
function _getObjectFunctionParam($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 320|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(320|0);
 $2 = sp + 16|0;
 $1 = $0;
 $4 = 0;
 $5 = 0;
 $3 = 0;
 _memset(($2|0),0,300)|0;
 while(1) {
  $6 = $4;
  $7 = (($6) + 1)|0;
  $4 = $7;
  $8 = $4;
  $9 = $1;
  $10 = (($9) + ($8)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)!=(45);
  if (!($13)) {
   break;
  }
  $14 = $4;
  $15 = $1;
  $16 = (($15) + ($14)|0);
  $17 = HEAP8[$16>>0]|0;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   break;
  }
 }
 $20 = $4;
 $21 = (($20) + 1)|0;
 $4 = $21;
 $22 = $4;
 $23 = (($22) + 1)|0;
 $4 = $23;
 while(1) {
  $24 = $4;
  $25 = (($24) + 1)|0;
  $4 = $25;
  $26 = $4;
  $27 = $1;
  $28 = (($27) + ($26)|0);
  $29 = HEAP8[$28>>0]|0;
  $30 = $29 << 24 >> 24;
  $31 = ($30|0)!=(40);
  if (!($31)) {
   break;
  }
 }
 $32 = $4;
 $33 = (($32) + 1)|0;
 $4 = $33;
 $34 = $4;
 $35 = (($34) + 1)|0;
 $4 = $35;
 $36 = $1;
 $37 = (($36) + ($34)|0);
 $38 = HEAP8[$37>>0]|0;
 $39 = $38 << 24 >> 24;
 $40 = ($39|0)==(41);
 if ($40) {
  (_strcpy($2,1358125)|0);
  $3 = $2;
  (_strcat($2,1358125)|0);
  $61 = $3;
  STACKTOP = sp;return ($61|0);
 }
 $41 = $4;
 $42 = (($41) + -1)|0;
 $4 = $42;
 $5 = 0;
 while(1) {
  $43 = $4;
  $44 = $1;
  $45 = (($44) + ($43)|0);
  $46 = HEAP8[$45>>0]|0;
  $47 = $5;
  $48 = (($2) + ($47)|0);
  HEAP8[$48>>0] = $46;
  $49 = $4;
  $50 = (($49) + 1)|0;
  $4 = $50;
  $51 = $5;
  $52 = (($51) + 1)|0;
  $5 = $52;
  $53 = $4;
  $54 = $1;
  $55 = (($54) + ($53)|0);
  $56 = HEAP8[$55>>0]|0;
  $57 = $56 << 24 >> 24;
  $58 = ($57|0)!=(41);
  if (!($58)) {
   break;
  }
 }
 $59 = $5;
 $60 = (($2) + ($59)|0);
 HEAP8[$60>>0] = 0;
 $3 = $2;
 (_strcat($2,1358125)|0);
 $61 = $3;
 STACKTOP = sp;return ($61|0);
}
function _checkInstanceValidation($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 21136|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(21136|0);
 $$byval_copy3 = sp + 16096|0;
 $$byval_copy = sp + 12880|0;
 $vararg_buffer1 = sp + 12872|0;
 $vararg_buffer = sp + 12864|0;
 $2 = sp + 20836|0;
 $3 = sp + 20536|0;
 $4 = sp + 20236|0;
 $5 = sp + 9648|0;
 $6 = sp + 6432|0;
 $7 = sp + 19312|0;
 $8 = sp + 3216|0;
 $9 = sp;
 $1 = $0;
 _memset(($5|0),0,3216)|0;
 _memset(($6|0),0,3216)|0;
 _memset(($7|0),0,920)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 _memset(($4|0),0,300)|0;
 $10 = $1;
 $11 = (_getObjectName($10)|0);
 (_strcpy($2,$11)|0);
 $12 = $1;
 $13 = (_getObjectParam($12)|0);
 (_strcpy($3,$13)|0);
 $14 = HEAP32[8088]|0;
 _memcpy(($$byval_copy|0),($5|0),3216)|0;
 _ValLabel($8,$2,$14,$$byval_copy,232);
 _memcpy(($5|0),($8|0),3216)|0;
 $15 = ((($5)) + 12|0);
 $16 = (_strlen($15)|0);
 $17 = ($16>>>0)>(0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = ((($5)) + 84|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = ($19|0)==(31);
 if (!($20)) {
  STACKTOP = sp;return;
 }
 $21 = ((($5)) + 2424|0);
 $22 = HEAP32[8088]|0;
 _memcpy(($$byval_copy3|0),($6|0),3216)|0;
 _ValLabel($9,$21,$22,$$byval_copy3,232);
 _memcpy(($6|0),($9|0),3216)|0;
 $23 = ((($6)) + 12|0);
 $24 = (_strlen($23)|0);
 $25 = ($24>>>0)>(0);
 if ($25) {
  $26 = ((($6)) + 84|0);
  $27 = HEAP32[$26>>2]|0;
  $28 = ($27|0)==(30);
  if ($28) {
   STACKTOP = sp;return;
  }
 }
 $29 = ((($5)) + 2424|0);
 HEAP32[$vararg_buffer>>2] = $29;
 (_sprintf($4,2253,$vararg_buffer)|0);
 _Error($4,$vararg_buffer1);
 STACKTOP = sp;return;
}
function _checkObjectValidation($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy19 = 0, $$byval_copy20 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 23040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(23040|0);
 $$byval_copy20 = sp + 21208|0;
 $$byval_copy19 = sp + 16144|0;
 $$byval_copy = sp + 12928|0;
 $vararg_buffer17 = sp + 12920|0;
 $vararg_buffer14 = sp + 12912|0;
 $vararg_buffer12 = sp + 12904|0;
 $vararg_buffer9 = sp + 12896|0;
 $vararg_buffer7 = sp + 12888|0;
 $vararg_buffer4 = sp + 12880|0;
 $vararg_buffer2 = sp + 12872|0;
 $vararg_buffer = sp + 12864|0;
 $2 = sp + 22728|0;
 $3 = sp + 22428|0;
 $4 = sp + 22128|0;
 $6 = sp + 9648|0;
 $7 = sp + 6432|0;
 $8 = sp + 20280|0;
 $9 = sp + 3216|0;
 $10 = sp;
 $11 = sp + 19360|0;
 $1 = $0;
 $5 = 0;
 _memset(($6|0),0,3216)|0;
 _memset(($7|0),0,3216)|0;
 _memset(($8|0),0,920)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 _memset(($4|0),0,300)|0;
 $12 = $1;
 $13 = (_getObjectName($12)|0);
 (_strcpy($2,$13)|0);
 $14 = $1;
 $15 = (_getObjectParam($14)|0);
 (_strcpy($3,$15)|0);
 $16 = HEAP32[8088]|0;
 _memcpy(($$byval_copy|0),($6|0),3216)|0;
 _ValLabel($9,$2,$16,$$byval_copy,232);
 _memcpy(($6|0),($9|0),3216)|0;
 $17 = ((($6)) + 12|0);
 $18 = (_strlen($17)|0);
 $19 = ($18>>>0)>(0);
 if ($19) {
  $20 = ((($6)) + 84|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(31);
  if ($22) {
   $23 = ((($6)) + 2424|0);
   $24 = HEAP32[8088]|0;
   _memcpy(($$byval_copy19|0),($7|0),3216)|0;
   _ValLabel($10,$23,$24,$$byval_copy19,232);
   _memcpy(($7|0),($10|0),3216)|0;
   $25 = ((($7)) + 12|0);
   $26 = (_strlen($25)|0);
   $27 = ($26>>>0)>(0);
   if ($27) {
    $28 = ((($7)) + 84|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)==(30);
    if ($30) {
     $31 = ((($8)) + 12|0);
     $32 = ((($6)) + 2424|0);
     (_strcpy($31,$32)|0);
     $33 = ((($8)) + 140|0);
     (_strcpy($33,$3)|0);
     $34 = ((($8)) + 908|0);
     HEAP32[$34>>2] = 1;
     _memcpy(($$byval_copy20|0),($8|0),920)|0;
     $35 = (_node_findData($$byval_copy20)|0);
     $5 = $35;
     $36 = $5;
     $37 = ($36|0)>=(0);
     if (!($37)) {
      $38 = ((($6)) + 2424|0);
      HEAP32[$vararg_buffer>>2] = $3;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $38;
      (_sprintf($4,2289,$vararg_buffer)|0);
      _Error($4,$vararg_buffer2);
     }
     $39 = $5;
     _node_getElement($11,$39);
     _memcpy(($8|0),($11|0),920)|0;
     $40 = ((($8)) + 912|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(1);
     if (!($42)) {
      STACKTOP = sp;return;
     }
     HEAP32[$vararg_buffer4>>2] = $3;
     (_sprintf($4,2320,$vararg_buffer4)|0);
     _Error($4,$vararg_buffer7);
     STACKTOP = sp;return;
    }
   }
   $43 = ((($6)) + 2424|0);
   HEAP32[$vararg_buffer9>>2] = $43;
   (_sprintf($4,2253,$vararg_buffer9)|0);
   _Error($4,$vararg_buffer12);
   STACKTOP = sp;return;
  }
 }
 HEAP32[$vararg_buffer14>>2] = (31976);
 (_sprintf($4,2374,$vararg_buffer14)|0);
 _Error($4,$vararg_buffer17);
 STACKTOP = sp;return;
}
function _checkObjectFuncValidation($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 22096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(22096|0);
 $$byval_copy15 = sp + 20272|0;
 $$byval_copy14 = sp + 16128|0;
 $$byval_copy = sp + 12912|0;
 $vararg_buffer12 = sp + 12904|0;
 $vararg_buffer9 = sp + 12896|0;
 $vararg_buffer7 = sp + 12888|0;
 $vararg_buffer4 = sp + 12880|0;
 $vararg_buffer2 = sp + 12872|0;
 $vararg_buffer = sp + 12864|0;
 $2 = sp + 21792|0;
 $3 = sp + 21492|0;
 $4 = sp + 21192|0;
 $6 = sp + 9648|0;
 $7 = sp + 6432|0;
 $8 = sp + 19344|0;
 $9 = sp + 3216|0;
 $10 = sp;
 $1 = $0;
 $5 = 0;
 _memset(($6|0),0,3216)|0;
 _memset(($7|0),0,3216)|0;
 _memset(($8|0),0,920)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 _memset(($4|0),0,300)|0;
 $11 = $1;
 $12 = (_getObjectName($11)|0);
 (_strcpy($2,$12)|0);
 $13 = $1;
 $14 = (_getObjectFunction($13)|0);
 (_strcpy($3,$14)|0);
 $15 = HEAP32[8088]|0;
 _memcpy(($$byval_copy|0),($6|0),3216)|0;
 _ValLabel($9,$2,$15,$$byval_copy,232);
 _memcpy(($6|0),($9|0),3216)|0;
 $16 = ((($6)) + 12|0);
 $17 = (_strlen($16)|0);
 $18 = ($17>>>0)>(0);
 if ($18) {
  $19 = ((($6)) + 84|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(31);
  if ($21) {
   $22 = ((($6)) + 2424|0);
   $23 = HEAP32[8088]|0;
   _memcpy(($$byval_copy14|0),($7|0),3216)|0;
   _ValLabel($10,$22,$23,$$byval_copy14,232);
   _memcpy(($7|0),($10|0),3216)|0;
   $24 = ((($7)) + 12|0);
   $25 = (_strlen($24)|0);
   $26 = ($25>>>0)>(0);
   if ($26) {
    $27 = ((($7)) + 84|0);
    $28 = HEAP32[$27>>2]|0;
    $29 = ($28|0)==(30);
    if ($29) {
     $30 = ((($8)) + 12|0);
     $31 = ((($6)) + 2424|0);
     (_strcpy($30,$31)|0);
     $32 = (_strcmp($3,16525)|0);
     $33 = ($32|0)==(0);
     if ($33) {
      label = 8;
     } else {
      $34 = (_strcmp($3,16532)|0);
      $35 = ($34|0)==(0);
      if ($35) {
       label = 8;
      } else {
       $36 = (_strcmp($3,18989)|0);
       $37 = ($36|0)==(0);
       if ($37) {
        label = 8;
       } else {
        $40 = ((($8)) + 780|0);
        (_strcpy($40,$3)|0);
       }
      }
     }
     if ((label|0) == 8) {
      $38 = ((($8)) + 780|0);
      $39 = ((($6)) + 2424|0);
      (_strcpy($38,$39)|0);
     }
     $41 = ((($8)) + 908|0);
     HEAP32[$41>>2] = 2;
     _memcpy(($$byval_copy15|0),($8|0),920)|0;
     $42 = (_node_findData($$byval_copy15)|0);
     $5 = $42;
     $43 = $5;
     $44 = ($43|0)>=(0);
     if ($44) {
      STACKTOP = sp;return;
     }
     $45 = ((($6)) + 2424|0);
     HEAP32[$vararg_buffer>>2] = $3;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $45;
     (_sprintf($4,2420,$vararg_buffer)|0);
     _Error($4,$vararg_buffer2);
     STACKTOP = sp;return;
    }
   }
   $46 = ((($6)) + 2424|0);
   HEAP32[$vararg_buffer4>>2] = $46;
   (_sprintf($4,2253,$vararg_buffer4)|0);
   _Error($4,$vararg_buffer7);
   STACKTOP = sp;return;
  }
 }
 HEAP32[$vararg_buffer9>>2] = (31976);
 (_sprintf($4,2374,$vararg_buffer9)|0);
 _Error($4,$vararg_buffer12);
 STACKTOP = sp;return;
}
function _ux_initSocket($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $5 = $1;
 $6 = (_strcmp($5,15249)|0);
 $7 = ($6|0)==(0);
 if ($7) {
  label = 3;
 } else {
  $8 = $1;
  $9 = (_strcmp($8,2448)|0);
  $10 = ($9|0)==(0);
  if ($10) {
   label = 3;
  } else {
   $4 = 1;
  }
 }
 if ((label|0) == 3) {
  $4 = 2;
 }
 $11 = $4;
 $12 = (_socket(2,$11,0)|0);
 $3 = $12;
 $13 = ($12|0)<(0);
 if ($13) {
  $14 = HEAP32[35]|0;
  $15 = $1;
  HEAP32[$vararg_buffer>>2] = $15;
  (_fprintf($14,2452,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 } else {
  $16 = $3;
  STACKTOP = sp;return ($16|0);
 }
 return (0)|0;
}
function _ux_connectSocket($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $7 = sp + 16|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 ;HEAP32[$7>>2]=0|0;HEAP32[$7+4>>2]=0|0;HEAP32[$7+8>>2]=0|0;HEAP32[$7+12>>2]=0|0;
 HEAP16[$7>>1] = 2;
 $9 = $5;
 $10 = (_inet_addr(($9|0))|0);
 $11 = ((($7)) + 4|0);
 HEAP32[$11>>2] = $10;
 $12 = $6;
 $13 = (_atoi($12)|0);
 $14 = $13&65535;
 $15 = (_htons($14)|0);
 $16 = ((($7)) + 2|0);
 HEAP16[$16>>1] = $15;
 $17 = $15&65535;
 $18 = ($17|0)==(0);
 if ($18) {
  $19 = $6;
  HEAP32[$vararg_buffer>>2] = $19;
  _Error(2473,$vararg_buffer);
 }
 $20 = $4;
 $21 = (_connect($20,$7,16)|0);
 $22 = ($21|0)!=(0);
 if ($22) {
  $23 = HEAP32[35]|0;
  $24 = $5;
  HEAP32[$vararg_buffer1>>2] = $24;
  (_fprintf($23,2508,$vararg_buffer1)|0);
  $25 = $4;
  (_close($25)|0);
  $3 = -1;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 } else {
  $3 = 0;
  $26 = $3;
  STACKTOP = sp;return ($26|0);
 }
 return (0)|0;
}
function _ux_ikatSocket($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 32|0;
 $2 = $0;
 $3 = $1;
 $5 = 10;
 $6 = 0;
 $7 = 0;
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 HEAP16[$4>>1] = 2;
 $8 = (_htonl(0)|0);
 $9 = ((($4)) + 4|0);
 HEAP32[$9>>2] = $8;
 $10 = $3;
 $11 = (_atoi($10)|0);
 $12 = $11&65535;
 $13 = (_htons($12)|0);
 $14 = ((($4)) + 2|0);
 HEAP16[$14>>1] = $13;
 $15 = $13&65535;
 $16 = ($15|0)==(0);
 if ($16) {
  $17 = $3;
  HEAP32[$vararg_buffer>>2] = $17;
  (_printf(2473,$vararg_buffer)|0);
 }
 $18 = $2;
 $19 = (_bind($18,$4,16)|0);
 $20 = ($19|0)==(-1);
 if ($20) {
  $21 = HEAP32[35]|0;
  $22 = $3;
  HEAP32[$vararg_buffer1>>2] = $22;
  (_fprintf($21,2540,$vararg_buffer1)|0);
  _exit(1);
  // unreachable;
 }
 $23 = $2;
 $24 = $5;
 $25 = (_listen($23,$24)|0);
 $26 = ($25|0)==(-1);
 if ($26) {
  $27 = HEAP32[35]|0;
  $28 = $3;
  HEAP32[$vararg_buffer4>>2] = $28;
  (_fprintf($27,2569,$vararg_buffer4)|0);
  _exit(1);
  // unreachable;
 } else {
  $29 = $2;
  STACKTOP = sp;return ($29|0);
 }
 return (0)|0;
}
function _ux_terimaSocket($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 $3 = sp + 8|0;
 $1 = $0;
 HEAP32[$3>>2] = 0;
 $4 = 0;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;
 $5 = $1;
 $6 = (_accept($5,$2,$3)|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)==(-1);
 if ($8) {
  $9 = HEAP32[35]|0;
  (_fprintf($9,2602,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 } else {
  $10 = $4;
  STACKTOP = sp;return ($10|0);
 }
 return (0)|0;
}
function _ux_bacaSocket($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(528|0);
 $2 = sp + 16|0;
 $1 = $0;
 $3 = 0;
 $4 = 0;
 _memset(($2|0),0,512)|0;
 $5 = $1;
 $6 = (_recv($5,$2,512,0)|0);
 $4 = $6;
 $7 = ($6|0)>(0);
 if ($7) {
  $8 = $2;
  $9 = (_strlen($2)|0);
  $10 = $9;
  $11 = $4;
  (_write($8,$10,$11)|0);
  $3 = $2;
  $12 = $3;
  STACKTOP = sp;return ($12|0);
 } else {
  (_strcpy($2,1358125)|0);
  $3 = $2;
  $12 = $3;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _ux_tulisSocket($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = $3;
 $8 = (_strlen($7)|0);
 $9 = (_send($5,$6,$8,0)|0);
 $4 = $9;
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _ux_sendMail($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 5264|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(5264|0);
 $vararg_buffer24 = sp + 72|0;
 $vararg_buffer21 = sp + 64|0;
 $vararg_buffer18 = sp + 56|0;
 $vararg_buffer15 = sp + 48|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer4 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $13 = sp + 4232|0;
 $14 = sp + 136|0;
 $18 = sp + 80|0;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 $15 = 0;
 $16 = 0;
 $17 = 0;
 $19 = $8;
 $20 = (_atoi($19)|0);
 $15 = $20;
 $21 = (_socket(2,1,0)|0);
 $22 = ($21|0)<(0);
 $23 = $22&1;
 $17 = $23;
 if ($22) {
  (_printf(2624,$vararg_buffer)|0);
  $6 = -2;
  $80 = $6;
  STACKTOP = sp;return ($80|0);
 }
 ;HEAP32[$18>>2]=0|0;HEAP32[$18+4>>2]=0|0;HEAP32[$18+8>>2]=0|0;HEAP32[$18+12>>2]=0|0;
 HEAP16[$18>>1] = 2;
 $24 = $15;
 $25 = $24&65535;
 $26 = (_htons($25)|0);
 $27 = ((($18)) + 2|0);
 HEAP16[$27>>1] = $26;
 $28 = $7;
 $29 = (_inet_addr(($28|0))|0);
 $30 = ((($18)) + 4|0);
 HEAP32[$30>>2] = $29;
 $31 = $7;
 $32 = $15;
 HEAP32[$vararg_buffer1>>2] = $31;
 $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr3>>2] = $32;
 (_printf(2642,$vararg_buffer1)|0);
 $33 = $17;
 $34 = (_connect($33,$18,16)|0);
 $35 = ($34|0)!=(0);
 if ($35) {
  (_printf(2654,$vararg_buffer4)|0);
  $36 = $17;
  (_close($36)|0);
  $6 = -4;
  $80 = $6;
  STACKTOP = sp;return ($80|0);
 }
 _memset(($13|0),0,1024)|0;
 _memset(($14|0),0,4096)|0;
 $37 = $17;
 (_recv($37,$13,1023,0)|0);
 HEAP32[$vararg_buffer6>>2] = $13;
 (_printf(2689,$vararg_buffer6)|0);
 $38 = (_strstr($13,2698)|0);
 $39 = ($38|0)!=($13|0);
 if ($39) {
  _perror(2702);
 }
 (_strcpy($14,2733)|0);
 $40 = $17;
 $41 = (_strlen($14)|0);
 (_send($40,$14,$41,0)|0);
 _memset(($13|0),0,1024)|0;
 $42 = $17;
 (_recv($42,$13,1023,0)|0);
 HEAP32[$vararg_buffer9>>2] = $13;
 (_printf(2689,$vararg_buffer9)|0);
 $43 = (_strstr($13,2746)|0);
 $44 = ($43|0)!=($13|0);
 if ($44) {
  _perror(2702);
 }
 _memset(($14|0),0,4096)|0;
 $45 = $9;
 HEAP32[$vararg_buffer12>>2] = $45;
 (_sprintf($14,2750,$vararg_buffer12)|0);
 $46 = $17;
 $47 = (_strlen($14)|0);
 (_send($46,$14,$47,0)|0);
 _memset(($13|0),0,1024)|0;
 $48 = $17;
 (_recv($48,$13,1023,0)|0);
 $49 = (_strstr($13,2746)|0);
 $50 = ($49|0)!=($13|0);
 if ($50) {
  _perror(2702);
 }
 _memset(($14|0),0,4096)|0;
 $51 = $10;
 HEAP32[$vararg_buffer15>>2] = $51;
 (_sprintf($14,2766,$vararg_buffer15)|0);
 $52 = $17;
 $53 = (_strlen($14)|0);
 (_send($52,$14,$53,0)|0);
 _memset(($13|0),0,1024)|0;
 $54 = $17;
 (_recv($54,$13,1023,0)|0);
 $55 = (_strstr($13,2746)|0);
 $56 = ($55|0)!=($13|0);
 if ($56) {
  _perror(2702);
 }
 _memset(($14|0),0,4096)|0;
 (_strcpy($14,2780)|0);
 $57 = $17;
 $58 = (_strlen($14)|0);
 (_send($57,$14,$58,0)|0);
 _memset(($13|0),0,1024)|0;
 $59 = $17;
 (_recv($59,$13,1023,0)|0);
 $60 = (_strstr($13,2786)|0);
 $61 = ($60|0)!=($13|0);
 if ($61) {
  _perror(2702);
 }
 _memset(($14|0),0,4096)|0;
 $62 = $10;
 HEAP32[$vararg_buffer18>>2] = $62;
 (_sprintf($14,2790,$vararg_buffer18)|0);
 $63 = $17;
 $64 = (_strlen($14)|0);
 (_send($63,$14,$64,0)|0);
 _memset(($14|0),0,4096)|0;
 $65 = $11;
 HEAP32[$vararg_buffer21>>2] = $65;
 (_sprintf($14,2799,$vararg_buffer21)|0);
 $66 = $17;
 $67 = (_strlen($14)|0);
 (_send($66,$14,$67,0)|0);
 _memset(($14|0),0,4096)|0;
 $68 = $12;
 HEAP32[$vararg_buffer24>>2] = $68;
 (_sprintf($14,2814,$vararg_buffer24)|0);
 $69 = $17;
 $70 = (_strlen($14)|0);
 (_send($69,$14,$70,0)|0);
 _memset(($14|0),0,4096)|0;
 (_strcpy($14,2819)|0);
 $71 = $17;
 $72 = (_strlen($14)|0);
 (_send($71,$14,$72,0)|0);
 _memset(($13|0),0,1024)|0;
 $73 = $17;
 (_recv($73,$13,1023,0)|0);
 $74 = (_strstr($13,2746)|0);
 $75 = ($74|0)!=($13|0);
 if ($75) {
  _perror(2702);
 }
 (_strcpy($13,2824)|0);
 $76 = $17;
 $77 = (_strlen($13)|0);
 (_send($76,$13,$77,0)|0);
 _memset(($13|0),0,1024)|0;
 $78 = $17;
 (_recv($78,$13,1023,0)|0);
 $79 = $17;
 (_close($79)|0);
 $6 = 0;
 $80 = $6;
 STACKTOP = sp;return ($80|0);
}
function _unixRegexBuf($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $6 = sp;
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $7 = $4;
 $8 = (_regcomp($6,$7,9)|0);
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $2 = 0;
  } else {
   $10 = $3;
   $11 = (_regexec($6,$10,0,0,0)|0);
   $5 = $11;
   _regfree($6);
   $12 = $5;
   $13 = ($12|0)!=(0);
   if ($13) {
    $2 = 0;
    break;
   } else {
    $2 = 1;
    break;
   }
  }
 } while(0);
 $14 = $2;
 STACKTOP = sp;return ($14|0);
}
function _uBaik($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $4 = $1;
 $5 = (_strlen($4)|0);
 $6 = (($5) + 2)|0;
 $2 = $6;
 $7 = $2;
 $8 = (_malloc($7)|0);
 HEAP32[(73792)>>2] = $8;
 $3 = 0;
 while(1) {
  $9 = $3;
  $10 = $2;
  $11 = ($9|0)<($10|0);
  if (!($11)) {
   break;
  }
  $12 = $3;
  $13 = $2;
  $14 = (($13) - 1)|0;
  $15 = ($12|0)==($14|0);
  $16 = $3;
  do {
   if ($15) {
    $17 = HEAP32[(73792)>>2]|0;
    $18 = (($17) + ($16)|0);
    HEAP8[$18>>0] = 0;
   } else {
    $19 = $2;
    $20 = (($19) - 2)|0;
    $21 = ($16|0)==($20|0);
    $22 = $3;
    if ($21) {
     $23 = HEAP32[(73792)>>2]|0;
     $24 = (($23) + ($22)|0);
     HEAP8[$24>>0] = 10;
     break;
    } else {
     $25 = $1;
     $26 = (($25) + ($22)|0);
     $27 = HEAP8[$26>>0]|0;
     $28 = $3;
     $29 = HEAP32[(73792)>>2]|0;
     $30 = (($29) + ($28)|0);
     HEAP8[$30>>0] = $27;
     break;
    }
   }
  } while(0);
  $31 = $3;
  $32 = (($31) + 1)|0;
  $3 = $32;
 }
 HEAP32[18446] = 0;
 HEAP32[(73788)>>2] = 0;
 _memset((31816|0),0,464)|0;
 (_ReadSource()|0);
 HEAP32[18446] = 0;
 HEAP32[(73788)>>2] = 0;
 while(1) {
  (_Interpreter()|0);
  $33 = HEAP32[7954]|0;
  $34 = ($33|0)!=(28);
  if (!($34)) {
   break;
  }
 }
 _BaikGarbageCollection();
 STACKTOP = sp;return;
}
function _uBaikVersion() {
 var $0 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = HEAP32[35]|0;
 (_fprintf($0,2831,$vararg_buffer)|0);
 STACKTOP = sp;return;
}
function _lex_ident() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0;
 var $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0;
 var $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0;
 var $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0;
 var $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0;
 var $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0;
 var $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0;
 var $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0;
 var $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0;
 var $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0;
 var $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0;
 var $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0;
 var $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0;
 var $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0;
 var $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0;
 var $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0;
 var $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0;
 var $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0;
 var $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0;
 var $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0;
 var $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0;
 var $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0;
 var $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0;
 var $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0;
 var $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0;
 var $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $0 = 0;
 $1 = 0;
 while(1) {
  $2 = HEAP32[18446]|0;
  $3 = (($2) + 1)|0;
  HEAP32[18446] = $3;
  $4 = HEAP32[(73792)>>2]|0;
  $5 = (($4) + ($2)|0);
  $6 = HEAP8[$5>>0]|0;
  $0 = $6;
  $7 = $6 << 24 >> 24;
  $8 = (_isalnum($7)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   $888 = 1;
  } else {
   $10 = $0;
   $11 = $10 << 24 >> 24;
   $12 = ($11|0)==(95);
   $888 = $12;
  }
  $13 = $1;
  if (!($888)) {
   break;
  }
  $14 = ($13|0)>(63);
  if ($14) {
   HEAP32[$vararg_buffer>>2] = 64;
   _Error(2887,$vararg_buffer);
  }
  $15 = $0;
  $16 = $1;
  $17 = (($16) + 1)|0;
  $1 = $17;
  $18 = ((31976) + ($16)|0);
  HEAP8[$18>>0] = $15;
 }
 $19 = ((31976) + ($13)|0);
 HEAP8[$19>>0] = 0;
 $20 = HEAP32[18446]|0;
 $21 = (($20) + -1)|0;
 HEAP32[18446] = $21;
 HEAP32[7954] = 224;
 $22 = (_strcmp((31976),2920)|0);
 $23 = ($22|0)!=(0);
 if ($23) {
  $24 = (_strcmp((31976),2926)|0);
  $25 = ($24|0)!=(0);
  if ($25) {
   $26 = (_strcmp((31976),2932)|0);
   $27 = ($26|0)!=(0);
   if (!($27)) {
    label = 11;
   }
  } else {
   label = 11;
  }
 } else {
  label = 11;
 }
 if ((label|0) == 11) {
  HEAP32[7954] = 0;
 }
 $28 = (_strcmp((31976),2938)|0);
 $29 = ($28|0)!=(0);
 if ($29) {
  $30 = (_strcmp((31976),2950)|0);
  $31 = ($30|0)!=(0);
  if ($31) {
   $32 = (_strcmp((31976),2962)|0);
   $33 = ($32|0)!=(0);
   if ($33) {
    $34 = (_strcmp((31976),2974)|0);
    $35 = ($34|0)!=(0);
    if (!($35)) {
     label = 16;
    }
   } else {
    label = 16;
   }
  } else {
   label = 16;
  }
 } else {
  label = 16;
 }
 if ((label|0) == 16) {
  HEAP32[7954] = 68;
 }
 $36 = (_strcmp((31976),2986)|0);
 $37 = ($36|0)!=(0);
 if ($37) {
  $38 = (_strcmp((31976),2995)|0);
  $39 = ($38|0)!=(0);
  if ($39) {
   $40 = (_strcmp((31976),3004)|0);
   $41 = ($40|0)!=(0);
   if (!($41)) {
    label = 20;
   }
  } else {
   label = 20;
  }
 } else {
  label = 20;
 }
 if ((label|0) == 20) {
  HEAP32[7954] = 12;
 }
 $42 = (_strcmp((31976),3013)|0);
 $43 = ($42|0)!=(0);
 if ($43) {
  $44 = (_strcmp((31976),3025)|0);
  $45 = ($44|0)!=(0);
  if ($45) {
   $46 = (_strcmp((31976),3037)|0);
   $47 = ($46|0)!=(0);
   if (!($47)) {
    label = 24;
   }
  } else {
   label = 24;
  }
 } else {
  label = 24;
 }
 if ((label|0) == 24) {
  HEAP32[7954] = 31;
 }
 $48 = (_strcmp((31976),3049)|0);
 $49 = ($48|0)!=(0);
 if ($49) {
  $50 = (_strcmp((31976),3058)|0);
  $51 = ($50|0)!=(0);
  if ($51) {
   $52 = (_strcmp((31976),3067)|0);
   $53 = ($52|0)!=(0);
   if (!($53)) {
    label = 28;
   }
  } else {
   label = 28;
  }
 } else {
  label = 28;
 }
 if ((label|0) == 28) {
  HEAP32[7954] = 13;
 }
 $54 = (_strcmp((31976),3076)|0);
 $55 = ($54|0)!=(0);
 if ($55) {
  $56 = (_strcmp((31976),3082)|0);
  $57 = ($56|0)!=(0);
  if ($57) {
   $58 = (_strcmp((31976),3088)|0);
   $59 = ($58|0)!=(0);
   if (!($59)) {
    label = 32;
   }
  } else {
   label = 32;
  }
 } else {
  label = 32;
 }
 if ((label|0) == 32) {
  HEAP32[7954] = 24;
 }
 $60 = (_strcmp((31976),3094)|0);
 $61 = ($60|0)!=(0);
 if ($61) {
  $62 = (_strcmp((31976),3109)|0);
  $63 = ($62|0)!=(0);
  if ($63) {
   $64 = (_strcmp((31976),3124)|0);
   $65 = ($64|0)!=(0);
   if (!($65)) {
    label = 36;
   }
  } else {
   label = 36;
  }
 } else {
  label = 36;
 }
 if ((label|0) == 36) {
  HEAP32[7954] = 207;
 }
 $66 = (_strcmp((31976),3139)|0);
 $67 = ($66|0)!=(0);
 if ($67) {
  $68 = (_strcmp((31976),3147)|0);
  $69 = ($68|0)!=(0);
  if ($69) {
   $70 = (_strcmp((31976),3155)|0);
   $71 = ($70|0)!=(0);
   if (!($71)) {
    label = 40;
   }
  } else {
   label = 40;
  }
 } else {
  label = 40;
 }
 if ((label|0) == 40) {
  HEAP32[7954] = 25;
 }
 $72 = (_strcmp((31976),3163)|0);
 $73 = ($72|0)!=(0);
 if ($73) {
  $74 = (_strcmp((31976),3170)|0);
  $75 = ($74|0)!=(0);
  if ($75) {
   $76 = (_strcmp((31976),3177)|0);
   $77 = ($76|0)!=(0);
   if (!($77)) {
    label = 44;
   }
  } else {
   label = 44;
  }
 } else {
  label = 44;
 }
 if ((label|0) == 44) {
  HEAP32[7954] = 14;
 }
 $78 = (_strcmp((31976),3184)|0);
 $79 = ($78|0)!=(0);
 if ($79) {
  $80 = (_strcmp((31976),3192)|0);
  $81 = ($80|0)!=(0);
  if ($81) {
   $82 = (_strcmp((31976),3200)|0);
   $83 = ($82|0)!=(0);
   if (!($83)) {
    label = 48;
   }
  } else {
   label = 48;
  }
 } else {
  label = 48;
 }
 if ((label|0) == 48) {
  HEAP32[7954] = 26;
 }
 $84 = (_strcmp((31976),3208)|0);
 $85 = ($84|0)!=(0);
 if ($85) {
  $86 = (_strcmp((31976),3214)|0);
  $87 = ($86|0)!=(0);
  if ($87) {
   $88 = (_strcmp((31976),3220)|0);
   $89 = ($88|0)!=(0);
   if (!($89)) {
    label = 52;
   }
  } else {
   label = 52;
  }
 } else {
  label = 52;
 }
 if ((label|0) == 52) {
  HEAP32[7954] = 27;
 }
 $90 = (_strcmp((31976),3226)|0);
 $91 = ($90|0)!=(0);
 if ($91) {
  $92 = (_strcmp((31976),3232)|0);
  $93 = ($92|0)!=(0);
  if ($93) {
   $94 = (_strcmp((31976),3238)|0);
   $95 = ($94|0)!=(0);
   if (!($95)) {
    label = 56;
   }
  } else {
   label = 56;
  }
 } else {
  label = 56;
 }
 if ((label|0) == 56) {
  HEAP32[7954] = 17;
 }
 $96 = (_strcmp((31976),3244)|0);
 $97 = ($96|0)!=(0);
 if ($97) {
  $98 = (_strcmp((31976),3250)|0);
  $99 = ($98|0)!=(0);
  if ($99) {
   $100 = (_strcmp((31976),3256)|0);
   $101 = ($100|0)!=(0);
   if (!($101)) {
    label = 60;
   }
  } else {
   label = 60;
  }
 } else {
  label = 60;
 }
 if ((label|0) == 60) {
  HEAP32[7954] = 1;
 }
 $102 = (_strcmp((31976),3262)|0);
 $103 = ($102|0)!=(0);
 if ($103) {
  $104 = (_strcmp((31976),3268)|0);
  $105 = ($104|0)!=(0);
  if ($105) {
   $106 = (_strcmp((31976),3274)|0);
   $107 = ($106|0)!=(0);
   if ($107) {
    $108 = (_strcmp((31976),3280)|0);
    $109 = ($108|0)!=(0);
    if ($109) {
     $110 = (_strcmp((31976),3285)|0);
     $111 = ($110|0)!=(0);
     if ($111) {
      $112 = (_strcmp((31976),3290)|0);
      $113 = ($112|0)!=(0);
      if (!($113)) {
       label = 67;
      }
     } else {
      label = 67;
     }
    } else {
     label = 67;
    }
   } else {
    label = 67;
   }
  } else {
   label = 67;
  }
 } else {
  label = 67;
 }
 if ((label|0) == 67) {
  HEAP32[7954] = 2;
 }
 $114 = (_strcmp((31976),3295)|0);
 $115 = ($114|0)!=(0);
 if ($115) {
  $116 = (_strcmp((31976),3305)|0);
  $117 = ($116|0)!=(0);
  if ($117) {
   $118 = (_strcmp((31976),3315)|0);
   $119 = ($118|0)!=(0);
   if ($119) {
    $120 = (_strcmp((31976),3325)|0);
    $121 = ($120|0)!=(0);
    if ($121) {
     $122 = (_strcmp((31976),3334)|0);
     $123 = ($122|0)!=(0);
     if ($123) {
      $124 = (_strcmp((31976),3343)|0);
      $125 = ($124|0)!=(0);
      if (!($125)) {
       label = 74;
      }
     } else {
      label = 74;
     }
    } else {
     label = 74;
    }
   } else {
    label = 74;
   }
  } else {
   label = 74;
  }
 } else {
  label = 74;
 }
 if ((label|0) == 74) {
  HEAP32[7954] = 38;
 }
 $126 = (_strcmp((31976),14277)|0);
 $127 = ($126|0)!=(0);
 if ($127) {
  $128 = (_strcmp((31976),14272)|0);
  $129 = ($128|0)!=(0);
  if ($129) {
   $130 = (_strcmp((31976),3352)|0);
   $131 = ($130|0)!=(0);
   if (!($131)) {
    label = 78;
   }
  } else {
   label = 78;
  }
 } else {
  label = 78;
 }
 if ((label|0) == 78) {
  HEAP32[7954] = 3;
 }
 $132 = (_strcmp((31976),14296)|0);
 $133 = ($132|0)!=(0);
 if ($133) {
  $134 = (_strcmp((31976),14288)|0);
  $135 = ($134|0)!=(0);
  if ($135) {
   $136 = (_strcmp((31976),3357)|0);
   $137 = ($136|0)!=(0);
   if (!($137)) {
    label = 82;
   }
  } else {
   label = 82;
  }
 } else {
  label = 82;
 }
 if ((label|0) == 82) {
  HEAP32[7954] = 4;
 }
 $138 = (_strcmp((31976),3365)|0);
 $139 = ($138|0)!=(0);
 do {
  if ($139) {
   $140 = (_strcmp((31976),3375)|0);
   $141 = ($140|0)!=(0);
   if ($141) {
    $142 = (_strcmp((31976),3385)|0);
    $143 = ($142|0)!=(0);
    if (!($143)) {
     label = 97;
     break;
    }
    $144 = (_strcmp((31976),3395)|0);
    $145 = ($144|0)!=(0);
    if (!($145)) {
     label = 97;
     break;
    }
    $146 = (_strcmp((31976),3401)|0);
    $147 = ($146|0)!=(0);
    if (!($147)) {
     label = 97;
     break;
    }
    $148 = (_strcmp((31976),3407)|0);
    $149 = ($148|0)!=(0);
    if (!($149)) {
     label = 97;
     break;
    }
    $150 = (_strcmp((31976),3413)|0);
    $151 = ($150|0)!=(0);
    if (!($151)) {
     label = 97;
     break;
    }
    $152 = (_strcmp((31976),3424)|0);
    $153 = ($152|0)!=(0);
    if (!($153)) {
     label = 97;
     break;
    }
    $154 = (_strcmp((31976),3435)|0);
    $155 = ($154|0)!=(0);
    if (!($155)) {
     label = 97;
     break;
    }
    $156 = (_strcmp((31976),3446)|0);
    $157 = ($156|0)!=(0);
    if (!($157)) {
     label = 97;
     break;
    }
    $158 = (_strcmp((31976),3457)|0);
    $159 = ($158|0)!=(0);
    if (!($159)) {
     label = 97;
     break;
    }
    $160 = (_strcmp((31976),3467)|0);
    $161 = ($160|0)!=(0);
    if (!($161)) {
     label = 97;
     break;
    }
    $162 = (_strcmp((31976),3477)|0);
    $163 = ($162|0)!=(0);
    if (!($163)) {
     label = 97;
     break;
    }
    $164 = (_strcmp((31976),3487)|0);
    $165 = ($164|0)!=(0);
    if (!($165)) {
     label = 97;
    }
   } else {
    label = 97;
   }
  } else {
   label = 97;
  }
 } while(0);
 if ((label|0) == 97) {
  HEAP32[7954] = 5;
 }
 $166 = (_strcmp((31976),3497)|0);
 $167 = ($166|0)!=(0);
 do {
  if ($167) {
   $168 = (_strcmp((31976),3504)|0);
   $169 = ($168|0)!=(0);
   if (!($169)) {
    label = 101;
    break;
   }
   $170 = (_strcmp((31976),3511)|0);
   $171 = ($170|0)!=(0);
   if (!($171)) {
    label = 101;
   }
  } else {
   label = 101;
  }
 } while(0);
 if ((label|0) == 101) {
  HEAP32[7954] = 18;
 }
 $172 = (_strcmp((31976),3518)|0);
 $173 = ($172|0)!=(0);
 do {
  if ($173) {
   $174 = (_strcmp((31976),3526)|0);
   $175 = ($174|0)!=(0);
   if (!($175)) {
    label = 105;
    break;
   }
   $176 = (_strcmp((31976),3534)|0);
   $177 = ($176|0)!=(0);
   if (!($177)) {
    label = 105;
   }
  } else {
   label = 105;
  }
 } while(0);
 if ((label|0) == 105) {
  HEAP32[7954] = 19;
 }
 $178 = (_strcmp((31976),3542)|0);
 $179 = ($178|0)!=(0);
 do {
  if ($179) {
   $180 = (_strcmp((31976),3552)|0);
   $181 = ($180|0)!=(0);
   if (!($181)) {
    label = 109;
    break;
   }
   $182 = (_strcmp((31976),3562)|0);
   $183 = ($182|0)!=(0);
   if (!($183)) {
    label = 109;
   }
  } else {
   label = 109;
  }
 } while(0);
 if ((label|0) == 109) {
  HEAP32[7954] = 20;
 }
 $184 = (_strcmp((31976),3572)|0);
 $185 = ($184|0)!=(0);
 do {
  if ($185) {
   $186 = (_strcmp((31976),3578)|0);
   $187 = ($186|0)!=(0);
   if (!($187)) {
    label = 113;
    break;
   }
   $188 = (_strcmp((31976),3584)|0);
   $189 = ($188|0)!=(0);
   if (!($189)) {
    label = 113;
   }
  } else {
   label = 113;
  }
 } while(0);
 if ((label|0) == 113) {
  HEAP32[7954] = 21;
 }
 $190 = (_strcmp((31976),3590)|0);
 $191 = ($190|0)!=(0);
 do {
  if ($191) {
   $192 = (_strcmp((31976),3596)|0);
   $193 = ($192|0)!=(0);
   if (!($193)) {
    label = 117;
    break;
   }
   $194 = (_strcmp((31976),3602)|0);
   $195 = ($194|0)!=(0);
   if (!($195)) {
    label = 117;
   }
  } else {
   label = 117;
  }
 } while(0);
 if ((label|0) == 117) {
  HEAP32[7954] = 22;
 }
 $196 = (_strcmp((31976),3608)|0);
 $197 = ($196|0)!=(0);
 do {
  if ($197) {
   $198 = (_strcmp((31976),3613)|0);
   $199 = ($198|0)!=(0);
   if (!($199)) {
    label = 121;
    break;
   }
   $200 = (_strcmp((31976),3618)|0);
   $201 = ($200|0)!=(0);
   if (!($201)) {
    label = 121;
   }
  } else {
   label = 121;
  }
 } while(0);
 if ((label|0) == 121) {
  HEAP32[7954] = 23;
 }
 $202 = (_strcmp((31976),3623)|0);
 $203 = ($202|0)!=(0);
 do {
  if ($203) {
   $204 = (_strcmp((31976),3635)|0);
   $205 = ($204|0)!=(0);
   if (!($205)) {
    label = 125;
    break;
   }
   $206 = (_strcmp((31976),3647)|0);
   $207 = ($206|0)!=(0);
   if (!($207)) {
    label = 125;
   }
  } else {
   label = 125;
  }
 } while(0);
 if ((label|0) == 125) {
  HEAP32[7954] = 6;
 }
 $208 = (_strcmp((31976),3659)|0);
 $209 = ($208|0)!=(0);
 do {
  if ($209) {
   $210 = (_strcmp((31976),3663)|0);
   $211 = ($210|0)!=(0);
   if (!($211)) {
    label = 132;
    break;
   }
   $212 = (_strcmp((31976),3667)|0);
   $213 = ($212|0)!=(0);
   if (!($213)) {
    label = 132;
    break;
   }
   $214 = (_strcmp((31976),3671)|0);
   $215 = ($214|0)!=(0);
   if (!($215)) {
    label = 132;
    break;
   }
   $216 = (_strcmp((31976),3678)|0);
   $217 = ($216|0)!=(0);
   if (!($217)) {
    label = 132;
    break;
   }
   $218 = (_strcmp((31976),3685)|0);
   $219 = ($218|0)!=(0);
   if (!($219)) {
    label = 132;
   }
  } else {
   label = 132;
  }
 } while(0);
 if ((label|0) == 132) {
  HEAP32[7954] = 15;
 }
 $220 = (_strcmp((31976),3692)|0);
 $221 = ($220|0)!=(0);
 do {
  if ($221) {
   $222 = (_strcmp((31976),3698)|0);
   $223 = ($222|0)!=(0);
   if (!($223)) {
    label = 136;
    break;
   }
   $224 = (_strcmp((31976),3704)|0);
   $225 = ($224|0)!=(0);
   if (!($225)) {
    label = 136;
   }
  } else {
   label = 136;
  }
 } while(0);
 if ((label|0) == 136) {
  HEAP32[7954] = 16;
 }
 $226 = (_strcmp((31976),3710)|0);
 $227 = ($226|0)!=(0);
 do {
  if ($227) {
   $228 = (_strcmp((31976),3717)|0);
   $229 = ($228|0)!=(0);
   if (!($229)) {
    label = 140;
    break;
   }
   $230 = (_strcmp((31976),3724)|0);
   $231 = ($230|0)!=(0);
   if (!($231)) {
    label = 140;
   }
  } else {
   label = 140;
  }
 } while(0);
 if ((label|0) == 140) {
  HEAP32[7954] = 7;
 }
 $232 = (_strcmp((31976),14542)|0);
 $233 = ($232|0)!=(0);
 do {
  if ($233) {
   $234 = (_strcmp((31976),3731)|0);
   $235 = ($234|0)!=(0);
   if (!($235)) {
    label = 147;
    break;
   }
   $236 = (_strcmp((31976),3735)|0);
   $237 = ($236|0)!=(0);
   if (!($237)) {
    label = 147;
    break;
   }
   $238 = (_strcmp((31976),3739)|0);
   $239 = ($238|0)!=(0);
   if (!($239)) {
    label = 147;
    break;
   }
   $240 = (_strcmp((31976),3745)|0);
   $241 = ($240|0)!=(0);
   if (!($241)) {
    label = 147;
    break;
   }
   $242 = (_strcmp((31976),3751)|0);
   $243 = ($242|0)!=(0);
   if (!($243)) {
    label = 147;
   }
  } else {
   label = 147;
  }
 } while(0);
 if ((label|0) == 147) {
  HEAP32[7954] = 8;
 }
 $244 = (_strcmp((31976),3757)|0);
 $245 = ($244|0)!=(0);
 do {
  if ($245) {
   $246 = (_strcmp((31976),3766)|0);
   $247 = ($246|0)!=(0);
   if (!($247)) {
    label = 154;
    break;
   }
   $248 = (_strcmp((31976),3775)|0);
   $249 = ($248|0)!=(0);
   if (!($249)) {
    label = 154;
    break;
   }
   $250 = (_strcmp((31976),3784)|0);
   $251 = ($250|0)!=(0);
   if (!($251)) {
    label = 154;
    break;
   }
   $252 = (_strcmp((31976),3794)|0);
   $253 = ($252|0)!=(0);
   if (!($253)) {
    label = 154;
    break;
   }
   $254 = (_strcmp((31976),3804)|0);
   $255 = ($254|0)!=(0);
   if (!($255)) {
    label = 154;
   }
  } else {
   label = 154;
  }
 } while(0);
 if ((label|0) == 154) {
  HEAP32[7954] = 42;
 }
 $256 = (_strcmp((31976),3814)|0);
 $257 = ($256|0)!=(0);
 do {
  if ($257) {
   $258 = (_strcmp((31976),3822)|0);
   $259 = ($258|0)!=(0);
   if (!($259)) {
    label = 161;
    break;
   }
   $260 = (_strcmp((31976),3830)|0);
   $261 = ($260|0)!=(0);
   if (!($261)) {
    label = 161;
    break;
   }
   $262 = (_strcmp((31976),3838)|0);
   $263 = ($262|0)!=(0);
   if (!($263)) {
    label = 161;
    break;
   }
   $264 = (_strcmp((31976),3844)|0);
   $265 = ($264|0)!=(0);
   if (!($265)) {
    label = 161;
    break;
   }
   $266 = (_strcmp((31976),3850)|0);
   $267 = ($266|0)!=(0);
   if (!($267)) {
    label = 161;
   }
  } else {
   label = 161;
  }
 } while(0);
 if ((label|0) == 161) {
  HEAP32[7954] = 29;
 }
 $268 = (_strcmp((31976),13258)|0);
 $269 = ($268|0)!=(0);
 do {
  if ($269) {
   $270 = (_strcmp((31976),13252)|0);
   $271 = ($270|0)!=(0);
   if (!($271)) {
    label = 165;
    break;
   }
   $272 = (_strcmp((31976),3856)|0);
   $273 = ($272|0)!=(0);
   if (!($273)) {
    label = 165;
   }
  } else {
   label = 165;
  }
 } while(0);
 if ((label|0) == 165) {
  HEAP32[7954] = 30;
 }
 $274 = (_strcmp((31976),13418)|0);
 $275 = ($274|0)!=(0);
 do {
  if ($275) {
   $276 = (_strcmp((31976),13414)|0);
   $277 = ($276|0)!=(0);
   if (!($277)) {
    label = 169;
    break;
   }
   $278 = (_strcmp((31976),3862)|0);
   $279 = ($278|0)!=(0);
   if (!($279)) {
    label = 169;
   }
  } else {
   label = 169;
  }
 } while(0);
 if ((label|0) == 169) {
  HEAP32[7954] = 9;
 }
 $280 = (_strcmp((31976),13432)|0);
 $281 = ($280|0)!=(0);
 do {
  if ($281) {
   $282 = (_strcmp((31976),13427)|0);
   $283 = ($282|0)!=(0);
   if (!($283)) {
    label = 173;
    break;
   }
   $284 = (_strcmp((31976),3866)|0);
   $285 = ($284|0)!=(0);
   if (!($285)) {
    label = 173;
   }
  } else {
   label = 173;
  }
 } while(0);
 if ((label|0) == 173) {
  HEAP32[7954] = 10;
 }
 $286 = (_strcmp((31976),3871)|0);
 $287 = ($286|0)!=(0);
 do {
  if ($287) {
   $288 = (_strcmp((31976),3875)|0);
   $289 = ($288|0)!=(0);
   if (!($289)) {
    label = 180;
    break;
   }
   $290 = (_strcmp((31976),3879)|0);
   $291 = ($290|0)!=(0);
   if (!($291)) {
    label = 180;
    break;
   }
   $292 = (_strcmp((31976),13583)|0);
   $293 = ($292|0)!=(0);
   if (!($293)) {
    label = 180;
    break;
   }
   $294 = (_strcmp((31976),13577)|0);
   $295 = ($294|0)!=(0);
   if (!($295)) {
    label = 180;
    break;
   }
   $296 = (_strcmp((31976),3883)|0);
   $297 = ($296|0)!=(0);
   if (!($297)) {
    label = 180;
   }
  } else {
   label = 180;
  }
 } while(0);
 if ((label|0) == 180) {
  HEAP32[7954] = 11;
 }
 $298 = (_strcmp((31976),3889)|0);
 $299 = ($298|0)!=(0);
 do {
  if ($299) {
   $300 = (_strcmp((31976),3901)|0);
   $301 = ($300|0)!=(0);
   if (!($301)) {
    label = 184;
    break;
   }
   $302 = (_strcmp((31976),3913)|0);
   $303 = ($302|0)!=(0);
   if (!($303)) {
    label = 184;
   }
  } else {
   label = 184;
  }
 } while(0);
 if ((label|0) == 184) {
  HEAP32[7954] = 43;
 }
 $304 = (_strcmp((31976),3925)|0);
 $305 = ($304|0)!=(0);
 do {
  if ($305) {
   $306 = (_strcmp((31976),3942)|0);
   $307 = ($306|0)!=(0);
   if (!($307)) {
    label = 188;
    break;
   }
   $308 = (_strcmp((31976),3959)|0);
   $309 = ($308|0)!=(0);
   if (!($309)) {
    label = 188;
   }
  } else {
   label = 188;
  }
 } while(0);
 if ((label|0) == 188) {
  HEAP32[7954] = 44;
 }
 $310 = (_strcmp((31976),3976)|0);
 $311 = ($310|0)!=(0);
 do {
  if ($311) {
   $312 = (_strcmp((31976),3990)|0);
   $313 = ($312|0)!=(0);
   if (!($313)) {
    label = 192;
    break;
   }
   $314 = (_strcmp((31976),4004)|0);
   $315 = ($314|0)!=(0);
   if (!($315)) {
    label = 192;
   }
  } else {
   label = 192;
  }
 } while(0);
 if ((label|0) == 192) {
  HEAP32[7954] = 45;
 }
 $316 = (_strcmp((31976),4018)|0);
 $317 = ($316|0)!=(0);
 do {
  if ($317) {
   $318 = (_strcmp((31976),4035)|0);
   $319 = ($318|0)!=(0);
   if (!($319)) {
    label = 196;
    break;
   }
   $320 = (_strcmp((31976),4052)|0);
   $321 = ($320|0)!=(0);
   if (!($321)) {
    label = 196;
   }
  } else {
   label = 196;
  }
 } while(0);
 if ((label|0) == 196) {
  HEAP32[7954] = 46;
 }
 $322 = (_strcmp((31976),4069)|0);
 $323 = ($322|0)!=(0);
 do {
  if ($323) {
   $324 = (_strcmp((31976),4081)|0);
   $325 = ($324|0)!=(0);
   if (!($325)) {
    label = 200;
    break;
   }
   $326 = (_strcmp((31976),4093)|0);
   $327 = ($326|0)!=(0);
   if (!($327)) {
    label = 200;
   }
  } else {
   label = 200;
  }
 } while(0);
 if ((label|0) == 200) {
  HEAP32[7954] = 47;
 }
 $328 = (_strcmp((31976),4105)|0);
 $329 = ($328|0)!=(0);
 do {
  if ($329) {
   $330 = (_strcmp((31976),4120)|0);
   $331 = ($330|0)!=(0);
   if (!($331)) {
    label = 204;
    break;
   }
   $332 = (_strcmp((31976),4135)|0);
   $333 = ($332|0)!=(0);
   if (!($333)) {
    label = 204;
   }
  } else {
   label = 204;
  }
 } while(0);
 if ((label|0) == 204) {
  HEAP32[7954] = 48;
 }
 $334 = (_strcmp((31976),4150)|0);
 $335 = ($334|0)!=(0);
 do {
  if ($335) {
   $336 = (_strcmp((31976),4166)|0);
   $337 = ($336|0)!=(0);
   if (!($337)) {
    label = 208;
    break;
   }
   $338 = (_strcmp((31976),4182)|0);
   $339 = ($338|0)!=(0);
   if (!($339)) {
    label = 208;
   }
  } else {
   label = 208;
  }
 } while(0);
 if ((label|0) == 208) {
  HEAP32[7954] = 49;
 }
 $340 = (_strcmp((31976),4198)|0);
 $341 = ($340|0)!=(0);
 do {
  if ($341) {
   $342 = (_strcmp((31976),4217)|0);
   $343 = ($342|0)!=(0);
   if (!($343)) {
    label = 212;
    break;
   }
   $344 = (_strcmp((31976),4236)|0);
   $345 = ($344|0)!=(0);
   if (!($345)) {
    label = 212;
   }
  } else {
   label = 212;
  }
 } while(0);
 if ((label|0) == 212) {
  HEAP32[7954] = 50;
 }
 $346 = (_strcmp((31976),4255)|0);
 $347 = ($346|0)!=(0);
 do {
  if ($347) {
   $348 = (_strcmp((31976),4271)|0);
   $349 = ($348|0)!=(0);
   if (!($349)) {
    label = 216;
    break;
   }
   $350 = (_strcmp((31976),4287)|0);
   $351 = ($350|0)!=(0);
   if (!($351)) {
    label = 216;
   }
  } else {
   label = 216;
  }
 } while(0);
 if ((label|0) == 216) {
  HEAP32[7954] = 51;
 }
 $352 = (_strcmp((31976),4303)|0);
 $353 = ($352|0)!=(0);
 do {
  if ($353) {
   $354 = (_strcmp((31976),4319)|0);
   $355 = ($354|0)!=(0);
   if (!($355)) {
    label = 220;
    break;
   }
   $356 = (_strcmp((31976),4335)|0);
   $357 = ($356|0)!=(0);
   if (!($357)) {
    label = 220;
   }
  } else {
   label = 220;
  }
 } while(0);
 if ((label|0) == 220) {
  HEAP32[7954] = 52;
 }
 $358 = (_strcmp((31976),4351)|0);
 $359 = ($358|0)!=(0);
 do {
  if ($359) {
   $360 = (_strcmp((31976),4363)|0);
   $361 = ($360|0)!=(0);
   if (!($361)) {
    label = 224;
    break;
   }
   $362 = (_strcmp((31976),4375)|0);
   $363 = ($362|0)!=(0);
   if (!($363)) {
    label = 224;
   }
  } else {
   label = 224;
  }
 } while(0);
 if ((label|0) == 224) {
  HEAP32[7954] = 53;
 }
 $364 = (_strcmp((31976),4387)|0);
 $365 = ($364|0)!=(0);
 do {
  if ($365) {
   $366 = (_strcmp((31976),4399)|0);
   $367 = ($366|0)!=(0);
   if (!($367)) {
    label = 228;
    break;
   }
   $368 = (_strcmp((31976),4411)|0);
   $369 = ($368|0)!=(0);
   if (!($369)) {
    label = 228;
   }
  } else {
   label = 228;
  }
 } while(0);
 if ((label|0) == 228) {
  HEAP32[7954] = 54;
 }
 $370 = (_strcmp((31976),4423)|0);
 $371 = ($370|0)!=(0);
 do {
  if ($371) {
   $372 = (_strcmp((31976),4438)|0);
   $373 = ($372|0)!=(0);
   if (!($373)) {
    label = 236;
    break;
   }
   $374 = (_strcmp((31976),4453)|0);
   $375 = ($374|0)!=(0);
   if (!($375)) {
    label = 236;
    break;
   }
   $376 = (_strcmp((31976),4468)|0);
   $377 = ($376|0)!=(0);
   if (!($377)) {
    label = 236;
    break;
   }
   $378 = (_strcmp((31976),4484)|0);
   $379 = ($378|0)!=(0);
   if (!($379)) {
    label = 236;
    break;
   }
   $380 = (_strcmp((31976),4500)|0);
   $381 = ($380|0)!=(0);
   if (!($381)) {
    label = 236;
    break;
   }
   $382 = (_strcmp((31976),4516)|0);
   $383 = ($382|0)!=(0);
   if (!($383)) {
    label = 236;
   }
  } else {
   label = 236;
  }
 } while(0);
 if ((label|0) == 236) {
  HEAP32[7954] = 55;
 }
 $384 = (_strcmp((31976),4532)|0);
 $385 = ($384|0)!=(0);
 do {
  if ($385) {
   $386 = (_strcmp((31976),4542)|0);
   $387 = ($386|0)!=(0);
   if (!($387)) {
    label = 244;
    break;
   }
   $388 = (_strcmp((31976),4552)|0);
   $389 = ($388|0)!=(0);
   if (!($389)) {
    label = 244;
    break;
   }
   $390 = (_strcmp((31976),4562)|0);
   $391 = ($390|0)!=(0);
   if (!($391)) {
    label = 244;
    break;
   }
   $392 = (_strcmp((31976),4577)|0);
   $393 = ($392|0)!=(0);
   if (!($393)) {
    label = 244;
    break;
   }
   $394 = (_strcmp((31976),4592)|0);
   $395 = ($394|0)!=(0);
   if (!($395)) {
    label = 244;
    break;
   }
   $396 = (_strcmp((31976),4607)|0);
   $397 = ($396|0)!=(0);
   if (!($397)) {
    label = 244;
   }
  } else {
   label = 244;
  }
 } while(0);
 if ((label|0) == 244) {
  HEAP32[7954] = 56;
 }
 $398 = (_strcmp((31976),4622)|0);
 $399 = ($398|0)!=(0);
 do {
  if ($399) {
   $400 = (_strcmp((31976),4633)|0);
   $401 = ($400|0)!=(0);
   if (!($401)) {
    label = 252;
    break;
   }
   $402 = (_strcmp((31976),4644)|0);
   $403 = ($402|0)!=(0);
   if (!($403)) {
    label = 252;
    break;
   }
   $404 = (_strcmp((31976),4655)|0);
   $405 = ($404|0)!=(0);
   if (!($405)) {
    label = 252;
    break;
   }
   $406 = (_strcmp((31976),4671)|0);
   $407 = ($406|0)!=(0);
   if (!($407)) {
    label = 252;
    break;
   }
   $408 = (_strcmp((31976),4687)|0);
   $409 = ($408|0)!=(0);
   if (!($409)) {
    label = 252;
    break;
   }
   $410 = (_strcmp((31976),4687)|0);
   $411 = ($410|0)!=(0);
   if (!($411)) {
    label = 252;
   }
  } else {
   label = 252;
  }
 } while(0);
 if ((label|0) == 252) {
  HEAP32[7954] = 57;
 }
 $412 = (_strcmp((31976),4703)|0);
 $413 = ($412|0)!=(0);
 do {
  if ($413) {
   $414 = (_strcmp((31976),4718)|0);
   $415 = ($414|0)!=(0);
   if (!($415)) {
    label = 260;
    break;
   }
   $416 = (_strcmp((31976),4733)|0);
   $417 = ($416|0)!=(0);
   if (!($417)) {
    label = 260;
    break;
   }
   $418 = (_strcmp((31976),4748)|0);
   $419 = ($418|0)!=(0);
   if (!($419)) {
    label = 260;
    break;
   }
   $420 = (_strcmp((31976),4768)|0);
   $421 = ($420|0)!=(0);
   if (!($421)) {
    label = 260;
    break;
   }
   $422 = (_strcmp((31976),4788)|0);
   $423 = ($422|0)!=(0);
   if (!($423)) {
    label = 260;
    break;
   }
   $424 = (_strcmp((31976),4808)|0);
   $425 = ($424|0)!=(0);
   if (!($425)) {
    label = 260;
   }
  } else {
   label = 260;
  }
 } while(0);
 if ((label|0) == 260) {
  HEAP32[7954] = 58;
 }
 $426 = (_strcmp((31976),4828)|0);
 $427 = ($426|0)!=(0);
 do {
  if ($427) {
   $428 = (_strcmp((31976),4844)|0);
   $429 = ($428|0)!=(0);
   if (!($429)) {
    label = 268;
    break;
   }
   $430 = (_strcmp((31976),4860)|0);
   $431 = ($430|0)!=(0);
   if (!($431)) {
    label = 268;
    break;
   }
   $432 = (_strcmp((31976),4876)|0);
   $433 = ($432|0)!=(0);
   if (!($433)) {
    label = 268;
    break;
   }
   $434 = (_strcmp((31976),4897)|0);
   $435 = ($434|0)!=(0);
   if (!($435)) {
    label = 268;
    break;
   }
   $436 = (_strcmp((31976),4918)|0);
   $437 = ($436|0)!=(0);
   if (!($437)) {
    label = 268;
    break;
   }
   $438 = (_strcmp((31976),4939)|0);
   $439 = ($438|0)!=(0);
   if (!($439)) {
    label = 268;
   }
  } else {
   label = 268;
  }
 } while(0);
 if ((label|0) == 268) {
  HEAP32[7954] = 59;
 }
 $440 = (_strcmp((31976),4960)|0);
 $441 = ($440|0)!=(0);
 do {
  if ($441) {
   $442 = (_strcmp((31976),4970)|0);
   $443 = ($442|0)!=(0);
   if (!($443)) {
    label = 276;
    break;
   }
   $444 = (_strcmp((31976),4980)|0);
   $445 = ($444|0)!=(0);
   if (!($445)) {
    label = 276;
    break;
   }
   $446 = (_strcmp((31976),4990)|0);
   $447 = ($446|0)!=(0);
   if (!($447)) {
    label = 276;
    break;
   }
   $448 = (_strcmp((31976),5005)|0);
   $449 = ($448|0)!=(0);
   if (!($449)) {
    label = 276;
    break;
   }
   $450 = (_strcmp((31976),5020)|0);
   $451 = ($450|0)!=(0);
   if (!($451)) {
    label = 276;
    break;
   }
   $452 = (_strcmp((31976),5035)|0);
   $453 = ($452|0)!=(0);
   if (!($453)) {
    label = 276;
   }
  } else {
   label = 276;
  }
 } while(0);
 if ((label|0) == 276) {
  HEAP32[7954] = 60;
 }
 $454 = (_strcmp((31976),5050)|0);
 $455 = ($454|0)!=(0);
 do {
  if ($455) {
   $456 = (_strcmp((31976),5064)|0);
   $457 = ($456|0)!=(0);
   if (!($457)) {
    label = 284;
    break;
   }
   $458 = (_strcmp((31976),5078)|0);
   $459 = ($458|0)!=(0);
   if (!($459)) {
    label = 284;
    break;
   }
   $460 = (_strcmp((31976),5092)|0);
   $461 = ($460|0)!=(0);
   if (!($461)) {
    label = 284;
    break;
   }
   $462 = (_strcmp((31976),5111)|0);
   $463 = ($462|0)!=(0);
   if (!($463)) {
    label = 284;
    break;
   }
   $464 = (_strcmp((31976),5130)|0);
   $465 = ($464|0)!=(0);
   if (!($465)) {
    label = 284;
    break;
   }
   $466 = (_strcmp((31976),5149)|0);
   $467 = ($466|0)!=(0);
   if (!($467)) {
    label = 284;
   }
  } else {
   label = 284;
  }
 } while(0);
 if ((label|0) == 284) {
  HEAP32[7954] = 61;
 }
 $468 = (_strcmp((31976),5168)|0);
 $469 = ($468|0)!=(0);
 do {
  if ($469) {
   $470 = (_strcmp((31976),5181)|0);
   $471 = ($470|0)!=(0);
   if (!($471)) {
    label = 288;
    break;
   }
   $472 = (_strcmp((31976),5194)|0);
   $473 = ($472|0)!=(0);
   if (!($473)) {
    label = 288;
   }
  } else {
   label = 288;
  }
 } while(0);
 if ((label|0) == 288) {
  HEAP32[7954] = 62;
 }
 $474 = (_strcmp((31976),5207)|0);
 $475 = ($474|0)!=(0);
 do {
  if ($475) {
   $476 = (_strcmp((31976),5219)|0);
   $477 = ($476|0)!=(0);
   if (!($477)) {
    label = 292;
    break;
   }
   $478 = (_strcmp((31976),5231)|0);
   $479 = ($478|0)!=(0);
   if (!($479)) {
    label = 292;
   }
  } else {
   label = 292;
  }
 } while(0);
 if ((label|0) == 292) {
  HEAP32[7954] = 63;
 }
 $480 = (_strcmp((31976),5243)|0);
 $481 = ($480|0)!=(0);
 do {
  if ($481) {
   $482 = (_strcmp((31976),5256)|0);
   $483 = ($482|0)!=(0);
   if (!($483)) {
    label = 296;
    break;
   }
   $484 = (_strcmp((31976),5269)|0);
   $485 = ($484|0)!=(0);
   if (!($485)) {
    label = 296;
   }
  } else {
   label = 296;
  }
 } while(0);
 if ((label|0) == 296) {
  HEAP32[7954] = 64;
 }
 $486 = (_strcmp((31976),5282)|0);
 $487 = ($486|0)!=(0);
 do {
  if ($487) {
   $488 = (_strcmp((31976),5293)|0);
   $489 = ($488|0)!=(0);
   if (!($489)) {
    label = 304;
    break;
   }
   $490 = (_strcmp((31976),5304)|0);
   $491 = ($490|0)!=(0);
   if (!($491)) {
    label = 304;
    break;
   }
   $492 = (_strcmp((31976),5315)|0);
   $493 = ($492|0)!=(0);
   if (!($493)) {
    label = 304;
    break;
   }
   $494 = (_strcmp((31976),5304)|0);
   $495 = ($494|0)!=(0);
   if (!($495)) {
    label = 304;
    break;
   }
   $496 = (_strcmp((31976),5331)|0);
   $497 = ($496|0)!=(0);
   if (!($497)) {
    label = 304;
    break;
   }
   $498 = (_strcmp((31976),5347)|0);
   $499 = ($498|0)!=(0);
   if (!($499)) {
    label = 304;
   }
  } else {
   label = 304;
  }
 } while(0);
 if ((label|0) == 304) {
  HEAP32[7954] = 65;
 }
 $500 = (_strcmp((31976),5363)|0);
 $501 = ($500|0)!=(0);
 do {
  if ($501) {
   $502 = (_strcmp((31976),5368)|0);
   $503 = ($502|0)!=(0);
   if (!($503)) {
    label = 312;
    break;
   }
   $504 = (_strcmp((31976),5373)|0);
   $505 = ($504|0)!=(0);
   if (!($505)) {
    label = 312;
    break;
   }
   $506 = (_strcmp((31976),5378)|0);
   $507 = ($506|0)!=(0);
   if (!($507)) {
    label = 312;
    break;
   }
   $508 = (_strcmp((31976),5388)|0);
   $509 = ($508|0)!=(0);
   if (!($509)) {
    label = 312;
    break;
   }
   $510 = (_strcmp((31976),5398)|0);
   $511 = ($510|0)!=(0);
   if (!($511)) {
    label = 312;
    break;
   }
   $512 = (_strcmp((31976),5407)|0);
   $513 = ($512|0)!=(0);
   if (!($513)) {
    label = 312;
   }
  } else {
   label = 312;
  }
 } while(0);
 if ((label|0) == 312) {
  HEAP32[7954] = 66;
 }
 $514 = (_strcmp((31976),5416)|0);
 $515 = ($514|0)!=(0);
 do {
  if ($515) {
   $516 = (_strcmp((31976),5425)|0);
   $517 = ($516|0)!=(0);
   if (!($517)) {
    label = 319;
    break;
   }
   $518 = (_strcmp((31976),5434)|0);
   $519 = ($518|0)!=(0);
   if (!($519)) {
    label = 319;
    break;
   }
   $520 = (_strcmp((31976),5450)|0);
   $521 = ($520|0)!=(0);
   if (!($521)) {
    label = 319;
    break;
   }
   $522 = (_strcmp((31976),5466)|0);
   $523 = ($522|0)!=(0);
   if (!($523)) {
    label = 319;
    break;
   }
   $524 = (_strcmp((31976),5482)|0);
   $525 = ($524|0)!=(0);
   if (!($525)) {
    label = 319;
   }
  } else {
   label = 319;
  }
 } while(0);
 if ((label|0) == 319) {
  HEAP32[7954] = 67;
 }
 $526 = (_strcmp((31976),14240)|0);
 $527 = ($526|0)!=(0);
 do {
  if ($527) {
   $528 = (_strcmp((31976),14234)|0);
   $529 = ($528|0)!=(0);
   if (!($529)) {
    label = 323;
    break;
   }
   $530 = (_strcmp((31976),5498)|0);
   $531 = ($530|0)!=(0);
   if (!($531)) {
    label = 323;
   }
  } else {
   label = 323;
  }
 } while(0);
 if ((label|0) == 323) {
  HEAP32[7954] = 32;
 }
 $532 = (_strcmp((31976),5504)|0);
 $533 = ($532|0)!=(0);
 do {
  if ($533) {
   $534 = (_strcmp((31976),5509)|0);
   $535 = ($534|0)!=(0);
   if (!($535)) {
    label = 327;
    break;
   }
   $536 = (_strcmp((31976),5514)|0);
   $537 = ($536|0)!=(0);
   if (!($537)) {
    label = 327;
   }
  } else {
   label = 327;
  }
 } while(0);
 if ((label|0) == 327) {
  HEAP32[7954] = 33;
 }
 $538 = (_strcmp((31976),5519)|0);
 $539 = ($538|0)!=(0);
 do {
  if ($539) {
   $540 = (_strcmp((31976),5530)|0);
   $541 = ($540|0)!=(0);
   if (!($541)) {
    label = 332;
    break;
   }
   $542 = (_strcmp((31976),5541)|0);
   $543 = ($542|0)!=(0);
   if (!($543)) {
    label = 332;
    break;
   }
   $544 = (_strcmp((31976),5552)|0);
   $545 = ($544|0)!=(0);
   if (!($545)) {
    label = 332;
   }
  } else {
   label = 332;
  }
 } while(0);
 if ((label|0) == 332) {
  HEAP32[7954] = 34;
 }
 $546 = (_strcmp((31976),5563)|0);
 $547 = ($546|0)!=(0);
 do {
  if ($547) {
   $548 = (_strcmp((31976),5582)|0);
   $549 = ($548|0)!=(0);
   if (!($549)) {
    label = 341;
    break;
   }
   $550 = (_strcmp((31976),5601)|0);
   $551 = ($550|0)!=(0);
   if (!($551)) {
    label = 341;
    break;
   }
   $552 = (_strcmp((31976),5620)|0);
   $553 = ($552|0)!=(0);
   if (!($553)) {
    label = 341;
    break;
   }
   $554 = (_strcmp((31976),5639)|0);
   $555 = ($554|0)!=(0);
   if (!($555)) {
    label = 341;
    break;
   }
   $556 = (_strcmp((31976),5655)|0);
   $557 = ($556|0)!=(0);
   if (!($557)) {
    label = 341;
    break;
   }
   $558 = (_strcmp((31976),5671)|0);
   $559 = ($558|0)!=(0);
   if (!($559)) {
    label = 341;
    break;
   }
   $560 = (_strcmp((31976),5687)|0);
   $561 = ($560|0)!=(0);
   if (!($561)) {
    label = 341;
   }
  } else {
   label = 341;
  }
 } while(0);
 if ((label|0) == 341) {
  HEAP32[7954] = 69;
 }
 $562 = (_strcmp((31976),5703)|0);
 $563 = ($562|0)!=(0);
 do {
  if ($563) {
   $564 = (_strcmp((31976),5721)|0);
   $565 = ($564|0)!=(0);
   if (!($565)) {
    label = 350;
    break;
   }
   $566 = (_strcmp((31976),5739)|0);
   $567 = ($566|0)!=(0);
   if (!($567)) {
    label = 350;
    break;
   }
   $568 = (_strcmp((31976),5757)|0);
   $569 = ($568|0)!=(0);
   if (!($569)) {
    label = 350;
    break;
   }
   $570 = (_strcmp((31976),5775)|0);
   $571 = ($570|0)!=(0);
   if (!($571)) {
    label = 350;
    break;
   }
   $572 = (_strcmp((31976),5796)|0);
   $573 = ($572|0)!=(0);
   if (!($573)) {
    label = 350;
    break;
   }
   $574 = (_strcmp((31976),5817)|0);
   $575 = ($574|0)!=(0);
   if (!($575)) {
    label = 350;
    break;
   }
   $576 = (_strcmp((31976),5838)|0);
   $577 = ($576|0)!=(0);
   if (!($577)) {
    label = 350;
   }
  } else {
   label = 350;
  }
 } while(0);
 if ((label|0) == 350) {
  HEAP32[7954] = 70;
 }
 $578 = (_strcmp((31976),5859)|0);
 $579 = ($578|0)!=(0);
 do {
  if ($579) {
   $580 = (_strcmp((31976),5878)|0);
   $581 = ($580|0)!=(0);
   if (!($581)) {
    label = 359;
    break;
   }
   $582 = (_strcmp((31976),5897)|0);
   $583 = ($582|0)!=(0);
   if (!($583)) {
    label = 359;
    break;
   }
   $584 = (_strcmp((31976),5916)|0);
   $585 = ($584|0)!=(0);
   if (!($585)) {
    label = 359;
    break;
   }
   $586 = (_strcmp((31976),5935)|0);
   $587 = ($586|0)!=(0);
   if (!($587)) {
    label = 359;
    break;
   }
   $588 = (_strcmp((31976),5957)|0);
   $589 = ($588|0)!=(0);
   if (!($589)) {
    label = 359;
    break;
   }
   $590 = (_strcmp((31976),5979)|0);
   $591 = ($590|0)!=(0);
   if (!($591)) {
    label = 359;
    break;
   }
   $592 = (_strcmp((31976),6001)|0);
   $593 = ($592|0)!=(0);
   if (!($593)) {
    label = 359;
   }
  } else {
   label = 359;
  }
 } while(0);
 if ((label|0) == 359) {
  HEAP32[7954] = 71;
 }
 $594 = (_strcmp((31976),6023)|0);
 $595 = ($594|0)!=(0);
 do {
  if ($595) {
   $596 = (_strcmp((31976),6036)|0);
   $597 = ($596|0)!=(0);
   if (!($597)) {
    label = 368;
    break;
   }
   $598 = (_strcmp((31976),6049)|0);
   $599 = ($598|0)!=(0);
   if (!($599)) {
    label = 368;
    break;
   }
   $600 = (_strcmp((31976),6062)|0);
   $601 = ($600|0)!=(0);
   if (!($601)) {
    label = 368;
    break;
   }
   $602 = (_strcmp((31976),6075)|0);
   $603 = ($602|0)!=(0);
   if (!($603)) {
    label = 368;
    break;
   }
   $604 = (_strcmp((31976),6091)|0);
   $605 = ($604|0)!=(0);
   if (!($605)) {
    label = 368;
    break;
   }
   $606 = (_strcmp((31976),6107)|0);
   $607 = ($606|0)!=(0);
   if (!($607)) {
    label = 368;
    break;
   }
   $608 = (_strcmp((31976),6123)|0);
   $609 = ($608|0)!=(0);
   if (!($609)) {
    label = 368;
   }
  } else {
   label = 368;
  }
 } while(0);
 if ((label|0) == 368) {
  HEAP32[7954] = 72;
 }
 $610 = (_strcmp((31976),6139)|0);
 $611 = ($610|0)!=(0);
 do {
  if ($611) {
   $612 = (_strcmp((31976),6152)|0);
   $613 = ($612|0)!=(0);
   if (!($613)) {
    label = 377;
    break;
   }
   $614 = (_strcmp((31976),6165)|0);
   $615 = ($614|0)!=(0);
   if (!($615)) {
    label = 377;
    break;
   }
   $616 = (_strcmp((31976),6178)|0);
   $617 = ($616|0)!=(0);
   if (!($617)) {
    label = 377;
    break;
   }
   $618 = (_strcmp((31976),6191)|0);
   $619 = ($618|0)!=(0);
   if (!($619)) {
    label = 377;
    break;
   }
   $620 = (_strcmp((31976),6207)|0);
   $621 = ($620|0)!=(0);
   if (!($621)) {
    label = 377;
    break;
   }
   $622 = (_strcmp((31976),6223)|0);
   $623 = ($622|0)!=(0);
   if (!($623)) {
    label = 377;
    break;
   }
   $624 = (_strcmp((31976),6239)|0);
   $625 = ($624|0)!=(0);
   if (!($625)) {
    label = 377;
   }
  } else {
   label = 377;
  }
 } while(0);
 if ((label|0) == 377) {
  HEAP32[7954] = 73;
 }
 $626 = (_strcmp((31976),6255)|0);
 $627 = ($626|0)!=(0);
 do {
  if ($627) {
   $628 = (_strcmp((31976),6273)|0);
   $629 = ($628|0)!=(0);
   if (!($629)) {
    label = 386;
    break;
   }
   $630 = (_strcmp((31976),6291)|0);
   $631 = ($630|0)!=(0);
   if (!($631)) {
    label = 386;
    break;
   }
   $632 = (_strcmp((31976),6309)|0);
   $633 = ($632|0)!=(0);
   if (!($633)) {
    label = 386;
    break;
   }
   $634 = (_strcmp((31976),6327)|0);
   $635 = ($634|0)!=(0);
   if (!($635)) {
    label = 386;
    break;
   }
   $636 = (_strcmp((31976),6348)|0);
   $637 = ($636|0)!=(0);
   if (!($637)) {
    label = 386;
    break;
   }
   $638 = (_strcmp((31976),6369)|0);
   $639 = ($638|0)!=(0);
   if (!($639)) {
    label = 386;
    break;
   }
   $640 = (_strcmp((31976),6390)|0);
   $641 = ($640|0)!=(0);
   if (!($641)) {
    label = 386;
   }
  } else {
   label = 386;
  }
 } while(0);
 if ((label|0) == 386) {
  HEAP32[7954] = 74;
 }
 $642 = (_strcmp((31976),6411)|0);
 $643 = ($642|0)!=(0);
 do {
  if ($643) {
   $644 = (_strcmp((31976),6424)|0);
   $645 = ($644|0)!=(0);
   if (!($645)) {
    label = 395;
    break;
   }
   $646 = (_strcmp((31976),6437)|0);
   $647 = ($646|0)!=(0);
   if (!($647)) {
    label = 395;
    break;
   }
   $648 = (_strcmp((31976),6450)|0);
   $649 = ($648|0)!=(0);
   if (!($649)) {
    label = 395;
    break;
   }
   $650 = (_strcmp((31976),6463)|0);
   $651 = ($650|0)!=(0);
   if (!($651)) {
    label = 395;
    break;
   }
   $652 = (_strcmp((31976),6479)|0);
   $653 = ($652|0)!=(0);
   if (!($653)) {
    label = 395;
    break;
   }
   $654 = (_strcmp((31976),6495)|0);
   $655 = ($654|0)!=(0);
   if (!($655)) {
    label = 395;
    break;
   }
   $656 = (_strcmp((31976),6511)|0);
   $657 = ($656|0)!=(0);
   if (!($657)) {
    label = 395;
   }
  } else {
   label = 395;
  }
 } while(0);
 if ((label|0) == 395) {
  HEAP32[7954] = 75;
 }
 $658 = (_strcmp((31976),6527)|0);
 $659 = ($658|0)!=(0);
 do {
  if ($659) {
   $660 = (_strcmp((31976),6543)|0);
   $661 = ($660|0)!=(0);
   if (!($661)) {
    label = 404;
    break;
   }
   $662 = (_strcmp((31976),6559)|0);
   $663 = ($662|0)!=(0);
   if (!($663)) {
    label = 404;
    break;
   }
   $664 = (_strcmp((31976),6575)|0);
   $665 = ($664|0)!=(0);
   if (!($665)) {
    label = 404;
    break;
   }
   $666 = (_strcmp((31976),6591)|0);
   $667 = ($666|0)!=(0);
   if (!($667)) {
    label = 404;
    break;
   }
   $668 = (_strcmp((31976),6610)|0);
   $669 = ($668|0)!=(0);
   if (!($669)) {
    label = 404;
    break;
   }
   $670 = (_strcmp((31976),6629)|0);
   $671 = ($670|0)!=(0);
   if (!($671)) {
    label = 404;
    break;
   }
   $672 = (_strcmp((31976),6648)|0);
   $673 = ($672|0)!=(0);
   if (!($673)) {
    label = 404;
   }
  } else {
   label = 404;
  }
 } while(0);
 if ((label|0) == 404) {
  HEAP32[7954] = 76;
 }
 $674 = (_strcmp((31976),6667)|0);
 $675 = ($674|0)!=(0);
 do {
  if ($675) {
   $676 = (_strcmp((31976),6684)|0);
   $677 = ($676|0)!=(0);
   if (!($677)) {
    label = 413;
    break;
   }
   $678 = (_strcmp((31976),6701)|0);
   $679 = ($678|0)!=(0);
   if (!($679)) {
    label = 413;
    break;
   }
   $680 = (_strcmp((31976),6718)|0);
   $681 = ($680|0)!=(0);
   if (!($681)) {
    label = 413;
    break;
   }
   $682 = (_strcmp((31976),6735)|0);
   $683 = ($682|0)!=(0);
   if (!($683)) {
    label = 413;
    break;
   }
   $684 = (_strcmp((31976),6755)|0);
   $685 = ($684|0)!=(0);
   if (!($685)) {
    label = 413;
    break;
   }
   $686 = (_strcmp((31976),6775)|0);
   $687 = ($686|0)!=(0);
   if (!($687)) {
    label = 413;
    break;
   }
   $688 = (_strcmp((31976),6795)|0);
   $689 = ($688|0)!=(0);
   if (!($689)) {
    label = 413;
   }
  } else {
   label = 413;
  }
 } while(0);
 if ((label|0) == 413) {
  HEAP32[7954] = 77;
 }
 $690 = (_strcmp((31976),6815)|0);
 $691 = ($690|0)!=(0);
 do {
  if ($691) {
   $692 = (_strcmp((31976),6835)|0);
   $693 = ($692|0)!=(0);
   if (!($693)) {
    label = 422;
    break;
   }
   $694 = (_strcmp((31976),6855)|0);
   $695 = ($694|0)!=(0);
   if (!($695)) {
    label = 422;
    break;
   }
   $696 = (_strcmp((31976),6875)|0);
   $697 = ($696|0)!=(0);
   if (!($697)) {
    label = 422;
    break;
   }
   $698 = (_strcmp((31976),6895)|0);
   $699 = ($698|0)!=(0);
   if (!($699)) {
    label = 422;
    break;
   }
   $700 = (_strcmp((31976),6918)|0);
   $701 = ($700|0)!=(0);
   if (!($701)) {
    label = 422;
    break;
   }
   $702 = (_strcmp((31976),6941)|0);
   $703 = ($702|0)!=(0);
   if (!($703)) {
    label = 422;
    break;
   }
   $704 = (_strcmp((31976),6964)|0);
   $705 = ($704|0)!=(0);
   if (!($705)) {
    label = 422;
   }
  } else {
   label = 422;
  }
 } while(0);
 if ((label|0) == 422) {
  HEAP32[7954] = 78;
 }
 $706 = (_strcmp((31976),6987)|0);
 $707 = ($706|0)!=(0);
 do {
  if ($707) {
   $708 = (_strcmp((31976),7000)|0);
   $709 = ($708|0)!=(0);
   if (!($709)) {
    label = 431;
    break;
   }
   $710 = (_strcmp((31976),7013)|0);
   $711 = ($710|0)!=(0);
   if (!($711)) {
    label = 431;
    break;
   }
   $712 = (_strcmp((31976),7026)|0);
   $713 = ($712|0)!=(0);
   if (!($713)) {
    label = 431;
    break;
   }
   $714 = (_strcmp((31976),7039)|0);
   $715 = ($714|0)!=(0);
   if (!($715)) {
    label = 431;
    break;
   }
   $716 = (_strcmp((31976),7055)|0);
   $717 = ($716|0)!=(0);
   if (!($717)) {
    label = 431;
    break;
   }
   $718 = (_strcmp((31976),7071)|0);
   $719 = ($718|0)!=(0);
   if (!($719)) {
    label = 431;
    break;
   }
   $720 = (_strcmp((31976),7087)|0);
   $721 = ($720|0)!=(0);
   if (!($721)) {
    label = 431;
   }
  } else {
   label = 431;
  }
 } while(0);
 if ((label|0) == 431) {
  HEAP32[7954] = 84;
 }
 $722 = (_strcmp((31976),7103)|0);
 $723 = ($722|0)!=(0);
 do {
  if ($723) {
   $724 = (_strcmp((31976),7121)|0);
   $725 = ($724|0)!=(0);
   if (!($725)) {
    label = 440;
    break;
   }
   $726 = (_strcmp((31976),7139)|0);
   $727 = ($726|0)!=(0);
   if (!($727)) {
    label = 440;
    break;
   }
   $728 = (_strcmp((31976),7157)|0);
   $729 = ($728|0)!=(0);
   if (!($729)) {
    label = 440;
    break;
   }
   $730 = (_strcmp((31976),7175)|0);
   $731 = ($730|0)!=(0);
   if (!($731)) {
    label = 440;
    break;
   }
   $732 = (_strcmp((31976),7196)|0);
   $733 = ($732|0)!=(0);
   if (!($733)) {
    label = 440;
    break;
   }
   $734 = (_strcmp((31976),7217)|0);
   $735 = ($734|0)!=(0);
   if (!($735)) {
    label = 440;
    break;
   }
   $736 = (_strcmp((31976),7238)|0);
   $737 = ($736|0)!=(0);
   if (!($737)) {
    label = 440;
   }
  } else {
   label = 440;
  }
 } while(0);
 if ((label|0) == 440) {
  HEAP32[7954] = 79;
 }
 $738 = (_strcmp((31976),7259)|0);
 $739 = ($738|0)!=(0);
 do {
  if ($739) {
   $740 = (_strcmp((31976),7278)|0);
   $741 = ($740|0)!=(0);
   if (!($741)) {
    label = 449;
    break;
   }
   $742 = (_strcmp((31976),7297)|0);
   $743 = ($742|0)!=(0);
   if (!($743)) {
    label = 449;
    break;
   }
   $744 = (_strcmp((31976),7316)|0);
   $745 = ($744|0)!=(0);
   if (!($745)) {
    label = 449;
    break;
   }
   $746 = (_strcmp((31976),7335)|0);
   $747 = ($746|0)!=(0);
   if (!($747)) {
    label = 449;
    break;
   }
   $748 = (_strcmp((31976),7357)|0);
   $749 = ($748|0)!=(0);
   if (!($749)) {
    label = 449;
    break;
   }
   $750 = (_strcmp((31976),7379)|0);
   $751 = ($750|0)!=(0);
   if (!($751)) {
    label = 449;
    break;
   }
   $752 = (_strcmp((31976),7401)|0);
   $753 = ($752|0)!=(0);
   if (!($753)) {
    label = 449;
   }
  } else {
   label = 449;
  }
 } while(0);
 if ((label|0) == 449) {
  HEAP32[7954] = 80;
 }
 $754 = (_strcmp((31976),7423)|0);
 $755 = ($754|0)!=(0);
 do {
  if ($755) {
   $756 = (_strcmp((31976),7441)|0);
   $757 = ($756|0)!=(0);
   if (!($757)) {
    label = 458;
    break;
   }
   $758 = (_strcmp((31976),7459)|0);
   $759 = ($758|0)!=(0);
   if (!($759)) {
    label = 458;
    break;
   }
   $760 = (_strcmp((31976),7477)|0);
   $761 = ($760|0)!=(0);
   if (!($761)) {
    label = 458;
    break;
   }
   $762 = (_strcmp((31976),7495)|0);
   $763 = ($762|0)!=(0);
   if (!($763)) {
    label = 458;
    break;
   }
   $764 = (_strcmp((31976),7516)|0);
   $765 = ($764|0)!=(0);
   if (!($765)) {
    label = 458;
    break;
   }
   $766 = (_strcmp((31976),7537)|0);
   $767 = ($766|0)!=(0);
   if (!($767)) {
    label = 458;
    break;
   }
   $768 = (_strcmp((31976),7558)|0);
   $769 = ($768|0)!=(0);
   if (!($769)) {
    label = 458;
   }
  } else {
   label = 458;
  }
 } while(0);
 if ((label|0) == 458) {
  HEAP32[7954] = 83;
 }
 $770 = (_strcmp((31976),7579)|0);
 $771 = ($770|0)!=(0);
 do {
  if ($771) {
   $772 = (_strcmp((31976),7603)|0);
   $773 = ($772|0)!=(0);
   if (!($773)) {
    label = 467;
    break;
   }
   $774 = (_strcmp((31976),7627)|0);
   $775 = ($774|0)!=(0);
   if (!($775)) {
    label = 467;
    break;
   }
   $776 = (_strcmp((31976),7651)|0);
   $777 = ($776|0)!=(0);
   if (!($777)) {
    label = 467;
    break;
   }
   $778 = (_strcmp((31976),7675)|0);
   $779 = ($778|0)!=(0);
   if (!($779)) {
    label = 467;
    break;
   }
   $780 = (_strcmp((31976),7702)|0);
   $781 = ($780|0)!=(0);
   if (!($781)) {
    label = 467;
    break;
   }
   $782 = (_strcmp((31976),7729)|0);
   $783 = ($782|0)!=(0);
   if (!($783)) {
    label = 467;
    break;
   }
   $784 = (_strcmp((31976),7756)|0);
   $785 = ($784|0)!=(0);
   if (!($785)) {
    label = 467;
   }
  } else {
   label = 467;
  }
 } while(0);
 if ((label|0) == 467) {
  HEAP32[7954] = 81;
 }
 $786 = (_strcmp((31976),7783)|0);
 $787 = ($786|0)!=(0);
 do {
  if ($787) {
   $788 = (_strcmp((31976),7808)|0);
   $789 = ($788|0)!=(0);
   if (!($789)) {
    label = 476;
    break;
   }
   $790 = (_strcmp((31976),7833)|0);
   $791 = ($790|0)!=(0);
   if (!($791)) {
    label = 476;
    break;
   }
   $792 = (_strcmp((31976),7858)|0);
   $793 = ($792|0)!=(0);
   if (!($793)) {
    label = 476;
    break;
   }
   $794 = (_strcmp((31976),7883)|0);
   $795 = ($794|0)!=(0);
   if (!($795)) {
    label = 476;
    break;
   }
   $796 = (_strcmp((31976),7911)|0);
   $797 = ($796|0)!=(0);
   if (!($797)) {
    label = 476;
    break;
   }
   $798 = (_strcmp((31976),7939)|0);
   $799 = ($798|0)!=(0);
   if (!($799)) {
    label = 476;
    break;
   }
   $800 = (_strcmp((31976),7967)|0);
   $801 = ($800|0)!=(0);
   if (!($801)) {
    label = 476;
   }
  } else {
   label = 476;
  }
 } while(0);
 if ((label|0) == 476) {
  HEAP32[7954] = 82;
 }
 $802 = (_strcmp((31976),7995)|0);
 $803 = ($802|0)!=(0);
 do {
  if ($803) {
   $804 = (_strcmp((31976),8008)|0);
   $805 = ($804|0)!=(0);
   if (!($805)) {
    label = 483;
    break;
   }
   $806 = (_strcmp((31976),8021)|0);
   $807 = ($806|0)!=(0);
   if (!($807)) {
    label = 483;
    break;
   }
   $808 = (_strcmp((31976),8034)|0);
   $809 = ($808|0)!=(0);
   if (!($809)) {
    label = 483;
    break;
   }
   $810 = (_strcmp((31976),8048)|0);
   $811 = ($810|0)!=(0);
   if (!($811)) {
    label = 483;
    break;
   }
   $812 = (_strcmp((31976),8062)|0);
   $813 = ($812|0)!=(0);
   if (!($813)) {
    label = 483;
   }
  } else {
   label = 483;
  }
 } while(0);
 if ((label|0) == 483) {
  HEAP32[7954] = 35;
 }
 $814 = (_strcmp((31976),8076)|0);
 $815 = ($814|0)!=(0);
 do {
  if ($815) {
   $816 = (_strcmp((31976),8088)|0);
   $817 = ($816|0)!=(0);
   if (!($817)) {
    label = 490;
    break;
   }
   $818 = (_strcmp((31976),8100)|0);
   $819 = ($818|0)!=(0);
   if (!($819)) {
    label = 490;
    break;
   }
   $820 = (_strcmp((31976),8112)|0);
   $821 = ($820|0)!=(0);
   if (!($821)) {
    label = 490;
    break;
   }
   $822 = (_strcmp((31976),8125)|0);
   $823 = ($822|0)!=(0);
   if (!($823)) {
    label = 490;
    break;
   }
   $824 = (_strcmp((31976),8138)|0);
   $825 = ($824|0)!=(0);
   if (!($825)) {
    label = 490;
   }
  } else {
   label = 490;
  }
 } while(0);
 if ((label|0) == 490) {
  HEAP32[7954] = 36;
 }
 $826 = (_strcmp((31976),8151)|0);
 $827 = ($826|0)!=(0);
 do {
  if ($827) {
   $828 = (_strcmp((31976),8158)|0);
   $829 = ($828|0)!=(0);
   if (!($829)) {
    label = 494;
    break;
   }
   $830 = (_strcmp((31976),8165)|0);
   $831 = ($830|0)!=(0);
   if (!($831)) {
    label = 494;
   }
  } else {
   label = 494;
  }
 } while(0);
 if ((label|0) == 494) {
  HEAP32[7954] = 37;
 }
 $832 = (_strcmp((31976),8172)|0);
 $833 = ($832|0)!=(0);
 do {
  if ($833) {
   $834 = (_strcmp((31976),8178)|0);
   $835 = ($834|0)!=(0);
   if (!($835)) {
    label = 498;
    break;
   }
   $836 = (_strcmp((31976),8184)|0);
   $837 = ($836|0)!=(0);
   if (!($837)) {
    label = 498;
   }
  } else {
   label = 498;
  }
 } while(0);
 if ((label|0) == 498) {
  HEAP32[7954] = 39;
 }
 $838 = (_strcmp((31976),8190)|0);
 $839 = ($838|0)!=(0);
 do {
  if ($839) {
   $840 = (_strcmp((31976),8204)|0);
   $841 = ($840|0)!=(0);
   if (!($841)) {
    label = 506;
    break;
   }
   $842 = (_strcmp((31976),8218)|0);
   $843 = ($842|0)!=(0);
   if (!($843)) {
    label = 506;
    break;
   }
   $844 = (_strcmp((31976),8232)|0);
   $845 = ($844|0)!=(0);
   if (!($845)) {
    label = 506;
    break;
   }
   $846 = (_strcmp((31976),8246)|0);
   $847 = ($846|0)!=(0);
   if (!($847)) {
    label = 506;
    break;
   }
   $848 = (_strcmp((31976),8255)|0);
   $849 = ($848|0)!=(0);
   if (!($849)) {
    label = 506;
    break;
   }
   $850 = (_strcmp((31976),8264)|0);
   $851 = ($850|0)!=(0);
   if (!($851)) {
    label = 506;
   }
  } else {
   label = 506;
  }
 } while(0);
 if ((label|0) == 506) {
  HEAP32[7954] = 40;
 }
 $852 = (_strcmp((31976),8273)|0);
 $853 = ($852|0)!=(0);
 do {
  if ($853) {
   $854 = (_strcmp((31976),8279)|0);
   $855 = ($854|0)!=(0);
   if (!($855)) {
    label = 510;
    break;
   }
   $856 = (_strcmp((31976),8285)|0);
   $857 = ($856|0)!=(0);
   if (!($857)) {
    label = 510;
   }
  } else {
   label = 510;
  }
 } while(0);
 if ((label|0) == 510) {
  HEAP32[7954] = 41;
 }
 $858 = (_strcmp((31976),8291)|0);
 $859 = ($858|0)!=(0);
 do {
  if ($859) {
   $860 = (_strcmp((31976),8298)|0);
   $861 = ($860|0)!=(0);
   if (!($861)) {
    label = 517;
    break;
   }
   $862 = (_strcmp((31976),8305)|0);
   $863 = ($862|0)!=(0);
   if (!($863)) {
    label = 517;
    break;
   }
   $864 = (_strcmp((31976),8312)|0);
   $865 = ($864|0)!=(0);
   if (!($865)) {
    label = 517;
    break;
   }
   $866 = (_strcmp((31976),8320)|0);
   $867 = ($866|0)!=(0);
   if (!($867)) {
    label = 517;
    break;
   }
   $868 = (_strcmp((31976),8328)|0);
   $869 = ($868|0)!=(0);
   if (!($869)) {
    label = 517;
   }
  } else {
   label = 517;
  }
 } while(0);
 if ((label|0) == 517) {
  HEAP32[7954] = 202;
 }
 $870 = (_strcmp((31976),8336)|0);
 $871 = ($870|0)!=(0);
 do {
  if ($871) {
   $872 = (_strcmp((31976),8349)|0);
   $873 = ($872|0)!=(0);
   if (!($873)) {
    label = 521;
    break;
   }
   $874 = (_strcmp((31976),8362)|0);
   $875 = ($874|0)!=(0);
   if (!($875)) {
    label = 521;
   }
  } else {
   label = 521;
  }
 } while(0);
 if ((label|0) == 521) {
  HEAP32[7954] = 221;
 }
 $876 = (_strcmp((31976),8375)|0);
 $877 = ($876|0)!=(0);
 do {
  if ($877) {
   $878 = (_strcmp((31976),8387)|0);
   $879 = ($878|0)!=(0);
   if (!($879)) {
    label = 525;
    break;
   }
   $880 = (_strcmp((31976),8399)|0);
   $881 = ($880|0)!=(0);
   if (!($881)) {
    label = 525;
   }
  } else {
   label = 525;
  }
 } while(0);
 if ((label|0) == 525) {
  HEAP32[7954] = 222;
 }
 $882 = (_strcmp((31976),8411)|0);
 $883 = ($882|0)!=(0);
 do {
  if ($883) {
   $884 = (_strcmp((31976),8423)|0);
   $885 = ($884|0)!=(0);
   if (!($885)) {
    break;
   }
   $886 = (_strcmp((31976),8435)|0);
   $887 = ($886|0)!=(0);
   if (!($887)) {
    break;
   }
   STACKTOP = sp;return 0;
  }
 } while(0);
 HEAP32[7954] = 208;
 STACKTOP = sp;return 0;
}
function _ValLabel($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy16 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0.0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0;
 var $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0;
 var $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0;
 var $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0;
 var $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0;
 var $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0;
 var $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0;
 var $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0;
 var $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(10112|0);
 $$byval_copy16 = sp + 6488|0;
 $$byval_copy = sp + 3272|0;
 $vararg_buffer14 = sp + 3264|0;
 $vararg_buffer12 = sp + 3256|0;
 $vararg_buffer10 = sp + 3248|0;
 $vararg_buffer8 = sp + 3240|0;
 $vararg_buffer6 = sp + 3232|0;
 $vararg_buffer2 = sp + 3224|0;
 $vararg_buffer = sp + 3216|0;
 $8 = sp + 10028|0;
 $9 = sp;
 $12 = sp + 9728|0;
 $5 = $1;
 $6 = $2;
 $7 = $4;
 $10 = 0;
 $11 = 0;
 _memset(($9|0),0,3216)|0;
 _memset(($12|0),0,300)|0;
 dest=$8; stop=dest+74|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $14 = $5;
 $15 = ($14|0)!=(0|0);
 do {
  if ($15) {
   $16 = ((($3)) + 3192|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = ((($3)) + 3192|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)==(2);
    if ($21) {
     dest=$8; stop=dest+74|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
     $22 = $5;
     HEAP32[$vararg_buffer>>2] = $22;
     (_sprintf($8,8447,$vararg_buffer)|0);
     break;
    }
   }
   dest=$8; stop=dest+74|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
   $23 = $6;
   $24 = $5;
   HEAP32[$vararg_buffer2>>2] = $23;
   $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
   HEAP32[$vararg_ptr5>>2] = $24;
   (_sprintf($8,8459,$vararg_buffer2)|0);
  } else {
   _Error(8469,$vararg_buffer6);
  }
 } while(0);
 $25 = ((($9)) + 84|0);
 HEAP32[$25>>2] = -1;
 $26 = ((($9)) + 88|0);
 HEAP32[$26>>2] = -1;
 $27 = ((($9)) + 96|0);
 HEAPF64[$27>>3] = 0.0;
 $28 = ((($9)) + 104|0);
 _memset(($28|0),0,300)|0;
 $29 = $7;
 $30 = ($29|0)==(231);
 if ($30) {
  HEAP32[18444] = 0;
  _memcpy(($$byval_copy|0),($3|0),3216)|0;
  $31 = (_MakeValLabelTree($8,$$byval_copy)|0);
  HEAP32[18444] = $31;
  $32 = HEAP32[18444]|0;
  $33 = ($32|0)==(0|0);
  $34 = ((($9)) + 88|0);
  if ($33) {
   HEAP32[$34>>2] = 1;
   _memcpy(($0|0),($9|0),3216)|0;
   STACKTOP = sp;return;
  } else {
   HEAP32[$34>>2] = 0;
   _memcpy(($0|0),($9|0),3216)|0;
   STACKTOP = sp;return;
  }
 }
 $35 = $7;
 $36 = ($35|0)==(233);
 $37 = $7;
 $38 = ($37|0)==(232);
 $or$cond = $36 | $38;
 if (!($or$cond)) {
  $419 = $7;
  $420 = ($419|0)==(234);
  if ($420) {
   _memcpy(($0|0),($9|0),3216)|0;
   STACKTOP = sp;return;
  }
  $421 = $7;
  $422 = ($421|0)==(236);
  if ($422) {
   (_printf(8558,$vararg_buffer12)|0);
   $423 = HEAP32[18444]|0;
   _PrintValLabelTree($423);
   (_printf(8604,$vararg_buffer14)|0);
   $424 = ((($9)) + 88|0);
   HEAP32[$424>>2] = 0;
   _memcpy(($0|0),($9|0),3216)|0;
   STACKTOP = sp;return;
  }
  $425 = $7;
  $426 = ($425|0)==(235);
  if ($426) {
   $427 = HEAP32[18444]|0;
   _DeleteValLabelTree($427);
   $428 = ((($9)) + 88|0);
   HEAP32[$428>>2] = 0;
   _memcpy(($0|0),($9|0),3216)|0;
   STACKTOP = sp;return;
  } else {
   $429 = ((($9)) + 88|0);
   HEAP32[$429>>2] = 1;
   _memcpy(($0|0),($9|0),3216)|0;
   STACKTOP = sp;return;
  }
 }
 $13 = 0;
 $39 = HEAP32[18444]|0;
 $40 = ($39|0)==(0|0);
 if ($40) {
  (_printf(8494,$vararg_buffer8)|0);
 }
 $41 = HEAP32[18444]|0;
 $42 = (_SearchValLabelTree($41,$8)|0);
 $13 = $42;
 $43 = $13;
 $44 = ($43|0)==(0|0);
 if ($44) {
  $45 = HEAP32[18444]|0;
  $46 = (_SearchGLBLabelTree($45,$8)|0);
  $13 = $46;
 }
 $47 = $13;
 $48 = ($47|0)!=(0|0);
 $49 = $7;
 $50 = ($49|0)==(233);
 if (!($48)) {
  if ($50) {
   $414 = $6;
   $415 = ((($3)) + 76|0);
   HEAP32[$415>>2] = $414;
   $416 = HEAP32[18444]|0;
   _memcpy(($$byval_copy16|0),($3|0),3216)|0;
   $417 = (_MakeAddValLabelTree($416,$8,$$byval_copy16)|0);
   $418 = ($417|0)!=(0);
   if ($418) {
    _Error(8518,$vararg_buffer10);
   }
  }
  _memcpy(($0|0),($3|0),3216)|0;
  STACKTOP = sp;return;
 }
 do {
  if ($50) {
   $51 = ((($3)) + 84|0);
   $52 = HEAP32[$51>>2]|0;
   $53 = $13;
   $54 = ((($53)) + 84|0);
   HEAP32[$54>>2] = $52;
   $55 = ((($3)) + 88|0);
   $56 = HEAP32[$55>>2]|0;
   $57 = $13;
   $58 = ((($57)) + 88|0);
   HEAP32[$58>>2] = $56;
   $59 = ((($3)) + 96|0);
   $60 = +HEAPF64[$59>>3];
   $61 = $13;
   $62 = ((($61)) + 96|0);
   HEAPF64[$62>>3] = $60;
   $63 = ((($3)) + 1796|0);
   $64 = HEAP32[$63>>2]|0;
   $65 = $13;
   $66 = ((($65)) + 1796|0);
   HEAP32[$66>>2] = $64;
   $67 = ((($3)) + 1800|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $13;
   $70 = ((($69)) + 1800|0);
   HEAP32[$70>>2] = $68;
   $71 = ((($3)) + 1804|0);
   $72 = HEAP32[$71>>2]|0;
   $73 = $13;
   $74 = ((($73)) + 1804|0);
   HEAP32[$74>>2] = $72;
   $75 = $13;
   $76 = ((($75)) + 104|0);
   $77 = ((($3)) + 104|0);
   (_strcpy($76,$77)|0);
   $78 = $13;
   $79 = ((($78)) + 1824|0);
   $80 = ((($3)) + 1824|0);
   (_strcpy($79,$80)|0);
   $81 = $13;
   $82 = ((($81)) + 420|0);
   $83 = ((($3)) + 420|0);
   (_strcpy($82,$83)|0);
   $84 = $13;
   $85 = ((($84)) + 720|0);
   $86 = ((($3)) + 720|0);
   (_strcpy($85,$86)|0);
   $87 = $13;
   $88 = ((($87)) + 870|0);
   $89 = ((($3)) + 870|0);
   (_strcpy($88,$89)|0);
   $90 = ((($3)) + 1020|0);
   $91 = HEAP32[$90>>2]|0;
   $92 = $13;
   $93 = ((($92)) + 1020|0);
   HEAP32[$93>>2] = $91;
   $94 = ((($3)) + 404|0);
   $95 = HEAP32[$94>>2]|0;
   $96 = $13;
   $97 = ((($96)) + 404|0);
   HEAP32[$97>>2] = $95;
   $98 = ((($3)) + 408|0);
   $99 = HEAP32[$98>>2]|0;
   $100 = $13;
   $101 = ((($100)) + 408|0);
   HEAP32[$101>>2] = $99;
   $102 = ((($3)) + 412|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = $13;
   $105 = ((($104)) + 412|0);
   HEAP32[$105>>2] = $103;
   $106 = ((($3)) + 416|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = $13;
   $109 = ((($108)) + 416|0);
   HEAP32[$109>>2] = $107;
   $110 = ((($3)) + 870|0);
   $111 = (_atoi($110)|0);
   $11 = $111;
   $112 = ((($3)) + 1024|0);
   $113 = HEAP32[$112>>2]|0;
   $114 = $13;
   $115 = ((($114)) + 1024|0);
   HEAP32[$115>>2] = $113;
   $116 = ((($3)) + 1028|0);
   $117 = HEAP32[$116>>2]|0;
   $118 = $13;
   $119 = ((($118)) + 1028|0);
   HEAP32[$119>>2] = $117;
   $120 = $13;
   $121 = ((($120)) + 1032|0);
   $122 = ((($3)) + 1032|0);
   (_strcpy($121,$122)|0);
   $123 = $13;
   $124 = ((($123)) + 1182|0);
   $125 = ((($3)) + 1182|0);
   (_strcpy($124,$125)|0);
   $126 = $13;
   $127 = ((($126)) + 1482|0);
   $128 = ((($3)) + 1482|0);
   (_strcpy($127,$128)|0);
   $129 = ((($3)) + 1784|0);
   $130 = HEAP32[$129>>2]|0;
   $131 = $13;
   $132 = ((($131)) + 1784|0);
   HEAP32[$132>>2] = $130;
   $133 = ((($3)) + 1788|0);
   $134 = HEAP32[$133>>2]|0;
   $135 = $13;
   $136 = ((($135)) + 1788|0);
   HEAP32[$136>>2] = $134;
   $137 = ((($3)) + 1792|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = $13;
   $140 = ((($139)) + 1792|0);
   HEAP32[$140>>2] = $138;
   $141 = $13;
   $142 = ((($141)) + 2424|0);
   $143 = ((($3)) + 2424|0);
   (_strcpy($142,$143)|0);
   $144 = $13;
   $145 = ((($144)) + 2574|0);
   $146 = ((($3)) + 2574|0);
   (_strcpy($145,$146)|0);
   $147 = ((($3)) + 3176|0);
   $148 = HEAP32[$147>>2]|0;
   $149 = $13;
   $150 = ((($149)) + 3176|0);
   HEAP32[$150>>2] = $148;
   $151 = ((($3)) + 3180|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = $13;
   $154 = ((($153)) + 3180|0);
   HEAP32[$154>>2] = $152;
   $155 = ((($3)) + 3184|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = $13;
   $158 = ((($157)) + 3184|0);
   HEAP32[$158>>2] = $156;
   $159 = ((($3)) + 3192|0);
   $160 = HEAP32[$159>>2]|0;
   $161 = $13;
   $162 = ((($161)) + 3192|0);
   HEAP32[$162>>2] = $160;
   $163 = ((($3)) + 3188|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = $13;
   $166 = ((($165)) + 3188|0);
   HEAP32[$166>>2] = $164;
   $167 = $13;
   $168 = ((($167)) + 84|0);
   $169 = HEAP32[$168>>2]|0;
   $170 = ((($9)) + 84|0);
   HEAP32[$170>>2] = $169;
   $171 = $13;
   $172 = ((($171)) + 88|0);
   $173 = HEAP32[$172>>2]|0;
   $174 = ((($9)) + 88|0);
   HEAP32[$174>>2] = $173;
   $175 = $13;
   $176 = ((($175)) + 96|0);
   $177 = +HEAPF64[$176>>3];
   $178 = ((($9)) + 96|0);
   HEAPF64[$178>>3] = $177;
   $179 = $13;
   $180 = ((($179)) + 1796|0);
   $181 = HEAP32[$180>>2]|0;
   $182 = ((($9)) + 1796|0);
   HEAP32[$182>>2] = $181;
   $183 = $13;
   $184 = ((($183)) + 1800|0);
   $185 = HEAP32[$184>>2]|0;
   $186 = ((($9)) + 1800|0);
   HEAP32[$186>>2] = $185;
   $187 = $13;
   $188 = ((($187)) + 1804|0);
   $189 = HEAP32[$188>>2]|0;
   $190 = ((($9)) + 1804|0);
   HEAP32[$190>>2] = $189;
   $191 = ((($9)) + 104|0);
   $192 = $13;
   $193 = ((($192)) + 104|0);
   (_strcpy($191,$193)|0);
   $194 = ((($9)) + 1824|0);
   $195 = $13;
   $196 = ((($195)) + 1824|0);
   (_strcpy($194,$196)|0);
   $197 = ((($9)) + 420|0);
   $198 = $13;
   $199 = ((($198)) + 420|0);
   (_strcpy($197,$199)|0);
   $200 = ((($9)) + 720|0);
   $201 = $13;
   $202 = ((($201)) + 720|0);
   (_strcpy($200,$202)|0);
   $203 = ((($9)) + 870|0);
   $204 = $13;
   $205 = ((($204)) + 870|0);
   (_strcpy($203,$205)|0);
   $206 = $13;
   $207 = ((($206)) + 1020|0);
   $208 = HEAP32[$207>>2]|0;
   $209 = ((($9)) + 1020|0);
   HEAP32[$209>>2] = $208;
   $210 = $13;
   $211 = ((($210)) + 404|0);
   $212 = HEAP32[$211>>2]|0;
   $213 = ((($9)) + 404|0);
   HEAP32[$213>>2] = $212;
   $214 = $13;
   $215 = ((($214)) + 408|0);
   $216 = HEAP32[$215>>2]|0;
   $217 = ((($9)) + 408|0);
   HEAP32[$217>>2] = $216;
   $218 = $13;
   $219 = ((($218)) + 412|0);
   $220 = HEAP32[$219>>2]|0;
   $221 = ((($9)) + 412|0);
   HEAP32[$221>>2] = $220;
   $222 = $13;
   $223 = ((($222)) + 416|0);
   $224 = HEAP32[$223>>2]|0;
   $225 = ((($9)) + 416|0);
   HEAP32[$225>>2] = $224;
   $226 = $13;
   $227 = ((($226)) + 1024|0);
   $228 = HEAP32[$227>>2]|0;
   $229 = ((($9)) + 1024|0);
   HEAP32[$229>>2] = $228;
   $230 = $13;
   $231 = ((($230)) + 1028|0);
   $232 = HEAP32[$231>>2]|0;
   $233 = ((($9)) + 1028|0);
   HEAP32[$233>>2] = $232;
   $234 = ((($9)) + 1032|0);
   $235 = $13;
   $236 = ((($235)) + 1032|0);
   (_strcpy($234,$236)|0);
   $237 = ((($9)) + 1182|0);
   $238 = $13;
   $239 = ((($238)) + 1182|0);
   (_strcpy($237,$239)|0);
   $240 = ((($9)) + 1482|0);
   $241 = $13;
   $242 = ((($241)) + 1482|0);
   (_strcpy($240,$242)|0);
   $243 = $13;
   $244 = ((($243)) + 1784|0);
   $245 = HEAP32[$244>>2]|0;
   $246 = ((($9)) + 1784|0);
   HEAP32[$246>>2] = $245;
   $247 = $13;
   $248 = ((($247)) + 1788|0);
   $249 = HEAP32[$248>>2]|0;
   $250 = ((($9)) + 1788|0);
   HEAP32[$250>>2] = $249;
   $251 = $13;
   $252 = ((($251)) + 1792|0);
   $253 = HEAP32[$252>>2]|0;
   $254 = ((($9)) + 1792|0);
   HEAP32[$254>>2] = $253;
   $255 = ((($9)) + 2424|0);
   $256 = $13;
   $257 = ((($256)) + 2424|0);
   (_strcpy($255,$257)|0);
   $258 = ((($9)) + 2574|0);
   $259 = $13;
   $260 = ((($259)) + 2574|0);
   (_strcpy($258,$260)|0);
   $261 = $13;
   $262 = ((($261)) + 3176|0);
   $263 = HEAP32[$262>>2]|0;
   $264 = ((($9)) + 3176|0);
   HEAP32[$264>>2] = $263;
   $265 = $13;
   $266 = ((($265)) + 3180|0);
   $267 = HEAP32[$266>>2]|0;
   $268 = ((($9)) + 3180|0);
   HEAP32[$268>>2] = $267;
   $269 = $13;
   $270 = ((($269)) + 3184|0);
   $271 = HEAP32[$270>>2]|0;
   $272 = ((($9)) + 3184|0);
   HEAP32[$272>>2] = $271;
   $273 = $13;
   $274 = ((($273)) + 3192|0);
   $275 = HEAP32[$274>>2]|0;
   $276 = ((($9)) + 3192|0);
   HEAP32[$276>>2] = $275;
   $277 = $13;
   $278 = ((($277)) + 3188|0);
   $279 = HEAP32[$278>>2]|0;
   $280 = ((($9)) + 3188|0);
   HEAP32[$280>>2] = $279;
  } else {
   $281 = $13;
   $282 = ((($281)) + 104|0);
   $283 = ($282|0)!=(0|0);
   if ($283) {
    $284 = $13;
    $285 = ((($284)) + 104|0);
    $286 = (_strlen($285)|0);
    $287 = ($286>>>0)>(0);
    if ($287) {
     $288 = ((($9)) + 84|0);
     HEAP32[$288>>2] = 3;
     $289 = $13;
     $290 = ((($289)) + 88|0);
     $291 = HEAP32[$290>>2]|0;
     $292 = ((($9)) + 88|0);
     HEAP32[$292>>2] = $291;
     $293 = ((($9)) + 1796|0);
     HEAP32[$293>>2] = 0;
     $294 = ((($9)) + 104|0);
     $295 = $13;
     $296 = ((($295)) + 104|0);
     (_strcpy($294,$296)|0);
     break;
    }
   }
   _memset(($9|0),0,3216)|0;
   $297 = ((($9)) + 12|0);
   $298 = $13;
   $299 = ((($298)) + 12|0);
   (_strcpy($297,$299)|0);
   $300 = ((($9)) + 104|0);
   $301 = $13;
   $302 = ((($301)) + 104|0);
   (_strcpy($300,$302)|0);
   $303 = $13;
   $304 = ((($303)) + 84|0);
   $305 = HEAP32[$304>>2]|0;
   $306 = ((($9)) + 84|0);
   HEAP32[$306>>2] = $305;
   $307 = $13;
   $308 = ((($307)) + 96|0);
   $309 = +HEAPF64[$308>>3];
   $310 = ((($9)) + 96|0);
   HEAPF64[$310>>3] = $309;
   $311 = $13;
   $312 = ((($311)) + 88|0);
   $313 = HEAP32[$312>>2]|0;
   $314 = ((($9)) + 88|0);
   HEAP32[$314>>2] = $313;
   $315 = $13;
   $316 = ((($315)) + 1796|0);
   $317 = HEAP32[$316>>2]|0;
   $318 = ((($9)) + 1796|0);
   HEAP32[$318>>2] = $317;
   $319 = $13;
   $320 = ((($319)) + 1800|0);
   $321 = HEAP32[$320>>2]|0;
   $322 = ((($9)) + 1800|0);
   HEAP32[$322>>2] = $321;
   $323 = $13;
   $324 = ((($323)) + 1804|0);
   $325 = HEAP32[$324>>2]|0;
   $326 = ((($9)) + 1804|0);
   HEAP32[$326>>2] = $325;
   $327 = ((($9)) + 1824|0);
   $328 = $13;
   $329 = ((($328)) + 1824|0);
   (_strcpy($327,$329)|0);
   $330 = ((($9)) + 420|0);
   $331 = $13;
   $332 = ((($331)) + 420|0);
   (_strcpy($330,$332)|0);
   $333 = ((($9)) + 720|0);
   $334 = $13;
   $335 = ((($334)) + 720|0);
   (_strcpy($333,$335)|0);
   $336 = ((($9)) + 870|0);
   $337 = $13;
   $338 = ((($337)) + 870|0);
   (_strcpy($336,$338)|0);
   $339 = $13;
   $340 = ((($339)) + 1020|0);
   $341 = HEAP32[$340>>2]|0;
   $342 = ((($9)) + 1020|0);
   HEAP32[$342>>2] = $341;
   $343 = $13;
   $344 = ((($343)) + 404|0);
   $345 = HEAP32[$344>>2]|0;
   $346 = ((($9)) + 404|0);
   HEAP32[$346>>2] = $345;
   $347 = $13;
   $348 = ((($347)) + 408|0);
   $349 = HEAP32[$348>>2]|0;
   $350 = ((($9)) + 408|0);
   HEAP32[$350>>2] = $349;
   $351 = $13;
   $352 = ((($351)) + 412|0);
   $353 = HEAP32[$352>>2]|0;
   $354 = ((($9)) + 412|0);
   HEAP32[$354>>2] = $353;
   $355 = $13;
   $356 = ((($355)) + 416|0);
   $357 = HEAP32[$356>>2]|0;
   $358 = ((($9)) + 416|0);
   HEAP32[$358>>2] = $357;
   $359 = $13;
   $360 = ((($359)) + 1024|0);
   $361 = HEAP32[$360>>2]|0;
   $362 = ((($9)) + 1024|0);
   HEAP32[$362>>2] = $361;
   $363 = $13;
   $364 = ((($363)) + 1028|0);
   $365 = HEAP32[$364>>2]|0;
   $366 = ((($9)) + 1028|0);
   HEAP32[$366>>2] = $365;
   $367 = ((($9)) + 1032|0);
   $368 = $13;
   $369 = ((($368)) + 1032|0);
   (_strcpy($367,$369)|0);
   $370 = ((($9)) + 1182|0);
   $371 = $13;
   $372 = ((($371)) + 1182|0);
   (_strcpy($370,$372)|0);
   $373 = ((($9)) + 1482|0);
   $374 = $13;
   $375 = ((($374)) + 1482|0);
   (_strcpy($373,$375)|0);
   $376 = $13;
   $377 = ((($376)) + 1784|0);
   $378 = HEAP32[$377>>2]|0;
   $379 = ((($9)) + 1784|0);
   HEAP32[$379>>2] = $378;
   $380 = $13;
   $381 = ((($380)) + 1788|0);
   $382 = HEAP32[$381>>2]|0;
   $383 = ((($9)) + 1788|0);
   HEAP32[$383>>2] = $382;
   $384 = $13;
   $385 = ((($384)) + 1792|0);
   $386 = HEAP32[$385>>2]|0;
   $387 = ((($9)) + 1792|0);
   HEAP32[$387>>2] = $386;
   $388 = ((($9)) + 2424|0);
   $389 = $13;
   $390 = ((($389)) + 2424|0);
   (_strcpy($388,$390)|0);
   $391 = ((($9)) + 2574|0);
   $392 = $13;
   $393 = ((($392)) + 2574|0);
   (_strcpy($391,$393)|0);
   $394 = $13;
   $395 = ((($394)) + 3176|0);
   $396 = HEAP32[$395>>2]|0;
   $397 = ((($9)) + 3176|0);
   HEAP32[$397>>2] = $396;
   $398 = $13;
   $399 = ((($398)) + 3180|0);
   $400 = HEAP32[$399>>2]|0;
   $401 = ((($9)) + 3180|0);
   HEAP32[$401>>2] = $400;
   $402 = $13;
   $403 = ((($402)) + 3184|0);
   $404 = HEAP32[$403>>2]|0;
   $405 = ((($9)) + 3184|0);
   HEAP32[$405>>2] = $404;
   $406 = $13;
   $407 = ((($406)) + 3192|0);
   $408 = HEAP32[$407>>2]|0;
   $409 = ((($9)) + 3192|0);
   HEAP32[$409>>2] = $408;
   $410 = $13;
   $411 = ((($410)) + 3188|0);
   $412 = HEAP32[$411>>2]|0;
   $413 = ((($9)) + 3188|0);
   HEAP32[$413>>2] = $412;
  }
 } while(0);
 _memcpy(($0|0),($9|0),3216)|0;
 STACKTOP = sp;return;
}
function _MakeValLabelTree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0;
 var $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0;
 var $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0.0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $4 = 0;
 $3 = 0;
 $5 = (_malloc(3216)|0);
 $3 = $5;
 $6 = $3;
 $7 = ($6|0)==(0|0);
 if ($7) {
  _Error(8725,$vararg_buffer);
 }
 $8 = $3;
 $9 = ((($8)) + 88|0);
 HEAP32[$9>>2] = 0;
 $10 = $3;
 $11 = ((($10)) + 12|0);
 $12 = $2;
 (_strcpy($11,$12)|0);
 $13 = ((($1)) + 84|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = $3;
 $16 = ((($15)) + 84|0);
 HEAP32[$16>>2] = $14;
 $17 = ((($1)) + 76|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = $3;
 $20 = ((($19)) + 76|0);
 HEAP32[$20>>2] = $18;
 $21 = ((($1)) + 88|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = $3;
 $24 = ((($23)) + 88|0);
 HEAP32[$24>>2] = $22;
 $25 = ((($1)) + 96|0);
 $26 = +HEAPF64[$25>>3];
 $27 = $3;
 $28 = ((($27)) + 96|0);
 HEAPF64[$28>>3] = $26;
 $29 = ((($1)) + 1796|0);
 $30 = HEAP32[$29>>2]|0;
 $31 = $3;
 $32 = ((($31)) + 1796|0);
 HEAP32[$32>>2] = $30;
 $33 = ((($1)) + 1800|0);
 $34 = HEAP32[$33>>2]|0;
 $35 = $3;
 $36 = ((($35)) + 1800|0);
 HEAP32[$36>>2] = $34;
 $37 = ((($1)) + 1804|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = $3;
 $40 = ((($39)) + 1804|0);
 HEAP32[$40>>2] = $38;
 $41 = $3;
 $42 = ((($41)) + 104|0);
 _memset(($42|0),0,300)|0;
 $43 = $3;
 $44 = ((($43)) + 104|0);
 $45 = ((($1)) + 104|0);
 (_strcpy($44,$45)|0);
 $46 = $3;
 $47 = ((($46)) + 1824|0);
 _memset(($47|0),0,600)|0;
 $48 = $3;
 $49 = ((($48)) + 1824|0);
 $50 = ((($1)) + 1824|0);
 (_strcpy($49,$50)|0);
 $51 = $3;
 $52 = ((($51)) + 420|0);
 $53 = ((($1)) + 420|0);
 (_strcpy($52,$53)|0);
 $54 = $3;
 $55 = ((($54)) + 720|0);
 $56 = ((($1)) + 720|0);
 (_strcpy($55,$56)|0);
 $57 = $3;
 $58 = ((($57)) + 870|0);
 $59 = ((($1)) + 870|0);
 (_strcpy($58,$59)|0);
 $60 = ((($1)) + 1020|0);
 $61 = HEAP32[$60>>2]|0;
 $62 = $3;
 $63 = ((($62)) + 1020|0);
 HEAP32[$63>>2] = $61;
 $64 = ((($1)) + 404|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = $3;
 $67 = ((($66)) + 404|0);
 HEAP32[$67>>2] = $65;
 $68 = ((($1)) + 408|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = $3;
 $71 = ((($70)) + 408|0);
 HEAP32[$71>>2] = $69;
 $72 = ((($1)) + 412|0);
 $73 = HEAP32[$72>>2]|0;
 $74 = $3;
 $75 = ((($74)) + 412|0);
 HEAP32[$75>>2] = $73;
 $76 = ((($1)) + 416|0);
 $77 = HEAP32[$76>>2]|0;
 $78 = $3;
 $79 = ((($78)) + 416|0);
 HEAP32[$79>>2] = $77;
 $80 = ((($1)) + 1024|0);
 $81 = HEAP32[$80>>2]|0;
 $82 = $3;
 $83 = ((($82)) + 1024|0);
 HEAP32[$83>>2] = $81;
 $84 = ((($1)) + 1028|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = $3;
 $87 = ((($86)) + 1028|0);
 HEAP32[$87>>2] = $85;
 $88 = $3;
 $89 = ((($88)) + 1032|0);
 $90 = ((($1)) + 1032|0);
 (_strcpy($89,$90)|0);
 $91 = $3;
 $92 = ((($91)) + 1182|0);
 $93 = ((($1)) + 1182|0);
 (_strcpy($92,$93)|0);
 $94 = $3;
 $95 = ((($94)) + 1482|0);
 $96 = ((($1)) + 1482|0);
 (_strcpy($95,$96)|0);
 $97 = ((($1)) + 1784|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = $3;
 $100 = ((($99)) + 1784|0);
 HEAP32[$100>>2] = $98;
 $101 = ((($1)) + 1788|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = $3;
 $104 = ((($103)) + 1788|0);
 HEAP32[$104>>2] = $102;
 $105 = ((($1)) + 1792|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = $3;
 $108 = ((($107)) + 1792|0);
 HEAP32[$108>>2] = $106;
 $109 = $3;
 $110 = ((($109)) + 2424|0);
 $111 = ((($1)) + 2424|0);
 (_strcpy($110,$111)|0);
 $112 = $3;
 $113 = ((($112)) + 2574|0);
 $114 = ((($1)) + 2574|0);
 (_strcpy($113,$114)|0);
 $115 = ((($1)) + 3176|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = $3;
 $118 = ((($117)) + 3176|0);
 HEAP32[$118>>2] = $116;
 $119 = ((($1)) + 3180|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = $3;
 $122 = ((($121)) + 3180|0);
 HEAP32[$122>>2] = $120;
 $123 = ((($1)) + 3184|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = $3;
 $126 = ((($125)) + 3184|0);
 HEAP32[$126>>2] = $124;
 $127 = ((($1)) + 3192|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = $3;
 $130 = ((($129)) + 3192|0);
 HEAP32[$130>>2] = $128;
 $131 = ((($1)) + 3188|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = $3;
 $134 = ((($133)) + 3188|0);
 HEAP32[$134>>2] = $132;
 $135 = $3;
 $136 = ((($135)) + 4|0);
 HEAP32[$136>>2] = 0;
 $137 = $3;
 $138 = ((($137)) + 8|0);
 HEAP32[$138>>2] = 0;
 $139 = $3;
 STACKTOP = sp;return ($139|0);
}
function _SearchValLabelTree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ((($6)) + 12|0);
 $8 = $4;
 $9 = (_strcmp($7,$8)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)==(0);
 if ($11) {
  $12 = $3;
  $2 = $12;
  $35 = $2;
  STACKTOP = sp;return ($35|0);
 }
 $13 = $5;
 $14 = ($13|0)>(0);
 if ($14) {
  $15 = $3;
  $16 = ((($15)) + 4|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ($17|0)!=(0|0);
  if ($18) {
   $19 = $3;
   $20 = ((($19)) + 4|0);
   $21 = HEAP32[$20>>2]|0;
   $22 = $4;
   $23 = (_SearchValLabelTree($21,$22)|0);
   $2 = $23;
   $35 = $2;
   STACKTOP = sp;return ($35|0);
  }
 }
 $24 = $5;
 $25 = ($24|0)<(0);
 if ($25) {
  $26 = $3;
  $27 = ((($26)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = $3;
   $31 = ((($30)) + 8|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = $4;
   $34 = (_SearchValLabelTree($32,$33)|0);
   $2 = $34;
   $35 = $2;
   STACKTOP = sp;return ($35|0);
  }
 }
 $2 = 0;
 $35 = $2;
 STACKTOP = sp;return ($35|0);
}
function _SearchGLBLabelTree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(656|0);
 $vararg_buffer = sp;
 $9 = sp + 338|0;
 $10 = sp + 28|0;
 $3 = $0;
 $4 = $1;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 _memset(($9|0),0,310)|0;
 _memset(($10|0),0,310)|0;
 $6 = 0;
 while(1) {
  $11 = $6;
  $12 = $4;
  $13 = (($12) + ($11)|0);
  $14 = HEAP8[$13>>0]|0;
  $8 = $14;
  $15 = $6;
  $16 = (($15) + 1)|0;
  $6 = $16;
  $17 = $8;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(95);
  if (!($19)) {
   break;
  }
  $20 = $8;
  $21 = $20 << 24 >> 24;
  $22 = ($21|0)!=(0);
  if (!($22)) {
   break;
  }
 }
 $7 = 0;
 while(1) {
  $23 = $6;
  $24 = $4;
  $25 = (($24) + ($23)|0);
  $26 = HEAP8[$25>>0]|0;
  $27 = $7;
  $28 = (($10) + ($27)|0);
  HEAP8[$28>>0] = $26;
  $29 = $6;
  $30 = (($29) + 1)|0;
  $6 = $30;
  $31 = $7;
  $32 = (($31) + 1)|0;
  $7 = $32;
  $33 = $6;
  $34 = $4;
  $35 = (($34) + ($33)|0);
  $36 = HEAP8[$35>>0]|0;
  $37 = $36 << 24 >> 24;
  $38 = ($37|0)!=(0);
  if (!($38)) {
   break;
  }
 }
 $39 = $7;
 $40 = (($10) + ($39)|0);
 HEAP8[$40>>0] = 0;
 HEAP32[$vararg_buffer>>2] = $10;
 (_sprintf($9,8447,$vararg_buffer)|0);
 $41 = $3;
 $42 = ((($41)) + 12|0);
 $43 = (_strcmp($42,$9)|0);
 $5 = $43;
 $44 = $5;
 $45 = ($44|0)==(0);
 if ($45) {
  $46 = $3;
  $2 = $46;
  $67 = $2;
  STACKTOP = sp;return ($67|0);
 }
 $47 = $5;
 $48 = ($47|0)>(0);
 if ($48) {
  $49 = $3;
  $50 = ((($49)) + 4|0);
  $51 = HEAP32[$50>>2]|0;
  $52 = ($51|0)!=(0|0);
  if ($52) {
   $53 = $3;
   $54 = ((($53)) + 4|0);
   $55 = HEAP32[$54>>2]|0;
   $56 = (_SearchValLabelTree($55,$9)|0);
   $2 = $56;
   $67 = $2;
   STACKTOP = sp;return ($67|0);
  }
 }
 $57 = $5;
 $58 = ($57|0)<(0);
 if ($58) {
  $59 = $3;
  $60 = ((($59)) + 8|0);
  $61 = HEAP32[$60>>2]|0;
  $62 = ($61|0)!=(0|0);
  if ($62) {
   $63 = $3;
   $64 = ((($63)) + 8|0);
   $65 = HEAP32[$64>>2]|0;
   $66 = (_SearchValLabelTree($65,$9)|0);
   $2 = $66;
   $67 = $2;
   STACKTOP = sp;return ($67|0);
  }
 }
 $2 = 0;
 $67 = $2;
 STACKTOP = sp;return ($67|0);
}
function _MakeAddValLabelTree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3232|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3232|0);
 $$byval_copy = sp;
 $4 = $0;
 $5 = $1;
 $6 = 0;
 $7 = $5;
 _memcpy(($$byval_copy|0),($2|0),3216)|0;
 $8 = (_MakeValLabelTree($7,$$byval_copy)|0);
 $6 = $8;
 $9 = ($8|0)==(0|0);
 if ($9) {
  $3 = 1;
  $12 = $3;
  STACKTOP = sp;return ($12|0);
 } else {
  $10 = $4;
  $11 = $6;
  _AddValLabelTree($10,$11);
  $3 = 0;
  $12 = $3;
  STACKTOP = sp;return ($12|0);
 }
 return (0)|0;
}
function _PrintValLabelTree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0.0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr19 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $vararg_buffer16 = sp + 48|0;
 $vararg_buffer13 = sp + 40|0;
 $vararg_buffer10 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = HEAP32[18445]|0;
  $7 = (($6) + 1)|0;
  HEAP32[18445] = $7;
  $8 = $1;
  $9 = ((($8)) + 8|0);
  $10 = HEAP32[$9>>2]|0;
  _PrintValLabelTree($10);
  $11 = HEAP32[18445]|0;
  $12 = (($11) + -1)|0;
  HEAP32[18445] = $12;
 }
 $13 = $1;
 $14 = ((($13)) + 84|0);
 $15 = HEAP32[$14>>2]|0;
 $16 = ($15|0)==(0);
 $17 = $1;
 do {
  if ($16) {
   $18 = ((($17)) + 12|0);
   $19 = $1;
   $20 = ((($19)) + 88|0);
   $21 = HEAP32[$20>>2]|0;
   HEAP32[$vararg_buffer>>2] = $18;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $21;
   (_printf(8650,$vararg_buffer)|0);
  } else {
   $22 = ((($17)) + 84|0);
   $23 = HEAP32[$22>>2]|0;
   $24 = ($23|0)==(1);
   $25 = $1;
   if ($24) {
    $26 = ((($25)) + 12|0);
    $27 = $1;
    $28 = ((($27)) + 96|0);
    $29 = +HEAPF64[$28>>3];
    HEAP32[$vararg_buffer2>>2] = $26;
    $vararg_ptr5 = ((($vararg_buffer2)) + 8|0);
    HEAPF64[$vararg_ptr5>>3] = $29;
    (_printf(8659,$vararg_buffer2)|0);
    break;
   }
   $30 = ((($25)) + 84|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ($31|0)==(3);
   $33 = $1;
   if ($32) {
    $34 = ((($33)) + 12|0);
    $35 = $1;
    $36 = ((($35)) + 104|0);
    HEAP32[$vararg_buffer6>>2] = $34;
    $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
    HEAP32[$vararg_ptr9>>2] = $36;
    (_printf(8667,$vararg_buffer6)|0);
    break;
   }
   $37 = ((($33)) + 84|0);
   $38 = HEAP32[$37>>2]|0;
   $39 = ($38|0)==(9);
   $40 = $1;
   if ($39) {
    $41 = ((($40)) + 12|0);
    HEAP32[$vararg_buffer10>>2] = $41;
    (_printf(8675,$vararg_buffer10)|0);
    break;
   }
   $42 = ((($40)) + 84|0);
   $43 = HEAP32[$42>>2]|0;
   $44 = ($43|0)==(40);
   $45 = $1;
   $46 = ((($45)) + 12|0);
   if ($44) {
    HEAP32[$vararg_buffer13>>2] = $46;
    (_printf(8692,$vararg_buffer13)|0);
    break;
   } else {
    $47 = $1;
    $48 = ((($47)) + 84|0);
    $49 = HEAP32[$48>>2]|0;
    HEAP32[$vararg_buffer16>>2] = $46;
    $vararg_ptr19 = ((($vararg_buffer16)) + 4|0);
    HEAP32[$vararg_ptr19>>2] = $49;
    (_printf(8712,$vararg_buffer16)|0);
    break;
   }
  }
 } while(0);
 $50 = $1;
 $51 = ((($50)) + 4|0);
 $52 = HEAP32[$51>>2]|0;
 $53 = ($52|0)!=(0|0);
 if (!($53)) {
  STACKTOP = sp;return;
 }
 $54 = HEAP32[18445]|0;
 $55 = (($54) + 1)|0;
 HEAP32[18445] = $55;
 $56 = $1;
 $57 = ((($56)) + 4|0);
 $58 = HEAP32[$57>>2]|0;
 _PrintValLabelTree($58);
 $59 = HEAP32[18445]|0;
 $60 = (($59) + -1)|0;
 HEAP32[18445] = $60;
 STACKTOP = sp;return;
}
function _DeleteValLabelTree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ((($2)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)!=(0|0);
 if ($5) {
  $6 = $1;
  $7 = ((($6)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  _DeleteValLabelTree($8);
 }
 $9 = $1;
 $10 = ((($9)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if ($12) {
  $13 = $1;
  $14 = ((($13)) + 8|0);
  $15 = HEAP32[$14>>2]|0;
  _DeleteValLabelTree($15);
 }
 $16 = $1;
 $17 = ($16|0)!=(0|0);
 if (!($17)) {
  STACKTOP = sp;return;
 }
 $18 = $1;
 _free($18);
 STACKTOP = sp;return;
}
function _AddValLabelTree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 12|0);
 $7 = $3;
 $8 = ((($7)) + 12|0);
 $9 = (_strcmp($6,$8)|0);
 $4 = $9;
 $10 = $4;
 $11 = ($10|0)>(0);
 if ($11) {
  $12 = $2;
  $13 = ((($12)) + 4|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ($14|0)!=(0|0);
  if ($15) {
   $16 = $2;
   $17 = ((($16)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   $19 = $3;
   _AddValLabelTree($18,$19);
   STACKTOP = sp;return;
  } else {
   $20 = $3;
   $21 = $2;
   $22 = ((($21)) + 4|0);
   HEAP32[$22>>2] = $20;
   STACKTOP = sp;return;
  }
 }
 $23 = $4;
 $24 = ($23|0)<(0);
 if (!($24)) {
  STACKTOP = sp;return;
 }
 $25 = $2;
 $26 = ((($25)) + 8|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $2;
  $30 = ((($29)) + 8|0);
  $31 = HEAP32[$30>>2]|0;
  $32 = $3;
  _AddValLabelTree($31,$32);
  STACKTOP = sp;return;
 } else {
  $33 = $3;
  $34 = $2;
  $35 = ((($34)) + 8|0);
  HEAP32[$35>>2] = $33;
  STACKTOP = sp;return;
 }
}
function _expression($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 _AndOr($0);
 return;
}
function _AndOr($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16096|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16096|0);
 $vararg_buffer = sp + 16080|0;
 $1 = sp + 12864|0;
 $2 = sp + 9648|0;
 $3 = sp + 6432|0;
 $4 = sp + 3216|0;
 $5 = sp;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 $6 = ((($1)) + 88|0);
 HEAP32[$6>>2] = 0;
 $7 = ((($2)) + 88|0);
 HEAP32[$7>>2] = 0;
 _NotFunc($3);
 _memcpy(($1|0),($3|0),3216)|0;
 (_getlex()|0);
 $8 = HEAP32[7954]|0;
 $9 = ($8|0)==(28);
 if ($9) {
  _Error(8754,$vararg_buffer);
 }
 while(1) {
  $10 = HEAP32[7954]|0;
  $11 = ($10|0)==(10);
  $12 = HEAP32[7954]|0;
  $13 = ($12|0)==(9);
  $14 = $11 ? 1 : $13;
  if (!($14)) {
   break;
  }
  $15 = HEAP32[7954]|0;
  switch ($15|0) {
  case 9:  {
   _NotFunc($4);
   _memcpy(($2|0),($4|0),3216)|0;
   $16 = ((($1)) + 88|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)!=(0);
   if ($18) {
    $19 = ((($2)) + 88|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($20|0)!=(0);
    $22 = $21;
   } else {
    $22 = 0;
   }
   $23 = $22 ? 1 : 0;
   $24 = ((($1)) + 88|0);
   HEAP32[$24>>2] = $23;
   break;
  }
  case 10:  {
   _NotFunc($5);
   _memcpy(($2|0),($5|0),3216)|0;
   $25 = ((($1)) + 88|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ($26|0)!=(0);
   if ($27) {
    $31 = 1;
   } else {
    $28 = ((($2)) + 88|0);
    $29 = HEAP32[$28>>2]|0;
    $30 = ($29|0)!=(0);
    $31 = $30;
   }
   $32 = $31 ? 1 : 0;
   $33 = ((($1)) + 88|0);
   HEAP32[$33>>2] = $32;
   break;
  }
  default: {
  }
  }
  (_getlex()|0);
 }
 _ungetlex();
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _NotFunc($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12880|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(12880|0);
 $vararg_buffer = sp + 12864|0;
 $1 = sp + 9648|0;
 $2 = sp + 6432|0;
 $3 = sp + 3216|0;
 $4 = sp;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 $5 = ((($1)) + 88|0);
 HEAP32[$5>>2] = 0;
 $6 = ((($2)) + 88|0);
 HEAP32[$6>>2] = 0;
 (_getlex()|0);
 $7 = HEAP32[7954]|0;
 $8 = ($7|0)==(28);
 if ($8) {
  _Error(8795,$vararg_buffer);
 }
 $9 = HEAP32[7954]|0;
 $10 = ($9|0)!=(11);
 if ($10) {
  _ungetlex();
  _Compare($3);
  _memcpy(($2|0),($3|0),3216)|0;
  _memcpy(($0|0),($2|0),3216)|0;
  STACKTOP = sp;return;
 }
 _Compare($4);
 _memcpy(($2|0),($4|0),3216)|0;
 $11 = ((($2)) + 88|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0);
 $14 = $13 ? 0 : 1;
 $15 = ((($1)) + 88|0);
 HEAP32[$15>>2] = $14;
 $16 = ((($2)) + 4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = ((($2)) + 4|0);
  $20 = HEAP32[$19>>2]|0;
  _free($20);
 }
 $21 = ((($2)) + 8|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = ((($2)) + 8|0);
  $25 = HEAP32[$24>>2]|0;
  _free($25);
 }
 $26 = HEAP32[$2>>2]|0;
 $27 = ($26|0)!=(0|0);
 if ($27) {
  $28 = HEAP32[$2>>2]|0;
  _free($28);
 }
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _AddSub($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0.0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0.0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0.0, $3 = 0, $30 = 0, $300 = 0, $301 = 0.0, $302 = 0.0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0.0, $31 = 0, $310 = 0.0;
 var $311 = 0.0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0.0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0.0;
 var $33 = 0, $330 = 0.0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0.0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0.0, $351 = 0.0, $352 = 0.0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0, $360 = 0, $361 = 0.0, $362 = 0.0, $363 = 0, $364 = 0, $365 = 0;
 var $366 = 0, $367 = 0, $368 = 0, $369 = 0.0, $37 = 0, $370 = 0.0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0.0, $381 = 0, $382 = 0.0, $383 = 0.0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0.0, $39 = 0, $390 = 0.0, $391 = 0.0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0.0, $398 = 0, $399 = 0.0, $4 = 0.0, $40 = 0, $400 = 0.0;
 var $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0.0, $407 = 0.0, $408 = 0.0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0.0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0.0, $448 = 0.0, $449 = 0.0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0.0, $46 = 0, $460 = 0, $461 = 0.0, $462 = 0.0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0.0, $472 = 0, $473 = 0;
 var $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0.0, $479 = 0, $48 = 0, $480 = 0.0, $481 = 0.0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0.0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0;
 var $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0.0, $511 = 0.0, $512 = 0.0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0.0, $52 = 0, $520 = 0, $521 = 0.0, $522 = 0.0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0;
 var $528 = 0, $529 = 0.0, $53 = 0, $530 = 0.0, $531 = 0.0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0.0, $541 = 0, $542 = 0.0, $543 = 0.0, $544 = 0, $545 = 0;
 var $546 = 0, $547 = 0, $548 = 0, $549 = 0.0, $55 = 0, $550 = 0.0, $551 = 0.0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0.0, $558 = 0, $559 = 0.0, $56 = 0, $560 = 0.0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0, $565 = 0, $566 = 0.0, $567 = 0.0, $568 = 0.0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0;
 var $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 22576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(22576|0);
 $$byval_copy6 = sp + 19336|0;
 $$byval_copy5 = sp + 16120|0;
 $$byval_copy4 = sp + 12904|0;
 $$byval_copy = sp + 9688|0;
 $vararg_buffer2 = sp + 9680|0;
 $vararg_buffer = sp + 9672|0;
 $1 = sp + 6456|0;
 $2 = sp + 3240|0;
 $12 = sp;
 _MultiDiv($1);
 $3 = 0;
 $4 = 0.0;
 $5 = 0;
 $6 = 0;
 $7 = 0.0;
 $8 = 0.0;
 $9 = 0;
 $10 = 0;
 $11 = 0;
 _memset(($2|0),0,3216)|0;
 (_getlex()|0);
 $13 = HEAP8[(31976)>>0]|0;
 $9 = $13;
 $14 = HEAP32[7954]|0;
 $15 = ($14|0)==(28);
 if ($15) {
  $16 = ((($2)) + 8|0);
  $17 = HEAP32[$16>>2]|0;
  $18 = ((($17)) + 3196|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ($19|0)!=(0|0);
  if ($20) {
   $21 = ((($2)) + 8|0);
   $22 = HEAP32[$21>>2]|0;
   $23 = ((($22)) + 3196|0);
   $24 = HEAP32[$23>>2]|0;
   _free($24);
  }
  $25 = ((($2)) + 8|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = ((($26)) + 3200|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = ((($2)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   $32 = ((($31)) + 3200|0);
   $33 = HEAP32[$32>>2]|0;
   _free($33);
  }
  $34 = ((($2)) + 8|0);
  $35 = HEAP32[$34>>2]|0;
  $36 = ((($35)) + 1796|0);
  $37 = HEAP32[$36>>2]|0;
  $38 = ($37|0)!=(0|0);
  if ($38) {
   $39 = ((($2)) + 8|0);
   $40 = HEAP32[$39>>2]|0;
   $41 = ((($40)) + 1796|0);
   $42 = HEAP32[$41>>2]|0;
   _free($42);
  }
  $43 = ((($2)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  $45 = ((($44)) + 1024|0);
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0|0);
  if ($47) {
   $48 = ((($2)) + 8|0);
   $49 = HEAP32[$48>>2]|0;
   $50 = ((($49)) + 1024|0);
   $51 = HEAP32[$50>>2]|0;
   _free($51);
  }
  $52 = ((($2)) + 4|0);
  $53 = HEAP32[$52>>2]|0;
  $54 = ((($53)) + 3196|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)!=(0|0);
  if ($56) {
   $57 = ((($2)) + 4|0);
   $58 = HEAP32[$57>>2]|0;
   $59 = ((($58)) + 3196|0);
   $60 = HEAP32[$59>>2]|0;
   _free($60);
  }
  $61 = ((($2)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  $63 = ((($62)) + 3200|0);
  $64 = HEAP32[$63>>2]|0;
  $65 = ($64|0)!=(0|0);
  if ($65) {
   $66 = ((($2)) + 4|0);
   $67 = HEAP32[$66>>2]|0;
   $68 = ((($67)) + 3200|0);
   $69 = HEAP32[$68>>2]|0;
   _free($69);
  }
  $70 = ((($2)) + 4|0);
  $71 = HEAP32[$70>>2]|0;
  $72 = ((($71)) + 1796|0);
  $73 = HEAP32[$72>>2]|0;
  $74 = ($73|0)!=(0|0);
  if ($74) {
   $75 = ((($2)) + 4|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ((($76)) + 1796|0);
   $78 = HEAP32[$77>>2]|0;
   _free($78);
  }
  $79 = ((($2)) + 4|0);
  $80 = HEAP32[$79>>2]|0;
  $81 = ((($80)) + 1024|0);
  $82 = HEAP32[$81>>2]|0;
  $83 = ($82|0)!=(0|0);
  if ($83) {
   $84 = ((($2)) + 4|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ((($85)) + 1024|0);
   $87 = HEAP32[$86>>2]|0;
   _free($87);
  }
  $88 = HEAP32[$2>>2]|0;
  $89 = ((($88)) + 3196|0);
  $90 = HEAP32[$89>>2]|0;
  $91 = ($90|0)!=(0|0);
  if ($91) {
   $92 = HEAP32[$2>>2]|0;
   $93 = ((($92)) + 3196|0);
   $94 = HEAP32[$93>>2]|0;
   _free($94);
  }
  $95 = HEAP32[$2>>2]|0;
  $96 = ((($95)) + 3200|0);
  $97 = HEAP32[$96>>2]|0;
  $98 = ($97|0)!=(0|0);
  if ($98) {
   $99 = HEAP32[$2>>2]|0;
   $100 = ((($99)) + 3200|0);
   $101 = HEAP32[$100>>2]|0;
   _free($101);
  }
  $102 = HEAP32[$2>>2]|0;
  $103 = ((($102)) + 1796|0);
  $104 = HEAP32[$103>>2]|0;
  $105 = ($104|0)!=(0|0);
  if ($105) {
   $106 = HEAP32[$2>>2]|0;
   $107 = ((($106)) + 1796|0);
   $108 = HEAP32[$107>>2]|0;
   _free($108);
  }
  $109 = HEAP32[$2>>2]|0;
  $110 = ((($109)) + 1024|0);
  $111 = HEAP32[$110>>2]|0;
  $112 = ($111|0)!=(0|0);
  if ($112) {
   $113 = HEAP32[$2>>2]|0;
   $114 = ((($113)) + 1024|0);
   $115 = HEAP32[$114>>2]|0;
   _free($115);
  }
  $116 = ((($2)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  $118 = ((($117)) + 8|0);
  $119 = HEAP32[$118>>2]|0;
  $120 = ($119|0)!=(0|0);
  if ($120) {
   $121 = ((($2)) + 8|0);
   $122 = HEAP32[$121>>2]|0;
   $123 = ((($122)) + 8|0);
   $124 = HEAP32[$123>>2]|0;
   _free($124);
  }
  $125 = ((($2)) + 8|0);
  $126 = HEAP32[$125>>2]|0;
  $127 = ((($126)) + 4|0);
  $128 = HEAP32[$127>>2]|0;
  $129 = ($128|0)!=(0|0);
  if ($129) {
   $130 = ((($2)) + 8|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ((($131)) + 4|0);
   $133 = HEAP32[$132>>2]|0;
   _free($133);
  }
  $134 = ((($2)) + 8|0);
  $135 = HEAP32[$134>>2]|0;
  $136 = HEAP32[$135>>2]|0;
  $137 = ($136|0)!=(0|0);
  if ($137) {
   $138 = ((($2)) + 8|0);
   $139 = HEAP32[$138>>2]|0;
   $140 = HEAP32[$139>>2]|0;
   _free($140);
  }
  $141 = ((($2)) + 4|0);
  $142 = HEAP32[$141>>2]|0;
  $143 = ((($142)) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  $145 = ($144|0)!=(0|0);
  if ($145) {
   $146 = ((($2)) + 4|0);
   $147 = HEAP32[$146>>2]|0;
   $148 = ((($147)) + 8|0);
   $149 = HEAP32[$148>>2]|0;
   _free($149);
  }
  $150 = ((($2)) + 4|0);
  $151 = HEAP32[$150>>2]|0;
  $152 = ((($151)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  $154 = ($153|0)!=(0|0);
  if ($154) {
   $155 = ((($2)) + 4|0);
   $156 = HEAP32[$155>>2]|0;
   $157 = ((($156)) + 4|0);
   $158 = HEAP32[$157>>2]|0;
   _free($158);
  }
  $159 = ((($2)) + 4|0);
  $160 = HEAP32[$159>>2]|0;
  $161 = HEAP32[$160>>2]|0;
  $162 = ($161|0)!=(0|0);
  if ($162) {
   $163 = ((($2)) + 4|0);
   $164 = HEAP32[$163>>2]|0;
   $165 = HEAP32[$164>>2]|0;
   _free($165);
  }
  $166 = HEAP32[$2>>2]|0;
  $167 = ((($166)) + 8|0);
  $168 = HEAP32[$167>>2]|0;
  $169 = ($168|0)!=(0|0);
  if ($169) {
   $170 = HEAP32[$2>>2]|0;
   $171 = ((($170)) + 8|0);
   $172 = HEAP32[$171>>2]|0;
   _free($172);
  }
  $173 = HEAP32[$2>>2]|0;
  $174 = ((($173)) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  $176 = ($175|0)!=(0|0);
  if ($176) {
   $177 = HEAP32[$2>>2]|0;
   $178 = ((($177)) + 4|0);
   $179 = HEAP32[$178>>2]|0;
   _free($179);
  }
  $180 = HEAP32[$2>>2]|0;
  $181 = HEAP32[$180>>2]|0;
  $182 = ($181|0)!=(0|0);
  if ($182) {
   $183 = HEAP32[$2>>2]|0;
   $184 = HEAP32[$183>>2]|0;
   _free($184);
  }
  $185 = ((($2)) + 3196|0);
  $186 = HEAP32[$185>>2]|0;
  $187 = ($186|0)!=(0|0);
  if ($187) {
   $188 = ((($2)) + 3196|0);
   $189 = HEAP32[$188>>2]|0;
   _free($189);
  }
  $190 = ((($2)) + 3200|0);
  $191 = HEAP32[$190>>2]|0;
  $192 = ($191|0)!=(0|0);
  if ($192) {
   $193 = ((($2)) + 3200|0);
   $194 = HEAP32[$193>>2]|0;
   _free($194);
  }
  $195 = ((($2)) + 1796|0);
  $196 = HEAP32[$195>>2]|0;
  $197 = ($196|0)!=(0|0);
  if ($197) {
   $198 = ((($2)) + 1796|0);
   $199 = HEAP32[$198>>2]|0;
   _free($199);
  }
  $200 = ((($2)) + 4|0);
  $201 = HEAP32[$200>>2]|0;
  $202 = ($201|0)!=(0|0);
  if ($202) {
   $203 = ((($2)) + 4|0);
   $204 = HEAP32[$203>>2]|0;
   _free($204);
  }
  $205 = ((($2)) + 8|0);
  $206 = HEAP32[$205>>2]|0;
  $207 = ($206|0)!=(0|0);
  if ($207) {
   $208 = ((($2)) + 8|0);
   $209 = HEAP32[$208>>2]|0;
   _free($209);
  }
  $210 = HEAP32[$2>>2]|0;
  $211 = ($210|0)!=(0|0);
  if ($211) {
   $212 = HEAP32[$2>>2]|0;
   _free($212);
  }
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $213 = ((($1)) + 84|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ($214|0)==(6);
 if ($215) {
  label = 59;
 } else {
  $216 = ((($1)) + 84|0);
  $217 = HEAP32[$216>>2]|0;
  $218 = ($217|0)==(7);
  if ($218) {
   label = 59;
  }
 }
 if ((label|0) == 59) {
  $219 = ((($1)) + 870|0);
  $220 = (_atoi($219)|0);
  $10 = $220;
  $221 = $10;
  _memcpy(($$byval_copy|0),($1|0),3216)|0;
  $222 = (_get_int_array($$byval_copy,$221)|0);
  $3 = $222;
  $223 = $10;
  _memcpy(($$byval_copy4|0),($1|0),3216)|0;
  $224 = (+_get_dbl_array($$byval_copy4,$223));
  $4 = $224;
 }
 while(1) {
  $225 = HEAP32[7954]|0;
  $226 = ($225|0)==(227);
  if (!($226)) {
   break;
  }
  $227 = HEAP8[(31976)>>0]|0;
  $228 = $227 << 24 >> 24;
  $229 = ($228|0)==(43);
  if (!($229)) {
   $230 = HEAP8[(31976)>>0]|0;
   $231 = $230 << 24 >> 24;
   $232 = ($231|0)==(45);
   if (!($232)) {
    break;
   }
  }
  _memset(($2|0),0,3216)|0;
  _MultiDiv($12);
  _memcpy(($2|0),($12|0),3216)|0;
  $233 = ((($2)) + 88|0);
  $234 = HEAP32[$233>>2]|0;
  $5 = $234;
  $235 = ((($2)) + 96|0);
  $236 = +HEAPF64[$235>>3];
  $7 = $236;
  $237 = ((($2)) + 84|0);
  $238 = HEAP32[$237>>2]|0;
  $239 = ($238|0)==(6);
  if ($239) {
   label = 65;
  } else {
   $240 = ((($2)) + 84|0);
   $241 = HEAP32[$240>>2]|0;
   $242 = ($241|0)==(7);
   if ($242) {
    label = 65;
   }
  }
  if ((label|0) == 65) {
   label = 0;
   $243 = ((($2)) + 870|0);
   $244 = (_atoi($243)|0);
   $11 = $244;
   $245 = $11;
   _memcpy(($$byval_copy5|0),($2|0),3216)|0;
   $246 = (_get_int_array($$byval_copy5,$245)|0);
   $6 = $246;
   $247 = $11;
   _memcpy(($$byval_copy6|0),($2|0),3216)|0;
   $248 = (+_get_dbl_array($$byval_copy6,$247));
   $8 = $248;
  }
  $249 = $9;
  $250 = $249 << 24 >> 24;
  L101: do {
   switch ($250|0) {
   case 43:  {
    $251 = ((($1)) + 84|0);
    $252 = HEAP32[$251>>2]|0;
    $253 = ($252|0)==(0);
    if ($253) {
     $254 = ((($2)) + 84|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($255|0)==(0);
     if ($256) {
      $257 = ((($1)) + 88|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = $5;
      $260 = (($258) + ($259))|0;
      $261 = ((($1)) + 88|0);
      HEAP32[$261>>2] = $260;
      $262 = ((($1)) + 84|0);
      HEAP32[$262>>2] = 0;
      break L101;
     }
     $263 = ((($2)) + 84|0);
     $264 = HEAP32[$263>>2]|0;
     $265 = ($264|0)==(1);
     if ($265) {
      $266 = ((($1)) + 88|0);
      $267 = HEAP32[$266>>2]|0;
      $268 = (+($267|0));
      $269 = $7;
      $270 = $268 + $269;
      $271 = ((($1)) + 96|0);
      HEAPF64[$271>>3] = $270;
      $272 = ((($1)) + 84|0);
      HEAP32[$272>>2] = 1;
      break L101;
     }
     $273 = ((($2)) + 84|0);
     $274 = HEAP32[$273>>2]|0;
     $275 = ($274|0)==(6);
     if ($275) {
      $276 = ((($1)) + 88|0);
      $277 = HEAP32[$276>>2]|0;
      $278 = $6;
      $279 = (($277) + ($278))|0;
      $280 = ((($1)) + 88|0);
      HEAP32[$280>>2] = $279;
      $281 = ((($1)) + 84|0);
      HEAP32[$281>>2] = 0;
      break L101;
     }
     $282 = ((($2)) + 84|0);
     $283 = HEAP32[$282>>2]|0;
     $284 = ($283|0)==(7);
     if (!($284)) {
      break L101;
     }
     $285 = ((($1)) + 88|0);
     $286 = HEAP32[$285>>2]|0;
     $287 = (+($286|0));
     $288 = $8;
     $289 = $287 + $288;
     $290 = ((($1)) + 96|0);
     HEAPF64[$290>>3] = $289;
     $291 = ((($1)) + 84|0);
     HEAP32[$291>>2] = 1;
     break L101;
    }
    $292 = ((($1)) + 84|0);
    $293 = HEAP32[$292>>2]|0;
    $294 = ($293|0)==(1);
    if ($294) {
     $295 = ((($2)) + 84|0);
     $296 = HEAP32[$295>>2]|0;
     $297 = ($296|0)==(0);
     if ($297) {
      $298 = ((($1)) + 96|0);
      $299 = +HEAPF64[$298>>3];
      $300 = $5;
      $301 = (+($300|0));
      $302 = $299 + $301;
      $303 = ((($1)) + 96|0);
      HEAPF64[$303>>3] = $302;
      $304 = ((($1)) + 84|0);
      HEAP32[$304>>2] = 1;
      break L101;
     }
     $305 = ((($2)) + 84|0);
     $306 = HEAP32[$305>>2]|0;
     $307 = ($306|0)==(1);
     if ($307) {
      $308 = ((($1)) + 96|0);
      $309 = +HEAPF64[$308>>3];
      $310 = $7;
      $311 = $309 + $310;
      $312 = ((($1)) + 96|0);
      HEAPF64[$312>>3] = $311;
      $313 = ((($1)) + 84|0);
      HEAP32[$313>>2] = 1;
      break L101;
     }
     $314 = ((($2)) + 84|0);
     $315 = HEAP32[$314>>2]|0;
     $316 = ($315|0)==(6);
     if ($316) {
      $317 = ((($1)) + 96|0);
      $318 = +HEAPF64[$317>>3];
      $319 = $6;
      $320 = (+($319|0));
      $321 = $318 + $320;
      $322 = ((($1)) + 96|0);
      HEAPF64[$322>>3] = $321;
      $323 = ((($1)) + 84|0);
      HEAP32[$323>>2] = 1;
      break L101;
     }
     $324 = ((($2)) + 84|0);
     $325 = HEAP32[$324>>2]|0;
     $326 = ($325|0)==(7);
     if (!($326)) {
      break L101;
     }
     $327 = ((($1)) + 96|0);
     $328 = +HEAPF64[$327>>3];
     $329 = $8;
     $330 = $328 + $329;
     $331 = ((($1)) + 96|0);
     HEAPF64[$331>>3] = $330;
     $332 = ((($1)) + 84|0);
     HEAP32[$332>>2] = 1;
     break L101;
    }
    $333 = ((($1)) + 84|0);
    $334 = HEAP32[$333>>2]|0;
    $335 = ($334|0)==(6);
    if ($335) {
     $336 = ((($2)) + 84|0);
     $337 = HEAP32[$336>>2]|0;
     $338 = ($337|0)==(0);
     if ($338) {
      $339 = $3;
      $340 = (+($339|0));
      $341 = $5;
      $342 = (+($341|0));
      $343 = $340 + $342;
      $344 = ((($1)) + 96|0);
      HEAPF64[$344>>3] = $343;
      $345 = ((($1)) + 84|0);
      HEAP32[$345>>2] = 0;
      break L101;
     }
     $346 = ((($2)) + 84|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = ($347|0)==(1);
     if ($348) {
      $349 = $3;
      $350 = (+($349|0));
      $351 = $7;
      $352 = $350 + $351;
      $353 = ((($1)) + 96|0);
      HEAPF64[$353>>3] = $352;
      $354 = ((($1)) + 84|0);
      HEAP32[$354>>2] = 1;
      break L101;
     }
     $355 = ((($2)) + 84|0);
     $356 = HEAP32[$355>>2]|0;
     $357 = ($356|0)==(6);
     if ($357) {
      $358 = $3;
      $359 = (+($358|0));
      $360 = $6;
      $361 = (+($360|0));
      $362 = $359 + $361;
      $363 = ((($1)) + 96|0);
      HEAPF64[$363>>3] = $362;
      $364 = ((($1)) + 84|0);
      HEAP32[$364>>2] = 0;
      break L101;
     }
     $365 = ((($2)) + 84|0);
     $366 = HEAP32[$365>>2]|0;
     $367 = ($366|0)==(7);
     if (!($367)) {
      break L101;
     }
     $368 = $3;
     $369 = (+($368|0));
     $370 = $8;
     $371 = $369 + $370;
     $372 = ((($1)) + 96|0);
     HEAPF64[$372>>3] = $371;
     $373 = ((($1)) + 84|0);
     HEAP32[$373>>2] = 1;
     break L101;
    }
    $374 = ((($1)) + 84|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ($375|0)==(7);
    if (!($376)) {
     _Error(8838,$vararg_buffer);
     break L101;
    }
    $377 = ((($2)) + 84|0);
    $378 = HEAP32[$377>>2]|0;
    $379 = ($378|0)==(0);
    if ($379) {
     $380 = $4;
     $381 = $5;
     $382 = (+($381|0));
     $383 = $380 + $382;
     $384 = ((($1)) + 96|0);
     HEAPF64[$384>>3] = $383;
     $385 = ((($1)) + 84|0);
     HEAP32[$385>>2] = 1;
     break L101;
    }
    $386 = ((($2)) + 84|0);
    $387 = HEAP32[$386>>2]|0;
    $388 = ($387|0)==(1);
    if ($388) {
     $389 = $4;
     $390 = $7;
     $391 = $389 + $390;
     $392 = ((($1)) + 96|0);
     HEAPF64[$392>>3] = $391;
     $393 = ((($1)) + 84|0);
     HEAP32[$393>>2] = 1;
     break L101;
    }
    $394 = ((($2)) + 84|0);
    $395 = HEAP32[$394>>2]|0;
    $396 = ($395|0)==(6);
    if ($396) {
     $397 = $4;
     $398 = $6;
     $399 = (+($398|0));
     $400 = $397 + $399;
     $401 = ((($1)) + 96|0);
     HEAPF64[$401>>3] = $400;
     $402 = ((($1)) + 84|0);
     HEAP32[$402>>2] = 1;
     break L101;
    }
    $403 = ((($2)) + 84|0);
    $404 = HEAP32[$403>>2]|0;
    $405 = ($404|0)==(7);
    if ($405) {
     $406 = $4;
     $407 = $8;
     $408 = $406 + $407;
     $409 = ((($1)) + 96|0);
     HEAPF64[$409>>3] = $408;
     $410 = ((($1)) + 84|0);
     HEAP32[$410>>2] = 1;
    }
    break;
   }
   case 45:  {
    $411 = ((($1)) + 84|0);
    $412 = HEAP32[$411>>2]|0;
    $413 = ($412|0)==(0);
    if ($413) {
     $414 = ((($2)) + 84|0);
     $415 = HEAP32[$414>>2]|0;
     $416 = ($415|0)==(0);
     if ($416) {
      $417 = ((($1)) + 88|0);
      $418 = HEAP32[$417>>2]|0;
      $419 = $5;
      $420 = (($418) - ($419))|0;
      $421 = ((($1)) + 88|0);
      HEAP32[$421>>2] = $420;
      $422 = ((($1)) + 84|0);
      HEAP32[$422>>2] = 0;
      break L101;
     }
     $423 = ((($2)) + 84|0);
     $424 = HEAP32[$423>>2]|0;
     $425 = ($424|0)==(1);
     if ($425) {
      $426 = ((($1)) + 88|0);
      $427 = HEAP32[$426>>2]|0;
      $428 = (+($427|0));
      $429 = $7;
      $430 = $428 - $429;
      $431 = ((($1)) + 96|0);
      HEAPF64[$431>>3] = $430;
      $432 = ((($1)) + 84|0);
      HEAP32[$432>>2] = 1;
      break L101;
     }
     $433 = ((($2)) + 84|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = ($434|0)==(6);
     if ($435) {
      $436 = ((($1)) + 88|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = $6;
      $439 = (($437) - ($438))|0;
      $440 = ((($1)) + 88|0);
      HEAP32[$440>>2] = $439;
      $441 = ((($1)) + 84|0);
      HEAP32[$441>>2] = 0;
      break L101;
     }
     $442 = ((($2)) + 84|0);
     $443 = HEAP32[$442>>2]|0;
     $444 = ($443|0)==(7);
     if (!($444)) {
      break L101;
     }
     $445 = ((($1)) + 88|0);
     $446 = HEAP32[$445>>2]|0;
     $447 = (+($446|0));
     $448 = $8;
     $449 = $447 - $448;
     $450 = ((($1)) + 96|0);
     HEAPF64[$450>>3] = $449;
     $451 = ((($1)) + 84|0);
     HEAP32[$451>>2] = 1;
     break L101;
    }
    $452 = ((($1)) + 84|0);
    $453 = HEAP32[$452>>2]|0;
    $454 = ($453|0)==(1);
    if ($454) {
     $455 = ((($2)) + 84|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = ($456|0)==(0);
     if ($457) {
      $458 = ((($1)) + 96|0);
      $459 = +HEAPF64[$458>>3];
      $460 = $5;
      $461 = (+($460|0));
      $462 = $459 - $461;
      $463 = ((($1)) + 96|0);
      HEAPF64[$463>>3] = $462;
      $464 = ((($1)) + 84|0);
      HEAP32[$464>>2] = 1;
      break L101;
     }
     $465 = ((($2)) + 84|0);
     $466 = HEAP32[$465>>2]|0;
     $467 = ($466|0)==(1);
     if ($467) {
      $468 = ((($1)) + 96|0);
      $469 = +HEAPF64[$468>>3];
      $470 = $7;
      $471 = $469 - $470;
      $472 = ((($1)) + 96|0);
      HEAPF64[$472>>3] = $471;
      $473 = ((($1)) + 84|0);
      HEAP32[$473>>2] = 1;
      break L101;
     }
     $474 = ((($2)) + 84|0);
     $475 = HEAP32[$474>>2]|0;
     $476 = ($475|0)==(6);
     if ($476) {
      $477 = ((($1)) + 96|0);
      $478 = +HEAPF64[$477>>3];
      $479 = $6;
      $480 = (+($479|0));
      $481 = $478 - $480;
      $482 = ((($1)) + 96|0);
      HEAPF64[$482>>3] = $481;
      $483 = ((($1)) + 84|0);
      HEAP32[$483>>2] = 1;
      break L101;
     }
     $484 = ((($2)) + 84|0);
     $485 = HEAP32[$484>>2]|0;
     $486 = ($485|0)==(7);
     if (!($486)) {
      break L101;
     }
     $487 = ((($1)) + 96|0);
     $488 = +HEAPF64[$487>>3];
     $489 = $8;
     $490 = $488 - $489;
     $491 = ((($1)) + 96|0);
     HEAPF64[$491>>3] = $490;
     $492 = ((($1)) + 84|0);
     HEAP32[$492>>2] = 1;
     break L101;
    }
    $493 = ((($1)) + 84|0);
    $494 = HEAP32[$493>>2]|0;
    $495 = ($494|0)==(6);
    if ($495) {
     $496 = ((($2)) + 84|0);
     $497 = HEAP32[$496>>2]|0;
     $498 = ($497|0)==(0);
     if ($498) {
      $499 = $3;
      $500 = (+($499|0));
      $501 = $5;
      $502 = (+($501|0));
      $503 = $500 - $502;
      $504 = ((($1)) + 96|0);
      HEAPF64[$504>>3] = $503;
      $505 = ((($1)) + 84|0);
      HEAP32[$505>>2] = 0;
      break L101;
     }
     $506 = ((($2)) + 84|0);
     $507 = HEAP32[$506>>2]|0;
     $508 = ($507|0)==(1);
     if ($508) {
      $509 = $3;
      $510 = (+($509|0));
      $511 = $7;
      $512 = $510 - $511;
      $513 = ((($1)) + 96|0);
      HEAPF64[$513>>3] = $512;
      $514 = ((($1)) + 84|0);
      HEAP32[$514>>2] = 1;
      break L101;
     }
     $515 = ((($2)) + 84|0);
     $516 = HEAP32[$515>>2]|0;
     $517 = ($516|0)==(6);
     if ($517) {
      $518 = $3;
      $519 = (+($518|0));
      $520 = $6;
      $521 = (+($520|0));
      $522 = $519 - $521;
      $523 = ((($1)) + 96|0);
      HEAPF64[$523>>3] = $522;
      $524 = ((($1)) + 84|0);
      HEAP32[$524>>2] = 0;
      break L101;
     }
     $525 = ((($2)) + 84|0);
     $526 = HEAP32[$525>>2]|0;
     $527 = ($526|0)==(7);
     if (!($527)) {
      break L101;
     }
     $528 = $3;
     $529 = (+($528|0));
     $530 = $8;
     $531 = $529 - $530;
     $532 = ((($1)) + 96|0);
     HEAPF64[$532>>3] = $531;
     $533 = ((($1)) + 84|0);
     HEAP32[$533>>2] = 1;
     break L101;
    }
    $534 = ((($1)) + 84|0);
    $535 = HEAP32[$534>>2]|0;
    $536 = ($535|0)==(7);
    if (!($536)) {
     _Error(8862,$vararg_buffer2);
     break L101;
    }
    $537 = ((($2)) + 84|0);
    $538 = HEAP32[$537>>2]|0;
    $539 = ($538|0)==(0);
    if ($539) {
     $540 = $4;
     $541 = $5;
     $542 = (+($541|0));
     $543 = $540 - $542;
     $544 = ((($1)) + 96|0);
     HEAPF64[$544>>3] = $543;
     $545 = ((($1)) + 84|0);
     HEAP32[$545>>2] = 1;
     break L101;
    }
    $546 = ((($2)) + 84|0);
    $547 = HEAP32[$546>>2]|0;
    $548 = ($547|0)==(1);
    if ($548) {
     $549 = $4;
     $550 = $7;
     $551 = $549 - $550;
     $552 = ((($1)) + 96|0);
     HEAPF64[$552>>3] = $551;
     $553 = ((($1)) + 84|0);
     HEAP32[$553>>2] = 1;
     break L101;
    }
    $554 = ((($2)) + 84|0);
    $555 = HEAP32[$554>>2]|0;
    $556 = ($555|0)==(6);
    if ($556) {
     $557 = $4;
     $558 = $6;
     $559 = (+($558|0));
     $560 = $557 - $559;
     $561 = ((($1)) + 96|0);
     HEAPF64[$561>>3] = $560;
     $562 = ((($1)) + 84|0);
     HEAP32[$562>>2] = 1;
     break L101;
    }
    $563 = ((($2)) + 84|0);
    $564 = HEAP32[$563>>2]|0;
    $565 = ($564|0)==(7);
    if ($565) {
     $566 = $4;
     $567 = $8;
     $568 = $566 - $567;
     $569 = ((($1)) + 96|0);
     HEAPF64[$569>>3] = $568;
     $570 = ((($1)) + 84|0);
     HEAP32[$570>>2] = 1;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  (_getlex()|0);
  $571 = HEAP8[(31976)>>0]|0;
  $9 = $571;
 }
 _ungetlex();
 $572 = ((($2)) + 3196|0);
 $573 = HEAP32[$572>>2]|0;
 $574 = ($573|0)!=(0|0);
 if ($574) {
  $575 = ((($2)) + 3196|0);
  $576 = HEAP32[$575>>2]|0;
  _free($576);
 }
 $577 = ((($2)) + 3200|0);
 $578 = HEAP32[$577>>2]|0;
 $579 = ($578|0)!=(0|0);
 if ($579) {
  $580 = ((($2)) + 3200|0);
  $581 = HEAP32[$580>>2]|0;
  _free($581);
 }
 $582 = ((($2)) + 1796|0);
 $583 = HEAP32[$582>>2]|0;
 $584 = ($583|0)!=(0|0);
 if ($584) {
  $585 = ((($2)) + 1796|0);
  $586 = HEAP32[$585>>2]|0;
  _free($586);
 }
 $587 = ((($2)) + 4|0);
 $588 = HEAP32[$587>>2]|0;
 $589 = ($588|0)!=(0|0);
 if ($589) {
  $590 = ((($2)) + 4|0);
  $591 = HEAP32[$590>>2]|0;
  _free($591);
 }
 $592 = ((($2)) + 8|0);
 $593 = HEAP32[$592>>2]|0;
 $594 = ($593|0)!=(0|0);
 if ($594) {
  $595 = ((($2)) + 8|0);
  $596 = HEAP32[$595>>2]|0;
  _free($596);
 }
 $597 = HEAP32[$2>>2]|0;
 $598 = ($597|0)!=(0|0);
 if ($598) {
  $599 = HEAP32[$2>>2]|0;
  _free($599);
 }
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _MultiDiv($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy73 = 0, $$byval_copy74 = 0, $$byval_copy75 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0.0, $107 = 0, $108 = 0.0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0.0, $118 = 0.0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0.0, $126 = 0, $127 = 0.0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0.0, $136 = 0.0, $137 = 0.0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0.0, $156 = 0.0, $157 = 0.0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0.0, $184 = 0, $185 = 0.0;
 var $186 = 0.0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0.0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0.0, $201 = 0, $202 = 0.0;
 var $203 = 0.0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0.0, $21 = 0, $210 = 0.0, $211 = 0.0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0.0, $225 = 0, $226 = 0.0, $227 = 0.0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0.0, $234 = 0.0, $235 = 0, $236 = 0, $237 = 0, $238 = 0.0, $239 = 0.0;
 var $24 = 0, $240 = 0.0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0.0, $251 = 0, $252 = 0.0, $253 = 0.0, $254 = 0, $255 = 0, $256 = 0, $257 = 0;
 var $258 = 0, $259 = 0.0, $26 = 0, $260 = 0.0, $261 = 0, $262 = 0, $263 = 0, $264 = 0.0, $265 = 0.0, $266 = 0.0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0;
 var $276 = 0, $277 = 0, $278 = 0.0, $279 = 0, $28 = 0.0, $280 = 0.0, $281 = 0.0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0.0, $289 = 0, $29 = 0, $290 = 0, $291 = 0.0, $292 = 0.0, $293 = 0.0;
 var $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0.0, $303 = 0, $304 = 0.0, $305 = 0.0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0;
 var $311 = 0.0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0.0, $316 = 0.0, $317 = 0.0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0.0;
 var $33 = 0, $330 = 0, $331 = 0.0, $332 = 0.0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0.0, $339 = 0.0, $34 = 0, $340 = 0, $341 = 0, $342 = 0.0, $343 = 0.0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0;
 var $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0.0, $354 = 0, $355 = 0.0, $356 = 0.0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0.0, $363 = 0.0, $364 = 0, $365 = 0;
 var $366 = 0.0, $367 = 0.0, $368 = 0.0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0.0, $38 = 0, $380 = 0, $381 = 0.0, $382 = 0.0, $383 = 0;
 var $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0.0, $389 = 0.0, $39 = 0, $390 = 0, $391 = 0.0, $392 = 0.0, $393 = 0.0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0.0, $40 = 0, $400 = 0;
 var $401 = 0.0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0.0, $411 = 0.0, $412 = 0, $413 = 0.0, $414 = 0.0, $415 = 0.0, $416 = 0, $417 = 0, $418 = 0, $419 = 0;
 var $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0.0, $427 = 0, $428 = 0.0, $429 = 0.0, $43 = 0.0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0;
 var $438 = 0.0, $439 = 0.0, $44 = 0, $440 = 0.0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0.0, $449 = 0, $45 = 0, $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0;
 var $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0.0, $461 = 0.0, $462 = 0.0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0.0, $473 = 0;
 var $474 = 0.0, $475 = 0.0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0.0, $484 = 0.0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0.0;
 var $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0.0, $502 = 0.0, $503 = 0.0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0;
 var $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0.0, $514 = 0, $515 = 0.0, $516 = 0.0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0.0, $525 = 0.0, $526 = 0.0, $527 = 0;
 var $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0.0, $534 = 0, $535 = 0.0, $536 = 0.0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0.0, $545 = 0.0;
 var $546 = 0.0, $547 = 0, $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0.0, $556 = 0, $557 = 0.0, $558 = 0.0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0;
 var $564 = 0.0, $565 = 0.0, $566 = 0.0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0.0, $573 = 0, $574 = 0.0, $575 = 0.0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0.0;
 var $582 = 0.0, $583 = 0.0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0;
 var $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0.0, $604 = 0, $605 = 0, $606 = 0, $607 = 0.0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0;
 var $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0.0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0.0, $632 = 0, $633 = 0, $634 = 0, $635 = 0;
 var $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0.0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0;
 var $654 = 0, $655 = 0, $656 = 0.0, $657 = 0, $658 = 0, $659 = 0.0, $66 = 0, $660 = 0, $661 = 0, $662 = 0.0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0;
 var $672 = 0, $673 = 0, $674 = 0.0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0.0, $685 = 0, $686 = 0, $687 = 0.0, $688 = 0, $689 = 0, $69 = 0;
 var $690 = 0.0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0.0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0;
 var $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0.0, $713 = 0, $714 = 0, $715 = 0.0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0;
 var $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0.0, $735 = 0, $736 = 0, $737 = 0.0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0;
 var $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0.0, $750 = 0, $751 = 0.0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0.0, $760 = 0, $761 = 0.0;
 var $762 = 0, $763 = 0.0, $764 = 0, $765 = 0, $766 = 0.0, $767 = 0, $768 = 0, $769 = 0, $77 = 0.0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0.0, $778 = 0, $779 = 0, $78 = 0;
 var $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0.0, $788 = 0, $789 = 0.0, $79 = 0, $790 = 0, $791 = 0, $792 = 0.0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0;
 var $8 = 0.0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0.0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0.0, $95 = 0.0, $96 = 0.0, $97 = 0;
 var $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0;
 var $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer57 = 0, $vararg_buffer59 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_buffer71 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 22864|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(22864|0);
 $$byval_copy75 = sp + 19616|0;
 $$byval_copy74 = sp + 16400|0;
 $$byval_copy73 = sp + 13184|0;
 $$byval_copy = sp + 9968|0;
 $vararg_buffer71 = sp + 9960|0;
 $vararg_buffer69 = sp + 9952|0;
 $vararg_buffer67 = sp + 9944|0;
 $vararg_buffer65 = sp + 9936|0;
 $vararg_buffer63 = sp + 9928|0;
 $vararg_buffer61 = sp + 9920|0;
 $vararg_buffer59 = sp + 9912|0;
 $vararg_buffer57 = sp + 9904|0;
 $vararg_buffer55 = sp + 9896|0;
 $vararg_buffer53 = sp + 9888|0;
 $vararg_buffer51 = sp + 9880|0;
 $vararg_buffer49 = sp + 9872|0;
 $vararg_buffer47 = sp + 9864|0;
 $vararg_buffer45 = sp + 9856|0;
 $vararg_buffer43 = sp + 9848|0;
 $vararg_buffer41 = sp + 9840|0;
 $vararg_buffer39 = sp + 9832|0;
 $vararg_buffer37 = sp + 9824|0;
 $vararg_buffer35 = sp + 9816|0;
 $vararg_buffer33 = sp + 9808|0;
 $vararg_buffer31 = sp + 9800|0;
 $vararg_buffer29 = sp + 9792|0;
 $vararg_buffer27 = sp + 9784|0;
 $vararg_buffer25 = sp + 9776|0;
 $vararg_buffer23 = sp + 9768|0;
 $vararg_buffer21 = sp + 9760|0;
 $vararg_buffer19 = sp + 9752|0;
 $vararg_buffer17 = sp + 9744|0;
 $vararg_buffer15 = sp + 9736|0;
 $vararg_buffer13 = sp + 9728|0;
 $vararg_buffer11 = sp + 9720|0;
 $vararg_buffer9 = sp + 9712|0;
 $vararg_buffer7 = sp + 9704|0;
 $vararg_buffer5 = sp + 9696|0;
 $vararg_buffer3 = sp + 9688|0;
 $vararg_buffer = sp + 9680|0;
 $1 = sp + 6464|0;
 $2 = sp + 3248|0;
 $13 = sp;
 _Factor($1);
 _memcpy(($2|0),($1|0),3216)|0;
 $3 = 0;
 $4 = 0.0;
 $5 = 0;
 $6 = 0;
 $7 = 0.0;
 $8 = 0.0;
 $9 = 0.0;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 (_getlex()|0);
 $14 = HEAP8[(31976)>>0]|0;
 $10 = $14;
 $15 = HEAP32[7954]|0;
 $16 = ($15|0)==(28);
 if ($16) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $17 = ((($1)) + 84|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = ($18|0)==(6);
 if ($19) {
  label = 5;
 } else {
  $20 = ((($1)) + 84|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(7);
  if ($22) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  $23 = ((($1)) + 870|0);
  $24 = (_atoi($23)|0);
  $11 = $24;
  $25 = $11;
  _memcpy(($$byval_copy|0),($1|0),3216)|0;
  $26 = (_get_int_array($$byval_copy,$25)|0);
  $3 = $26;
  $27 = $11;
  _memcpy(($$byval_copy73|0),($1|0),3216)|0;
  $28 = (+_get_dbl_array($$byval_copy73,$27));
  $4 = $28;
 }
 while(1) {
  $29 = HEAP32[7954]|0;
  $30 = ($29|0)==(227);
  if (!($30)) {
   break;
  }
  $31 = HEAP8[(31976)>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(42);
  if (!($33)) {
   $34 = HEAP8[(31976)>>0]|0;
   $35 = $34 << 24 >> 24;
   $36 = ($35|0)==(47);
   if (!($36)) {
    $37 = HEAP8[(31976)>>0]|0;
    $38 = $37 << 24 >> 24;
    $39 = ($38|0)==(37);
    if (!($39)) {
     break;
    }
   }
  }
  _memset(($1|0),0,3216)|0;
  _Factor($13);
  _memcpy(($1|0),($13|0),3216)|0;
  $40 = ((($1)) + 88|0);
  $41 = HEAP32[$40>>2]|0;
  $5 = $41;
  $42 = ((($1)) + 96|0);
  $43 = +HEAPF64[$42>>3];
  $7 = $43;
  $44 = ((($1)) + 84|0);
  $45 = HEAP32[$44>>2]|0;
  $46 = ($45|0)==(6);
  if ($46) {
   label = 12;
  } else {
   $47 = ((($1)) + 84|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==(7);
   if ($49) {
    label = 12;
   }
  }
  if ((label|0) == 12) {
   label = 0;
   $50 = ((($1)) + 870|0);
   $51 = (_atoi($50)|0);
   $12 = $51;
   $52 = $12;
   _memcpy(($$byval_copy74|0),($1|0),3216)|0;
   $53 = (_get_int_array($$byval_copy74,$52)|0);
   $6 = $53;
   $54 = $12;
   _memcpy(($$byval_copy75|0),($1|0),3216)|0;
   $55 = (+_get_dbl_array($$byval_copy75,$54));
   $8 = $55;
  }
  $56 = $10;
  $57 = $56 << 24 >> 24;
  L21: do {
   switch ($57|0) {
   case 42:  {
    $58 = ((($2)) + 84|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)==(0);
    if ($60) {
     $61 = ((($1)) + 84|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)==(0);
     if ($63) {
      $64 = ((($2)) + 88|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = $5;
      $67 = Math_imul($65, $66)|0;
      $68 = ((($2)) + 88|0);
      HEAP32[$68>>2] = $67;
      $69 = ((($2)) + 84|0);
      HEAP32[$69>>2] = 0;
      break L21;
     }
     $70 = ((($1)) + 84|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ($71|0)==(1);
     if ($72) {
      $73 = ((($2)) + 88|0);
      $74 = HEAP32[$73>>2]|0;
      $75 = (+($74|0));
      $76 = $7;
      $77 = $75 * $76;
      $78 = ((($2)) + 96|0);
      HEAPF64[$78>>3] = $77;
      $79 = ((($2)) + 84|0);
      HEAP32[$79>>2] = 1;
      break L21;
     }
     $80 = ((($1)) + 84|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==(6);
     if ($82) {
      $83 = ((($2)) + 88|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = $6;
      $86 = Math_imul($84, $85)|0;
      $87 = ((($2)) + 88|0);
      HEAP32[$87>>2] = $86;
      $88 = ((($2)) + 84|0);
      HEAP32[$88>>2] = 0;
      break L21;
     }
     $89 = ((($1)) + 84|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ($90|0)==(7);
     if (!($91)) {
      break L21;
     }
     $92 = ((($2)) + 88|0);
     $93 = HEAP32[$92>>2]|0;
     $94 = (+($93|0));
     $95 = $8;
     $96 = $94 * $95;
     $97 = ((($2)) + 96|0);
     HEAPF64[$97>>3] = $96;
     $98 = ((($2)) + 84|0);
     HEAP32[$98>>2] = 1;
     break L21;
    }
    $99 = ((($2)) + 84|0);
    $100 = HEAP32[$99>>2]|0;
    $101 = ($100|0)==(1);
    if ($101) {
     $102 = ((($1)) + 84|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)==(0);
     if ($104) {
      $105 = ((($2)) + 96|0);
      $106 = +HEAPF64[$105>>3];
      $107 = $5;
      $108 = (+($107|0));
      $109 = $106 * $108;
      $110 = ((($2)) + 96|0);
      HEAPF64[$110>>3] = $109;
      $111 = ((($2)) + 84|0);
      HEAP32[$111>>2] = 1;
      break L21;
     }
     $112 = ((($1)) + 84|0);
     $113 = HEAP32[$112>>2]|0;
     $114 = ($113|0)==(1);
     if ($114) {
      $115 = ((($2)) + 96|0);
      $116 = +HEAPF64[$115>>3];
      $117 = $7;
      $118 = $116 * $117;
      $119 = ((($2)) + 96|0);
      HEAPF64[$119>>3] = $118;
      $120 = ((($2)) + 84|0);
      HEAP32[$120>>2] = 1;
      break L21;
     }
     $121 = ((($1)) + 84|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ($122|0)==(6);
     if ($123) {
      $124 = ((($2)) + 96|0);
      $125 = +HEAPF64[$124>>3];
      $126 = $6;
      $127 = (+($126|0));
      $128 = $125 * $127;
      $129 = ((($2)) + 96|0);
      HEAPF64[$129>>3] = $128;
      $130 = ((($2)) + 84|0);
      HEAP32[$130>>2] = 1;
      break L21;
     }
     $131 = ((($1)) + 84|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(7);
     if (!($133)) {
      break L21;
     }
     $134 = ((($1)) + 96|0);
     $135 = +HEAPF64[$134>>3];
     $136 = $8;
     $137 = $135 * $136;
     $138 = ((($2)) + 96|0);
     HEAPF64[$138>>3] = $137;
     $139 = ((($2)) + 84|0);
     HEAP32[$139>>2] = 1;
     break L21;
    }
    $140 = ((($2)) + 84|0);
    $141 = HEAP32[$140>>2]|0;
    $142 = ($141|0)==(6);
    if ($142) {
     $143 = ((($1)) + 84|0);
     $144 = HEAP32[$143>>2]|0;
     $145 = ($144|0)==(0);
     if ($145) {
      $146 = $3;
      $147 = $5;
      $148 = Math_imul($146, $147)|0;
      $149 = ((($2)) + 88|0);
      HEAP32[$149>>2] = $148;
      $150 = ((($2)) + 84|0);
      HEAP32[$150>>2] = 0;
      break L21;
     }
     $151 = ((($1)) + 84|0);
     $152 = HEAP32[$151>>2]|0;
     $153 = ($152|0)==(1);
     if ($153) {
      $154 = $3;
      $155 = (+($154|0));
      $156 = $7;
      $157 = $155 * $156;
      $158 = ((($2)) + 96|0);
      HEAPF64[$158>>3] = $157;
      $159 = ((($2)) + 84|0);
      HEAP32[$159>>2] = 1;
      break L21;
     }
     $160 = ((($1)) + 84|0);
     $161 = HEAP32[$160>>2]|0;
     $162 = ($161|0)==(6);
     if ($162) {
      $163 = $3;
      $164 = $6;
      $165 = Math_imul($163, $164)|0;
      $166 = ((($2)) + 88|0);
      HEAP32[$166>>2] = $165;
      $167 = ((($2)) + 84|0);
      HEAP32[$167>>2] = 0;
      break L21;
     }
     $168 = ((($1)) + 84|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ($169|0)==(7);
     if (!($170)) {
      break L21;
     }
     $171 = $3;
     $172 = (+($171|0));
     $173 = $8;
     $174 = $172 * $173;
     $175 = ((($2)) + 96|0);
     HEAPF64[$175>>3] = $174;
     $176 = ((($2)) + 84|0);
     HEAP32[$176>>2] = 1;
     break L21;
    }
    $177 = ((($2)) + 84|0);
    $178 = HEAP32[$177>>2]|0;
    $179 = ($178|0)==(7);
    if (!($179)) {
     _Error(8886,$vararg_buffer);
     break L21;
    }
    $180 = ((($1)) + 84|0);
    $181 = HEAP32[$180>>2]|0;
    $182 = ($181|0)==(0);
    if ($182) {
     $183 = $4;
     $184 = $5;
     $185 = (+($184|0));
     $186 = $183 * $185;
     $187 = ((($2)) + 96|0);
     HEAPF64[$187>>3] = $186;
     $188 = ((($2)) + 84|0);
     HEAP32[$188>>2] = 1;
     break L21;
    }
    $189 = ((($1)) + 84|0);
    $190 = HEAP32[$189>>2]|0;
    $191 = ($190|0)==(1);
    if ($191) {
     $192 = $4;
     $193 = $7;
     $194 = $192 * $193;
     $195 = ((($2)) + 96|0);
     HEAPF64[$195>>3] = $194;
     $196 = ((($2)) + 84|0);
     HEAP32[$196>>2] = 1;
     break L21;
    }
    $197 = ((($1)) + 84|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = ($198|0)==(6);
    if ($199) {
     $200 = $4;
     $201 = $6;
     $202 = (+($201|0));
     $203 = $200 * $202;
     $204 = ((($2)) + 96|0);
     HEAPF64[$204>>3] = $203;
     $205 = ((($2)) + 84|0);
     HEAP32[$205>>2] = 1;
     break L21;
    }
    $206 = ((($1)) + 84|0);
    $207 = HEAP32[$206>>2]|0;
    $208 = ($207|0)==(7);
    if ($208) {
     $209 = $4;
     $210 = $8;
     $211 = $209 * $210;
     $212 = ((($2)) + 96|0);
     HEAPF64[$212>>3] = $211;
     $213 = ((($2)) + 84|0);
     HEAP32[$213>>2] = 1;
    }
    break;
   }
   case 47:  {
    $214 = ((($2)) + 84|0);
    $215 = HEAP32[$214>>2]|0;
    $216 = ($215|0)==(0);
    if ($216) {
     $217 = ((($1)) + 84|0);
     $218 = HEAP32[$217>>2]|0;
     $219 = ($218|0)==(0);
     if ($219) {
      $220 = $5;
      $221 = ($220|0)==(0);
      if ($221) {
       _Error(8908,$vararg_buffer3);
      }
      $222 = ((($2)) + 88|0);
      $223 = HEAP32[$222>>2]|0;
      $224 = (+($223|0));
      $225 = $5;
      $226 = (+($225|0));
      $227 = $224 / $226;
      $228 = ((($2)) + 96|0);
      HEAPF64[$228>>3] = $227;
      $229 = ((($2)) + 84|0);
      HEAP32[$229>>2] = 1;
      break L21;
     }
     $230 = ((($1)) + 84|0);
     $231 = HEAP32[$230>>2]|0;
     $232 = ($231|0)==(1);
     if ($232) {
      $233 = $7;
      $234 = $9;
      $235 = $233 == $234;
      if ($235) {
       _Error(8908,$vararg_buffer5);
      }
      $236 = ((($2)) + 88|0);
      $237 = HEAP32[$236>>2]|0;
      $238 = (+($237|0));
      $239 = $7;
      $240 = $238 / $239;
      $241 = ((($2)) + 96|0);
      HEAPF64[$241>>3] = $240;
      $242 = ((($2)) + 84|0);
      HEAP32[$242>>2] = 1;
      break L21;
     }
     $243 = ((($1)) + 84|0);
     $244 = HEAP32[$243>>2]|0;
     $245 = ($244|0)==(6);
     if ($245) {
      $246 = $3;
      $247 = ($246|0)==(0);
      if ($247) {
       _Error(8908,$vararg_buffer7);
      }
      $248 = ((($2)) + 88|0);
      $249 = HEAP32[$248>>2]|0;
      $250 = (+($249|0));
      $251 = $6;
      $252 = (+($251|0));
      $253 = $250 / $252;
      $254 = ((($2)) + 96|0);
      HEAPF64[$254>>3] = $253;
      $255 = ((($2)) + 84|0);
      HEAP32[$255>>2] = 1;
      break L21;
     }
     $256 = ((($1)) + 84|0);
     $257 = HEAP32[$256>>2]|0;
     $258 = ($257|0)==(7);
     if (!($258)) {
      break L21;
     }
     $259 = $8;
     $260 = $9;
     $261 = $259 == $260;
     if ($261) {
      _Error(8908,$vararg_buffer9);
     }
     $262 = ((($2)) + 88|0);
     $263 = HEAP32[$262>>2]|0;
     $264 = (+($263|0));
     $265 = $8;
     $266 = $264 / $265;
     $267 = ((($2)) + 96|0);
     HEAPF64[$267>>3] = $266;
     $268 = ((($2)) + 84|0);
     HEAP32[$268>>2] = 1;
     break L21;
    }
    $269 = ((($2)) + 84|0);
    $270 = HEAP32[$269>>2]|0;
    $271 = ($270|0)==(1);
    if ($271) {
     $272 = ((($1)) + 84|0);
     $273 = HEAP32[$272>>2]|0;
     $274 = ($273|0)==(0);
     if ($274) {
      $275 = $5;
      $276 = ($275|0)==(0);
      if ($276) {
       _Error(8908,$vararg_buffer11);
      }
      $277 = ((($2)) + 96|0);
      $278 = +HEAPF64[$277>>3];
      $279 = $5;
      $280 = (+($279|0));
      $281 = $278 / $280;
      $282 = ((($2)) + 96|0);
      HEAPF64[$282>>3] = $281;
      $283 = ((($2)) + 84|0);
      HEAP32[$283>>2] = 1;
      break L21;
     }
     $284 = ((($1)) + 84|0);
     $285 = HEAP32[$284>>2]|0;
     $286 = ($285|0)==(1);
     if ($286) {
      $287 = $7;
      $288 = $9;
      $289 = $287 == $288;
      if ($289) {
       _Error(8908,$vararg_buffer13);
      }
      $290 = ((($2)) + 96|0);
      $291 = +HEAPF64[$290>>3];
      $292 = $7;
      $293 = $291 / $292;
      $294 = ((($2)) + 96|0);
      HEAPF64[$294>>3] = $293;
      $295 = ((($2)) + 84|0);
      HEAP32[$295>>2] = 1;
      break L21;
     }
     $296 = ((($1)) + 84|0);
     $297 = HEAP32[$296>>2]|0;
     $298 = ($297|0)==(6);
     if ($298) {
      $299 = $6;
      $300 = ($299|0)==(0);
      if ($300) {
       _Error(8908,$vararg_buffer15);
      }
      $301 = ((($2)) + 96|0);
      $302 = +HEAPF64[$301>>3];
      $303 = $6;
      $304 = (+($303|0));
      $305 = $302 / $304;
      $306 = ((($2)) + 96|0);
      HEAPF64[$306>>3] = $305;
      $307 = ((($2)) + 84|0);
      HEAP32[$307>>2] = 1;
      break L21;
     }
     $308 = ((($1)) + 84|0);
     $309 = HEAP32[$308>>2]|0;
     $310 = ($309|0)==(7);
     if (!($310)) {
      break L21;
     }
     $311 = $8;
     $312 = $9;
     $313 = $311 == $312;
     if ($313) {
      _Error(8908,$vararg_buffer17);
     }
     $314 = ((($1)) + 96|0);
     $315 = +HEAPF64[$314>>3];
     $316 = $8;
     $317 = $315 / $316;
     $318 = ((($2)) + 96|0);
     HEAPF64[$318>>3] = $317;
     $319 = ((($2)) + 84|0);
     HEAP32[$319>>2] = 1;
     break L21;
    }
    $320 = ((($2)) + 84|0);
    $321 = HEAP32[$320>>2]|0;
    $322 = ($321|0)==(6);
    if ($322) {
     $323 = ((($1)) + 84|0);
     $324 = HEAP32[$323>>2]|0;
     $325 = ($324|0)==(0);
     if ($325) {
      $326 = $5;
      $327 = ($326|0)==(0);
      if ($327) {
       _Error(8908,$vararg_buffer19);
      }
      $328 = $3;
      $329 = (+($328|0));
      $330 = $5;
      $331 = (+($330|0));
      $332 = $329 / $331;
      $333 = ((($2)) + 96|0);
      HEAPF64[$333>>3] = $332;
      $334 = ((($2)) + 84|0);
      HEAP32[$334>>2] = 1;
      break L21;
     }
     $335 = ((($1)) + 84|0);
     $336 = HEAP32[$335>>2]|0;
     $337 = ($336|0)==(1);
     if ($337) {
      $338 = $7;
      $339 = $9;
      $340 = $338 == $339;
      if ($340) {
       _Error(8908,$vararg_buffer21);
      }
      $341 = $3;
      $342 = (+($341|0));
      $343 = $7;
      $344 = $342 / $343;
      $345 = ((($2)) + 96|0);
      HEAPF64[$345>>3] = $344;
      $346 = ((($2)) + 84|0);
      HEAP32[$346>>2] = 1;
      break L21;
     }
     $347 = ((($1)) + 84|0);
     $348 = HEAP32[$347>>2]|0;
     $349 = ($348|0)==(6);
     if ($349) {
      $350 = $6;
      $351 = ($350|0)==(0);
      if ($351) {
       _Error(8908,$vararg_buffer23);
      }
      $352 = $3;
      $353 = (+($352|0));
      $354 = $6;
      $355 = (+($354|0));
      $356 = $353 / $355;
      $357 = ((($2)) + 96|0);
      HEAPF64[$357>>3] = $356;
      $358 = ((($2)) + 84|0);
      HEAP32[$358>>2] = 1;
      break L21;
     }
     $359 = ((($1)) + 84|0);
     $360 = HEAP32[$359>>2]|0;
     $361 = ($360|0)==(7);
     if (!($361)) {
      break L21;
     }
     $362 = $8;
     $363 = $9;
     $364 = $362 == $363;
     if ($364) {
      _Error(8908,$vararg_buffer25);
     }
     $365 = $3;
     $366 = (+($365|0));
     $367 = $8;
     $368 = $366 / $367;
     $369 = ((($2)) + 96|0);
     HEAPF64[$369>>3] = $368;
     $370 = ((($2)) + 84|0);
     HEAP32[$370>>2] = 1;
     break L21;
    }
    $371 = ((($2)) + 84|0);
    $372 = HEAP32[$371>>2]|0;
    $373 = ($372|0)==(7);
    if (!($373)) {
     _Error(8926,$vararg_buffer35);
     break L21;
    }
    $374 = ((($1)) + 84|0);
    $375 = HEAP32[$374>>2]|0;
    $376 = ($375|0)==(0);
    if ($376) {
     $377 = $5;
     $378 = ($377|0)==(0);
     if ($378) {
      _Error(8908,$vararg_buffer27);
     }
     $379 = $4;
     $380 = $5;
     $381 = (+($380|0));
     $382 = $379 / $381;
     $383 = ((($2)) + 96|0);
     HEAPF64[$383>>3] = $382;
     $384 = ((($2)) + 84|0);
     HEAP32[$384>>2] = 1;
     break L21;
    }
    $385 = ((($1)) + 84|0);
    $386 = HEAP32[$385>>2]|0;
    $387 = ($386|0)==(1);
    if ($387) {
     $388 = $7;
     $389 = $9;
     $390 = $388 == $389;
     if ($390) {
      _Error(8908,$vararg_buffer29);
     }
     $391 = $4;
     $392 = $7;
     $393 = $391 / $392;
     $394 = ((($2)) + 96|0);
     HEAPF64[$394>>3] = $393;
     $395 = ((($2)) + 84|0);
     HEAP32[$395>>2] = 1;
     break L21;
    }
    $396 = ((($1)) + 84|0);
    $397 = HEAP32[$396>>2]|0;
    $398 = ($397|0)==(6);
    if ($398) {
     $399 = $6;
     $400 = ($399|0)==(0);
     if ($400) {
      _Error(8908,$vararg_buffer31);
     }
     $401 = $4;
     $402 = $6;
     $403 = (+($402|0));
     $404 = $401 / $403;
     $405 = ((($2)) + 96|0);
     HEAPF64[$405>>3] = $404;
     $406 = ((($2)) + 84|0);
     HEAP32[$406>>2] = 1;
     break L21;
    }
    $407 = ((($1)) + 84|0);
    $408 = HEAP32[$407>>2]|0;
    $409 = ($408|0)==(7);
    if ($409) {
     $410 = $8;
     $411 = $9;
     $412 = $410 == $411;
     if ($412) {
      _Error(8908,$vararg_buffer33);
     }
     $413 = $4;
     $414 = $8;
     $415 = $413 / $414;
     $416 = ((($2)) + 96|0);
     HEAPF64[$416>>3] = $415;
     $417 = ((($2)) + 84|0);
     HEAP32[$417>>2] = 1;
    }
    break;
   }
   case 94:  {
    $418 = ((($2)) + 84|0);
    $419 = HEAP32[$418>>2]|0;
    $420 = ($419|0)==(0);
    if ($420) {
     $421 = ((($1)) + 84|0);
     $422 = HEAP32[$421>>2]|0;
     $423 = ($422|0)==(0);
     if ($423) {
      $424 = ((($2)) + 88|0);
      $425 = HEAP32[$424>>2]|0;
      $426 = (+($425|0));
      $427 = $5;
      $428 = (+($427|0));
      $429 = (+Math_pow((+$426),(+$428)));
      $430 = (~~(($429)));
      $431 = ((($2)) + 88|0);
      HEAP32[$431>>2] = $430;
      $432 = ((($2)) + 84|0);
      HEAP32[$432>>2] = 0;
      break L21;
     }
     $433 = ((($1)) + 84|0);
     $434 = HEAP32[$433>>2]|0;
     $435 = ($434|0)==(1);
     if ($435) {
      $436 = ((($2)) + 88|0);
      $437 = HEAP32[$436>>2]|0;
      $438 = (+($437|0));
      $439 = $7;
      $440 = (+Math_pow((+$438),(+$439)));
      $441 = ((($2)) + 96|0);
      HEAPF64[$441>>3] = $440;
      $442 = ((($2)) + 84|0);
      HEAP32[$442>>2] = 1;
      break L21;
     }
     $443 = ((($1)) + 84|0);
     $444 = HEAP32[$443>>2]|0;
     $445 = ($444|0)==(6);
     if ($445) {
      $446 = ((($2)) + 88|0);
      $447 = HEAP32[$446>>2]|0;
      $448 = (+($447|0));
      $449 = $6;
      $450 = (+($449|0));
      $451 = (+Math_pow((+$448),(+$450)));
      $452 = (~~(($451)));
      $453 = ((($2)) + 88|0);
      HEAP32[$453>>2] = $452;
      $454 = ((($2)) + 84|0);
      HEAP32[$454>>2] = 0;
      break L21;
     }
     $455 = ((($1)) + 84|0);
     $456 = HEAP32[$455>>2]|0;
     $457 = ($456|0)==(7);
     if (!($457)) {
      break L21;
     }
     $458 = ((($2)) + 88|0);
     $459 = HEAP32[$458>>2]|0;
     $460 = (+($459|0));
     $461 = $8;
     $462 = (+Math_pow((+$460),(+$461)));
     $463 = ((($2)) + 96|0);
     HEAPF64[$463>>3] = $462;
     $464 = ((($2)) + 84|0);
     HEAP32[$464>>2] = 1;
     break L21;
    }
    $465 = ((($2)) + 84|0);
    $466 = HEAP32[$465>>2]|0;
    $467 = ($466|0)==(1);
    if ($467) {
     $468 = ((($1)) + 84|0);
     $469 = HEAP32[$468>>2]|0;
     $470 = ($469|0)==(0);
     if ($470) {
      $471 = ((($2)) + 96|0);
      $472 = +HEAPF64[$471>>3];
      $473 = $5;
      $474 = (+($473|0));
      $475 = (+Math_pow((+$472),(+$474)));
      $476 = ((($2)) + 96|0);
      HEAPF64[$476>>3] = $475;
      $477 = ((($2)) + 84|0);
      HEAP32[$477>>2] = 1;
      break L21;
     }
     $478 = ((($1)) + 84|0);
     $479 = HEAP32[$478>>2]|0;
     $480 = ($479|0)==(1);
     if ($480) {
      $481 = ((($2)) + 96|0);
      $482 = +HEAPF64[$481>>3];
      $483 = $7;
      $484 = (+Math_pow((+$482),(+$483)));
      $485 = ((($2)) + 96|0);
      HEAPF64[$485>>3] = $484;
      $486 = ((($2)) + 84|0);
      HEAP32[$486>>2] = 1;
      break L21;
     }
     $487 = ((($1)) + 84|0);
     $488 = HEAP32[$487>>2]|0;
     $489 = ($488|0)==(6);
     if ($489) {
      $490 = ((($2)) + 96|0);
      $491 = +HEAPF64[$490>>3];
      $492 = $6;
      $493 = (+($492|0));
      $494 = (+Math_pow((+$491),(+$493)));
      $495 = ((($2)) + 96|0);
      HEAPF64[$495>>3] = $494;
      $496 = ((($2)) + 84|0);
      HEAP32[$496>>2] = 1;
      break L21;
     }
     $497 = ((($1)) + 84|0);
     $498 = HEAP32[$497>>2]|0;
     $499 = ($498|0)==(7);
     if (!($499)) {
      break L21;
     }
     $500 = ((($1)) + 96|0);
     $501 = +HEAPF64[$500>>3];
     $502 = $8;
     $503 = (+Math_pow((+$501),(+$502)));
     $504 = ((($2)) + 96|0);
     HEAPF64[$504>>3] = $503;
     $505 = ((($2)) + 84|0);
     HEAP32[$505>>2] = 1;
     break L21;
    }
    $506 = ((($2)) + 84|0);
    $507 = HEAP32[$506>>2]|0;
    $508 = ($507|0)==(6);
    if ($508) {
     $509 = ((($1)) + 84|0);
     $510 = HEAP32[$509>>2]|0;
     $511 = ($510|0)==(0);
     if ($511) {
      $512 = $3;
      $513 = (+($512|0));
      $514 = $5;
      $515 = (+($514|0));
      $516 = (+Math_pow((+$513),(+$515)));
      $517 = (~~(($516)));
      $518 = ((($2)) + 88|0);
      HEAP32[$518>>2] = $517;
      $519 = ((($2)) + 84|0);
      HEAP32[$519>>2] = 0;
      break L21;
     }
     $520 = ((($1)) + 84|0);
     $521 = HEAP32[$520>>2]|0;
     $522 = ($521|0)==(1);
     if ($522) {
      $523 = $3;
      $524 = (+($523|0));
      $525 = $7;
      $526 = (+Math_pow((+$524),(+$525)));
      $527 = ((($2)) + 96|0);
      HEAPF64[$527>>3] = $526;
      $528 = ((($2)) + 84|0);
      HEAP32[$528>>2] = 1;
      break L21;
     }
     $529 = ((($1)) + 84|0);
     $530 = HEAP32[$529>>2]|0;
     $531 = ($530|0)==(6);
     if ($531) {
      $532 = $3;
      $533 = (+($532|0));
      $534 = $6;
      $535 = (+($534|0));
      $536 = (+Math_pow((+$533),(+$535)));
      $537 = (~~(($536)));
      $538 = ((($2)) + 88|0);
      HEAP32[$538>>2] = $537;
      $539 = ((($2)) + 84|0);
      HEAP32[$539>>2] = 0;
      break L21;
     }
     $540 = ((($1)) + 84|0);
     $541 = HEAP32[$540>>2]|0;
     $542 = ($541|0)==(7);
     if (!($542)) {
      break L21;
     }
     $543 = $3;
     $544 = (+($543|0));
     $545 = $8;
     $546 = (+Math_pow((+$544),(+$545)));
     $547 = ((($2)) + 96|0);
     HEAPF64[$547>>3] = $546;
     $548 = ((($2)) + 84|0);
     HEAP32[$548>>2] = 1;
     break L21;
    }
    $549 = ((($2)) + 84|0);
    $550 = HEAP32[$549>>2]|0;
    $551 = ($550|0)==(7);
    if (!($551)) {
     _Error(8948,$vararg_buffer37);
     break L21;
    }
    $552 = ((($1)) + 84|0);
    $553 = HEAP32[$552>>2]|0;
    $554 = ($553|0)==(0);
    if ($554) {
     $555 = $4;
     $556 = $5;
     $557 = (+($556|0));
     $558 = (+Math_pow((+$555),(+$557)));
     $559 = ((($2)) + 96|0);
     HEAPF64[$559>>3] = $558;
     $560 = ((($2)) + 84|0);
     HEAP32[$560>>2] = 1;
     break L21;
    }
    $561 = ((($1)) + 84|0);
    $562 = HEAP32[$561>>2]|0;
    $563 = ($562|0)==(1);
    if ($563) {
     $564 = $4;
     $565 = $7;
     $566 = (+Math_pow((+$564),(+$565)));
     $567 = ((($2)) + 96|0);
     HEAPF64[$567>>3] = $566;
     $568 = ((($2)) + 84|0);
     HEAP32[$568>>2] = 1;
     break L21;
    }
    $569 = ((($1)) + 84|0);
    $570 = HEAP32[$569>>2]|0;
    $571 = ($570|0)==(6);
    if ($571) {
     $572 = $4;
     $573 = $6;
     $574 = (+($573|0));
     $575 = (+Math_pow((+$572),(+$574)));
     $576 = ((($2)) + 96|0);
     HEAPF64[$576>>3] = $575;
     $577 = ((($2)) + 84|0);
     HEAP32[$577>>2] = 1;
     break L21;
    }
    $578 = ((($1)) + 84|0);
    $579 = HEAP32[$578>>2]|0;
    $580 = ($579|0)==(7);
    if ($580) {
     $581 = $4;
     $582 = $8;
     $583 = (+Math_pow((+$581),(+$582)));
     $584 = ((($2)) + 96|0);
     HEAPF64[$584>>3] = $583;
     $585 = ((($2)) + 84|0);
     HEAP32[$585>>2] = 1;
    }
    break;
   }
   case 37:  {
    $586 = ((($2)) + 84|0);
    $587 = HEAP32[$586>>2]|0;
    $588 = ($587|0)==(0);
    if ($588) {
     $589 = ((($1)) + 84|0);
     $590 = HEAP32[$589>>2]|0;
     $591 = ($590|0)==(0);
     if ($591) {
      $592 = $5;
      $593 = ($592|0)==(0);
      if ($593) {
       _Error(8908,$vararg_buffer39);
      }
      $594 = ((($2)) + 88|0);
      $595 = HEAP32[$594>>2]|0;
      $596 = $5;
      $597 = (($595|0) % ($596|0))&-1;
      $598 = ((($2)) + 88|0);
      HEAP32[$598>>2] = $597;
      $599 = ((($2)) + 84|0);
      HEAP32[$599>>2] = 0;
      break L21;
     }
     $600 = ((($1)) + 84|0);
     $601 = HEAP32[$600>>2]|0;
     $602 = ($601|0)==(1);
     if ($602) {
      $603 = $7;
      $604 = $603 == 0.0;
      if ($604) {
       _Error(8908,$vararg_buffer41);
      }
      $605 = ((($2)) + 88|0);
      $606 = HEAP32[$605>>2]|0;
      $607 = $7;
      $608 = (~~(($607)));
      $609 = (Math_abs(($608|0))|0);
      $610 = (($606|0) % ($609|0))&-1;
      $611 = ((($2)) + 88|0);
      HEAP32[$611>>2] = $610;
      $612 = ((($2)) + 84|0);
      HEAP32[$612>>2] = 0;
      break L21;
     }
     $613 = ((($1)) + 84|0);
     $614 = HEAP32[$613>>2]|0;
     $615 = ($614|0)==(6);
     if ($615) {
      $616 = $3;
      $617 = ($616|0)==(0);
      if ($617) {
       _Error(8908,$vararg_buffer43);
      }
      $618 = ((($2)) + 88|0);
      $619 = HEAP32[$618>>2]|0;
      $620 = $6;
      $621 = (($619|0) % ($620|0))&-1;
      $622 = ((($2)) + 88|0);
      HEAP32[$622>>2] = $621;
      $623 = ((($2)) + 84|0);
      HEAP32[$623>>2] = 0;
      break L21;
     }
     $624 = ((($1)) + 84|0);
     $625 = HEAP32[$624>>2]|0;
     $626 = ($625|0)==(7);
     if (!($626)) {
      break L21;
     }
     $627 = $8;
     $628 = $627 == 0.0;
     if ($628) {
      _Error(8908,$vararg_buffer45);
     }
     $629 = ((($2)) + 88|0);
     $630 = HEAP32[$629>>2]|0;
     $631 = $8;
     $632 = (~~(($631)));
     $633 = (Math_abs(($632|0))|0);
     $634 = (($630|0) % ($633|0))&-1;
     $635 = ((($2)) + 88|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($2)) + 84|0);
     HEAP32[$636>>2] = 0;
     break L21;
    }
    $637 = ((($2)) + 84|0);
    $638 = HEAP32[$637>>2]|0;
    $639 = ($638|0)==(1);
    if ($639) {
     $640 = ((($1)) + 84|0);
     $641 = HEAP32[$640>>2]|0;
     $642 = ($641|0)==(0);
     if ($642) {
      $643 = $5;
      $644 = ($643|0)==(0);
      if ($644) {
       _Error(8908,$vararg_buffer47);
      }
      $645 = ((($2)) + 96|0);
      $646 = +HEAPF64[$645>>3];
      $647 = (~~(($646)));
      $648 = (Math_abs(($647|0))|0);
      $649 = $5;
      $650 = (($648|0) % ($649|0))&-1;
      $651 = ((($2)) + 88|0);
      HEAP32[$651>>2] = $650;
      $652 = ((($2)) + 84|0);
      HEAP32[$652>>2] = 0;
      break L21;
     }
     $653 = ((($1)) + 84|0);
     $654 = HEAP32[$653>>2]|0;
     $655 = ($654|0)==(1);
     if ($655) {
      $656 = $7;
      $657 = $656 == 0.0;
      if ($657) {
       _Error(8908,$vararg_buffer49);
      }
      $658 = ((($2)) + 96|0);
      $659 = +HEAPF64[$658>>3];
      $660 = (~~(($659)));
      $661 = (Math_abs(($660|0))|0);
      $662 = $7;
      $663 = (~~(($662)));
      $664 = (Math_abs(($663|0))|0);
      $665 = (($661|0) % ($664|0))&-1;
      $666 = ((($2)) + 88|0);
      HEAP32[$666>>2] = $665;
      $667 = ((($2)) + 84|0);
      HEAP32[$667>>2] = 0;
      break L21;
     }
     $668 = ((($1)) + 84|0);
     $669 = HEAP32[$668>>2]|0;
     $670 = ($669|0)==(6);
     if ($670) {
      $671 = $6;
      $672 = ($671|0)==(0);
      if ($672) {
       _Error(8908,$vararg_buffer51);
      }
      $673 = ((($2)) + 96|0);
      $674 = +HEAPF64[$673>>3];
      $675 = (~~(($674)));
      $676 = (Math_abs(($675|0))|0);
      $677 = $6;
      $678 = (($676|0) % ($677|0))&-1;
      $679 = ((($2)) + 88|0);
      HEAP32[$679>>2] = $678;
      $680 = ((($2)) + 84|0);
      HEAP32[$680>>2] = 0;
      break L21;
     }
     $681 = ((($1)) + 84|0);
     $682 = HEAP32[$681>>2]|0;
     $683 = ($682|0)==(7);
     if (!($683)) {
      break L21;
     }
     $684 = $8;
     $685 = $684 == 0.0;
     if ($685) {
      _Error(8908,$vararg_buffer53);
     }
     $686 = ((($1)) + 96|0);
     $687 = +HEAPF64[$686>>3];
     $688 = (~~(($687)));
     $689 = (Math_abs(($688|0))|0);
     $690 = $8;
     $691 = (~~(($690)));
     $692 = (Math_abs(($691|0))|0);
     $693 = (($689|0) % ($692|0))&-1;
     $694 = ((($2)) + 88|0);
     HEAP32[$694>>2] = $693;
     $695 = ((($2)) + 84|0);
     HEAP32[$695>>2] = 1;
     break L21;
    }
    $696 = ((($2)) + 84|0);
    $697 = HEAP32[$696>>2]|0;
    $698 = ($697|0)==(6);
    if ($698) {
     $699 = ((($1)) + 84|0);
     $700 = HEAP32[$699>>2]|0;
     $701 = ($700|0)==(0);
     if ($701) {
      $702 = $5;
      $703 = ($702|0)==(0);
      if ($703) {
       _Error(8908,$vararg_buffer55);
      }
      $704 = $3;
      $705 = $5;
      $706 = (($704|0) % ($705|0))&-1;
      $707 = ((($2)) + 88|0);
      HEAP32[$707>>2] = $706;
      $708 = ((($2)) + 84|0);
      HEAP32[$708>>2] = 0;
      break L21;
     }
     $709 = ((($1)) + 84|0);
     $710 = HEAP32[$709>>2]|0;
     $711 = ($710|0)==(1);
     if ($711) {
      $712 = $7;
      $713 = $712 == 0.0;
      if ($713) {
       _Error(8908,$vararg_buffer57);
      }
      $714 = $3;
      $715 = $7;
      $716 = (~~(($715)));
      $717 = (Math_abs(($716|0))|0);
      $718 = (($714|0) % ($717|0))&-1;
      $719 = ((($2)) + 88|0);
      HEAP32[$719>>2] = $718;
      $720 = ((($2)) + 84|0);
      HEAP32[$720>>2] = 0;
      break L21;
     }
     $721 = ((($1)) + 84|0);
     $722 = HEAP32[$721>>2]|0;
     $723 = ($722|0)==(6);
     if ($723) {
      $724 = $6;
      $725 = ($724|0)==(0);
      if ($725) {
       _Error(8908,$vararg_buffer59);
      }
      $726 = $3;
      $727 = $6;
      $728 = (($726|0) % ($727|0))&-1;
      $729 = ((($2)) + 88|0);
      HEAP32[$729>>2] = $728;
      $730 = ((($2)) + 84|0);
      HEAP32[$730>>2] = 0;
      break L21;
     }
     $731 = ((($1)) + 84|0);
     $732 = HEAP32[$731>>2]|0;
     $733 = ($732|0)==(7);
     if (!($733)) {
      break L21;
     }
     $734 = $8;
     $735 = $734 == 0.0;
     if ($735) {
      _Error(8908,$vararg_buffer61);
     }
     $736 = $3;
     $737 = $8;
     $738 = (~~(($737)));
     $739 = (Math_abs(($738|0))|0);
     $740 = (($736|0) % ($739|0))&-1;
     $741 = ((($2)) + 88|0);
     HEAP32[$741>>2] = $740;
     $742 = ((($2)) + 84|0);
     HEAP32[$742>>2] = 0;
     break L21;
    }
    $743 = ((($2)) + 84|0);
    $744 = HEAP32[$743>>2]|0;
    $745 = ($744|0)==(7);
    if (!($745)) {
     _Error(8972,$vararg_buffer71);
     break L21;
    }
    $746 = ((($1)) + 84|0);
    $747 = HEAP32[$746>>2]|0;
    $748 = ($747|0)==(0);
    if ($748) {
     $749 = $5;
     $750 = ($749|0)==(0);
     if ($750) {
      _Error(8908,$vararg_buffer63);
     }
     $751 = $4;
     $752 = (~~(($751)));
     $753 = (Math_abs(($752|0))|0);
     $754 = $5;
     $755 = (($753|0) % ($754|0))&-1;
     $756 = ((($2)) + 88|0);
     HEAP32[$756>>2] = $755;
     $757 = ((($2)) + 84|0);
     HEAP32[$757>>2] = 0;
     break L21;
    }
    $758 = ((($1)) + 84|0);
    $759 = HEAP32[$758>>2]|0;
    $760 = ($759|0)==(1);
    if ($760) {
     $761 = $7;
     $762 = $761 == 0.0;
     if ($762) {
      _Error(8908,$vararg_buffer65);
     }
     $763 = $4;
     $764 = (~~(($763)));
     $765 = (Math_abs(($764|0))|0);
     $766 = $7;
     $767 = (~~(($766)));
     $768 = (Math_abs(($767|0))|0);
     $769 = (($765|0) % ($768|0))&-1;
     $770 = ((($2)) + 88|0);
     HEAP32[$770>>2] = $769;
     $771 = ((($2)) + 84|0);
     HEAP32[$771>>2] = 0;
     break L21;
    }
    $772 = ((($1)) + 84|0);
    $773 = HEAP32[$772>>2]|0;
    $774 = ($773|0)==(6);
    if ($774) {
     $775 = $6;
     $776 = ($775|0)==(0);
     if ($776) {
      _Error(8908,$vararg_buffer67);
     }
     $777 = $4;
     $778 = (~~(($777)));
     $779 = (Math_abs(($778|0))|0);
     $780 = $6;
     $781 = (($779|0) % ($780|0))&-1;
     $782 = ((($2)) + 88|0);
     HEAP32[$782>>2] = $781;
     $783 = ((($2)) + 84|0);
     HEAP32[$783>>2] = 0;
     break L21;
    }
    $784 = ((($1)) + 84|0);
    $785 = HEAP32[$784>>2]|0;
    $786 = ($785|0)==(7);
    if ($786) {
     $787 = $8;
     $788 = $787 == 0.0;
     if ($788) {
      _Error(8908,$vararg_buffer69);
     }
     $789 = $4;
     $790 = (~~(($789)));
     $791 = (Math_abs(($790|0))|0);
     $792 = $8;
     $793 = (~~(($792)));
     $794 = (Math_abs(($793|0))|0);
     $795 = (($791|0) % ($794|0))&-1;
     $796 = ((($2)) + 88|0);
     HEAP32[$796>>2] = $795;
     $797 = ((($2)) + 84|0);
     HEAP32[$797>>2] = 0;
    }
    break;
   }
   default: {
   }
   }
  } while(0);
  (_getlex()|0);
  $798 = HEAP8[(31976)>>0]|0;
  $10 = $798;
 }
 _ungetlex();
 _memcpy(($0|0),($2|0),3216)|0;
 STACKTOP = sp;return;
}
function _Compare($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy33 = 0, $$byval_copy34 = 0, $$byval_copy35 = 0, $$byval_copy36 = 0, $$byval_copy37 = 0, $$byval_copy38 = 0, $$byval_copy39 = 0, $$byval_copy40 = 0, $$byval_copy41 = 0, $$byval_copy42 = 0, $$byval_copy43 = 0, $$byval_copy44 = 0, $$byval_copy45 = 0, $$byval_copy46 = 0, $$byval_copy47 = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$byval_copy51 = 0;
 var $$byval_copy52 = 0, $$byval_copy53 = 0, $$byval_copy54 = 0, $$byval_copy55 = 0, $$byval_copy56 = 0, $$byval_copy57 = 0, $$byval_copy58 = 0, $$byval_copy59 = 0, $$byval_copy60 = 0, $$byval_copy61 = 0, $$byval_copy62 = 0, $$byval_copy63 = 0, $$byval_copy64 = 0, $$byval_copy65 = 0, $$byval_copy66 = 0, $$byval_copy67 = 0, $$byval_copy68 = 0, $$byval_copy69 = 0, $$byval_copy70 = 0, $$byval_copy71 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0, $141 = 0.0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0;
 var $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0;
 var $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0.0, $205 = 0, $206 = 0.0;
 var $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0;
 var $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0;
 var $243 = 0, $244 = 0, $245 = 0, $246 = 0.0, $247 = 0, $248 = 0.0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0.0, $259 = 0, $26 = 0, $260 = 0.0;
 var $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0.0, $279 = 0;
 var $28 = 0, $280 = 0.0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0;
 var $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0;
 var $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0, $322 = 0.0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0.0;
 var $333 = 0, $334 = 0.0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0;
 var $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0.0, $357 = 0, $358 = 0.0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0;
 var $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0;
 var $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0;
 var $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0.0, $417 = 0, $418 = 0.0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0;
 var $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0.0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0;
 var $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0;
 var $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0;
 var $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0;
 var $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0.0, $509 = 0, $51 = 0, $510 = 0.0, $511 = 0, $512 = 0;
 var $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0;
 var $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0;
 var $55 = 0, $550 = 0.0, $551 = 0, $552 = 0.0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0.0, $563 = 0, $564 = 0.0, $565 = 0, $566 = 0, $567 = 0;
 var $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0.0, $583 = 0, $584 = 0.0, $585 = 0;
 var $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0;
 var $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0;
 var $621 = 0, $622 = 0, $623 = 0, $624 = 0.0, $625 = 0, $626 = 0.0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0.0, $637 = 0, $638 = 0.0, $639 = 0;
 var $64 = 0, $640 = 0, $641 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0.0, $78 = 0, $79 = 0.0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond = 0, $cond1 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224544|0);
 $$byval_copy71 = sp + 218816|0;
 $$byval_copy70 = sp + 215600|0;
 $$byval_copy69 = sp + 212384|0;
 $$byval_copy68 = sp + 209168|0;
 $$byval_copy67 = sp + 205952|0;
 $$byval_copy66 = sp + 202736|0;
 $$byval_copy65 = sp + 199520|0;
 $$byval_copy64 = sp + 196304|0;
 $$byval_copy63 = sp + 193088|0;
 $$byval_copy62 = sp + 189872|0;
 $$byval_copy61 = sp + 186656|0;
 $$byval_copy60 = sp + 183440|0;
 $$byval_copy59 = sp + 224224|0;
 $$byval_copy58 = sp + 223912|0;
 $$byval_copy57 = sp + 223600|0;
 $$byval_copy56 = sp + 180224|0;
 $$byval_copy55 = sp + 177008|0;
 $$byval_copy54 = sp + 173792|0;
 $$byval_copy53 = sp + 170576|0;
 $$byval_copy52 = sp + 167360|0;
 $$byval_copy51 = sp + 164144|0;
 $$byval_copy50 = sp + 160928|0;
 $$byval_copy49 = sp + 157712|0;
 $$byval_copy48 = sp + 154496|0;
 $$byval_copy47 = sp + 151280|0;
 $$byval_copy46 = sp + 148064|0;
 $$byval_copy45 = sp + 144848|0;
 $$byval_copy44 = sp + 141632|0;
 $$byval_copy43 = sp + 138416|0;
 $$byval_copy42 = sp + 135200|0;
 $$byval_copy41 = sp + 131984|0;
 $$byval_copy40 = sp + 128768|0;
 $$byval_copy39 = sp + 125552|0;
 $$byval_copy38 = sp + 223288|0;
 $$byval_copy37 = sp + 122336|0;
 $$byval_copy36 = sp + 119120|0;
 $$byval_copy35 = sp + 115904|0;
 $$byval_copy34 = sp + 112688|0;
 $$byval_copy33 = sp + 109472|0;
 $$byval_copy = sp + 106256|0;
 $vararg_buffer31 = sp + 106248|0;
 $vararg_buffer29 = sp + 106240|0;
 $vararg_buffer27 = sp + 106232|0;
 $vararg_buffer25 = sp + 106224|0;
 $vararg_buffer23 = sp + 106216|0;
 $vararg_buffer21 = sp + 106208|0;
 $vararg_buffer19 = sp + 106200|0;
 $vararg_buffer17 = sp + 106192|0;
 $vararg_buffer15 = sp + 106184|0;
 $vararg_buffer13 = sp + 106176|0;
 $vararg_buffer10 = sp + 106168|0;
 $vararg_buffer8 = sp + 106160|0;
 $vararg_buffer6 = sp + 106152|0;
 $vararg_buffer4 = sp + 106144|0;
 $vararg_buffer2 = sp + 106136|0;
 $vararg_buffer = sp + 106128|0;
 $1 = sp + 102912|0;
 $2 = sp + 99696|0;
 $3 = sp + 96480|0;
 $4 = sp + 93264|0;
 $8 = sp + 90048|0;
 $9 = sp + 86832|0;
 $10 = sp + 83616|0;
 $11 = sp + 80400|0;
 $12 = sp + 77184|0;
 $13 = sp + 73968|0;
 $14 = sp + 70752|0;
 $15 = sp + 222968|0;
 $16 = sp + 67536|0;
 $17 = sp + 64320|0;
 $18 = sp + 61104|0;
 $19 = sp + 57888|0;
 $20 = sp + 54672|0;
 $21 = sp + 51456|0;
 $22 = sp + 48240|0;
 $23 = sp + 45024|0;
 $24 = sp + 41808|0;
 $25 = sp + 38592|0;
 $26 = sp + 35376|0;
 $27 = sp + 32160|0;
 $28 = sp + 28944|0;
 $29 = sp + 25728|0;
 $30 = sp + 222656|0;
 $31 = sp + 222344|0;
 $32 = sp + 222032|0;
 $33 = sp + 22512|0;
 $34 = sp + 19296|0;
 $35 = sp + 16080|0;
 $36 = sp + 12864|0;
 $37 = sp + 9648|0;
 $38 = sp + 6432|0;
 $39 = sp + 3216|0;
 $40 = sp;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 _AddSub($8);
 _memcpy(($1|0),($8|0),3216)|0;
 _memcpy(($2|0),($1|0),3216)|0;
 (_getlex()|0);
 $41 = HEAP32[7954]|0;
 $42 = ($41|0)==(28);
 if ($42) {
  _Error(9000,$vararg_buffer);
 }
 $43 = HEAP32[7954]|0;
 $44 = ($43|0)!=(227);
 do {
  if (!($44)) {
   $45 = HEAP8[(31976)>>0]|0;
   $46 = $45 << 24 >> 24;
   $47 = ($46|0)!=(61);
   if ($47) {
    $48 = HEAP8[(31976)>>0]|0;
    $49 = $48 << 24 >> 24;
    $50 = ($49|0)!=(60);
    if ($50) {
     $51 = HEAP8[(31976)>>0]|0;
     $52 = $51 << 24 >> 24;
     $53 = ($52|0)!=(62);
     if ($53) {
      break;
     }
    }
   }
   $54 = HEAP8[(31976)>>0]|0;
   $5 = $54;
   (_getlex()|0);
   $55 = HEAP32[7954]|0;
   $56 = ($55|0)==(28);
   if ($56) {
    _Error(9000,$vararg_buffer2);
   }
   $57 = $5;
   $58 = $57 << 24 >> 24;
   L13: do {
    switch ($58|0) {
    case 61:  {
     $59 = HEAP32[7954]|0;
     $60 = ($59|0)==(227);
     if (!($60)) {
      _ungetlex();
      _AddSub($0);
      STACKTOP = sp;return;
     }
     $61 = HEAP8[(31976)>>0]|0;
     $62 = $61 << 24 >> 24;
     $cond1 = ($62|0)==(61);
     if (!($cond1)) {
      _Error(9152,$vararg_buffer13);
      break L13;
     }
     $63 = ((($1)) + 84|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)==(0);
     if ($65) {
      $66 = ((($1)) + 88|0);
      $67 = HEAP32[$66>>2]|0;
      _AddSub($9);
      $68 = ((($9)) + 88|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67|0)==($69|0);
      $71 = $70 ? 1 : 0;
      $72 = ((($2)) + 88|0);
      HEAP32[$72>>2] = $71;
      break L13;
     }
     $73 = ((($1)) + 84|0);
     $74 = HEAP32[$73>>2]|0;
     $75 = ($74|0)==(1);
     if ($75) {
      $76 = ((($1)) + 96|0);
      $77 = +HEAPF64[$76>>3];
      _AddSub($10);
      $78 = ((($10)) + 96|0);
      $79 = +HEAPF64[$78>>3];
      $80 = $77 == $79;
      $81 = $80 ? 1 : 0;
      $82 = ((($2)) + 88|0);
      HEAP32[$82>>2] = $81;
      break L13;
     }
     $83 = ((($1)) + 84|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==(3);
     if ($85) {
      _AddSub($11);
      _memcpy(($4|0),($11|0),3216)|0;
      $86 = ((($1)) + 104|0);
      $87 = ((($4)) + 104|0);
      $88 = (_strcmp($86,$87)|0);
      $89 = ($88|0)!=(0);
      $90 = ((($2)) + 88|0);
      if ($89) {
       HEAP32[$90>>2] = 0;
       break L13;
      } else {
       HEAP32[$90>>2] = 1;
       break L13;
      }
     }
     $91 = ((($1)) + 84|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($92|0)==(6);
     if ($93) {
      $94 = ((($1)) + 870|0);
      $95 = (_atoi($94)|0);
      $6 = $95;
      _AddSub($12);
      _memcpy(($3|0),($12|0),3216)|0;
      $96 = ((($3)) + 84|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($97|0)==(0);
      if ($98) {
       $99 = $6;
       _memcpy(($$byval_copy|0),($1|0),3216)|0;
       $100 = (_get_int_array($$byval_copy,$99)|0);
       $101 = ((($3)) + 88|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = ($100|0)==($102|0);
       $104 = $103 ? 1 : 0;
       $105 = ((($2)) + 88|0);
       HEAP32[$105>>2] = $104;
       break L13;
      }
      $106 = ((($3)) + 84|0);
      $107 = HEAP32[$106>>2]|0;
      $108 = ($107|0)==(6);
      if (!($108)) {
       break L13;
      }
      $109 = ((($3)) + 870|0);
      $110 = (_atoi($109)|0);
      $7 = $110;
      $111 = $6;
      _memcpy(($$byval_copy33|0),($1|0),3216)|0;
      $112 = (_get_int_array($$byval_copy33,$111)|0);
      $113 = $7;
      _memcpy(($$byval_copy34|0),($3|0),3216)|0;
      $114 = (_get_int_array($$byval_copy34,$113)|0);
      $115 = ($112|0)==($114|0);
      $116 = $115 ? 1 : 0;
      $117 = ((($2)) + 88|0);
      HEAP32[$117>>2] = $116;
      break L13;
     }
     $118 = ((($1)) + 84|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($119|0)==(7);
     if ($120) {
      $121 = ((($1)) + 870|0);
      $122 = (_atoi($121)|0);
      $6 = $122;
      _AddSub($13);
      _memcpy(($3|0),($13|0),3216)|0;
      $123 = ((($3)) + 84|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(1);
      if ($125) {
       $126 = $6;
       _memcpy(($$byval_copy35|0),($1|0),3216)|0;
       $127 = (+_get_dbl_array($$byval_copy35,$126));
       $128 = ((($3)) + 96|0);
       $129 = +HEAPF64[$128>>3];
       $130 = $127 == $129;
       $131 = $130 ? 1 : 0;
       $132 = ((($2)) + 88|0);
       HEAP32[$132>>2] = $131;
       break L13;
      }
      $133 = ((($3)) + 84|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ($134|0)==(7);
      if (!($135)) {
       break L13;
      }
      $136 = ((($3)) + 870|0);
      $137 = (_atoi($136)|0);
      $7 = $137;
      $138 = $6;
      _memcpy(($$byval_copy36|0),($1|0),3216)|0;
      $139 = (+_get_dbl_array($$byval_copy36,$138));
      $140 = $7;
      _memcpy(($$byval_copy37|0),($3|0),3216)|0;
      $141 = (+_get_dbl_array($$byval_copy37,$140));
      $142 = $139 == $141;
      $143 = $142 ? 1 : 0;
      $144 = ((($2)) + 88|0);
      HEAP32[$144>>2] = $143;
      break L13;
     }
     $145 = ((($1)) + 84|0);
     $146 = HEAP32[$145>>2]|0;
     $147 = ($146|0)==(8);
     if ($147) {
      $148 = ((($1)) + 870|0);
      $149 = (_atoi($148)|0);
      $6 = $149;
      _AddSub($14);
      _memcpy(($3|0),($14|0),3216)|0;
      $150 = ((($3)) + 84|0);
      $151 = HEAP32[$150>>2]|0;
      $152 = ($151|0)==(0);
      if (!($152)) {
       $153 = ((($3)) + 84|0);
       $154 = HEAP32[$153>>2]|0;
       $155 = ($154|0)==(3);
       if (!($155)) {
        $174 = ((($3)) + 84|0);
        $175 = HEAP32[$174>>2]|0;
        $176 = ($175|0)==(8);
        if (!($176)) {
         break L13;
        }
        $177 = ((($3)) + 870|0);
        $178 = (_atoi($177)|0);
        $7 = $178;
        $179 = ((($1)) + 412|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ((($3)) + 412|0);
        $182 = HEAP32[$181>>2]|0;
        $183 = ($180|0)==($182|0);
        $184 = $183 ? 1 : 0;
        $185 = ((($2)) + 88|0);
        HEAP32[$185>>2] = $184;
        break L13;
       }
      }
      _memset(((72140)|0),0,256)|0;
      $156 = ((($1)) + 720|0);
      (_strcpy((72140),$156)|0);
      $157 = ((($1)) + 412|0);
      $158 = HEAP32[$157>>2]|0;
      HEAP32[8086] = $158;
      $159 = HEAP32[8086]|0;
      $160 = ($159|0)<(0);
      if ($160) {
       (_printf(9043,$vararg_buffer4)|0);
       break L13;
      }
      $161 = HEAP32[8086]|0;
      HEAP32[17956] = $161;
      $162 = $6;
      HEAP32[(71828)>>2] = $162;
      _memcpy(($$byval_copy38|0),(71824|0),312)|0;
      $163 = (_string_findData($$byval_copy38)|0);
      HEAP32[8074] = $163;
      $164 = HEAP32[8074]|0;
      $165 = ($164|0)<(0);
      if ($165) {
       (_printf(9079,$vararg_buffer6)|0);
       break L13;
      } else {
       $166 = HEAP32[8074]|0;
       _string_getElement($15,$166);
       _memcpy((71824|0),($15|0),312)|0;
       HEAP32[$vararg_buffer8>>2] = (71832);
       (_printf(9117,$vararg_buffer8)|0);
       $167 = ((($3)) + 104|0);
       HEAP32[$vararg_buffer10>>2] = $167;
       (_printf(9134,$vararg_buffer10)|0);
       $168 = ((($3)) + 104|0);
       $169 = (_strcmp((71832),$168)|0);
       $170 = ($169|0)!=(0);
       $171 = $170 ^ 1;
       $172 = $171 ? 1 : 0;
       $173 = ((($2)) + 88|0);
       HEAP32[$173>>2] = $172;
       break L13;
      }
     }
     break;
    }
    case 62:  {
     $186 = HEAP32[7954]|0;
     $187 = ($186|0)==(227);
     if (!($187)) {
      _ungetlex();
      $264 = ((($1)) + 84|0);
      $265 = HEAP32[$264>>2]|0;
      $266 = ($265|0)==(0);
      if ($266) {
       $267 = ((($1)) + 88|0);
       $268 = HEAP32[$267>>2]|0;
       _AddSub($20);
       $269 = ((($20)) + 88|0);
       $270 = HEAP32[$269>>2]|0;
       $271 = ($268|0)>($270|0);
       $272 = $271 ? 1 : 0;
       $273 = ((($2)) + 88|0);
       HEAP32[$273>>2] = $272;
       break L13;
      }
      $274 = ((($1)) + 84|0);
      $275 = HEAP32[$274>>2]|0;
      $276 = ($275|0)==(1);
      if ($276) {
       $277 = ((($1)) + 96|0);
       $278 = +HEAPF64[$277>>3];
       _AddSub($21);
       $279 = ((($21)) + 96|0);
       $280 = +HEAPF64[$279>>3];
       $281 = $278 > $280;
       $282 = $281 ? 1 : 0;
       $283 = ((($2)) + 88|0);
       HEAP32[$283>>2] = $282;
       break L13;
      }
      $284 = ((($1)) + 84|0);
      $285 = HEAP32[$284>>2]|0;
      $286 = ($285|0)==(6);
      if ($286) {
       $287 = ((($1)) + 870|0);
       $288 = (_atoi($287)|0);
       $6 = $288;
       _AddSub($22);
       _memcpy(($3|0),($22|0),3216)|0;
       $289 = ((($3)) + 84|0);
       $290 = HEAP32[$289>>2]|0;
       $291 = ($290|0)==(0);
       if ($291) {
        $292 = $6;
        _memcpy(($$byval_copy45|0),($1|0),3216)|0;
        $293 = (_get_int_array($$byval_copy45,$292)|0);
        $294 = ((($3)) + 88|0);
        $295 = HEAP32[$294>>2]|0;
        $296 = ($293|0)>($295|0);
        $297 = $296 ? 1 : 0;
        $298 = ((($2)) + 88|0);
        HEAP32[$298>>2] = $297;
        break L13;
       }
       $299 = ((($3)) + 84|0);
       $300 = HEAP32[$299>>2]|0;
       $301 = ($300|0)==(6);
       if (!($301)) {
        break L13;
       }
       $302 = ((($3)) + 870|0);
       $303 = (_atoi($302)|0);
       $7 = $303;
       $304 = $6;
       _memcpy(($$byval_copy46|0),($1|0),3216)|0;
       $305 = (_get_int_array($$byval_copy46,$304)|0);
       $306 = $7;
       _memcpy(($$byval_copy47|0),($3|0),3216)|0;
       $307 = (_get_int_array($$byval_copy47,$306)|0);
       $308 = ($305|0)>($307|0);
       $309 = $308 ? 1 : 0;
       $310 = ((($2)) + 88|0);
       HEAP32[$310>>2] = $309;
       break L13;
      }
      $311 = ((($1)) + 84|0);
      $312 = HEAP32[$311>>2]|0;
      $313 = ($312|0)==(7);
      if (!($313)) {
       break L13;
      }
      $314 = ((($1)) + 870|0);
      $315 = (_atoi($314)|0);
      $6 = $315;
      _AddSub($23);
      _memcpy(($3|0),($23|0),3216)|0;
      $316 = ((($3)) + 84|0);
      $317 = HEAP32[$316>>2]|0;
      $318 = ($317|0)==(1);
      if ($318) {
       $319 = $6;
       _memcpy(($$byval_copy48|0),($1|0),3216)|0;
       $320 = (+_get_dbl_array($$byval_copy48,$319));
       $321 = ((($3)) + 96|0);
       $322 = +HEAPF64[$321>>3];
       $323 = $320 > $322;
       $324 = $323 ? 1 : 0;
       $325 = ((($2)) + 88|0);
       HEAP32[$325>>2] = $324;
       break L13;
      }
      $326 = ((($3)) + 84|0);
      $327 = HEAP32[$326>>2]|0;
      $328 = ($327|0)==(7);
      if (!($328)) {
       break L13;
      }
      $329 = ((($3)) + 870|0);
      $330 = (_atoi($329)|0);
      $7 = $330;
      $331 = $6;
      _memcpy(($$byval_copy49|0),($1|0),3216)|0;
      $332 = (+_get_dbl_array($$byval_copy49,$331));
      $333 = $7;
      _memcpy(($$byval_copy50|0),($3|0),3216)|0;
      $334 = (+_get_dbl_array($$byval_copy50,$333));
      $335 = $332 > $334;
      $336 = $335 ? 1 : 0;
      $337 = ((($2)) + 88|0);
      HEAP32[$337>>2] = $336;
      break L13;
     }
     $188 = HEAP8[(31976)>>0]|0;
     $189 = $188 << 24 >> 24;
     $cond = ($189|0)==(61);
     if (!($cond)) {
      _Error(9193,$vararg_buffer15);
      break L13;
     }
     $190 = ((($1)) + 84|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = ($191|0)==(0);
     if ($192) {
      $193 = ((($1)) + 88|0);
      $194 = HEAP32[$193>>2]|0;
      _AddSub($16);
      $195 = ((($16)) + 88|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($194|0)>=($196|0);
      $198 = $197 ? 1 : 0;
      $199 = ((($2)) + 88|0);
      HEAP32[$199>>2] = $198;
      break L13;
     }
     $200 = ((($1)) + 84|0);
     $201 = HEAP32[$200>>2]|0;
     $202 = ($201|0)==(1);
     if ($202) {
      $203 = ((($1)) + 96|0);
      $204 = +HEAPF64[$203>>3];
      _AddSub($17);
      $205 = ((($17)) + 96|0);
      $206 = +HEAPF64[$205>>3];
      $207 = $204 >= $206;
      $208 = $207 ? 1 : 0;
      $209 = ((($2)) + 88|0);
      HEAP32[$209>>2] = $208;
      break L13;
     }
     $210 = ((($1)) + 84|0);
     $211 = HEAP32[$210>>2]|0;
     $212 = ($211|0)==(6);
     if ($212) {
      $213 = ((($1)) + 870|0);
      $214 = (_atoi($213)|0);
      $6 = $214;
      _AddSub($18);
      _memcpy(($3|0),($18|0),3216)|0;
      $215 = ((($3)) + 84|0);
      $216 = HEAP32[$215>>2]|0;
      $217 = ($216|0)==(0);
      if ($217) {
       $218 = $6;
       _memcpy(($$byval_copy39|0),($1|0),3216)|0;
       $219 = (_get_int_array($$byval_copy39,$218)|0);
       $220 = ((($3)) + 88|0);
       $221 = HEAP32[$220>>2]|0;
       $222 = ($219|0)>=($221|0);
       $223 = $222 ? 1 : 0;
       $224 = ((($2)) + 88|0);
       HEAP32[$224>>2] = $223;
       break L13;
      }
      $225 = ((($3)) + 84|0);
      $226 = HEAP32[$225>>2]|0;
      $227 = ($226|0)==(6);
      if (!($227)) {
       break L13;
      }
      $228 = ((($3)) + 870|0);
      $229 = (_atoi($228)|0);
      $7 = $229;
      $230 = $6;
      _memcpy(($$byval_copy40|0),($1|0),3216)|0;
      $231 = (_get_int_array($$byval_copy40,$230)|0);
      $232 = $7;
      _memcpy(($$byval_copy41|0),($3|0),3216)|0;
      $233 = (_get_int_array($$byval_copy41,$232)|0);
      $234 = ($231|0)>=($233|0);
      $235 = $234 ? 1 : 0;
      $236 = ((($2)) + 88|0);
      HEAP32[$236>>2] = $235;
      break L13;
     }
     $237 = ((($1)) + 84|0);
     $238 = HEAP32[$237>>2]|0;
     $239 = ($238|0)==(7);
     if ($239) {
      $240 = ((($1)) + 870|0);
      $241 = (_atoi($240)|0);
      $6 = $241;
      _AddSub($19);
      _memcpy(($3|0),($19|0),3216)|0;
      $242 = ((($3)) + 84|0);
      $243 = HEAP32[$242>>2]|0;
      $244 = ($243|0)==(1);
      if ($244) {
       $245 = $6;
       _memcpy(($$byval_copy42|0),($1|0),3216)|0;
       $246 = (+_get_dbl_array($$byval_copy42,$245));
       $247 = ((($3)) + 96|0);
       $248 = +HEAPF64[$247>>3];
       $249 = $246 >= $248;
       $250 = $249 ? 1 : 0;
       $251 = ((($2)) + 88|0);
       HEAP32[$251>>2] = $250;
       break L13;
      }
      $252 = ((($3)) + 84|0);
      $253 = HEAP32[$252>>2]|0;
      $254 = ($253|0)==(7);
      if ($254) {
       $255 = ((($3)) + 870|0);
       $256 = (_atoi($255)|0);
       $7 = $256;
       $257 = $6;
       _memcpy(($$byval_copy43|0),($1|0),3216)|0;
       $258 = (+_get_dbl_array($$byval_copy43,$257));
       $259 = $7;
       _memcpy(($$byval_copy44|0),($3|0),3216)|0;
       $260 = (+_get_dbl_array($$byval_copy44,$259));
       $261 = $258 >= $260;
       $262 = $261 ? 1 : 0;
       $263 = ((($2)) + 88|0);
       HEAP32[$263>>2] = $262;
      }
     }
     break;
    }
    case 60:  {
     $338 = HEAP32[7954]|0;
     $339 = ($338|0)==(227);
     if (!($339)) {
      _ungetlex();
      $568 = ((($1)) + 84|0);
      $569 = HEAP32[$568>>2]|0;
      $570 = ($569|0)==(0);
      if ($570) {
       $571 = ((($1)) + 88|0);
       $572 = HEAP32[$571>>2]|0;
       _AddSub($37);
       $573 = ((($37)) + 88|0);
       $574 = HEAP32[$573>>2]|0;
       $575 = ($572|0)<($574|0);
       $576 = $575 ? 1 : 0;
       $577 = ((($2)) + 88|0);
       HEAP32[$577>>2] = $576;
       break L13;
      }
      $578 = ((($1)) + 84|0);
      $579 = HEAP32[$578>>2]|0;
      $580 = ($579|0)==(1);
      if ($580) {
       $581 = ((($1)) + 96|0);
       $582 = +HEAPF64[$581>>3];
       _AddSub($38);
       $583 = ((($38)) + 96|0);
       $584 = +HEAPF64[$583>>3];
       $585 = $582 < $584;
       $586 = $585 ? 1 : 0;
       $587 = ((($2)) + 88|0);
       HEAP32[$587>>2] = $586;
       break L13;
      }
      $588 = ((($1)) + 84|0);
      $589 = HEAP32[$588>>2]|0;
      $590 = ($589|0)==(6);
      if ($590) {
       $591 = ((($1)) + 870|0);
       $592 = (_atoi($591)|0);
       $6 = $592;
       _AddSub($39);
       _memcpy(($3|0),($39|0),3216)|0;
       $593 = ((($3)) + 84|0);
       $594 = HEAP32[$593>>2]|0;
       $595 = ($594|0)==(0);
       if ($595) {
        $596 = $6;
        _memcpy(($$byval_copy66|0),($1|0),3216)|0;
        $597 = (_get_int_array($$byval_copy66,$596)|0);
        $598 = ((($3)) + 88|0);
        $599 = HEAP32[$598>>2]|0;
        $600 = ($597|0)<($599|0);
        $601 = $600 ? 1 : 0;
        $602 = ((($2)) + 88|0);
        HEAP32[$602>>2] = $601;
        break L13;
       }
       $603 = ((($3)) + 84|0);
       $604 = HEAP32[$603>>2]|0;
       $605 = ($604|0)==(6);
       if (!($605)) {
        break L13;
       }
       $606 = ((($3)) + 870|0);
       $607 = (_atoi($606)|0);
       $7 = $607;
       $608 = $6;
       _memcpy(($$byval_copy67|0),($1|0),3216)|0;
       $609 = (_get_int_array($$byval_copy67,$608)|0);
       $610 = $7;
       _memcpy(($$byval_copy68|0),($3|0),3216)|0;
       $611 = (_get_int_array($$byval_copy68,$610)|0);
       $612 = ($609|0)<($611|0);
       $613 = $612 ? 1 : 0;
       $614 = ((($2)) + 88|0);
       HEAP32[$614>>2] = $613;
       break L13;
      }
      $615 = ((($1)) + 84|0);
      $616 = HEAP32[$615>>2]|0;
      $617 = ($616|0)==(7);
      if (!($617)) {
       break L13;
      }
      $618 = ((($1)) + 870|0);
      $619 = (_atoi($618)|0);
      $6 = $619;
      _AddSub($40);
      _memcpy(($3|0),($40|0),3216)|0;
      $620 = ((($3)) + 84|0);
      $621 = HEAP32[$620>>2]|0;
      $622 = ($621|0)==(1);
      if ($622) {
       $623 = $6;
       _memcpy(($$byval_copy69|0),($1|0),3216)|0;
       $624 = (+_get_dbl_array($$byval_copy69,$623));
       $625 = ((($3)) + 96|0);
       $626 = +HEAPF64[$625>>3];
       $627 = $624 < $626;
       $628 = $627 ? 1 : 0;
       $629 = ((($2)) + 88|0);
       HEAP32[$629>>2] = $628;
       break L13;
      }
      $630 = ((($3)) + 84|0);
      $631 = HEAP32[$630>>2]|0;
      $632 = ($631|0)==(7);
      if (!($632)) {
       break L13;
      }
      $633 = ((($3)) + 870|0);
      $634 = (_atoi($633)|0);
      $7 = $634;
      $635 = $6;
      _memcpy(($$byval_copy70|0),($1|0),3216)|0;
      $636 = (+_get_dbl_array($$byval_copy70,$635));
      $637 = $7;
      _memcpy(($$byval_copy71|0),($3|0),3216)|0;
      $638 = (+_get_dbl_array($$byval_copy71,$637));
      $639 = $636 < $638;
      $640 = $639 ? 1 : 0;
      $641 = ((($2)) + 88|0);
      HEAP32[$641>>2] = $640;
      break L13;
     }
     $340 = HEAP8[(31976)>>0]|0;
     $341 = $340 << 24 >> 24;
     switch ($341|0) {
     case 62:  {
      $342 = ((($1)) + 84|0);
      $343 = HEAP32[$342>>2]|0;
      $344 = ($343|0)==(0);
      if ($344) {
       $345 = ((($1)) + 88|0);
       $346 = HEAP32[$345>>2]|0;
       _AddSub($24);
       $347 = ((($24)) + 88|0);
       $348 = HEAP32[$347>>2]|0;
       $349 = ($346|0)!=($348|0);
       $350 = $349 ? 1 : 0;
       $351 = ((($2)) + 88|0);
       HEAP32[$351>>2] = $350;
       break L13;
      }
      $352 = ((($1)) + 84|0);
      $353 = HEAP32[$352>>2]|0;
      $354 = ($353|0)==(1);
      if ($354) {
       $355 = ((($1)) + 96|0);
       $356 = +HEAPF64[$355>>3];
       _AddSub($25);
       $357 = ((($25)) + 96|0);
       $358 = +HEAPF64[$357>>3];
       $359 = $356 != $358;
       $360 = $359 ? 1 : 0;
       $361 = ((($2)) + 88|0);
       HEAP32[$361>>2] = $360;
       break L13;
      }
      $362 = ((($1)) + 84|0);
      $363 = HEAP32[$362>>2]|0;
      $364 = ($363|0)==(3);
      if ($364) {
       _AddSub($26);
       _memcpy(($4|0),($26|0),3216)|0;
       $365 = ((($1)) + 104|0);
       $366 = ((($4)) + 104|0);
       $367 = (_strcmp($365,$366)|0);
       $368 = ($367|0)!=(0);
       $369 = $368 ? 1 : 0;
       $370 = ((($2)) + 88|0);
       HEAP32[$370>>2] = $369;
       break L13;
      }
      $371 = ((($1)) + 84|0);
      $372 = HEAP32[$371>>2]|0;
      $373 = ($372|0)==(42);
      if ($373) {
       break L13;
      }
      $374 = ((($1)) + 84|0);
      $375 = HEAP32[$374>>2]|0;
      $376 = ($375|0)==(43);
      if ($376) {
       break L13;
      }
      $377 = ((($1)) + 84|0);
      $378 = HEAP32[$377>>2]|0;
      $379 = ($378|0)==(44);
      if ($379) {
       break L13;
      }
      $380 = ((($1)) + 84|0);
      $381 = HEAP32[$380>>2]|0;
      $382 = ($381|0)==(6);
      if ($382) {
       $383 = ((($1)) + 870|0);
       $384 = (_atoi($383)|0);
       $6 = $384;
       _AddSub($27);
       _memcpy(($3|0),($27|0),3216)|0;
       $385 = ((($3)) + 84|0);
       $386 = HEAP32[$385>>2]|0;
       $387 = ($386|0)==(0);
       if ($387) {
        $388 = $6;
        _memcpy(($$byval_copy51|0),($1|0),3216)|0;
        $389 = (_get_int_array($$byval_copy51,$388)|0);
        $390 = ((($3)) + 88|0);
        $391 = HEAP32[$390>>2]|0;
        $392 = ($389|0)!=($391|0);
        $393 = $392 ? 1 : 0;
        $394 = ((($2)) + 88|0);
        HEAP32[$394>>2] = $393;
        break L13;
       }
       $395 = ((($3)) + 84|0);
       $396 = HEAP32[$395>>2]|0;
       $397 = ($396|0)==(6);
       if (!($397)) {
        break L13;
       }
       $398 = ((($3)) + 870|0);
       $399 = (_atoi($398)|0);
       $7 = $399;
       $400 = $6;
       _memcpy(($$byval_copy52|0),($1|0),3216)|0;
       $401 = (_get_int_array($$byval_copy52,$400)|0);
       $402 = $7;
       _memcpy(($$byval_copy53|0),($3|0),3216)|0;
       $403 = (_get_int_array($$byval_copy53,$402)|0);
       $404 = ($401|0)!=($403|0);
       $405 = $404 ? 1 : 0;
       $406 = ((($2)) + 88|0);
       HEAP32[$406>>2] = $405;
       break L13;
      }
      $407 = ((($1)) + 84|0);
      $408 = HEAP32[$407>>2]|0;
      $409 = ($408|0)==(7);
      if ($409) {
       $410 = ((($1)) + 870|0);
       $411 = (_atoi($410)|0);
       $6 = $411;
       _AddSub($28);
       _memcpy(($3|0),($28|0),3216)|0;
       $412 = ((($3)) + 84|0);
       $413 = HEAP32[$412>>2]|0;
       $414 = ($413|0)==(1);
       if ($414) {
        $415 = $6;
        _memcpy(($$byval_copy54|0),($1|0),3216)|0;
        $416 = (+_get_dbl_array($$byval_copy54,$415));
        $417 = ((($3)) + 96|0);
        $418 = +HEAPF64[$417>>3];
        $419 = $416 != $418;
        $420 = $419 ? 1 : 0;
        $421 = ((($2)) + 88|0);
        HEAP32[$421>>2] = $420;
        break L13;
       }
       $422 = ((($3)) + 84|0);
       $423 = HEAP32[$422>>2]|0;
       $424 = ($423|0)==(7);
       if (!($424)) {
        break L13;
       }
       $425 = ((($3)) + 870|0);
       $426 = (_atoi($425)|0);
       $7 = $426;
       $427 = $6;
       _memcpy(($$byval_copy55|0),($1|0),3216)|0;
       $428 = (+_get_dbl_array($$byval_copy55,$427));
       $429 = $7;
       _memcpy(($$byval_copy56|0),($3|0),3216)|0;
       $430 = (+_get_dbl_array($$byval_copy56,$429));
       $431 = $428 != $430;
       $432 = $431 ? 1 : 0;
       $433 = ((($2)) + 88|0);
       HEAP32[$433>>2] = $432;
       break L13;
      }
      $434 = ((($1)) + 84|0);
      $435 = HEAP32[$434>>2]|0;
      $436 = ($435|0)==(8);
      if (!($436)) {
       break L13;
      }
      $437 = ((($1)) + 870|0);
      $438 = (_atoi($437)|0);
      $6 = $438;
      _AddSub($29);
      _memcpy(($3|0),($29|0),3216)|0;
      $439 = ((($3)) + 84|0);
      $440 = HEAP32[$439>>2]|0;
      $441 = ($440|0)==(0);
      if (!($441)) {
       $442 = ((($3)) + 84|0);
       $443 = HEAP32[$442>>2]|0;
       $444 = ($443|0)==(3);
       if (!($444)) {
        $462 = ((($3)) + 84|0);
        $463 = HEAP32[$462>>2]|0;
        $464 = ($463|0)==(8);
        if (!($464)) {
         break L13;
        }
        $465 = ((($3)) + 870|0);
        $466 = (_atoi($465)|0);
        $7 = $466;
        _memset(((72140)|0),0,256)|0;
        $467 = ((($1)) + 720|0);
        (_strcpy((72140),$467)|0);
        $468 = ((($1)) + 412|0);
        $469 = HEAP32[$468>>2]|0;
        HEAP32[8086] = $469;
        $470 = HEAP32[8086]|0;
        $471 = ($470|0)<(0);
        do {
         if ($471) {
          (_printf(9308,$vararg_buffer21)|0);
         } else {
          $472 = HEAP32[8086]|0;
          HEAP32[17956] = $472;
          $473 = $6;
          HEAP32[(71828)>>2] = $473;
          _memcpy(($$byval_copy58|0),(71824|0),312)|0;
          $474 = (_string_findData($$byval_copy58)|0);
          HEAP32[8074] = $474;
          $475 = HEAP32[8074]|0;
          $476 = ($475|0)<(0);
          if ($476) {
           (_printf(9345,$vararg_buffer23)|0);
           break;
          } else {
           $477 = HEAP32[8074]|0;
           _string_getElement($31,$477);
           _memcpy((71824|0),($31|0),312)|0;
           break;
          }
         }
        } while(0);
        _memset(((72716)|0),0,256)|0;
        $478 = ((($3)) + 720|0);
        (_strcpy((72716),$478)|0);
        $479 = ((($3)) + 412|0);
        $480 = HEAP32[$479>>2]|0;
        HEAP32[8086] = $480;
        $481 = HEAP32[8086]|0;
        $482 = ($481|0)<(0);
        if ($482) {
         (_printf(9384,$vararg_buffer25)|0);
         break L13;
        }
        $483 = HEAP32[8086]|0;
        HEAP32[18100] = $483;
        $484 = $7;
        HEAP32[(72404)>>2] = $484;
        _memcpy(($$byval_copy59|0),(72400|0),312)|0;
        $485 = (_string_findData($$byval_copy59)|0);
        HEAP32[8074] = $485;
        $486 = HEAP32[8074]|0;
        $487 = ($486|0)<(0);
        if ($487) {
         (_printf(9421,$vararg_buffer27)|0);
         break L13;
        } else {
         $488 = HEAP32[8074]|0;
         _string_getElement($32,$488);
         _memcpy((72400|0),($32|0),312)|0;
         $489 = (_strcmp((71832),(72408))|0);
         $490 = ($489|0)!=(0);
         $491 = $490 ^ 1;
         $492 = $491 ? 1 : 0;
         $493 = ((($2)) + 88|0);
         HEAP32[$493>>2] = $492;
         break L13;
        }
       }
      }
      _memset(((72140)|0),0,256)|0;
      $445 = ((($1)) + 720|0);
      (_strcpy((72140),$445)|0);
      $446 = ((($1)) + 412|0);
      $447 = HEAP32[$446>>2]|0;
      HEAP32[8086] = $447;
      $448 = HEAP32[8086]|0;
      $449 = ($448|0)<(0);
      if ($449) {
       (_printf(9234,$vararg_buffer17)|0);
       break L13;
      }
      $450 = HEAP32[8086]|0;
      HEAP32[17956] = $450;
      $451 = $6;
      HEAP32[(71828)>>2] = $451;
      _memcpy(($$byval_copy57|0),(71824|0),312)|0;
      $452 = (_string_findData($$byval_copy57)|0);
      HEAP32[8074] = $452;
      $453 = HEAP32[8074]|0;
      $454 = ($453|0)<(0);
      if ($454) {
       (_printf(9270,$vararg_buffer19)|0);
       break L13;
      } else {
       $455 = HEAP32[8074]|0;
       _string_getElement($30,$455);
       _memcpy((71824|0),($30|0),312)|0;
       $456 = ((($3)) + 104|0);
       $457 = (_strcmp((71832),$456)|0);
       $458 = ($457|0)!=(0);
       $459 = $458 ^ 1;
       $460 = $459 ? 1 : 0;
       $461 = ((($2)) + 88|0);
       HEAP32[$461>>2] = $460;
       break L13;
      }
      break;
     }
     case 61:  {
      $494 = ((($1)) + 84|0);
      $495 = HEAP32[$494>>2]|0;
      $496 = ($495|0)==(0);
      if ($496) {
       $497 = ((($1)) + 88|0);
       $498 = HEAP32[$497>>2]|0;
       _AddSub($33);
       $499 = ((($33)) + 88|0);
       $500 = HEAP32[$499>>2]|0;
       $501 = ($498|0)<=($500|0);
       $502 = $501 ? 1 : 0;
       $503 = ((($2)) + 88|0);
       HEAP32[$503>>2] = $502;
       break L13;
      }
      $504 = ((($1)) + 84|0);
      $505 = HEAP32[$504>>2]|0;
      $506 = ($505|0)==(1);
      if ($506) {
       $507 = ((($1)) + 96|0);
       $508 = +HEAPF64[$507>>3];
       _AddSub($34);
       $509 = ((($34)) + 96|0);
       $510 = +HEAPF64[$509>>3];
       $511 = $508 <= $510;
       $512 = $511 ? 1 : 0;
       $513 = ((($2)) + 88|0);
       HEAP32[$513>>2] = $512;
       break L13;
      }
      $514 = ((($1)) + 84|0);
      $515 = HEAP32[$514>>2]|0;
      $516 = ($515|0)==(6);
      if ($516) {
       $517 = ((($1)) + 870|0);
       $518 = (_atoi($517)|0);
       $6 = $518;
       _AddSub($35);
       _memcpy(($3|0),($35|0),3216)|0;
       $519 = ((($3)) + 84|0);
       $520 = HEAP32[$519>>2]|0;
       $521 = ($520|0)==(0);
       if ($521) {
        $522 = $6;
        _memcpy(($$byval_copy60|0),($1|0),3216)|0;
        $523 = (_get_int_array($$byval_copy60,$522)|0);
        $524 = ((($3)) + 88|0);
        $525 = HEAP32[$524>>2]|0;
        $526 = ($523|0)<=($525|0);
        $527 = $526 ? 1 : 0;
        $528 = ((($2)) + 88|0);
        HEAP32[$528>>2] = $527;
        break L13;
       }
       $529 = ((($3)) + 84|0);
       $530 = HEAP32[$529>>2]|0;
       $531 = ($530|0)==(6);
       if (!($531)) {
        break L13;
       }
       $532 = ((($3)) + 870|0);
       $533 = (_atoi($532)|0);
       $7 = $533;
       $534 = $6;
       _memcpy(($$byval_copy61|0),($1|0),3216)|0;
       $535 = (_get_int_array($$byval_copy61,$534)|0);
       $536 = $7;
       _memcpy(($$byval_copy62|0),($3|0),3216)|0;
       $537 = (_get_int_array($$byval_copy62,$536)|0);
       $538 = ($535|0)<=($537|0);
       $539 = $538 ? 1 : 0;
       $540 = ((($2)) + 88|0);
       HEAP32[$540>>2] = $539;
       break L13;
      }
      $541 = ((($1)) + 84|0);
      $542 = HEAP32[$541>>2]|0;
      $543 = ($542|0)==(7);
      if (!($543)) {
       break L13;
      }
      $544 = ((($1)) + 870|0);
      $545 = (_atoi($544)|0);
      $6 = $545;
      _AddSub($36);
      _memcpy(($3|0),($36|0),3216)|0;
      $546 = ((($3)) + 84|0);
      $547 = HEAP32[$546>>2]|0;
      $548 = ($547|0)==(1);
      if ($548) {
       $549 = $6;
       _memcpy(($$byval_copy63|0),($1|0),3216)|0;
       $550 = (+_get_dbl_array($$byval_copy63,$549));
       $551 = ((($3)) + 96|0);
       $552 = +HEAPF64[$551>>3];
       $553 = $550 <= $552;
       $554 = $553 ? 1 : 0;
       $555 = ((($2)) + 88|0);
       HEAP32[$555>>2] = $554;
       break L13;
      }
      $556 = ((($3)) + 84|0);
      $557 = HEAP32[$556>>2]|0;
      $558 = ($557|0)==(7);
      if (!($558)) {
       break L13;
      }
      $559 = ((($3)) + 870|0);
      $560 = (_atoi($559)|0);
      $7 = $560;
      $561 = $6;
      _memcpy(($$byval_copy64|0),($1|0),3216)|0;
      $562 = (+_get_dbl_array($$byval_copy64,$561));
      $563 = $7;
      _memcpy(($$byval_copy65|0),($3|0),3216)|0;
      $564 = (+_get_dbl_array($$byval_copy65,$563));
      $565 = $562 <= $564;
      $566 = $565 ? 1 : 0;
      $567 = ((($2)) + 88|0);
      HEAP32[$567>>2] = $566;
      break L13;
      break;
     }
     default: {
      _Error(9460,$vararg_buffer29);
      break L13;
     }
     }
     break;
    }
    default: {
     _Error(9510,$vararg_buffer31);
    }
    }
   } while(0);
   _memcpy(($0|0),($2|0),3216)|0;
   STACKTOP = sp;return;
  }
 } while(0);
 _ungetlex();
 _memcpy(($0|0),($2|0),3216)|0;
 STACKTOP = sp;return;
}
function _Ping_ux($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy35 = 0, $$byval_copy36 = 0, $$byval_copy37 = 0, $$byval_copy38 = 0, $$byval_copy39 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer23 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer6 = 0, $vararg_ptr10 = 0, $vararg_ptr20 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0;
 var $vararg_ptr27 = 0, $vararg_ptr28 = 0, $vararg_ptr32 = 0, $vararg_ptr4 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1520|0);
 $$byval_copy39 = sp + 216|0;
 $$byval_copy38 = sp + 212|0;
 $$byval_copy37 = sp + 208|0;
 $$byval_copy36 = sp + 192|0;
 $$byval_copy35 = sp + 188|0;
 $$byval_copy = sp + 184|0;
 $vararg_buffer33 = sp + 96|0;
 $vararg_buffer29 = sp + 88|0;
 $vararg_buffer23 = sp + 72|0;
 $vararg_buffer17 = sp + 56|0;
 $vararg_buffer14 = sp + 48|0;
 $vararg_buffer11 = sp + 40|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $9 = sp + 144|0;
 $10 = sp + 128|0;
 $13 = sp + 1504|0;
 $16 = sp + 480|0;
 $18 = sp + 224|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $19 = 0;
 $20 = (_socket(2,3,1)|0);
 $7 = $20;
 $21 = $7;
 $22 = ($21|0)<(0);
 if ($22) {
  _ReportError(9547);
  $3 = 0;
  $82 = $3;
  STACKTOP = sp;return ($82|0);
 }
 $23 = $4;
 $24 = (_gethostbyname(($23|0))|0);
 $8 = $24;
 $25 = $8;
 $26 = ($25|0)==(0|0);
 if ($26) {
  $27 = HEAP32[35]|0;
  $28 = $4;
  HEAP32[$vararg_buffer>>2] = $28;
  (_fprintf($27,9572,$vararg_buffer)|0);
  $3 = 0;
  $82 = $3;
  STACKTOP = sp;return ($82|0);
 }
 $29 = $4;
 $30 = (_inet_addr(($29|0))|0);
 $31 = ((($9)) + 4|0);
 HEAP32[$31>>2] = $30;
 HEAP16[$9>>1] = 2;
 $32 = ((($9)) + 2|0);
 HEAP16[$32>>1] = 0;
 $33 = $4;
 $34 = ((($9)) + 4|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$34>>2]|0;
 $35 = (_inet_ntoa($$byval_copy)|0);
 HEAP32[$vararg_buffer1>>2] = $33;
 $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
 HEAP32[$vararg_ptr4>>2] = $35;
 $vararg_ptr5 = ((($vararg_buffer1)) + 8|0);
 HEAP32[$vararg_ptr5>>2] = 32;
 (_sprintf($16,9599,$vararg_buffer1)|0);
 $36 = $4;
 $37 = ((($9)) + 4|0);
 ;HEAP32[$$byval_copy35>>2]=HEAP32[$37>>2]|0;
 $38 = (_inet_ntoa($$byval_copy35)|0);
 HEAP32[$vararg_buffer6>>2] = $36;
 $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
 HEAP32[$vararg_ptr9>>2] = $38;
 $vararg_ptr10 = ((($vararg_buffer6)) + 8|0);
 HEAP32[$vararg_ptr10>>2] = 32;
 (_printf(9633,$vararg_buffer6)|0);
 $14 = 0;
 while(1) {
  $39 = $14;
  $40 = $5;
  $41 = ($39|0)<($40|0);
  if (!($41)) {
   break;
  }
  $42 = $7;
  ;HEAP32[$$byval_copy36>>2]=HEAP32[$9>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$$byval_copy36+12>>2]=HEAP32[$9+12>>2]|0;
  (_SendEchoRequest($42,$$byval_copy36)|0);
  $43 = $7;
  $44 = $6;
  $45 = (_WaitForEchoReply($43,$44)|0);
  $15 = $45;
  $46 = $15;
  $47 = ($46|0)<(0);
  do {
   if ($47) {
    _ReportError(9670);
    $19 = 1;
   } else {
    $48 = $15;
    $49 = ($48|0)!=(0);
    if (!($49)) {
     $50 = HEAP32[35]|0;
     $51 = $4;
     HEAP32[$vararg_buffer11>>2] = $51;
     (_fprintf($50,9684,$vararg_buffer11)|0);
     $19 = 1;
     break;
    }
    $52 = $7;
    $53 = (_RecvEchoReply($52,$10,$13)|0);
    $11 = $53;
    $54 = (_time((0|0))|0);
    $17 = $54;
    $55 = $17;
    $56 = $11;
    $57 = (($55) - ($56))|0;
    $12 = $57;
    _memset(($18|0),0,256)|0;
    $58 = ((($10)) + 4|0);
    ;HEAP32[$$byval_copy37>>2]=HEAP32[$58>>2]|0;
    $59 = (_inet_ntoa($$byval_copy37)|0);
    HEAP32[$vararg_buffer14>>2] = $59;
    (_sprintf($18,19231,$vararg_buffer14)|0);
    $60 = $4;
    $61 = (_strcmp($18,$60)|0);
    $62 = ($61|0)!=(0);
    if ($62) {
     $73 = $4;
     HEAP32[$vararg_buffer29>>2] = $18;
     $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
     HEAP32[$vararg_ptr32>>2] = $73;
     (_printf(9783,$vararg_buffer29)|0);
     $19 = 1;
     break;
    } else {
     $63 = ((($10)) + 4|0);
     ;HEAP32[$$byval_copy38>>2]=HEAP32[$63>>2]|0;
     $64 = (_inet_ntoa($$byval_copy38)|0);
     $65 = $12;
     $66 = HEAP8[$13>>0]|0;
     $67 = $66&255;
     HEAP32[$vararg_buffer17>>2] = $64;
     $vararg_ptr20 = ((($vararg_buffer17)) + 4|0);
     HEAP32[$vararg_ptr20>>2] = 32;
     $vararg_ptr21 = ((($vararg_buffer17)) + 8|0);
     HEAP32[$vararg_ptr21>>2] = $65;
     $vararg_ptr22 = ((($vararg_buffer17)) + 12|0);
     HEAP32[$vararg_ptr22>>2] = $67;
     (_sprintf($16,9696,$vararg_buffer17)|0);
     $68 = ((($10)) + 4|0);
     ;HEAP32[$$byval_copy39>>2]=HEAP32[$68>>2]|0;
     $69 = (_inet_ntoa($$byval_copy39)|0);
     $70 = $12;
     $71 = HEAP8[$13>>0]|0;
     $72 = $71&255;
     HEAP32[$vararg_buffer23>>2] = $69;
     $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
     HEAP32[$vararg_ptr26>>2] = 32;
     $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
     HEAP32[$vararg_ptr27>>2] = $70;
     $vararg_ptr28 = ((($vararg_buffer23)) + 12|0);
     HEAP32[$vararg_ptr28>>2] = $72;
     (_printf(9739,$vararg_buffer23)|0);
     break;
    }
   }
  } while(0);
  $74 = $14;
  $75 = (($74) + 1)|0;
  $14 = $75;
 }
 (_printf(28210,$vararg_buffer33)|0);
 $76 = $7;
 $77 = (_close($76)|0);
 $15 = $77;
 $78 = $15;
 $79 = ($78|0)<(0);
 if ($79) {
  _ReportError(9828);
  $3 = 0;
  $82 = $3;
  STACKTOP = sp;return ($82|0);
 }
 $80 = $19;
 $81 = ($80|0)==(1);
 if ($81) {
  $3 = 0;
  $82 = $3;
  STACKTOP = sp;return ($82|0);
 } else {
  $3 = 1;
  $82 = $3;
  STACKTOP = sp;return ($82|0);
 }
 return (0)|0;
}
function _ReportError($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = $0;
 $2 = 1358125;
 $3 = HEAP32[35]|0;
 $4 = $1;
 HEAP32[$vararg_buffer>>2] = $4;
 (_fprintf($3,9862,$vararg_buffer)|0);
 $5 = $2;
 $6 = $1;
 HEAP32[$vararg_buffer1>>2] = $6;
 (_sprintf($5,9878,$vararg_buffer1)|0);
 STACKTOP = sp;return;
}
function _SendEchoRequest($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = 0;
 HEAP8[128980] = 8;
 HEAP8[(128981)>>0] = 0;
 HEAP8[(128982)>>0]=0&255;HEAP8[(128982)+1>>0]=0>>8;
 $5 = HEAP32[2]|0;
 $6 = (($5) + 1)|0;
 HEAP32[2] = $6;
 $7 = $5&65535;
 HEAP8[(128984)>>0]=$7&255;HEAP8[(128984)+1>>0]=$7>>8;
 $8 = HEAP32[3]|0;
 $9 = (($8) + 1)|0;
 HEAP32[3] = $9;
 $10 = $8&65535;
 HEAP8[(128986)>>0]=$10&255;HEAP8[(128986)+1>>0]=$10>>8;
 $3 = 0;
 while(1) {
  $11 = $3;
  $12 = ($11|0)<(32);
  if (!($12)) {
   break;
  }
  $13 = $3;
  $14 = (32 + ($13))|0;
  $15 = $14&255;
  $16 = $3;
  $17 = ((128993) + ($16)|0);
  HEAP8[$17>>0] = $15;
  $18 = $3;
  $19 = (($18) + 1)|0;
  $3 = $19;
 }
 $20 = (_time((0|0))|0);
 $4 = $20;
 $21 = $4;
 HEAP8[(128989)>>0]=$21&255;HEAP8[(128989)+1>>0]=($21>>8)&255;HEAP8[(128989)+2>>0]=($21>>16)&255;HEAP8[(128989)+3>>0]=$21>>24;
 $22 = (_in_cksum(128980,45)|0);
 HEAP8[(128982)>>0]=$22&255;HEAP8[(128982)+1>>0]=$22>>8;
 $23 = $2;
 $24 = (_sendto($23,128980,45,0,$1,16)|0);
 $3 = $24;
 $25 = $3;
 $26 = ($25|0)<(0);
 if (!($26)) {
  $27 = $3;
  STACKTOP = sp;return ($27|0);
 }
 _ReportError(9853);
 $27 = $3;
 STACKTOP = sp;return ($27|0);
}
function _WaitForEchoReply($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(288|0);
 $4 = sp + 264|0;
 $5 = sp + 136|0;
 $6 = sp + 8|0;
 $2 = $0;
 $3 = $1;
 $8 = $5;
 $7 = 32;
 while(1) {
  $9 = $7;
  $10 = ($9|0)!=(0);
  if (!($10)) {
   break;
  }
  $11 = $8;
  $12 = ((($11)) + 4|0);
  $8 = $12;
  HEAP32[$11>>2] = 0;
  $13 = $7;
  $14 = (($13) + -1)|0;
  $7 = $14;
 }
 $15 = $2;
 $16 = (($15>>>0) % 32)&-1;
 $17 = 1 << $16;
 $18 = $2;
 $19 = (($18>>>0) / 32)&-1;
 $20 = (($5) + ($19<<2)|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = $21 | $17;
 HEAP32[$20>>2] = $22;
 dest=$6; src=$5; stop=dest+128|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $23 = $3;
 HEAP32[$4>>2] = $23;
 $24 = ((($4)) + 4|0);
 HEAP32[$24>>2] = 0;
 $25 = (_select(1024,$6,0,0,$4)|0);
 STACKTOP = sp;return ($25|0);
}
function _RecvEchoReply($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 384|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(384|0);
 $$byval_copy = sp + 44|0;
 $6 = sp + 48|0;
 $9 = sp + 8|0;
 $10 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $7 = 0;
 $8 = 0;
 HEAP32[$10>>2] = 16;
 $11 = $3;
 $12 = (_recvfrom($11,$6,321,0,$9,$10)|0);
 $7 = $12;
 $13 = $7;
 $14 = ($13|0)<(0);
 if ($14) {
  _ReportError(9842);
 }
 $15 = ((($9)) + 4|0);
 ;HEAP32[$$byval_copy>>2]=HEAP32[$15>>2]|0;
 $16 = (_inet_ntoa($$byval_copy)|0);
 $8 = $16;
 $17 = $4;
 ;HEAP32[$17>>2]=HEAP32[$9>>2]|0;HEAP32[$17+4>>2]=HEAP32[$9+4>>2]|0;HEAP32[$17+8>>2]=HEAP32[$9+8>>2]|0;HEAP32[$17+12>>2]=HEAP32[$9+12>>2]|0;
 $18 = ((($6)) + 8|0);
 $19 = HEAP8[$18>>0]|0;
 $20 = $5;
 HEAP8[$20>>0] = $19;
 $21 = ((($6)) + 20|0);
 $22 = ((($21)) + 9|0);
 $23 = HEAPU8[$22>>0]|(HEAPU8[$22+1>>0]<<8)|(HEAPU8[$22+2>>0]<<16)|(HEAPU8[$22+3>>0]<<24);
 STACKTOP = sp;return ($23|0);
}
function _in_cksum($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $8 = sp + 20|0;
 $2 = $0;
 $3 = $1;
 $9 = $3;
 $4 = $9;
 $10 = $2;
 $5 = $10;
 $7 = 0;
 while(1) {
  $11 = $4;
  $12 = ($11|0)>(1);
  if (!($12)) {
   break;
  }
  $13 = $5;
  $14 = ((($13)) + 2|0);
  $5 = $14;
  $15 = HEAP16[$13>>1]|0;
  $16 = $15&65535;
  $17 = $7;
  $18 = (($17) + ($16))|0;
  $7 = $18;
  $19 = $4;
  $20 = (($19) - 2)|0;
  $4 = $20;
 }
 $21 = $4;
 $22 = ($21|0)==(1);
 if ($22) {
  HEAP16[$8>>1] = 0;
  $23 = $5;
  $24 = HEAP8[$23>>0]|0;
  HEAP8[$8>>0] = $24;
  $25 = HEAP16[$8>>1]|0;
  $26 = $25&65535;
  $27 = $7;
  $28 = (($27) + ($26))|0;
  $7 = $28;
 }
 $29 = $7;
 $30 = $29 >> 16;
 $31 = $7;
 $32 = $31 & 65535;
 $33 = (($30) + ($32))|0;
 $7 = $33;
 $34 = $7;
 $35 = $34 >> 16;
 $36 = $7;
 $37 = (($36) + ($35))|0;
 $7 = $37;
 $38 = $7;
 $39 = $38 ^ -1;
 $40 = $39&65535;
 $6 = $40;
 $41 = $6;
 STACKTOP = sp;return ($41|0);
}
function _interpretIndexParam($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy11 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 19680|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(19680|0);
 $$byval_copy11 = sp + 16128|0;
 $$byval_copy = sp + 12912|0;
 $vararg_buffer9 = sp + 12904|0;
 $vararg_buffer7 = sp + 12896|0;
 $vararg_buffer5 = sp + 12888|0;
 $vararg_buffer3 = sp + 12880|0;
 $vararg_buffer1 = sp + 12872|0;
 $vararg_buffer = sp + 12864|0;
 $9 = sp + 9648|0;
 $10 = sp + 6432|0;
 $11 = sp + 19372|0;
 $16 = sp + 3216|0;
 $17 = sp;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $12 = 0;
 $13 = 0;
 $14 = 0;
 _memset(($11|0),0,300)|0;
 _memset(($9|0),0,3216)|0;
 _memset(($10|0),0,3216)|0;
 $15 = 0;
 $18 = HEAP32[(73792)>>2]|0;
 $15 = $18;
 HEAP32[18446] = 0;
 HEAP32[(73788)>>2] = 0;
 $19 = $5;
 HEAP32[(73792)>>2] = $19;
 (_getlex()|0);
 (_getlex()|0);
 $20 = (_strncmp((31976),19229,1)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $22 = ((($10)) + 4|0);
  $23 = HEAP32[$22>>2]|0;
  $24 = ($23|0)!=(0|0);
  if ($24) {
   $25 = ((($10)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   _free($26);
  }
  $27 = ((($10)) + 8|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = ($28|0)!=(0|0);
  if ($29) {
   $30 = ((($10)) + 8|0);
   $31 = HEAP32[$30>>2]|0;
   _free($31);
  }
  $32 = HEAP32[$10>>2]|0;
  $33 = ($32|0)!=(0|0);
  if ($33) {
   $34 = HEAP32[$10>>2]|0;
   _free($34);
  }
  $35 = $15;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $15;
   _free($37);
  }
  _memcpy(($0|0),($9|0),3216)|0;
  STACKTOP = sp;return;
 }
 _ungetlex();
 (_getlex()|0);
 $38 = HEAP32[7954]|0;
 $39 = ($38|0)==(224);
 if ($39) {
  _memset(($11|0),0,300)|0;
  (_strcpy($11,(31976))|0);
  $40 = HEAP32[8088]|0;
  _memcpy(($$byval_copy|0),($9|0),3216)|0;
  _ValLabel($16,$11,$40,$$byval_copy,232);
  _memcpy(($9|0),($16|0),3216)|0;
 } else {
  _Error(9893,$vararg_buffer);
 }
 (_getlex()|0);
 $41 = HEAP32[7954]|0;
 $42 = ($41|0)==(227);
 if ($42) {
  $43 = HEAP8[(31976)>>0]|0;
  $44 = $43 << 24 >> 24;
  $45 = ($44|0)!=(125);
  if ($45) {
   $46 = HEAP8[(31976)>>0]|0;
   $12 = $46;
  } else {
   label = 17;
  }
 } else {
  label = 17;
 }
 do {
  if ((label|0) == 17) {
   $47 = HEAP32[7954]|0;
   $48 = ($47|0)==(227);
   if ($48) {
    $49 = HEAP8[(31976)>>0]|0;
    $50 = $49 << 24 >> 24;
    $51 = ($50|0)==(125);
    if ($51) {
     $12 = 125;
     break;
    }
   }
   _Error(9893,$vararg_buffer1);
  }
 } while(0);
 $52 = $12;
 $53 = $52 << 24 >> 24;
 $54 = ($53|0)!=(125);
 do {
  if ($54) {
   (_getlex()|0);
   $55 = HEAP32[7954]|0;
   $56 = ($55|0)==(224);
   do {
    if ($56) {
     _memset(($11|0),0,300)|0;
     (_strcpy($11,(31976))|0);
     $57 = HEAP32[8088]|0;
     _memcpy(($$byval_copy11|0),($10|0),3216)|0;
     _ValLabel($17,$11,$57,$$byval_copy11,232);
     _memcpy(($10|0),($17|0),3216)|0;
    } else {
     $58 = HEAP32[7954]|0;
     $59 = ($58|0)==(227);
     if ($59) {
      $60 = HEAP8[(31976)>>0]|0;
      $61 = $60 << 24 >> 24;
      $62 = ($61|0)!=(125);
      if ($62) {
       $63 = HEAP8[(31976)>>0]|0;
       $13 = $63;
       break;
      }
     }
     $64 = HEAP32[7954]|0;
     $65 = ($64|0)==(223);
     if ($65) {
      $66 = HEAP32[(31976)>>2]|0;
      $14 = $66;
      break;
     } else {
      _Error(9893,$vararg_buffer3);
      break;
     }
    }
   } while(0);
   $67 = ((($9)) + 84|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = ($68|0)==(0);
   if (!($69)) {
    _Error(9893,$vararg_buffer9);
    break;
   }
   $70 = $12;
   $71 = $70 << 24 >> 24;
   $72 = ($71|0)==(43);
   if ($72) {
    $73 = $13;
    $74 = $73 << 24 >> 24;
    $75 = ($74|0)==(43);
    if ($75) {
     $76 = ((($9)) + 88|0);
     $77 = HEAP32[$76>>2]|0;
     $78 = (($77) + 1)|0;
     HEAP32[$76>>2] = $78;
     break;
    }
    $79 = $14;
    $80 = ($79|0)!=(0);
    if ($80) {
     $81 = ((($9)) + 88|0);
     $82 = HEAP32[$81>>2]|0;
     $83 = $14;
     $84 = (($82) + ($83))|0;
     $85 = ((($9)) + 88|0);
     HEAP32[$85>>2] = $84;
     break;
    }
    $86 = ((($10)) + 84|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(0);
    if (!($88)) {
     break;
    }
    $89 = ((($9)) + 88|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ((($10)) + 88|0);
    $92 = HEAP32[$91>>2]|0;
    $93 = (($90) + ($92))|0;
    $94 = ((($9)) + 88|0);
    HEAP32[$94>>2] = $93;
    break;
   }
   $95 = $12;
   $96 = $95 << 24 >> 24;
   $97 = ($96|0)==(45);
   if ($97) {
    $98 = $13;
    $99 = $98 << 24 >> 24;
    $100 = ($99|0)==(45);
    if ($100) {
     $101 = ((($9)) + 88|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = (($102) + -1)|0;
     HEAP32[$101>>2] = $103;
     break;
    }
    $104 = $14;
    $105 = ($104|0)!=(0);
    if ($105) {
     $106 = ((($9)) + 88|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = $14;
     $109 = (($107) - ($108))|0;
     $110 = ((($9)) + 88|0);
     HEAP32[$110>>2] = $109;
     break;
    }
    $111 = ((($10)) + 84|0);
    $112 = HEAP32[$111>>2]|0;
    $113 = ($112|0)==(0);
    if (!($113)) {
     break;
    }
    $114 = ((($9)) + 88|0);
    $115 = HEAP32[$114>>2]|0;
    $116 = ((($10)) + 88|0);
    $117 = HEAP32[$116>>2]|0;
    $118 = (($115) - ($117))|0;
    $119 = ((($9)) + 88|0);
    HEAP32[$119>>2] = $118;
    break;
   }
   $120 = $12;
   $121 = $120 << 24 >> 24;
   $122 = ($121|0)==(42);
   if (!($122)) {
    _Error(9893,$vararg_buffer7);
    break;
   }
   $123 = $14;
   $124 = ($123|0)!=(0);
   if ($124) {
    $125 = ((($9)) + 88|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = $14;
    $128 = Math_imul($126, $127)|0;
    $129 = ((($9)) + 88|0);
    HEAP32[$129>>2] = $128;
    break;
   }
   $130 = ((($10)) + 84|0);
   $131 = HEAP32[$130>>2]|0;
   $132 = ($131|0)==(0);
   if ($132) {
    $133 = ((($9)) + 88|0);
    $134 = HEAP32[$133>>2]|0;
    $135 = ((($10)) + 88|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = Math_imul($134, $136)|0;
    $138 = ((($9)) + 88|0);
    HEAP32[$138>>2] = $137;
    break;
   } else {
    _Error(9893,$vararg_buffer5);
    break;
   }
  }
 } while(0);
 $139 = ((($10)) + 4|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = ((($10)) + 4|0);
  $143 = HEAP32[$142>>2]|0;
  _free($143);
 }
 $144 = ((($10)) + 8|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = ((($10)) + 8|0);
  $148 = HEAP32[$147>>2]|0;
  _free($148);
 }
 $149 = HEAP32[$10>>2]|0;
 $150 = ($149|0)!=(0|0);
 if ($150) {
  $151 = HEAP32[$10>>2]|0;
  _free($151);
 }
 $152 = $6;
 HEAP32[18446] = $152;
 $153 = $7;
 HEAP32[(73788)>>2] = $153;
 HEAP32[(73792)>>2] = 0;
 $154 = $15;
 HEAP32[(73792)>>2] = $154;
 _memcpy(($0|0),($9|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcBendaBaru($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12896|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(12896|0);
 $$byval_copy = sp + 9672|0;
 $vararg_buffer3 = sp + 9664|0;
 $vararg_buffer1 = sp + 9656|0;
 $vararg_buffer = sp + 9648|0;
 $1 = sp + 6432|0;
 $2 = sp + 3216|0;
 $3 = sp;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 (_getlex()|0);
 $4 = (_strlen(128380)|0);
 $5 = ($4>>>0)>(0);
 if ($5) {
  _Error(9906,$vararg_buffer);
 }
 $6 = HEAP32[7954]|0;
 $7 = ($6|0)==(224);
 do {
  if ($7) {
   $8 = HEAP32[8088]|0;
   _memcpy(($$byval_copy|0),($2|0),3216)|0;
   _ValLabel($3,(31976),$8,$$byval_copy,232);
   _memcpy(($2|0),($3|0),3216)|0;
   $9 = ((($2)) + 84|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10|0)==(30);
   if ($11) {
    $12 = ((($1)) + 84|0);
    HEAP32[$12>>2] = 31;
    $13 = ((($1)) + 3188|0);
    HEAP32[$13>>2] = 0;
    $14 = ((($1)) + 2424|0);
    (_strcpy($14,(31976))|0);
    break;
   } else {
    _Error(9941,$vararg_buffer1);
    break;
   }
  } else {
   _Error(9941,$vararg_buffer3);
  }
 } while(0);
 $15 = ((($1)) + 84|0);
 HEAP32[$15>>2] = 31;
 $16 = ((($2)) + 3196|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = ((($2)) + 3196|0);
  $20 = HEAP32[$19>>2]|0;
  _free($20);
 }
 $21 = ((($2)) + 3200|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = ((($2)) + 3200|0);
  $25 = HEAP32[$24>>2]|0;
  _free($25);
 }
 $26 = ((($2)) + 1796|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = ((($2)) + 1796|0);
  $30 = HEAP32[$29>>2]|0;
  _free($30);
 }
 $31 = ((($2)) + 1024|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = ((($2)) + 1024|0);
  $35 = HEAP32[$34>>2]|0;
  _free($35);
 }
 $36 = ((($2)) + 4|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = ((($2)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  _free($40);
 }
 $41 = ((($2)) + 8|0);
 $42 = HEAP32[$41>>2]|0;
 $43 = ($42|0)!=(0|0);
 if ($43) {
  $44 = ((($2)) + 8|0);
  $45 = HEAP32[$44>>2]|0;
  _free($45);
 }
 $46 = HEAP32[$2>>2]|0;
 $47 = ($46|0)!=(0|0);
 if (!($47)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $48 = HEAP32[$2>>2]|0;
 _free($48);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcAkar($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0.0, $119 = 0.0, $12 = 0, $120 = 0.0, $121 = 0.0, $122 = 0.0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0.0, $133 = 0.0, $134 = 0.0, $135 = 0.0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0.0, $149 = 0.0, $15 = 0, $150 = 0.0, $151 = 0.0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $28 = 0.0, $29 = 0.0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0.0, $62 = 0.0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0.0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr23 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 50448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(50448|0);
 $$byval_copy30 = sp + 45104|0;
 $$byval_copy29 = sp + 41888|0;
 $$byval_copy28 = sp + 38672|0;
 $$byval_copy27 = sp + 35456|0;
 $$byval_copy26 = sp + 32240|0;
 $$byval_copy = sp + 29024|0;
 $vararg_buffer24 = sp + 29016|0;
 $vararg_buffer20 = sp + 29008|0;
 $vararg_buffer18 = sp + 29000|0;
 $vararg_buffer16 = sp + 28992|0;
 $vararg_buffer14 = sp + 28984|0;
 $vararg_buffer11 = sp + 28976|0;
 $vararg_buffer9 = sp + 28968|0;
 $vararg_buffer5 = sp + 28960|0;
 $vararg_buffer2 = sp + 28952|0;
 $vararg_buffer = sp + 28944|0;
 $1 = sp + 25728|0;
 $2 = sp + 49848|0;
 $3 = sp + 22512|0;
 $4 = sp + 19296|0;
 $5 = sp + 16080|0;
 $8 = sp + 49548|0;
 $9 = sp + 48320|0;
 $10 = sp + 49248|0;
 $11 = sp + 12864|0;
 $12 = sp + 9648|0;
 $13 = sp + 6432|0;
 $14 = sp + 3216|0;
 $15 = sp;
 $6 = 0;
 $7 = 0.0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($8|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 _memset(($9|0),0,920)|0;
 _memset(($10|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 (_getlex()|0);
 $16 = HEAP32[7954]|0;
 $17 = ($16|0)==(223);
 do {
  if ($17) {
   $18 = HEAP32[(31976)>>2]|0;
   $19 = (+($18|0));
   $20 = (+Math_sqrt((+$19)));
   $21 = $20;
   $7 = $21;
   $22 = $7;
   $23 = $22;
   $24 = ((($1)) + 96|0);
   HEAPF64[$24>>3] = $23;
   $25 = ((($1)) + 84|0);
   HEAP32[$25>>2] = 1;
  } else {
   $26 = HEAP32[7954]|0;
   $27 = ($26|0)==(226);
   if ($27) {
    $28 = +HEAPF64[(31976)>>3];
    $29 = (+Math_sqrt((+$28)));
    $30 = $29;
    $7 = $30;
    $31 = $7;
    $32 = $31;
    $33 = ((($1)) + 96|0);
    HEAPF64[$33>>3] = $32;
    $34 = ((($1)) + 84|0);
    HEAP32[$34>>2] = 1;
    break;
   }
   $35 = HEAP32[7954]|0;
   $36 = ($35|0)==(227);
   $37 = HEAP32[7954]|0;
   if ($36) {
    $38 = ($37|0)==(227);
    if (!($38)) {
     break;
    }
    $39 = HEAP8[(31976)>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = ($40|0)==(45);
    if (!($41)) {
     break;
    }
    _get_Minus_Val($11);
    _memcpy(($5|0),($11|0),3216)|0;
    $42 = ((($5)) + 84|0);
    $43 = HEAP32[$42>>2]|0;
    $44 = ($43|0)==(0);
    if ($44) {
     $45 = ((($5)) + 88|0);
     $46 = HEAP32[$45>>2]|0;
     $47 = (+($46|0));
     $48 = (+Math_sqrt((+$47)));
     $49 = $48;
     $7 = $49;
     $50 = $7;
     $51 = $50;
     $52 = ((($1)) + 96|0);
     HEAPF64[$52>>3] = $51;
     $53 = ((($1)) + 84|0);
     HEAP32[$53>>2] = 1;
     break;
    }
    $54 = ((($5)) + 84|0);
    $55 = HEAP32[$54>>2]|0;
    $56 = ($55|0)==(1);
    if (!($56)) {
     break;
    }
    $57 = ((($5)) + 96|0);
    $58 = +HEAPF64[$57>>3];
    $59 = (+Math_sqrt((+$58)));
    $60 = $59;
    $7 = $60;
    $61 = $7;
    $62 = $61;
    $63 = ((($1)) + 96|0);
    HEAPF64[$63>>3] = $62;
    $64 = ((($1)) + 84|0);
    HEAP32[$64>>2] = 1;
    break;
   }
   $65 = ($37|0)==(225);
   if ($65) {
    _Error(9971,$vararg_buffer);
    break;
   }
   $66 = HEAP32[7954]|0;
   $67 = ($66|0)==(228);
   if (!($67)) {
    $139 = (_strlen(128380)|0);
    $140 = ($139>>>0)>(0);
    if ($140) {
     HEAP32[$vararg_buffer20>>2] = 128380;
     $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
     HEAP32[$vararg_ptr23>>2] = (31976);
     (_snprintf($10,300,15808,$vararg_buffer20)|0);
     $141 = HEAP32[8091]|0;
     _memcpy(($$byval_copy29|0),($1|0),3216)|0;
     _ValLabel($14,$10,$141,$$byval_copy29,232);
     _memcpy(($1|0),($14|0),3216)|0;
    } else {
     $142 = HEAP32[8088]|0;
     _memcpy(($$byval_copy30|0),($1|0),3216)|0;
     _ValLabel($15,(31976),$142,$$byval_copy30,232);
     _memcpy(($1|0),($15|0),3216)|0;
    }
    $143 = ((($1)) + 84|0);
    $144 = HEAP32[$143>>2]|0;
    $145 = ($144|0)==(0);
    if ($145) {
     $146 = ((($1)) + 88|0);
     $147 = HEAP32[$146>>2]|0;
     $148 = (+($147|0));
     $149 = (+Math_sqrt((+$148)));
     $150 = $149;
     $7 = $150;
     $151 = $7;
     $152 = $151;
     $153 = ((($1)) + 96|0);
     HEAPF64[$153>>3] = $152;
     $154 = ((($1)) + 84|0);
     HEAP32[$154>>2] = 1;
     break;
    }
    $155 = ((($1)) + 84|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==(1);
    if ($157) {
     $158 = ((($1)) + 96|0);
     $159 = +HEAPF64[$158>>3];
     $160 = (+Math_sqrt((+$159)));
     $161 = $160;
     $7 = $161;
     $162 = $7;
     $163 = $162;
     $164 = ((($1)) + 96|0);
     HEAPF64[$164>>3] = $163;
     $165 = ((($1)) + 84|0);
     HEAP32[$165>>2] = 1;
     break;
    } else {
     _Error(9971,$vararg_buffer24);
     break;
    }
   }
   $68 = (_strlen((31976))|0);
   $69 = ($68>>>0)>(0);
   if ($69) {
    $70 = ((($3)) + 420|0);
    (_strcpy($70,(31976))|0);
    $71 = ((($3)) + 720|0);
    _getArrayName((31976),$71);
    $72 = ((($3)) + 870|0);
    _getArrayIdx((31976),$72);
    $73 = (_strlen(128380)|0);
    $74 = ($73>>>0)>(0);
    if ($74) {
     $75 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer2>>2] = 128380;
     $vararg_ptr4 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $75;
     (_snprintf($10,300,15808,$vararg_buffer2)|0);
     $76 = ((($3)) + 720|0);
     _memset(($76|0),0,150)|0;
     $77 = ((($3)) + 720|0);
     (_strcpy($77,$10)|0);
     $78 = ((($3)) + 870|0);
     $79 = HEAP8[$78>>0]|0;
     $80 = $79 << 24 >> 24;
     $81 = (_isdigit($80)|0);
     $82 = ($81|0)!=(0);
     if (!($82)) {
      _memset(($10|0),0,300)|0;
      $83 = ((($3)) + 870|0);
      HEAP32[$vararg_buffer5>>2] = 128380;
      $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $83;
      (_snprintf($10,300,15808,$vararg_buffer5)|0);
      $84 = ((($3)) + 870|0);
      _memset(($84|0),0,150)|0;
      $85 = ((($3)) + 870|0);
      (_strcpy($85,$10)|0);
     }
    }
    $86 = ((($3)) + 870|0);
    $87 = HEAP8[$86>>0]|0;
    $88 = $87 << 24 >> 24;
    $89 = (_isdigit($88)|0);
    $90 = ($89|0)!=(0);
    $91 = ((($3)) + 870|0);
    do {
     if ($90) {
      $92 = (_atoi($91)|0);
      $6 = $92;
     } else {
      $93 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($4|0),3216)|0;
      _ValLabel($12,$91,$93,$$byval_copy,232);
      _memcpy(($4|0),($12|0),3216)|0;
      $94 = ((($4)) + 84|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($95|0)==(0);
      if ($96) {
       $97 = ((($4)) + 88|0);
       $98 = HEAP32[$97>>2]|0;
       $6 = $98;
       break;
      } else {
       _Error(16065,$vararg_buffer9);
       break;
      }
     }
    } while(0);
    $99 = ((($3)) + 720|0);
    $100 = HEAP32[8088]|0;
    _memcpy(($$byval_copy26|0),($3|0),3216)|0;
    _ValLabel($13,$99,$100,$$byval_copy26,232);
    _memcpy(($3|0),($13|0),3216)|0;
    $101 = ((($3)) + 870|0);
    $102 = $6;
    HEAP32[$vararg_buffer11>>2] = $102;
    (_snprintf($101,150,16087,$vararg_buffer11)|0);
    $103 = $6;
    $104 = ($103|0)<(0);
    $105 = $6;
    $106 = ($105|0)>(99999000);
    $or$cond = $104 | $106;
    if ($or$cond) {
     _Error(16096,$vararg_buffer14);
    }
    $107 = ((($3)) + 84|0);
    $108 = HEAP32[$107>>2]|0;
    $109 = ($108|0)==(6);
    if ($109) {
     $110 = ((($3)) + 404|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)!=(0);
     if ($112) {
      $113 = ((($3)) + 404|0);
      $114 = HEAP32[$113>>2]|0;
      $115 = ($114|0)==(0);
      if ($115) {
       _Error(9996,$vararg_buffer16);
      }
      $116 = $6;
      _memcpy(($$byval_copy27|0),($3|0),3216)|0;
      $117 = (_get_int_array($$byval_copy27,$116)|0);
      $118 = (+($117|0));
      $119 = (+Math_sqrt((+$118)));
      $120 = $119;
      $7 = $120;
      $121 = $7;
      $122 = $121;
      $123 = ((($1)) + 96|0);
      HEAPF64[$123>>3] = $122;
      $124 = ((($1)) + 84|0);
      HEAP32[$124>>2] = 1;
      break;
     }
    }
    $125 = ((($3)) + 84|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(7);
    if ($127) {
     $128 = ((($3)) + 408|0);
     $129 = HEAP32[$128>>2]|0;
     $130 = ($129|0)!=(0);
     if ($130) {
      $131 = $6;
      _memcpy(($$byval_copy28|0),($3|0),3216)|0;
      $132 = (+_get_dbl_array($$byval_copy28,$131));
      $133 = (+Math_sqrt((+$132)));
      $134 = $133;
      $7 = $134;
      $135 = $7;
      $136 = $135;
      $137 = ((($1)) + 96|0);
      HEAPF64[$137>>3] = $136;
      $138 = ((($1)) + 84|0);
      HEAP32[$138>>2] = 1;
      break;
     }
    }
    _Error(9971,$vararg_buffer18);
   }
  }
 } while(0);
 $166 = ((($3)) + 3196|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)!=(0|0);
 if ($168) {
  $169 = ((($3)) + 3196|0);
  $170 = HEAP32[$169>>2]|0;
  _free($170);
 }
 $171 = ((($3)) + 3200|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)!=(0|0);
 if ($173) {
  $174 = ((($3)) + 3200|0);
  $175 = HEAP32[$174>>2]|0;
  _free($175);
 }
 $176 = ((($3)) + 1796|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ($177|0)!=(0|0);
 if ($178) {
  $179 = ((($3)) + 1796|0);
  $180 = HEAP32[$179>>2]|0;
  _free($180);
 }
 $181 = ((($3)) + 1024|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = ($182|0)!=(0|0);
 if ($183) {
  $184 = ((($3)) + 1024|0);
  $185 = HEAP32[$184>>2]|0;
  _free($185);
 }
 $186 = ((($3)) + 4|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = ($187|0)!=(0|0);
 if ($188) {
  $189 = ((($3)) + 4|0);
  $190 = HEAP32[$189>>2]|0;
  _free($190);
 }
 $191 = ((($3)) + 8|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = ($192|0)!=(0|0);
 if ($193) {
  $194 = ((($3)) + 8|0);
  $195 = HEAP32[$194>>2]|0;
  _free($195);
 }
 $196 = HEAP32[$3>>2]|0;
 $197 = ($196|0)!=(0|0);
 if ($197) {
  $198 = HEAP32[$3>>2]|0;
  _free($198);
 }
 $199 = ((($4)) + 3196|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = ($200|0)!=(0|0);
 if ($201) {
  $202 = ((($4)) + 3196|0);
  $203 = HEAP32[$202>>2]|0;
  _free($203);
 }
 $204 = ((($4)) + 3200|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ($205|0)!=(0|0);
 if ($206) {
  $207 = ((($4)) + 3200|0);
  $208 = HEAP32[$207>>2]|0;
  _free($208);
 }
 $209 = ((($4)) + 1796|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = ($210|0)!=(0|0);
 if ($211) {
  $212 = ((($4)) + 1796|0);
  $213 = HEAP32[$212>>2]|0;
  _free($213);
 }
 $214 = ((($4)) + 1024|0);
 $215 = HEAP32[$214>>2]|0;
 $216 = ($215|0)!=(0|0);
 if ($216) {
  $217 = ((($4)) + 1024|0);
  $218 = HEAP32[$217>>2]|0;
  _free($218);
 }
 $219 = ((($4)) + 4|0);
 $220 = HEAP32[$219>>2]|0;
 $221 = ($220|0)!=(0|0);
 if ($221) {
  $222 = ((($4)) + 4|0);
  $223 = HEAP32[$222>>2]|0;
  _free($223);
 }
 $224 = ((($4)) + 8|0);
 $225 = HEAP32[$224>>2]|0;
 $226 = ($225|0)!=(0|0);
 if ($226) {
  $227 = ((($4)) + 8|0);
  $228 = HEAP32[$227>>2]|0;
  _free($228);
 }
 $229 = HEAP32[$4>>2]|0;
 $230 = ($229|0)!=(0|0);
 if ($230) {
  $231 = HEAP32[$4>>2]|0;
  _free($231);
 }
 $232 = ((($5)) + 3196|0);
 $233 = HEAP32[$232>>2]|0;
 $234 = ($233|0)!=(0|0);
 if ($234) {
  $235 = ((($5)) + 3196|0);
  $236 = HEAP32[$235>>2]|0;
  _free($236);
 }
 $237 = ((($5)) + 3200|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = ($238|0)!=(0|0);
 if ($239) {
  $240 = ((($5)) + 3200|0);
  $241 = HEAP32[$240>>2]|0;
  _free($241);
 }
 $242 = ((($5)) + 1796|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = ($243|0)!=(0|0);
 if ($244) {
  $245 = ((($5)) + 1796|0);
  $246 = HEAP32[$245>>2]|0;
  _free($246);
 }
 $247 = ((($5)) + 1024|0);
 $248 = HEAP32[$247>>2]|0;
 $249 = ($248|0)!=(0|0);
 if ($249) {
  $250 = ((($5)) + 1024|0);
  $251 = HEAP32[$250>>2]|0;
  _free($251);
 }
 $252 = ((($5)) + 4|0);
 $253 = HEAP32[$252>>2]|0;
 $254 = ($253|0)!=(0|0);
 if ($254) {
  $255 = ((($5)) + 4|0);
  $256 = HEAP32[$255>>2]|0;
  _free($256);
 }
 $257 = ((($5)) + 8|0);
 $258 = HEAP32[$257>>2]|0;
 $259 = ($258|0)!=(0|0);
 if ($259) {
  $260 = ((($5)) + 8|0);
  $261 = HEAP32[$260>>2]|0;
  _free($261);
 }
 $262 = HEAP32[$5>>2]|0;
 $263 = ($262|0)!=(0|0);
 if ($263) {
  $264 = HEAP32[$5>>2]|0;
  _free($264);
 }
 $265 = ((($9)) + 8|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = ($266|0)!=(0|0);
 if ($267) {
  $268 = ((($9)) + 8|0);
  $269 = HEAP32[$268>>2]|0;
  _free($269);
 }
 $270 = ((($9)) + 916|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = ($271|0)!=(0|0);
 if (!($272)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $273 = ((($9)) + 916|0);
 $274 = HEAP32[$273>>2]|0;
 _free($274);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _get_Minus_Val($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $15 = 0.0, $16 = 0.0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 42176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(42176|0);
 $$byval_copy19 = sp + 38648|0;
 $$byval_copy18 = sp + 35432|0;
 $$byval_copy17 = sp + 32216|0;
 $$byval_copy16 = sp + 29000|0;
 $$byval_copy15 = sp + 25784|0;
 $$byval_copy = sp + 22568|0;
 $vararg_buffer13 = sp + 22560|0;
 $vararg_buffer11 = sp + 22552|0;
 $vararg_buffer9 = sp + 22544|0;
 $vararg_buffer6 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $5 = sp + 41868|0;
 $6 = sp + 9648|0;
 $7 = sp + 6432|0;
 $8 = sp + 3216|0;
 $9 = sp;
 $4 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,300)|0;
 (_getlex()|0);
 $10 = HEAP32[7954]|0;
 L1: do {
  switch ($10|0) {
  case 223:  {
   $11 = HEAP32[(31976)>>2]|0;
   $12 = (0 - ($11))|0;
   $13 = ((($1)) + 88|0);
   HEAP32[$13>>2] = $12;
   $14 = ((($1)) + 84|0);
   HEAP32[$14>>2] = 0;
   break;
  }
  case 226:  {
   $15 = +HEAPF64[(31976)>>3];
   $16 = 0.0 - $15;
   $17 = ((($1)) + 96|0);
   HEAPF64[$17>>3] = $16;
   $18 = ((($1)) + 84|0);
   HEAP32[$18>>2] = 1;
   break;
  }
  case 229:  {
   _checkObjectValidation((31976));
   label = 5;
   break;
  }
  case 224:  {
   label = 5;
   break;
  }
  case 228:  {
   $39 = (_strlen((31976))|0);
   $40 = ($39>>>0)>(0);
   if ($40) {
    $41 = ((($2)) + 420|0);
    (_strcpy($41,(31976))|0);
    $42 = ((($2)) + 720|0);
    _getArrayName((31976),$42);
    $43 = ((($2)) + 870|0);
    _getArrayIdx((31976),$43);
    $44 = ((($2)) + 870|0);
    $45 = HEAP8[$44>>0]|0;
    $46 = $45 << 24 >> 24;
    $47 = (_isdigit($46)|0);
    $48 = ($47|0)!=(0);
    $49 = ((($2)) + 870|0);
    do {
     if ($48) {
      $50 = (_atol($49)|0);
      $4 = $50;
     } else {
      $51 = HEAP32[8088]|0;
      _memcpy(($$byval_copy16|0),($3|0),3216)|0;
      _ValLabel($8,$49,$51,$$byval_copy16,232);
      _memcpy(($3|0),($8|0),3216)|0;
      $52 = ((($3)) + 84|0);
      $53 = HEAP32[$52>>2]|0;
      $54 = ($53|0)==(0);
      if ($54) {
       $55 = ((($3)) + 88|0);
       $56 = HEAP32[$55>>2]|0;
       $4 = $56;
       break;
      } else {
       _Error(16065,$vararg_buffer4);
       break;
      }
     }
    } while(0);
    $57 = ((($2)) + 720|0);
    $58 = HEAP32[8088]|0;
    _memcpy(($$byval_copy17|0),($2|0),3216)|0;
    _ValLabel($9,$57,$58,$$byval_copy17,232);
    _memcpy(($2|0),($9|0),3216)|0;
    $59 = ((($2)) + 870|0);
    $60 = $4;
    HEAP32[$vararg_buffer6>>2] = $60;
    (_sprintf($59,16176,$vararg_buffer6)|0);
    $61 = $4;
    $62 = ($61|0)<(0);
    if ($62) {
     label = 21;
    } else {
     $63 = $4;
     $64 = ((($2)) + 1020|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = (($65) - 1)|0;
     $67 = ($63|0)>($66|0);
     if ($67) {
      label = 21;
     }
    }
    if ((label|0) == 21) {
     _Error(16096,$vararg_buffer9);
    }
    $68 = ((($2)) + 84|0);
    $69 = HEAP32[$68>>2]|0;
    $70 = ($69|0)==(6);
    if ($70) {
     $71 = $4;
     _memcpy(($$byval_copy18|0),($2|0),3216)|0;
     $72 = (_get_int_array($$byval_copy18,$71)|0);
     $73 = (0 - ($72))|0;
     $74 = ((($1)) + 88|0);
     HEAP32[$74>>2] = $73;
     $75 = ((($1)) + 84|0);
     HEAP32[$75>>2] = 0;
     break L1;
    }
    $76 = ((($2)) + 84|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(7);
    if ($78) {
     $79 = $4;
     _memcpy(($$byval_copy19|0),($2|0),3216)|0;
     $80 = (+_get_dbl_array($$byval_copy19,$79));
     $81 = 0.0 - $80;
     $82 = ((($1)) + 96|0);
     HEAPF64[$82>>3] = $81;
     $83 = ((($1)) + 84|0);
     HEAP32[$83>>2] = 1;
     break L1;
    } else {
     _Error(10035,$vararg_buffer11);
     break L1;
    }
   }
   break;
  }
  default: {
   _Error(10056,$vararg_buffer13);
  }
  }
 } while(0);
 do {
  if ((label|0) == 5) {
   $19 = (_strlen(128380)|0);
   $20 = ($19>>>0)>(0);
   if ($20) {
    HEAP32[$vararg_buffer>>2] = 128380;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = (31976);
    (_sprintf($5,15808,$vararg_buffer)|0);
    $21 = HEAP32[8091]|0;
    _memcpy(($$byval_copy|0),($2|0),3216)|0;
    _ValLabel($6,$5,$21,$$byval_copy,232);
    _memcpy(($2|0),($6|0),3216)|0;
   } else {
    $22 = HEAP32[8088]|0;
    _memcpy(($$byval_copy15|0),($2|0),3216)|0;
    _ValLabel($7,(31976),$22,$$byval_copy15,232);
    _memcpy(($2|0),($7|0),3216)|0;
   }
   $23 = ((($2)) + 84|0);
   $24 = HEAP32[$23>>2]|0;
   $25 = ($24|0)==(0);
   if ($25) {
    $26 = ((($2)) + 88|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = (0 - ($27))|0;
    $29 = ((($1)) + 88|0);
    HEAP32[$29>>2] = $28;
    $30 = ((($1)) + 84|0);
    HEAP32[$30>>2] = 0;
    break;
   }
   $31 = ((($2)) + 84|0);
   $32 = HEAP32[$31>>2]|0;
   $33 = ($32|0)==(1);
   if ($33) {
    $34 = ((($2)) + 96|0);
    $35 = +HEAPF64[$34>>3];
    $36 = 0.0 - $35;
    $37 = ((($1)) + 96|0);
    HEAPF64[$37>>3] = $36;
    $38 = ((($1)) + 84|0);
    HEAP32[$38>>2] = 1;
    break;
   } else {
    _Error(10035,$vararg_buffer2);
    break;
   }
  }
 } while(0);
 $84 = ((($2)) + 1796|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = ((($2)) + 1796|0);
  $88 = HEAP32[$87>>2]|0;
  _free($88);
 }
 $89 = ((($2)) + 1024|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)!=(0|0);
 if ($91) {
  $92 = ((($2)) + 1024|0);
  $93 = HEAP32[$92>>2]|0;
  _free($93);
 }
 $94 = ((($2)) + 4|0);
 $95 = HEAP32[$94>>2]|0;
 $96 = ($95|0)!=(0|0);
 if ($96) {
  $97 = ((($2)) + 4|0);
  $98 = HEAP32[$97>>2]|0;
  _free($98);
 }
 $99 = ((($2)) + 8|0);
 $100 = HEAP32[$99>>2]|0;
 $101 = ($100|0)!=(0|0);
 if ($101) {
  $102 = ((($2)) + 8|0);
  $103 = HEAP32[$102>>2]|0;
  _free($103);
 }
 $104 = HEAP32[$2>>2]|0;
 $105 = ($104|0)!=(0|0);
 if ($105) {
  $106 = HEAP32[$2>>2]|0;
  _free($106);
 }
 $107 = ((($3)) + 3196|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)!=(0|0);
 if ($109) {
  $110 = ((($3)) + 3196|0);
  $111 = HEAP32[$110>>2]|0;
  _free($111);
 }
 $112 = ((($3)) + 3200|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0|0);
 if ($114) {
  $115 = ((($3)) + 3200|0);
  $116 = HEAP32[$115>>2]|0;
  _free($116);
 }
 $117 = ((($3)) + 1796|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)!=(0|0);
 if ($119) {
  $120 = ((($3)) + 1796|0);
  $121 = HEAP32[$120>>2]|0;
  _free($121);
 }
 $122 = ((($3)) + 1024|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)!=(0|0);
 if ($124) {
  $125 = ((($3)) + 1024|0);
  $126 = HEAP32[$125>>2]|0;
  _free($126);
 }
 $127 = ((($3)) + 4|0);
 $128 = HEAP32[$127>>2]|0;
 $129 = ($128|0)!=(0|0);
 if ($129) {
  $130 = ((($3)) + 4|0);
  $131 = HEAP32[$130>>2]|0;
  _free($131);
 }
 $132 = ((($3)) + 8|0);
 $133 = HEAP32[$132>>2]|0;
 $134 = ($133|0)!=(0|0);
 if ($134) {
  $135 = ((($3)) + 8|0);
  $136 = HEAP32[$135>>2]|0;
  _free($136);
 }
 $137 = HEAP32[$3>>2]|0;
 $138 = ($137|0)!=(0|0);
 if (!($138)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $139 = HEAP32[$3>>2]|0;
 _free($139);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcAbs($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0.0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr23 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 50448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(50448|0);
 $$byval_copy30 = sp + 45104|0;
 $$byval_copy29 = sp + 41888|0;
 $$byval_copy28 = sp + 38672|0;
 $$byval_copy27 = sp + 35456|0;
 $$byval_copy26 = sp + 32240|0;
 $$byval_copy = sp + 29024|0;
 $vararg_buffer24 = sp + 29016|0;
 $vararg_buffer20 = sp + 29008|0;
 $vararg_buffer18 = sp + 29000|0;
 $vararg_buffer16 = sp + 28992|0;
 $vararg_buffer14 = sp + 28984|0;
 $vararg_buffer11 = sp + 28976|0;
 $vararg_buffer9 = sp + 28968|0;
 $vararg_buffer5 = sp + 28960|0;
 $vararg_buffer2 = sp + 28952|0;
 $vararg_buffer = sp + 28944|0;
 $1 = sp + 25728|0;
 $2 = sp + 49848|0;
 $3 = sp + 22512|0;
 $4 = sp + 19296|0;
 $5 = sp + 16080|0;
 $7 = sp + 49544|0;
 $8 = sp + 48320|0;
 $9 = sp + 49244|0;
 $10 = sp + 12864|0;
 $11 = sp + 9648|0;
 $12 = sp + 6432|0;
 $13 = sp + 3216|0;
 $14 = sp;
 $6 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($7|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 _memset(($8|0),0,920)|0;
 _memset(($9|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 (_getlex()|0);
 $15 = HEAP32[7954]|0;
 $16 = ($15|0)==(223);
 do {
  if ($16) {
   $17 = HEAP32[(31976)>>2]|0;
   $18 = (Math_abs(($17|0))|0);
   $19 = ((($1)) + 88|0);
   HEAP32[$19>>2] = $18;
   $20 = ((($1)) + 84|0);
   HEAP32[$20>>2] = 0;
  } else {
   $21 = HEAP32[7954]|0;
   $22 = ($21|0)==(226);
   if ($22) {
    $23 = +HEAPF64[(31976)>>3];
    $24 = (~~(($23)));
    $25 = (Math_abs(($24|0))|0);
    $26 = ((($1)) + 88|0);
    HEAP32[$26>>2] = $25;
    $27 = ((($1)) + 84|0);
    HEAP32[$27>>2] = 0;
    break;
   }
   $28 = HEAP32[7954]|0;
   $29 = ($28|0)==(227);
   $30 = HEAP32[7954]|0;
   if ($29) {
    $31 = ($30|0)==(227);
    if (!($31)) {
     break;
    }
    $32 = HEAP8[(31976)>>0]|0;
    $33 = $32 << 24 >> 24;
    $34 = ($33|0)==(45);
    if (!($34)) {
     break;
    }
    _get_Minus_Val($10);
    _memcpy(($5|0),($10|0),3216)|0;
    $35 = ((($5)) + 84|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ($36|0)==(0);
    if ($37) {
     $38 = ((($5)) + 88|0);
     $39 = HEAP32[$38>>2]|0;
     $40 = (Math_abs(($39|0))|0);
     $41 = ((($1)) + 88|0);
     HEAP32[$41>>2] = $40;
     $42 = ((($1)) + 84|0);
     HEAP32[$42>>2] = 0;
     break;
    }
    $43 = ((($5)) + 84|0);
    $44 = HEAP32[$43>>2]|0;
    $45 = ($44|0)==(1);
    if (!($45)) {
     break;
    }
    $46 = ((($5)) + 96|0);
    $47 = +HEAPF64[$46>>3];
    $48 = (~~(($47)));
    $49 = (Math_abs(($48|0))|0);
    $50 = ((($1)) + 88|0);
    HEAP32[$50>>2] = $49;
    $51 = ((($1)) + 84|0);
    HEAP32[$51>>2] = 0;
    break;
   }
   $52 = ($30|0)==(225);
   if ($52) {
    _Error(10084,$vararg_buffer);
    break;
   }
   $53 = HEAP32[7954]|0;
   $54 = ($53|0)==(228);
   if (!($54)) {
    $120 = (_strlen(128380)|0);
    $121 = ($120>>>0)>(0);
    if ($121) {
     HEAP32[$vararg_buffer20>>2] = 128380;
     $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
     HEAP32[$vararg_ptr23>>2] = (31976);
     (_snprintf($9,300,15808,$vararg_buffer20)|0);
     $122 = HEAP32[8091]|0;
     _memcpy(($$byval_copy29|0),($1|0),3216)|0;
     _ValLabel($13,$9,$122,$$byval_copy29,232);
     _memcpy(($1|0),($13|0),3216)|0;
    } else {
     $123 = HEAP32[8088]|0;
     _memcpy(($$byval_copy30|0),($1|0),3216)|0;
     _ValLabel($14,(31976),$123,$$byval_copy30,232);
     _memcpy(($1|0),($14|0),3216)|0;
    }
    $124 = ((($1)) + 84|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($125|0)==(0);
    if ($126) {
     $127 = ((($1)) + 88|0);
     $128 = HEAP32[$127>>2]|0;
     $129 = (Math_abs(($128|0))|0);
     $130 = ((($1)) + 88|0);
     HEAP32[$130>>2] = $129;
     $131 = ((($1)) + 84|0);
     HEAP32[$131>>2] = 0;
     break;
    }
    $132 = ((($1)) + 84|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)==(1);
    if ($134) {
     $135 = ((($1)) + 96|0);
     $136 = +HEAPF64[$135>>3];
     $137 = (~~(($136)));
     $138 = (Math_abs(($137|0))|0);
     $139 = ((($1)) + 88|0);
     HEAP32[$139>>2] = $138;
     $140 = ((($1)) + 84|0);
     HEAP32[$140>>2] = 0;
     break;
    } else {
     _Error(10084,$vararg_buffer24);
     break;
    }
   }
   $55 = (_strlen((31976))|0);
   $56 = ($55>>>0)>(0);
   if ($56) {
    $57 = ((($3)) + 420|0);
    (_strcpy($57,(31976))|0);
    $58 = ((($3)) + 720|0);
    _getArrayName((31976),$58);
    $59 = ((($3)) + 870|0);
    _getArrayIdx((31976),$59);
    $60 = (_strlen(128380)|0);
    $61 = ($60>>>0)>(0);
    if ($61) {
     $62 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer2>>2] = 128380;
     $vararg_ptr4 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $62;
     (_snprintf($9,300,15808,$vararg_buffer2)|0);
     $63 = ((($3)) + 720|0);
     _memset(($63|0),0,150)|0;
     $64 = ((($3)) + 720|0);
     (_strcpy($64,$9)|0);
     $65 = ((($3)) + 870|0);
     $66 = HEAP8[$65>>0]|0;
     $67 = $66 << 24 >> 24;
     $68 = (_isdigit($67)|0);
     $69 = ($68|0)!=(0);
     if (!($69)) {
      _memset(($9|0),0,300)|0;
      $70 = ((($3)) + 870|0);
      HEAP32[$vararg_buffer5>>2] = 128380;
      $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $70;
      (_snprintf($9,300,15808,$vararg_buffer5)|0);
      $71 = ((($3)) + 870|0);
      _memset(($71|0),0,150)|0;
      $72 = ((($3)) + 870|0);
      (_strcpy($72,$9)|0);
     }
    }
    $73 = ((($3)) + 870|0);
    $74 = HEAP8[$73>>0]|0;
    $75 = $74 << 24 >> 24;
    $76 = (_isdigit($75)|0);
    $77 = ($76|0)!=(0);
    $78 = ((($3)) + 870|0);
    do {
     if ($77) {
      $79 = (_atoi($78)|0);
      $6 = $79;
     } else {
      $80 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($4|0),3216)|0;
      _ValLabel($11,$78,$80,$$byval_copy,232);
      _memcpy(($4|0),($11|0),3216)|0;
      $81 = ((($4)) + 84|0);
      $82 = HEAP32[$81>>2]|0;
      $83 = ($82|0)==(0);
      if ($83) {
       $84 = ((($4)) + 88|0);
       $85 = HEAP32[$84>>2]|0;
       $6 = $85;
       break;
      } else {
       _Error(16065,$vararg_buffer9);
       break;
      }
     }
    } while(0);
    $86 = ((($3)) + 720|0);
    $87 = HEAP32[8088]|0;
    _memcpy(($$byval_copy26|0),($3|0),3216)|0;
    _ValLabel($12,$86,$87,$$byval_copy26,232);
    _memcpy(($3|0),($12|0),3216)|0;
    $88 = ((($3)) + 870|0);
    $89 = $6;
    HEAP32[$vararg_buffer11>>2] = $89;
    (_snprintf($88,150,16176,$vararg_buffer11)|0);
    $90 = $6;
    $91 = ($90|0)<(0);
    $92 = $6;
    $93 = ($92|0)>(99999000);
    $or$cond = $91 | $93;
    if ($or$cond) {
     _Error(16096,$vararg_buffer14);
    }
    $94 = ((($3)) + 84|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(6);
    if ($96) {
     $97 = ((($3)) + 404|0);
     $98 = HEAP32[$97>>2]|0;
     $99 = ($98|0)!=(0);
     if ($99) {
      $100 = ((($3)) + 404|0);
      $101 = HEAP32[$100>>2]|0;
      $102 = ($101|0)==(0);
      if ($102) {
       _Error(10112,$vararg_buffer16);
      }
      $103 = $6;
      _memcpy(($$byval_copy27|0),($3|0),3216)|0;
      $104 = (_get_int_array($$byval_copy27,$103)|0);
      $105 = (Math_abs(($104|0))|0);
      $106 = ((($1)) + 88|0);
      HEAP32[$106>>2] = $105;
      $107 = ((($1)) + 84|0);
      HEAP32[$107>>2] = 0;
      break;
     }
    }
    $108 = ((($3)) + 84|0);
    $109 = HEAP32[$108>>2]|0;
    $110 = ($109|0)==(7);
    if ($110) {
     $111 = ((($3)) + 408|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)!=(0);
     if ($113) {
      $114 = $6;
      _memcpy(($$byval_copy28|0),($3|0),3216)|0;
      $115 = (+_get_dbl_array($$byval_copy28,$114));
      $116 = (~~(($115)));
      $117 = (Math_abs(($116|0))|0);
      $118 = ((($1)) + 88|0);
      HEAP32[$118>>2] = $117;
      $119 = ((($1)) + 84|0);
      HEAP32[$119>>2] = 0;
      break;
     }
    }
    _Error(10084,$vararg_buffer18);
   }
  }
 } while(0);
 $141 = ((($3)) + 3196|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($142|0)!=(0|0);
 if ($143) {
  $144 = ((($3)) + 3196|0);
  $145 = HEAP32[$144>>2]|0;
  _free($145);
 }
 $146 = ((($3)) + 3200|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)!=(0|0);
 if ($148) {
  $149 = ((($3)) + 3200|0);
  $150 = HEAP32[$149>>2]|0;
  _free($150);
 }
 $151 = ((($3)) + 1796|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($152|0)!=(0|0);
 if ($153) {
  $154 = ((($3)) + 1796|0);
  $155 = HEAP32[$154>>2]|0;
  _free($155);
 }
 $156 = ((($3)) + 1024|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = ($157|0)!=(0|0);
 if ($158) {
  $159 = ((($3)) + 1024|0);
  $160 = HEAP32[$159>>2]|0;
  _free($160);
 }
 $161 = ((($3)) + 4|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)!=(0|0);
 if ($163) {
  $164 = ((($3)) + 4|0);
  $165 = HEAP32[$164>>2]|0;
  _free($165);
 }
 $166 = ((($3)) + 8|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)!=(0|0);
 if ($168) {
  $169 = ((($3)) + 8|0);
  $170 = HEAP32[$169>>2]|0;
  _free($170);
 }
 $171 = HEAP32[$3>>2]|0;
 $172 = ($171|0)!=(0|0);
 if ($172) {
  $173 = HEAP32[$3>>2]|0;
  _free($173);
 }
 $174 = ((($4)) + 3196|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ($175|0)!=(0|0);
 if ($176) {
  $177 = ((($4)) + 3196|0);
  $178 = HEAP32[$177>>2]|0;
  _free($178);
 }
 $179 = ((($4)) + 3200|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($180|0)!=(0|0);
 if ($181) {
  $182 = ((($4)) + 3200|0);
  $183 = HEAP32[$182>>2]|0;
  _free($183);
 }
 $184 = ((($4)) + 1796|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = ($185|0)!=(0|0);
 if ($186) {
  $187 = ((($4)) + 1796|0);
  $188 = HEAP32[$187>>2]|0;
  _free($188);
 }
 $189 = ((($4)) + 1024|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = ($190|0)!=(0|0);
 if ($191) {
  $192 = ((($4)) + 1024|0);
  $193 = HEAP32[$192>>2]|0;
  _free($193);
 }
 $194 = ((($4)) + 4|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = ($195|0)!=(0|0);
 if ($196) {
  $197 = ((($4)) + 4|0);
  $198 = HEAP32[$197>>2]|0;
  _free($198);
 }
 $199 = ((($4)) + 8|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = ($200|0)!=(0|0);
 if ($201) {
  $202 = ((($4)) + 8|0);
  $203 = HEAP32[$202>>2]|0;
  _free($203);
 }
 $204 = HEAP32[$4>>2]|0;
 $205 = ($204|0)!=(0|0);
 if ($205) {
  $206 = HEAP32[$4>>2]|0;
  _free($206);
 }
 $207 = ((($5)) + 3196|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = ($208|0)!=(0|0);
 if ($209) {
  $210 = ((($5)) + 3196|0);
  $211 = HEAP32[$210>>2]|0;
  _free($211);
 }
 $212 = ((($5)) + 3200|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = ($213|0)!=(0|0);
 if ($214) {
  $215 = ((($5)) + 3200|0);
  $216 = HEAP32[$215>>2]|0;
  _free($216);
 }
 $217 = ((($5)) + 1796|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = ($218|0)!=(0|0);
 if ($219) {
  $220 = ((($5)) + 1796|0);
  $221 = HEAP32[$220>>2]|0;
  _free($221);
 }
 $222 = ((($5)) + 1024|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = ($223|0)!=(0|0);
 if ($224) {
  $225 = ((($5)) + 1024|0);
  $226 = HEAP32[$225>>2]|0;
  _free($226);
 }
 $227 = ((($5)) + 4|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = ($228|0)!=(0|0);
 if ($229) {
  $230 = ((($5)) + 4|0);
  $231 = HEAP32[$230>>2]|0;
  _free($231);
 }
 $232 = ((($5)) + 8|0);
 $233 = HEAP32[$232>>2]|0;
 $234 = ($233|0)!=(0|0);
 if ($234) {
  $235 = ((($5)) + 8|0);
  $236 = HEAP32[$235>>2]|0;
  _free($236);
 }
 $237 = HEAP32[$5>>2]|0;
 $238 = ($237|0)!=(0|0);
 if ($238) {
  $239 = HEAP32[$5>>2]|0;
  _free($239);
 }
 $240 = ((($8)) + 8|0);
 $241 = HEAP32[$240>>2]|0;
 $242 = ($241|0)!=(0|0);
 if ($242) {
  $243 = ((($8)) + 8|0);
  $244 = HEAP32[$243>>2]|0;
  _free($244);
 }
 $245 = ((($8)) + 916|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ($246|0)!=(0|0);
 if (!($247)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $248 = ((($8)) + 916|0);
 $249 = HEAP32[$248>>2]|0;
 _free($249);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcSinus($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0.0, $124 = 0.0, $125 = 0.0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0.0, $14 = 0, $140 = 0.0, $141 = 0.0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0.0, $158 = 0.0, $159 = 0.0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0.0, $172 = 0.0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0.0, $32 = 0.0;
 var $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0, $67 = 0.0, $68 = 0.0, $69 = 0.0;
 var $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0;
 var $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr23 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 50448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(50448|0);
 $$byval_copy30 = sp + 45104|0;
 $$byval_copy29 = sp + 41888|0;
 $$byval_copy28 = sp + 38672|0;
 $$byval_copy27 = sp + 35456|0;
 $$byval_copy26 = sp + 32240|0;
 $$byval_copy = sp + 29024|0;
 $vararg_buffer24 = sp + 29016|0;
 $vararg_buffer20 = sp + 29008|0;
 $vararg_buffer18 = sp + 29000|0;
 $vararg_buffer16 = sp + 28992|0;
 $vararg_buffer14 = sp + 28984|0;
 $vararg_buffer11 = sp + 28976|0;
 $vararg_buffer9 = sp + 28968|0;
 $vararg_buffer5 = sp + 28960|0;
 $vararg_buffer2 = sp + 28952|0;
 $vararg_buffer = sp + 28944|0;
 $1 = sp + 25728|0;
 $2 = sp + 49848|0;
 $3 = sp + 22512|0;
 $4 = sp + 19296|0;
 $5 = sp + 16080|0;
 $8 = sp + 49548|0;
 $9 = sp + 48320|0;
 $10 = sp + 49248|0;
 $11 = sp + 12864|0;
 $12 = sp + 9648|0;
 $13 = sp + 6432|0;
 $14 = sp + 3216|0;
 $15 = sp;
 $6 = 0;
 $7 = 0.0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($8|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 _memset(($9|0),0,920)|0;
 _memset(($10|0),0,300)|0;
 (_getlex()|0);
 $16 = HEAP32[7954]|0;
 $17 = ($16|0)==(223);
 do {
  if ($17) {
   $18 = HEAP32[(31976)>>2]|0;
   $19 = (+($18|0));
   $20 = $19 * 3.1415926535897931;
   $21 = $20 / 180.0;
   $22 = (+Math_sin((+$21)));
   $23 = $22;
   $7 = $23;
   $24 = $7;
   $25 = $24;
   $26 = ((($1)) + 96|0);
   HEAPF64[$26>>3] = $25;
   $27 = ((($1)) + 84|0);
   HEAP32[$27>>2] = 1;
  } else {
   $28 = HEAP32[7954]|0;
   $29 = ($28|0)==(226);
   if ($29) {
    $30 = +HEAPF64[(31976)>>3];
    $31 = $30 * 3.1415926535897931;
    $32 = $31 / 180.0;
    $33 = (+Math_sin((+$32)));
    $34 = $33;
    $7 = $34;
    $35 = $7;
    $36 = $35;
    $37 = ((($1)) + 96|0);
    HEAPF64[$37>>3] = $36;
    $38 = ((($1)) + 84|0);
    HEAP32[$38>>2] = 1;
    break;
   }
   $39 = HEAP32[7954]|0;
   $40 = ($39|0)==(227);
   $41 = HEAP32[7954]|0;
   if ($40) {
    $42 = ($41|0)==(227);
    if (!($42)) {
     break;
    }
    $43 = HEAP8[(31976)>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = ($44|0)==(45);
    if (!($45)) {
     break;
    }
    _get_Minus_Val($11);
    _memcpy(($5|0),($11|0),3216)|0;
    $46 = ((($5)) + 84|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0);
    if ($48) {
     $49 = ((($5)) + 88|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (+($50|0));
     $52 = $51 * 3.1415926535897931;
     $53 = $52 / 180.0;
     $54 = (+Math_sin((+$53)));
     $55 = $54;
     $7 = $55;
     $56 = $7;
     $57 = $56;
     $58 = ((($1)) + 96|0);
     HEAPF64[$58>>3] = $57;
     $59 = ((($1)) + 84|0);
     HEAP32[$59>>2] = 1;
     break;
    }
    $60 = ((($5)) + 84|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)==(1);
    if (!($62)) {
     break;
    }
    $63 = ((($5)) + 96|0);
    $64 = +HEAPF64[$63>>3];
    $65 = $64 * 3.1415926535897931;
    $66 = $65 / 180.0;
    $67 = (+Math_sin((+$66)));
    $68 = $67;
    $7 = $68;
    $69 = $7;
    $70 = $69;
    $71 = ((($1)) + 96|0);
    HEAPF64[$71>>3] = $70;
    $72 = ((($1)) + 84|0);
    HEAP32[$72>>2] = 1;
    break;
   }
   $73 = ($41|0)==(225);
   if ($73) {
    _Error(10150,$vararg_buffer);
    break;
   }
   $74 = HEAP32[7954]|0;
   $75 = ($74|0)==(228);
   if (!($75)) {
    $148 = (_strlen(128380)|0);
    $149 = ($148>>>0)>(0);
    if ($149) {
     HEAP32[$vararg_buffer20>>2] = 128380;
     $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
     HEAP32[$vararg_ptr23>>2] = (31976);
     (_snprintf($10,300,15808,$vararg_buffer20)|0);
     $150 = HEAP32[8091]|0;
     _memcpy(($$byval_copy29|0),($1|0),3216)|0;
     _ValLabel($14,$10,$150,$$byval_copy29,232);
     _memcpy(($1|0),($14|0),3216)|0;
    } else {
     $151 = HEAP32[8088]|0;
     _memcpy(($$byval_copy30|0),($1|0),3216)|0;
     _ValLabel($15,(31976),$151,$$byval_copy30,232);
     _memcpy(($1|0),($15|0),3216)|0;
    }
    $152 = ((($1)) + 84|0);
    $153 = HEAP32[$152>>2]|0;
    $154 = ($153|0)==(0);
    if ($154) {
     $155 = ((($1)) + 88|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = (+($156|0));
     $158 = $157 * 3.1415926535897931;
     $159 = $158 / 180.0;
     $160 = (+Math_sin((+$159)));
     $161 = $160;
     $7 = $161;
     $162 = $7;
     $163 = $162;
     $164 = ((($1)) + 96|0);
     HEAPF64[$164>>3] = $163;
     $165 = ((($1)) + 84|0);
     HEAP32[$165>>2] = 1;
     break;
    }
    $166 = ((($1)) + 84|0);
    $167 = HEAP32[$166>>2]|0;
    $168 = ($167|0)==(1);
    if ($168) {
     $169 = ((($1)) + 96|0);
     $170 = +HEAPF64[$169>>3];
     $171 = $170 * 3.1415926535897931;
     $172 = $171 / 180.0;
     $173 = (+Math_sin((+$172)));
     $174 = $173;
     $7 = $174;
     $175 = $7;
     $176 = $175;
     $177 = ((($1)) + 96|0);
     HEAPF64[$177>>3] = $176;
     $178 = ((($1)) + 84|0);
     HEAP32[$178>>2] = 1;
     break;
    } else {
     _Error(10150,$vararg_buffer24);
     break;
    }
   }
   $76 = (_strlen((31976))|0);
   $77 = ($76>>>0)>(0);
   if ($77) {
    $78 = ((($3)) + 420|0);
    (_strcpy($78,(31976))|0);
    $79 = ((($3)) + 720|0);
    _getArrayName((31976),$79);
    $80 = ((($3)) + 870|0);
    _getArrayIdx((31976),$80);
    $81 = (_strlen(128380)|0);
    $82 = ($81>>>0)>(0);
    if ($82) {
     $83 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer2>>2] = 128380;
     $vararg_ptr4 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $83;
     (_snprintf($10,300,15808,$vararg_buffer2)|0);
     $84 = ((($3)) + 720|0);
     _memset(($84|0),0,150)|0;
     $85 = ((($3)) + 720|0);
     (_strcpy($85,$10)|0);
     $86 = ((($3)) + 870|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87 << 24 >> 24;
     $89 = (_isdigit($88)|0);
     $90 = ($89|0)!=(0);
     if (!($90)) {
      _memset(($10|0),0,300)|0;
      $91 = ((($3)) + 870|0);
      HEAP32[$vararg_buffer5>>2] = 128380;
      $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $91;
      (_snprintf($10,300,15808,$vararg_buffer5)|0);
      $92 = ((($3)) + 870|0);
      _memset(($92|0),0,150)|0;
      $93 = ((($3)) + 870|0);
      (_strcpy($93,$10)|0);
     }
    }
    $94 = ((($3)) + 870|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95 << 24 >> 24;
    $97 = (_isdigit($96)|0);
    $98 = ($97|0)!=(0);
    $99 = ((($3)) + 870|0);
    do {
     if ($98) {
      $100 = (_atoi($99)|0);
      $6 = $100;
     } else {
      $101 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($4|0),3216)|0;
      _ValLabel($12,$99,$101,$$byval_copy,232);
      _memcpy(($4|0),($12|0),3216)|0;
      $102 = ((($4)) + 84|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0);
      if ($104) {
       $105 = ((($4)) + 88|0);
       $106 = HEAP32[$105>>2]|0;
       $6 = $106;
       break;
      } else {
       _Error(16065,$vararg_buffer9);
       break;
      }
     }
    } while(0);
    $107 = ((($3)) + 720|0);
    $108 = HEAP32[8088]|0;
    _memcpy(($$byval_copy26|0),($3|0),3216)|0;
    _ValLabel($13,$107,$108,$$byval_copy26,232);
    _memcpy(($3|0),($13|0),3216)|0;
    $109 = ((($3)) + 870|0);
    $110 = $6;
    HEAP32[$vararg_buffer11>>2] = $110;
    (_snprintf($109,150,16176,$vararg_buffer11)|0);
    $111 = $6;
    $112 = ($111|0)<(0);
    $113 = $6;
    $114 = ($113|0)>(99999000);
    $or$cond = $112 | $114;
    if ($or$cond) {
     _Error(16096,$vararg_buffer14);
    }
    $115 = ((($3)) + 84|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)==(6);
    if ($117) {
     $118 = ((($3)) + 404|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($119|0)==(0);
     if ($120) {
      _Error(10174,$vararg_buffer16);
     }
     $121 = $6;
     _memcpy(($$byval_copy27|0),($3|0),3216)|0;
     $122 = (_get_int_array($$byval_copy27,$121)|0);
     $123 = (+($122|0));
     $124 = $123 * 3.1415926535897931;
     $125 = $124 / 180.0;
     $126 = (+Math_sin((+$125)));
     $127 = $126;
     $7 = $127;
     $128 = $7;
     $129 = $128;
     $130 = ((($1)) + 96|0);
     HEAPF64[$130>>3] = $129;
     $131 = ((($1)) + 84|0);
     HEAP32[$131>>2] = 1;
     break;
    }
    $132 = ((($3)) + 84|0);
    $133 = HEAP32[$132>>2]|0;
    $134 = ($133|0)==(7);
    if ($134) {
     $135 = ((($3)) + 408|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)!=(0);
     if ($137) {
      $138 = $6;
      _memcpy(($$byval_copy28|0),($3|0),3216)|0;
      $139 = (+_get_dbl_array($$byval_copy28,$138));
      $140 = $139 * 3.1415926535897931;
      $141 = $140 / 180.0;
      $142 = (+Math_sin((+$141)));
      $143 = $142;
      $7 = $143;
      $144 = $7;
      $145 = $144;
      $146 = ((($1)) + 96|0);
      HEAPF64[$146>>3] = $145;
      $147 = ((($1)) + 84|0);
      HEAP32[$147>>2] = 1;
      break;
     }
    }
    _Error(10150,$vararg_buffer18);
   }
  }
 } while(0);
 $179 = ((($3)) + 3196|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($180|0)!=(0|0);
 if ($181) {
  $182 = ((($3)) + 3196|0);
  $183 = HEAP32[$182>>2]|0;
  _free($183);
 }
 $184 = ((($3)) + 3200|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = ($185|0)!=(0|0);
 if ($186) {
  $187 = ((($3)) + 3200|0);
  $188 = HEAP32[$187>>2]|0;
  _free($188);
 }
 $189 = ((($3)) + 1796|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = ($190|0)!=(0|0);
 if ($191) {
  $192 = ((($3)) + 1796|0);
  $193 = HEAP32[$192>>2]|0;
  _free($193);
 }
 $194 = ((($3)) + 1024|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = ($195|0)!=(0|0);
 if ($196) {
  $197 = ((($3)) + 1024|0);
  $198 = HEAP32[$197>>2]|0;
  _free($198);
 }
 $199 = ((($3)) + 4|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = ($200|0)!=(0|0);
 if ($201) {
  $202 = ((($3)) + 4|0);
  $203 = HEAP32[$202>>2]|0;
  _free($203);
 }
 $204 = ((($3)) + 8|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ($205|0)!=(0|0);
 if ($206) {
  $207 = ((($3)) + 8|0);
  $208 = HEAP32[$207>>2]|0;
  _free($208);
 }
 $209 = HEAP32[$3>>2]|0;
 $210 = ($209|0)!=(0|0);
 if ($210) {
  $211 = HEAP32[$3>>2]|0;
  _free($211);
 }
 $212 = ((($4)) + 3196|0);
 $213 = HEAP32[$212>>2]|0;
 $214 = ($213|0)!=(0|0);
 if ($214) {
  $215 = ((($4)) + 3196|0);
  $216 = HEAP32[$215>>2]|0;
  _free($216);
 }
 $217 = ((($4)) + 3200|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = ($218|0)!=(0|0);
 if ($219) {
  $220 = ((($4)) + 3200|0);
  $221 = HEAP32[$220>>2]|0;
  _free($221);
 }
 $222 = ((($4)) + 1796|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = ($223|0)!=(0|0);
 if ($224) {
  $225 = ((($4)) + 1796|0);
  $226 = HEAP32[$225>>2]|0;
  _free($226);
 }
 $227 = ((($4)) + 1024|0);
 $228 = HEAP32[$227>>2]|0;
 $229 = ($228|0)!=(0|0);
 if ($229) {
  $230 = ((($4)) + 1024|0);
  $231 = HEAP32[$230>>2]|0;
  _free($231);
 }
 $232 = ((($4)) + 4|0);
 $233 = HEAP32[$232>>2]|0;
 $234 = ($233|0)!=(0|0);
 if ($234) {
  $235 = ((($4)) + 4|0);
  $236 = HEAP32[$235>>2]|0;
  _free($236);
 }
 $237 = ((($4)) + 8|0);
 $238 = HEAP32[$237>>2]|0;
 $239 = ($238|0)!=(0|0);
 if ($239) {
  $240 = ((($4)) + 8|0);
  $241 = HEAP32[$240>>2]|0;
  _free($241);
 }
 $242 = HEAP32[$4>>2]|0;
 $243 = ($242|0)!=(0|0);
 if ($243) {
  $244 = HEAP32[$4>>2]|0;
  _free($244);
 }
 $245 = ((($5)) + 3196|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ($246|0)!=(0|0);
 if ($247) {
  $248 = ((($5)) + 3196|0);
  $249 = HEAP32[$248>>2]|0;
  _free($249);
 }
 $250 = ((($5)) + 3200|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = ($251|0)!=(0|0);
 if ($252) {
  $253 = ((($5)) + 3200|0);
  $254 = HEAP32[$253>>2]|0;
  _free($254);
 }
 $255 = ((($5)) + 1796|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = ($256|0)!=(0|0);
 if ($257) {
  $258 = ((($5)) + 1796|0);
  $259 = HEAP32[$258>>2]|0;
  _free($259);
 }
 $260 = ((($5)) + 1024|0);
 $261 = HEAP32[$260>>2]|0;
 $262 = ($261|0)!=(0|0);
 if ($262) {
  $263 = ((($5)) + 1024|0);
  $264 = HEAP32[$263>>2]|0;
  _free($264);
 }
 $265 = ((($5)) + 4|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = ($266|0)!=(0|0);
 if ($267) {
  $268 = ((($5)) + 4|0);
  $269 = HEAP32[$268>>2]|0;
  _free($269);
 }
 $270 = ((($5)) + 8|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = ($271|0)!=(0|0);
 if ($272) {
  $273 = ((($5)) + 8|0);
  $274 = HEAP32[$273>>2]|0;
  _free($274);
 }
 $275 = HEAP32[$5>>2]|0;
 $276 = ($275|0)!=(0|0);
 if ($276) {
  $277 = HEAP32[$5>>2]|0;
  _free($277);
 }
 $278 = ((($9)) + 8|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = ($279|0)!=(0|0);
 if ($280) {
  $281 = ((($9)) + 8|0);
  $282 = HEAP32[$281>>2]|0;
  _free($282);
 }
 $283 = ((($9)) + 916|0);
 $284 = HEAP32[$283>>2]|0;
 $285 = ($284|0)!=(0|0);
 if (!($285)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $286 = ((($9)) + 916|0);
 $287 = HEAP32[$286>>2]|0;
 _free($287);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcCosinus($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0.0, $127 = 0.0, $128 = 0.0, $129 = 0.0;
 var $13 = 0, $130 = 0.0, $131 = 0.0, $132 = 0.0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0.0, $143 = 0.0, $144 = 0.0, $145 = 0.0, $146 = 0.0, $147 = 0.0;
 var $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0.0, $161 = 0.0, $162 = 0.0, $163 = 0.0, $164 = 0.0, $165 = 0.0;
 var $166 = 0.0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0.0, $174 = 0.0, $175 = 0.0, $176 = 0.0, $177 = 0.0, $178 = 0.0, $179 = 0.0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0.0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0.0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0.0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0.0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0.0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0.0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0.0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0;
 var $30 = 0.0, $31 = 0.0, $32 = 0.0, $33 = 0.0, $34 = 0.0, $35 = 0.0, $36 = 0.0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0.0, $52 = 0.0, $53 = 0.0, $54 = 0.0, $55 = 0.0, $56 = 0.0, $57 = 0.0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0.0, $65 = 0.0, $66 = 0.0;
 var $67 = 0.0, $68 = 0.0, $69 = 0.0, $7 = 0.0, $70 = 0.0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr23 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 50448|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(50448|0);
 $$byval_copy30 = sp + 45104|0;
 $$byval_copy29 = sp + 41888|0;
 $$byval_copy28 = sp + 38672|0;
 $$byval_copy27 = sp + 35456|0;
 $$byval_copy26 = sp + 32240|0;
 $$byval_copy = sp + 29024|0;
 $vararg_buffer24 = sp + 29016|0;
 $vararg_buffer20 = sp + 29008|0;
 $vararg_buffer18 = sp + 29000|0;
 $vararg_buffer16 = sp + 28992|0;
 $vararg_buffer14 = sp + 28984|0;
 $vararg_buffer11 = sp + 28976|0;
 $vararg_buffer9 = sp + 28968|0;
 $vararg_buffer5 = sp + 28960|0;
 $vararg_buffer2 = sp + 28952|0;
 $vararg_buffer = sp + 28944|0;
 $1 = sp + 25728|0;
 $2 = sp + 49848|0;
 $3 = sp + 22512|0;
 $4 = sp + 19296|0;
 $5 = sp + 16080|0;
 $8 = sp + 49548|0;
 $9 = sp + 48320|0;
 $10 = sp + 49248|0;
 $11 = sp + 12864|0;
 $12 = sp + 9648|0;
 $13 = sp + 6432|0;
 $14 = sp + 3216|0;
 $15 = sp;
 $6 = 0;
 $7 = 0.0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($8|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 _memset(($9|0),0,920)|0;
 _memset(($10|0),0,300)|0;
 (_getlex()|0);
 $16 = HEAP32[7954]|0;
 $17 = ($16|0)==(223);
 do {
  if ($17) {
   $18 = HEAP32[(31976)>>2]|0;
   $19 = (+($18|0));
   $20 = $19 * 3.1415926535897931;
   $21 = $20 / 180.0;
   $22 = (+Math_cos((+$21)));
   $23 = $22;
   $7 = $23;
   $24 = $7;
   $25 = $24;
   $26 = ((($1)) + 96|0);
   HEAPF64[$26>>3] = $25;
   $27 = ((($1)) + 84|0);
   HEAP32[$27>>2] = 1;
  } else {
   $28 = HEAP32[7954]|0;
   $29 = ($28|0)==(226);
   if ($29) {
    $30 = +HEAPF64[(31976)>>3];
    $31 = $30 * 3.1415926535897931;
    $32 = $31 / 180.0;
    $33 = (+Math_cos((+$32)));
    $34 = $33;
    $7 = $34;
    $35 = $7;
    $36 = $35;
    $37 = ((($1)) + 96|0);
    HEAPF64[$37>>3] = $36;
    $38 = ((($1)) + 84|0);
    HEAP32[$38>>2] = 1;
    break;
   }
   $39 = HEAP32[7954]|0;
   $40 = ($39|0)==(227);
   $41 = HEAP32[7954]|0;
   if ($40) {
    $42 = ($41|0)==(227);
    if (!($42)) {
     break;
    }
    $43 = HEAP8[(31976)>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = ($44|0)==(45);
    if (!($45)) {
     break;
    }
    _get_Minus_Val($11);
    _memcpy(($5|0),($11|0),3216)|0;
    $46 = ((($5)) + 84|0);
    $47 = HEAP32[$46>>2]|0;
    $48 = ($47|0)==(0);
    if ($48) {
     $49 = ((($5)) + 88|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = (+($50|0));
     $52 = $51 * 3.1415926535897931;
     $53 = $52 / 180.0;
     $54 = (+Math_cos((+$53)));
     $55 = $54;
     $7 = $55;
     $56 = $7;
     $57 = $56;
     $58 = ((($1)) + 96|0);
     HEAPF64[$58>>3] = $57;
     $59 = ((($1)) + 84|0);
     HEAP32[$59>>2] = 1;
     break;
    }
    $60 = ((($5)) + 84|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)==(1);
    if (!($62)) {
     break;
    }
    $63 = ((($5)) + 96|0);
    $64 = +HEAPF64[$63>>3];
    $65 = $64 * 3.1415926535897931;
    $66 = $65 / 180.0;
    $67 = (+Math_cos((+$66)));
    $68 = $67;
    $7 = $68;
    $69 = $7;
    $70 = $69;
    $71 = ((($1)) + 96|0);
    HEAPF64[$71>>3] = $70;
    $72 = ((($1)) + 84|0);
    HEAP32[$72>>2] = 1;
    break;
   }
   $73 = ($41|0)==(225);
   if ($73) {
    _Error(10212,$vararg_buffer);
    break;
   }
   $74 = HEAP32[7954]|0;
   $75 = ($74|0)==(228);
   if (!($75)) {
    $151 = (_strlen(128380)|0);
    $152 = ($151>>>0)>(0);
    if ($152) {
     HEAP32[$vararg_buffer20>>2] = 128380;
     $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
     HEAP32[$vararg_ptr23>>2] = (31976);
     (_snprintf($10,300,15808,$vararg_buffer20)|0);
     $153 = HEAP32[8091]|0;
     _memcpy(($$byval_copy29|0),($1|0),3216)|0;
     _ValLabel($14,$10,$153,$$byval_copy29,232);
     _memcpy(($1|0),($14|0),3216)|0;
    } else {
     $154 = HEAP32[8088]|0;
     _memcpy(($$byval_copy30|0),($1|0),3216)|0;
     _ValLabel($15,(31976),$154,$$byval_copy30,232);
     _memcpy(($1|0),($15|0),3216)|0;
    }
    $155 = ((($1)) + 84|0);
    $156 = HEAP32[$155>>2]|0;
    $157 = ($156|0)==(0);
    if ($157) {
     $158 = ((($1)) + 88|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = (+($159|0));
     $161 = $160 * 3.1415926535897931;
     $162 = $161 / 180.0;
     $163 = (+Math_cos((+$162)));
     $164 = $163;
     $7 = $164;
     $165 = $7;
     $166 = $165;
     $167 = ((($1)) + 96|0);
     HEAPF64[$167>>3] = $166;
     $168 = ((($1)) + 84|0);
     HEAP32[$168>>2] = 1;
     break;
    }
    $169 = ((($1)) + 84|0);
    $170 = HEAP32[$169>>2]|0;
    $171 = ($170|0)==(1);
    if ($171) {
     $172 = ((($1)) + 96|0);
     $173 = +HEAPF64[$172>>3];
     $174 = $173 * 3.1415926535897931;
     $175 = $174 / 180.0;
     $176 = (+Math_cos((+$175)));
     $177 = $176;
     $7 = $177;
     $178 = $7;
     $179 = $178;
     $180 = ((($1)) + 96|0);
     HEAPF64[$180>>3] = $179;
     $181 = ((($1)) + 84|0);
     HEAP32[$181>>2] = 1;
     break;
    } else {
     _Error(10212,$vararg_buffer24);
     break;
    }
   }
   $76 = (_strlen((31976))|0);
   $77 = ($76>>>0)>(0);
   if ($77) {
    $78 = ((($3)) + 420|0);
    (_strcpy($78,(31976))|0);
    $79 = ((($3)) + 720|0);
    _getArrayName((31976),$79);
    $80 = ((($3)) + 870|0);
    _getArrayIdx((31976),$80);
    $81 = (_strlen(128380)|0);
    $82 = ($81>>>0)>(0);
    if ($82) {
     $83 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer2>>2] = 128380;
     $vararg_ptr4 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $83;
     (_snprintf($10,300,15808,$vararg_buffer2)|0);
     $84 = ((($3)) + 720|0);
     _memset(($84|0),0,150)|0;
     $85 = ((($3)) + 720|0);
     (_strcpy($85,$10)|0);
     $86 = ((($3)) + 870|0);
     $87 = HEAP8[$86>>0]|0;
     $88 = $87 << 24 >> 24;
     $89 = (_isdigit($88)|0);
     $90 = ($89|0)!=(0);
     if (!($90)) {
      _memset(($10|0),0,300)|0;
      $91 = ((($3)) + 870|0);
      HEAP32[$vararg_buffer5>>2] = 128380;
      $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $91;
      (_snprintf($10,300,15808,$vararg_buffer5)|0);
      $92 = ((($3)) + 870|0);
      _memset(($92|0),0,150)|0;
      $93 = ((($3)) + 870|0);
      (_strcpy($93,$10)|0);
     }
    }
    $94 = ((($3)) + 870|0);
    $95 = HEAP8[$94>>0]|0;
    $96 = $95 << 24 >> 24;
    $97 = (_isdigit($96)|0);
    $98 = ($97|0)!=(0);
    $99 = ((($3)) + 870|0);
    do {
     if ($98) {
      $100 = (_atoi($99)|0);
      $6 = $100;
     } else {
      $101 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($4|0),3216)|0;
      _ValLabel($12,$99,$101,$$byval_copy,232);
      _memcpy(($4|0),($12|0),3216)|0;
      $102 = ((($4)) + 84|0);
      $103 = HEAP32[$102>>2]|0;
      $104 = ($103|0)==(0);
      if ($104) {
       $105 = ((($4)) + 88|0);
       $106 = HEAP32[$105>>2]|0;
       $6 = $106;
       break;
      } else {
       _Error(16065,$vararg_buffer9);
       break;
      }
     }
    } while(0);
    $107 = ((($3)) + 720|0);
    $108 = HEAP32[8088]|0;
    _memcpy(($$byval_copy26|0),($3|0),3216)|0;
    _ValLabel($13,$107,$108,$$byval_copy26,232);
    _memcpy(($3|0),($13|0),3216)|0;
    $109 = ((($3)) + 870|0);
    $110 = $6;
    HEAP32[$vararg_buffer11>>2] = $110;
    (_snprintf($109,150,16176,$vararg_buffer11)|0);
    $111 = $6;
    $112 = ($111|0)<(0);
    $113 = $6;
    $114 = ($113|0)>(99999000);
    $or$cond = $112 | $114;
    if ($or$cond) {
     _Error(16096,$vararg_buffer14);
    }
    $115 = ((($3)) + 84|0);
    $116 = HEAP32[$115>>2]|0;
    $117 = ($116|0)==(6);
    if ($117) {
     $118 = ((($3)) + 404|0);
     $119 = HEAP32[$118>>2]|0;
     $120 = ($119|0)!=(0);
     if ($120) {
      $121 = ((($3)) + 404|0);
      $122 = HEAP32[$121>>2]|0;
      $123 = ($122|0)==(0);
      if ($123) {
       _Error(10236,$vararg_buffer16);
      }
      $124 = $6;
      _memcpy(($$byval_copy27|0),($3|0),3216)|0;
      $125 = (_get_int_array($$byval_copy27,$124)|0);
      $126 = (+($125|0));
      $127 = $126 * 3.1415926535897931;
      $128 = $127 / 180.0;
      $129 = (+Math_cos((+$128)));
      $130 = $129;
      $7 = $130;
      $131 = $7;
      $132 = $131;
      $133 = ((($1)) + 96|0);
      HEAPF64[$133>>3] = $132;
      $134 = ((($1)) + 84|0);
      HEAP32[$134>>2] = 1;
      break;
     }
    }
    $135 = ((($3)) + 84|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)==(7);
    if ($137) {
     $138 = ((($3)) + 408|0);
     $139 = HEAP32[$138>>2]|0;
     $140 = ($139|0)!=(0);
     if ($140) {
      $141 = $6;
      _memcpy(($$byval_copy28|0),($3|0),3216)|0;
      $142 = (+_get_dbl_array($$byval_copy28,$141));
      $143 = $142 * 3.1415926535897931;
      $144 = $143 / 180.0;
      $145 = (+Math_cos((+$144)));
      $146 = $145;
      $7 = $146;
      $147 = $7;
      $148 = $147;
      $149 = ((($1)) + 96|0);
      HEAPF64[$149>>3] = $148;
      $150 = ((($1)) + 84|0);
      HEAP32[$150>>2] = 1;
      break;
     }
    }
    _Error(10212,$vararg_buffer18);
   }
  }
 } while(0);
 $182 = ((($3)) + 3196|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ($183|0)!=(0|0);
 if ($184) {
  $185 = ((($3)) + 3196|0);
  $186 = HEAP32[$185>>2]|0;
  _free($186);
 }
 $187 = ((($3)) + 3200|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ($188|0)!=(0|0);
 if ($189) {
  $190 = ((($3)) + 3200|0);
  $191 = HEAP32[$190>>2]|0;
  _free($191);
 }
 $192 = ((($3)) + 1796|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ($193|0)!=(0|0);
 if ($194) {
  $195 = ((($3)) + 1796|0);
  $196 = HEAP32[$195>>2]|0;
  _free($196);
 }
 $197 = ((($3)) + 1024|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = ($198|0)!=(0|0);
 if ($199) {
  $200 = ((($3)) + 1024|0);
  $201 = HEAP32[$200>>2]|0;
  _free($201);
 }
 $202 = ((($3)) + 4|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = ($203|0)!=(0|0);
 if ($204) {
  $205 = ((($3)) + 4|0);
  $206 = HEAP32[$205>>2]|0;
  _free($206);
 }
 $207 = ((($3)) + 8|0);
 $208 = HEAP32[$207>>2]|0;
 $209 = ($208|0)!=(0|0);
 if ($209) {
  $210 = ((($3)) + 8|0);
  $211 = HEAP32[$210>>2]|0;
  _free($211);
 }
 $212 = HEAP32[$3>>2]|0;
 $213 = ($212|0)!=(0|0);
 if ($213) {
  $214 = HEAP32[$3>>2]|0;
  _free($214);
 }
 $215 = ((($4)) + 3196|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = ($216|0)!=(0|0);
 if ($217) {
  $218 = ((($4)) + 3196|0);
  $219 = HEAP32[$218>>2]|0;
  _free($219);
 }
 $220 = ((($4)) + 3200|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = ($221|0)!=(0|0);
 if ($222) {
  $223 = ((($4)) + 3200|0);
  $224 = HEAP32[$223>>2]|0;
  _free($224);
 }
 $225 = ((($4)) + 1796|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = ($226|0)!=(0|0);
 if ($227) {
  $228 = ((($4)) + 1796|0);
  $229 = HEAP32[$228>>2]|0;
  _free($229);
 }
 $230 = ((($4)) + 1024|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = ($231|0)!=(0|0);
 if ($232) {
  $233 = ((($4)) + 1024|0);
  $234 = HEAP32[$233>>2]|0;
  _free($234);
 }
 $235 = ((($4)) + 4|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = ($236|0)!=(0|0);
 if ($237) {
  $238 = ((($4)) + 4|0);
  $239 = HEAP32[$238>>2]|0;
  _free($239);
 }
 $240 = ((($4)) + 8|0);
 $241 = HEAP32[$240>>2]|0;
 $242 = ($241|0)!=(0|0);
 if ($242) {
  $243 = ((($4)) + 8|0);
  $244 = HEAP32[$243>>2]|0;
  _free($244);
 }
 $245 = HEAP32[$4>>2]|0;
 $246 = ($245|0)!=(0|0);
 if ($246) {
  $247 = HEAP32[$4>>2]|0;
  _free($247);
 }
 $248 = ((($5)) + 3196|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = ($249|0)!=(0|0);
 if ($250) {
  $251 = ((($5)) + 3196|0);
  $252 = HEAP32[$251>>2]|0;
  _free($252);
 }
 $253 = ((($5)) + 3200|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ($254|0)!=(0|0);
 if ($255) {
  $256 = ((($5)) + 3200|0);
  $257 = HEAP32[$256>>2]|0;
  _free($257);
 }
 $258 = ((($5)) + 1796|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = ($259|0)!=(0|0);
 if ($260) {
  $261 = ((($5)) + 1796|0);
  $262 = HEAP32[$261>>2]|0;
  _free($262);
 }
 $263 = ((($5)) + 1024|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = ($264|0)!=(0|0);
 if ($265) {
  $266 = ((($5)) + 1024|0);
  $267 = HEAP32[$266>>2]|0;
  _free($267);
 }
 $268 = ((($5)) + 4|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = ($269|0)!=(0|0);
 if ($270) {
  $271 = ((($5)) + 4|0);
  $272 = HEAP32[$271>>2]|0;
  _free($272);
 }
 $273 = ((($5)) + 8|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = ($274|0)!=(0|0);
 if ($275) {
  $276 = ((($5)) + 8|0);
  $277 = HEAP32[$276>>2]|0;
  _free($277);
 }
 $278 = HEAP32[$5>>2]|0;
 $279 = ($278|0)!=(0|0);
 if ($279) {
  $280 = HEAP32[$5>>2]|0;
  _free($280);
 }
 $281 = ((($9)) + 8|0);
 $282 = HEAP32[$281>>2]|0;
 $283 = ($282|0)!=(0|0);
 if ($283) {
  $284 = ((($9)) + 8|0);
  $285 = HEAP32[$284>>2]|0;
  _free($285);
 }
 $286 = ((($9)) + 916|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = ($287|0)!=(0|0);
 if (!($288)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $289 = ((($9)) + 916|0);
 $290 = HEAP32[$289>>2]|0;
 _free($290);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcFaktorial($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0.0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer24 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr23 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 40800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(40800|0);
 $$byval_copy29 = sp + 35456|0;
 $$byval_copy28 = sp + 32240|0;
 $$byval_copy27 = sp + 29024|0;
 $$byval_copy26 = sp + 25808|0;
 $$byval_copy = sp + 22592|0;
 $vararg_buffer24 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer14 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer9 = sp + 22536|0;
 $vararg_buffer5 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 40200|0;
 $3 = sp + 16080|0;
 $4 = sp + 12864|0;
 $6 = sp + 39896|0;
 $7 = sp + 38672|0;
 $8 = sp + 39596|0;
 $9 = sp + 9648|0;
 $10 = sp + 6432|0;
 $11 = sp + 3216|0;
 $12 = sp;
 $5 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($6|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 _memset(($7|0),0,920)|0;
 _memset(($8|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 (_getlex()|0);
 $13 = HEAP32[7954]|0;
 $14 = ($13|0)==(223);
 do {
  if ($14) {
   $15 = HEAP32[(31976)>>2]|0;
   $16 = (+_faktorial($15));
   $17 = ((($1)) + 96|0);
   HEAPF64[$17>>3] = $16;
   $18 = ((($1)) + 84|0);
   HEAP32[$18>>2] = 1;
  } else {
   $19 = HEAP32[7954]|0;
   $20 = ($19|0)==(226);
   if ($20) {
    $21 = HEAP32[(31976)>>2]|0;
    $22 = (Math_abs(($21|0))|0);
    $23 = (+_faktorial($22));
    $24 = ((($1)) + 96|0);
    HEAPF64[$24>>3] = $23;
    $25 = ((($1)) + 84|0);
    HEAP32[$25>>2] = 1;
    break;
   }
   $26 = HEAP32[7954]|0;
   $27 = ($26|0)==(225);
   if ($27) {
    _Error(10274,$vararg_buffer);
    break;
   }
   $28 = HEAP32[7954]|0;
   $29 = ($28|0)==(228);
   if (!($29)) {
    $83 = (_strlen(128380)|0);
    $84 = ($83>>>0)>(0);
    if ($84) {
     HEAP32[$vararg_buffer20>>2] = 128380;
     $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
     HEAP32[$vararg_ptr23>>2] = (31976);
     (_snprintf($8,300,15808,$vararg_buffer20)|0);
     $85 = HEAP32[8091]|0;
     _memcpy(($$byval_copy28|0),($1|0),3216)|0;
     _ValLabel($11,$8,$85,$$byval_copy28,232);
     _memcpy(($3|0),($11|0),3216)|0;
    } else {
     $86 = HEAP32[8088]|0;
     _memcpy(($$byval_copy29|0),($1|0),3216)|0;
     _ValLabel($12,(31976),$86,$$byval_copy29,232);
     _memcpy(($3|0),($12|0),3216)|0;
    }
    $87 = ((($3)) + 84|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(0);
    if ($89) {
     $90 = ((($3)) + 88|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (+_faktorial($91));
     $93 = ((($1)) + 96|0);
     HEAPF64[$93>>3] = $92;
     $94 = ((($1)) + 84|0);
     HEAP32[$94>>2] = 1;
     break;
    } else {
     _Error(10274,$vararg_buffer24);
     break;
    }
   }
   $30 = (_strlen((31976))|0);
   $31 = ($30>>>0)>(0);
   if ($31) {
    $32 = ((($3)) + 420|0);
    (_strcpy($32,(31976))|0);
    $33 = ((($3)) + 720|0);
    _getArrayName((31976),$33);
    $34 = ((($3)) + 870|0);
    _getArrayIdx((31976),$34);
    $35 = (_strlen(128380)|0);
    $36 = ($35>>>0)>(0);
    if ($36) {
     $37 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer2>>2] = 128380;
     $vararg_ptr4 = ((($vararg_buffer2)) + 4|0);
     HEAP32[$vararg_ptr4>>2] = $37;
     (_snprintf($8,300,15808,$vararg_buffer2)|0);
     $38 = ((($3)) + 720|0);
     _memset(($38|0),0,150)|0;
     $39 = ((($3)) + 720|0);
     (_strcpy($39,$8)|0);
     $40 = ((($3)) + 870|0);
     $41 = HEAP8[$40>>0]|0;
     $42 = $41 << 24 >> 24;
     $43 = (_isdigit($42)|0);
     $44 = ($43|0)!=(0);
     if (!($44)) {
      _memset(($8|0),0,300)|0;
      $45 = ((($3)) + 870|0);
      HEAP32[$vararg_buffer5>>2] = 128380;
      $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $45;
      (_snprintf($8,300,15808,$vararg_buffer5)|0);
      $46 = ((($3)) + 870|0);
      _memset(($46|0),0,150)|0;
      $47 = ((($3)) + 870|0);
      (_strcpy($47,$8)|0);
     }
    }
    $48 = ((($3)) + 870|0);
    $49 = HEAP8[$48>>0]|0;
    $50 = $49 << 24 >> 24;
    $51 = (_isdigit($50)|0);
    $52 = ($51|0)!=(0);
    $53 = ((($3)) + 870|0);
    do {
     if ($52) {
      $54 = (_atoi($53)|0);
      $5 = $54;
     } else {
      $55 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($4|0),3216)|0;
      _ValLabel($9,$53,$55,$$byval_copy,232);
      _memcpy(($4|0),($9|0),3216)|0;
      $56 = ((($4)) + 84|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(0);
      if ($58) {
       $59 = ((($4)) + 88|0);
       $60 = HEAP32[$59>>2]|0;
       $5 = $60;
       break;
      } else {
       _Error(16065,$vararg_buffer9);
       break;
      }
     }
    } while(0);
    $61 = ((($3)) + 720|0);
    $62 = HEAP32[8088]|0;
    _memcpy(($$byval_copy26|0),($3|0),3216)|0;
    _ValLabel($10,$61,$62,$$byval_copy26,232);
    _memcpy(($3|0),($10|0),3216)|0;
    $63 = ((($3)) + 870|0);
    $64 = $5;
    HEAP32[$vararg_buffer11>>2] = $64;
    (_snprintf($63,150,16176,$vararg_buffer11)|0);
    $65 = $5;
    $66 = ($65|0)<(0);
    $67 = $5;
    $68 = ($67|0)>(99999000);
    $or$cond = $66 | $68;
    if ($or$cond) {
     _Error(16096,$vararg_buffer14);
    }
    $69 = ((($3)) + 84|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(6);
    if ($71) {
     $72 = ((($3)) + 404|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)!=(0);
     if ($74) {
      $75 = ((($3)) + 404|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)==(0);
      if ($77) {
       _Error(10304,$vararg_buffer16);
      }
      $78 = $5;
      _memcpy(($$byval_copy27|0),($3|0),3216)|0;
      $79 = (_get_int_array($$byval_copy27,$78)|0);
      $80 = (+_faktorial($79));
      $81 = ((($1)) + 96|0);
      HEAPF64[$81>>3] = $80;
      $82 = ((($1)) + 84|0);
      HEAP32[$82>>2] = 1;
      break;
     }
    }
    _Error(10274,$vararg_buffer18);
   }
  }
 } while(0);
 $95 = ((($3)) + 3196|0);
 $96 = HEAP32[$95>>2]|0;
 $97 = ($96|0)!=(0|0);
 if ($97) {
  $98 = ((($3)) + 3196|0);
  $99 = HEAP32[$98>>2]|0;
  _free($99);
 }
 $100 = ((($3)) + 3200|0);
 $101 = HEAP32[$100>>2]|0;
 $102 = ($101|0)!=(0|0);
 if ($102) {
  $103 = ((($3)) + 3200|0);
  $104 = HEAP32[$103>>2]|0;
  _free($104);
 }
 $105 = ((($3)) + 1796|0);
 $106 = HEAP32[$105>>2]|0;
 $107 = ($106|0)!=(0|0);
 if ($107) {
  $108 = ((($3)) + 1796|0);
  $109 = HEAP32[$108>>2]|0;
  _free($109);
 }
 $110 = ((($3)) + 1024|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)!=(0|0);
 if ($112) {
  $113 = ((($3)) + 1024|0);
  $114 = HEAP32[$113>>2]|0;
  _free($114);
 }
 $115 = ((($3)) + 4|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)!=(0|0);
 if ($117) {
  $118 = ((($3)) + 4|0);
  $119 = HEAP32[$118>>2]|0;
  _free($119);
 }
 $120 = ((($3)) + 8|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ($121|0)!=(0|0);
 if ($122) {
  $123 = ((($3)) + 8|0);
  $124 = HEAP32[$123>>2]|0;
  _free($124);
 }
 $125 = HEAP32[$3>>2]|0;
 $126 = ($125|0)!=(0|0);
 if ($126) {
  $127 = HEAP32[$3>>2]|0;
  _free($127);
 }
 $128 = ((($4)) + 3196|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)!=(0|0);
 if ($130) {
  $131 = ((($4)) + 3196|0);
  $132 = HEAP32[$131>>2]|0;
  _free($132);
 }
 $133 = ((($4)) + 3200|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)!=(0|0);
 if ($135) {
  $136 = ((($4)) + 3200|0);
  $137 = HEAP32[$136>>2]|0;
  _free($137);
 }
 $138 = ((($4)) + 1796|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)!=(0|0);
 if ($140) {
  $141 = ((($4)) + 1796|0);
  $142 = HEAP32[$141>>2]|0;
  _free($142);
 }
 $143 = ((($4)) + 1024|0);
 $144 = HEAP32[$143>>2]|0;
 $145 = ($144|0)!=(0|0);
 if ($145) {
  $146 = ((($4)) + 1024|0);
  $147 = HEAP32[$146>>2]|0;
  _free($147);
 }
 $148 = ((($4)) + 4|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)!=(0|0);
 if ($150) {
  $151 = ((($4)) + 4|0);
  $152 = HEAP32[$151>>2]|0;
  _free($152);
 }
 $153 = ((($4)) + 8|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ($154|0)!=(0|0);
 if ($155) {
  $156 = ((($4)) + 8|0);
  $157 = HEAP32[$156>>2]|0;
  _free($157);
 }
 $158 = HEAP32[$4>>2]|0;
 $159 = ($158|0)!=(0|0);
 if ($159) {
  $160 = HEAP32[$4>>2]|0;
  _free($160);
 }
 $161 = ((($7)) + 8|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)!=(0|0);
 if ($163) {
  $164 = ((($7)) + 8|0);
  $165 = HEAP32[$164>>2]|0;
  _free($165);
 }
 $166 = ((($7)) + 916|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)!=(0|0);
 if (!($168)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $169 = ((($7)) + 916|0);
 $170 = HEAP32[$169>>2]|0;
 _free($170);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _faktorial($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $1 = $0;
 $4 = 1.0;
 $5 = $1;
 $6 = ($5|0)==(0);
 if ($6) {
  $3 = 1;
 } else {
  $7 = $1;
  $3 = $7;
 }
 $2 = 1;
 while(1) {
  $8 = $2;
  $9 = $3;
  $10 = ($8|0)<=($9|0);
  $11 = $4;
  if (!($10)) {
   break;
  }
  $12 = $2;
  $13 = (+($12|0));
  $14 = $11 * $13;
  $4 = $14;
  $15 = $2;
  $16 = (($15) + 1)|0;
  $2 = $16;
 }
 STACKTOP = sp;return (+$11);
}
function _funcPermutasi($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $$byval_copy34 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr25 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 44048|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(44048|0);
 $$byval_copy34 = sp + 38688|0;
 $$byval_copy33 = sp + 35472|0;
 $$byval_copy32 = sp + 32256|0;
 $$byval_copy31 = sp + 29040|0;
 $$byval_copy30 = sp + 25824|0;
 $$byval_copy = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer26 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $3 = sp + 43440|0;
 $4 = sp + 16080|0;
 $5 = sp + 12864|0;
 $9 = sp + 43140|0;
 $10 = sp + 41904|0;
 $11 = sp + 42840|0;
 $12 = sp + 9648|0;
 $13 = sp + 6432|0;
 $14 = sp + 3216|0;
 $15 = sp;
 $2 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($9|0),0,300)|0;
 _memset(($3|0),0,600)|0;
 _memset(($10|0),0,920)|0;
 _memset(($11|0),0,300)|0;
 _memset(($3|0),0,600)|0;
 $2 = 0;
 while(1) {
  (_getlex()|0);
  $16 = HEAP32[7954]|0;
  $17 = ($16|0)==(223);
  do {
   if ($17) {
    $18 = $2;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = HEAP32[(31976)>>2]|0;
     $6 = $20;
    }
    $21 = $2;
    $22 = ($21|0)==(1);
    if ($22) {
     $23 = HEAP32[(31976)>>2]|0;
     $7 = $23;
    }
   } else {
    $24 = HEAP32[7954]|0;
    $25 = ($24|0)==(226);
    if ($25) {
     _Error(10348,$vararg_buffer);
     break;
    }
    $26 = HEAP32[7954]|0;
    $27 = ($26|0)==(225);
    if ($27) {
     _Error(10348,$vararg_buffer2);
     break;
    }
    $28 = HEAP32[7954]|0;
    $29 = ($28|0)==(228);
    if (!($29)) {
     $86 = (_strlen(128380)|0);
     $87 = ($86>>>0)>(0);
     if ($87) {
      HEAP32[$vararg_buffer22>>2] = 128380;
      $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
      HEAP32[$vararg_ptr25>>2] = (31976);
      (_snprintf($11,300,15808,$vararg_buffer22)|0);
      $88 = HEAP32[8091]|0;
      _memcpy(($$byval_copy33|0),($4|0),3216)|0;
      _ValLabel($14,$11,$88,$$byval_copy33,232);
      _memcpy(($4|0),($14|0),3216)|0;
     } else {
      $89 = HEAP32[8088]|0;
      _memcpy(($$byval_copy34|0),($4|0),3216)|0;
      _ValLabel($15,(31976),$89,$$byval_copy34,232);
      _memcpy(($4|0),($15|0),3216)|0;
     }
     $90 = ((($4)) + 84|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==(0);
     if (!($92)) {
      _Error(10348,$vararg_buffer26);
      break;
     }
     $93 = $2;
     $94 = ($93|0)==(0);
     if ($94) {
      $95 = ((($4)) + 88|0);
      $96 = HEAP32[$95>>2]|0;
      $6 = $96;
     }
     $97 = $2;
     $98 = ($97|0)==(1);
     if (!($98)) {
      break;
     }
     $99 = ((($4)) + 88|0);
     $100 = HEAP32[$99>>2]|0;
     $7 = $100;
     break;
    }
    $30 = (_strlen((31976))|0);
    $31 = ($30>>>0)>(0);
    if ($31) {
     $32 = ((($4)) + 420|0);
     (_strcpy($32,(31976))|0);
     $33 = ((($4)) + 720|0);
     _getArrayName((31976),$33);
     $34 = ((($4)) + 870|0);
     _getArrayIdx((31976),$34);
     $35 = (_strlen(128380)|0);
     $36 = ($35>>>0)>(0);
     if ($36) {
      $37 = ((($4)) + 720|0);
      HEAP32[$vararg_buffer4>>2] = 128380;
      $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr6>>2] = $37;
      (_snprintf($11,300,15808,$vararg_buffer4)|0);
      $38 = ((($4)) + 720|0);
      _memset(($38|0),0,150)|0;
      $39 = ((($4)) + 720|0);
      (_strcpy($39,$11)|0);
      $40 = ((($4)) + 870|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41 << 24 >> 24;
      $43 = (_isdigit($42)|0);
      $44 = ($43|0)!=(0);
      if (!($44)) {
       _memset(($11|0),0,300)|0;
       $45 = ((($4)) + 870|0);
       HEAP32[$vararg_buffer7>>2] = 128380;
       $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
       HEAP32[$vararg_ptr10>>2] = $45;
       (_snprintf($11,300,15808,$vararg_buffer7)|0);
       $46 = ((($4)) + 870|0);
       _memset(($46|0),0,150)|0;
       $47 = ((($4)) + 870|0);
       (_strcpy($47,$11)|0);
      }
     }
     $48 = ((($4)) + 870|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49 << 24 >> 24;
     $51 = (_isdigit($50)|0);
     $52 = ($51|0)!=(0);
     $53 = ((($4)) + 870|0);
     do {
      if ($52) {
       $54 = (_atoi($53)|0);
       $8 = $54;
      } else {
       $55 = HEAP32[8088]|0;
       _memcpy(($$byval_copy|0),($5|0),3216)|0;
       _ValLabel($12,$53,$55,$$byval_copy,232);
       _memcpy(($5|0),($12|0),3216)|0;
       $56 = ((($5)) + 84|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0);
       if ($58) {
        $59 = ((($5)) + 88|0);
        $60 = HEAP32[$59>>2]|0;
        $8 = $60;
        break;
       } else {
        _Error(16065,$vararg_buffer11);
        break;
       }
      }
     } while(0);
     $61 = ((($4)) + 720|0);
     $62 = HEAP32[8088]|0;
     _memcpy(($$byval_copy30|0),($4|0),3216)|0;
     _ValLabel($13,$61,$62,$$byval_copy30,232);
     _memcpy(($4|0),($13|0),3216)|0;
     $63 = ((($4)) + 870|0);
     $64 = $8;
     HEAP32[$vararg_buffer13>>2] = $64;
     (_snprintf($63,150,16176,$vararg_buffer13)|0);
     $65 = $8;
     $66 = ($65|0)<(0);
     $67 = $8;
     $68 = ($67|0)>(99999000);
     $or$cond = $66 | $68;
     if ($or$cond) {
      _Error(16096,$vararg_buffer16);
     }
     $69 = ((($4)) + 84|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(6);
     if ($71) {
      $72 = ((($4)) + 404|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)!=(0);
      if ($74) {
       $75 = ((($4)) + 404|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ($76|0)==(0);
       if ($77) {
        _Error(10378,$vararg_buffer18);
       }
       $78 = $2;
       $79 = ($78|0)==(0);
       if ($79) {
        $80 = $8;
        _memcpy(($$byval_copy31|0),($4|0),3216)|0;
        $81 = (_get_int_array($$byval_copy31,$80)|0);
        $6 = $81;
       }
       $82 = $2;
       $83 = ($82|0)==(1);
       if (!($83)) {
        break;
       }
       $84 = $8;
       _memcpy(($$byval_copy32|0),($4|0),3216)|0;
       $85 = (_get_int_array($$byval_copy32,$84)|0);
       $7 = $85;
       break;
      }
     }
     _Error(10348,$vararg_buffer20);
    }
   }
  } while(0);
  $101 = $2;
  $102 = (($101) + 1)|0;
  $2 = $102;
  (_getlex()|0);
  $103 = HEAP32[7954]|0;
  $104 = ($103|0)==(227);
  if (!($104)) {
   break;
  }
  $105 = HEAP8[(31976)>>0]|0;
  $106 = $105 << 24 >> 24;
  $107 = ($106|0)==(44);
  if (!($107)) {
   break;
  }
 }
 _ungetlex();
 $108 = $2;
 $109 = ($108|0)!=(2);
 if ($109) {
  _Error(10348,$vararg_buffer28);
 } else {
  $110 = $6;
  $111 = $7;
  $112 = (+_permutasi($110,$111));
  $113 = ((($1)) + 96|0);
  HEAPF64[$113>>3] = $112;
  $114 = ((($1)) + 84|0);
  HEAP32[$114>>2] = 1;
 }
 $115 = ((($4)) + 3196|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)!=(0|0);
 if ($117) {
  $118 = ((($4)) + 3196|0);
  $119 = HEAP32[$118>>2]|0;
  _free($119);
 }
 $120 = ((($4)) + 3200|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ($121|0)!=(0|0);
 if ($122) {
  $123 = ((($4)) + 3200|0);
  $124 = HEAP32[$123>>2]|0;
  _free($124);
 }
 $125 = ((($4)) + 1796|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)!=(0|0);
 if ($127) {
  $128 = ((($4)) + 1796|0);
  $129 = HEAP32[$128>>2]|0;
  _free($129);
 }
 $130 = ((($4)) + 1024|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = ((($4)) + 1024|0);
  $134 = HEAP32[$133>>2]|0;
  _free($134);
 }
 $135 = ((($4)) + 4|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0|0);
 if ($137) {
  $138 = ((($4)) + 4|0);
  $139 = HEAP32[$138>>2]|0;
  _free($139);
 }
 $140 = ((($4)) + 8|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)!=(0|0);
 if ($142) {
  $143 = ((($4)) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  _free($144);
 }
 $145 = HEAP32[$4>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = HEAP32[$4>>2]|0;
  _free($147);
 }
 $148 = ((($5)) + 3196|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)!=(0|0);
 if ($150) {
  $151 = ((($5)) + 3196|0);
  $152 = HEAP32[$151>>2]|0;
  _free($152);
 }
 $153 = ((($5)) + 3200|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ($154|0)!=(0|0);
 if ($155) {
  $156 = ((($5)) + 3200|0);
  $157 = HEAP32[$156>>2]|0;
  _free($157);
 }
 $158 = ((($5)) + 1796|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ($159|0)!=(0|0);
 if ($160) {
  $161 = ((($5)) + 1796|0);
  $162 = HEAP32[$161>>2]|0;
  _free($162);
 }
 $163 = ((($5)) + 1024|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = ($164|0)!=(0|0);
 if ($165) {
  $166 = ((($5)) + 1024|0);
  $167 = HEAP32[$166>>2]|0;
  _free($167);
 }
 $168 = ((($5)) + 4|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)!=(0|0);
 if ($170) {
  $171 = ((($5)) + 4|0);
  $172 = HEAP32[$171>>2]|0;
  _free($172);
 }
 $173 = ((($5)) + 8|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ($174|0)!=(0|0);
 if ($175) {
  $176 = ((($5)) + 8|0);
  $177 = HEAP32[$176>>2]|0;
  _free($177);
 }
 $178 = HEAP32[$5>>2]|0;
 $179 = ($178|0)!=(0|0);
 if ($179) {
  $180 = HEAP32[$5>>2]|0;
  _free($180);
 }
 $181 = ((($10)) + 8|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = ($182|0)!=(0|0);
 if ($183) {
  $184 = ((($10)) + 8|0);
  $185 = HEAP32[$184>>2]|0;
  _free($185);
 }
 $186 = ((($10)) + 916|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = ($187|0)!=(0|0);
 if (!($188)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $189 = ((($10)) + 916|0);
 $190 = HEAP32[$189>>2]|0;
 _free($190);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _permutasi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0.0, $13 = 0, $14 = 0.0, $15 = 0.0, $16 = 0.0, $17 = 0.0, $18 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0.0, $6 = 0.0, $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $2 = $0;
 $3 = $1;
 $8 = $2;
 $9 = $3;
 $10 = (($8) - ($9))|0;
 $4 = $10;
 $11 = $2;
 $12 = (+_faktorial($11));
 $5 = $12;
 $13 = $4;
 $14 = (+_faktorial($13));
 $6 = $14;
 $15 = $5;
 $16 = $6;
 $17 = $15 / $16;
 $7 = $17;
 $18 = $7;
 STACKTOP = sp;return (+$18);
}
function _funcKombinasi($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $$byval_copy34 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr25 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 44048|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(44048|0);
 $$byval_copy34 = sp + 38688|0;
 $$byval_copy33 = sp + 35472|0;
 $$byval_copy32 = sp + 32256|0;
 $$byval_copy31 = sp + 29040|0;
 $$byval_copy30 = sp + 25824|0;
 $$byval_copy = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer26 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $3 = sp + 43440|0;
 $4 = sp + 16080|0;
 $5 = sp + 12864|0;
 $9 = sp + 43140|0;
 $10 = sp + 41904|0;
 $11 = sp + 42840|0;
 $12 = sp + 9648|0;
 $13 = sp + 6432|0;
 $14 = sp + 3216|0;
 $15 = sp;
 $2 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($9|0),0,300)|0;
 _memset(($3|0),0,600)|0;
 _memset(($10|0),0,920)|0;
 _memset(($11|0),0,300)|0;
 _memset(($3|0),0,600)|0;
 $2 = 0;
 while(1) {
  (_getlex()|0);
  $16 = HEAP32[7954]|0;
  $17 = ($16|0)==(223);
  do {
   if ($17) {
    $18 = $2;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = HEAP32[(31976)>>2]|0;
     $6 = $20;
    }
    $21 = $2;
    $22 = ($21|0)==(1);
    if ($22) {
     $23 = HEAP32[(31976)>>2]|0;
     $7 = $23;
    }
   } else {
    $24 = HEAP32[7954]|0;
    $25 = ($24|0)==(226);
    if ($25) {
     _Error(10422,$vararg_buffer);
     break;
    }
    $26 = HEAP32[7954]|0;
    $27 = ($26|0)==(225);
    if ($27) {
     _Error(10422,$vararg_buffer2);
     break;
    }
    $28 = HEAP32[7954]|0;
    $29 = ($28|0)==(228);
    if (!($29)) {
     $86 = (_strlen(128380)|0);
     $87 = ($86>>>0)>(0);
     if ($87) {
      HEAP32[$vararg_buffer22>>2] = 128380;
      $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
      HEAP32[$vararg_ptr25>>2] = (31976);
      (_snprintf($11,300,15808,$vararg_buffer22)|0);
      $88 = HEAP32[8091]|0;
      _memcpy(($$byval_copy33|0),($4|0),3216)|0;
      _ValLabel($14,$11,$88,$$byval_copy33,232);
      _memcpy(($4|0),($14|0),3216)|0;
     } else {
      $89 = HEAP32[8088]|0;
      _memcpy(($$byval_copy34|0),($4|0),3216)|0;
      _ValLabel($15,(31976),$89,$$byval_copy34,232);
      _memcpy(($4|0),($15|0),3216)|0;
     }
     $90 = ((($4)) + 84|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = ($91|0)==(0);
     if (!($92)) {
      _Error(10422,$vararg_buffer26);
      break;
     }
     $93 = $2;
     $94 = ($93|0)==(0);
     if ($94) {
      $95 = ((($4)) + 88|0);
      $96 = HEAP32[$95>>2]|0;
      $6 = $96;
     }
     $97 = $2;
     $98 = ($97|0)==(1);
     if (!($98)) {
      break;
     }
     $99 = ((($4)) + 88|0);
     $100 = HEAP32[$99>>2]|0;
     $7 = $100;
     break;
    }
    $30 = (_strlen((31976))|0);
    $31 = ($30>>>0)>(0);
    if ($31) {
     $32 = ((($4)) + 420|0);
     (_strcpy($32,(31976))|0);
     $33 = ((($4)) + 720|0);
     _getArrayName((31976),$33);
     $34 = ((($4)) + 870|0);
     _getArrayIdx((31976),$34);
     $35 = (_strlen(128380)|0);
     $36 = ($35>>>0)>(0);
     if ($36) {
      $37 = ((($4)) + 720|0);
      HEAP32[$vararg_buffer4>>2] = 128380;
      $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr6>>2] = $37;
      (_snprintf($11,300,15808,$vararg_buffer4)|0);
      $38 = ((($4)) + 720|0);
      _memset(($38|0),0,150)|0;
      $39 = ((($4)) + 720|0);
      (_strcpy($39,$11)|0);
      $40 = ((($4)) + 870|0);
      $41 = HEAP8[$40>>0]|0;
      $42 = $41 << 24 >> 24;
      $43 = (_isdigit($42)|0);
      $44 = ($43|0)!=(0);
      if (!($44)) {
       _memset(($11|0),0,300)|0;
       $45 = ((($4)) + 870|0);
       HEAP32[$vararg_buffer7>>2] = 128380;
       $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
       HEAP32[$vararg_ptr10>>2] = $45;
       (_snprintf($11,300,15808,$vararg_buffer7)|0);
       $46 = ((($4)) + 870|0);
       _memset(($46|0),0,150)|0;
       $47 = ((($4)) + 870|0);
       (_strcpy($47,$11)|0);
      }
     }
     $48 = ((($4)) + 870|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49 << 24 >> 24;
     $51 = (_isdigit($50)|0);
     $52 = ($51|0)!=(0);
     $53 = ((($4)) + 870|0);
     do {
      if ($52) {
       $54 = (_atoi($53)|0);
       $8 = $54;
      } else {
       $55 = HEAP32[8088]|0;
       _memcpy(($$byval_copy|0),($5|0),3216)|0;
       _ValLabel($12,$53,$55,$$byval_copy,232);
       _memcpy(($5|0),($12|0),3216)|0;
       $56 = ((($5)) + 84|0);
       $57 = HEAP32[$56>>2]|0;
       $58 = ($57|0)==(0);
       if ($58) {
        $59 = ((($5)) + 88|0);
        $60 = HEAP32[$59>>2]|0;
        $8 = $60;
        break;
       } else {
        _Error(16065,$vararg_buffer11);
        break;
       }
      }
     } while(0);
     $61 = ((($4)) + 720|0);
     $62 = HEAP32[8088]|0;
     _memcpy(($$byval_copy30|0),($4|0),3216)|0;
     _ValLabel($13,$61,$62,$$byval_copy30,232);
     _memcpy(($4|0),($13|0),3216)|0;
     $63 = ((($4)) + 870|0);
     $64 = $8;
     HEAP32[$vararg_buffer13>>2] = $64;
     (_snprintf($63,150,16176,$vararg_buffer13)|0);
     $65 = $8;
     $66 = ($65|0)<(0);
     $67 = $8;
     $68 = ($67|0)>(99999000);
     $or$cond = $66 | $68;
     if ($or$cond) {
      _Error(16096,$vararg_buffer16);
     }
     $69 = ((($4)) + 84|0);
     $70 = HEAP32[$69>>2]|0;
     $71 = ($70|0)==(6);
     if ($71) {
      $72 = ((($4)) + 404|0);
      $73 = HEAP32[$72>>2]|0;
      $74 = ($73|0)!=(0);
      if ($74) {
       $75 = ((($4)) + 404|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ($76|0)==(0);
       if ($77) {
        _Error(10452,$vararg_buffer18);
       }
       $78 = $2;
       $79 = ($78|0)==(0);
       if ($79) {
        $80 = $8;
        _memcpy(($$byval_copy31|0),($4|0),3216)|0;
        $81 = (_get_int_array($$byval_copy31,$80)|0);
        $6 = $81;
       }
       $82 = $2;
       $83 = ($82|0)==(1);
       if (!($83)) {
        break;
       }
       $84 = $8;
       _memcpy(($$byval_copy32|0),($4|0),3216)|0;
       $85 = (_get_int_array($$byval_copy32,$84)|0);
       $7 = $85;
       break;
      }
     }
     _Error(10422,$vararg_buffer20);
    }
   }
  } while(0);
  $101 = $2;
  $102 = (($101) + 1)|0;
  $2 = $102;
  (_getlex()|0);
  $103 = HEAP32[7954]|0;
  $104 = ($103|0)==(227);
  if (!($104)) {
   break;
  }
  $105 = HEAP8[(31976)>>0]|0;
  $106 = $105 << 24 >> 24;
  $107 = ($106|0)==(44);
  if (!($107)) {
   break;
  }
 }
 _ungetlex();
 $108 = $2;
 $109 = ($108|0)!=(2);
 if ($109) {
  _Error(10422,$vararg_buffer28);
 } else {
  $110 = $6;
  $111 = $7;
  $112 = (+_kombinasi($110,$111));
  $113 = ((($1)) + 96|0);
  HEAPF64[$113>>3] = $112;
  $114 = ((($1)) + 84|0);
  HEAP32[$114>>2] = 1;
 }
 $115 = ((($4)) + 3196|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)!=(0|0);
 if ($117) {
  $118 = ((($4)) + 3196|0);
  $119 = HEAP32[$118>>2]|0;
  _free($119);
 }
 $120 = ((($4)) + 3200|0);
 $121 = HEAP32[$120>>2]|0;
 $122 = ($121|0)!=(0|0);
 if ($122) {
  $123 = ((($4)) + 3200|0);
  $124 = HEAP32[$123>>2]|0;
  _free($124);
 }
 $125 = ((($4)) + 1796|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)!=(0|0);
 if ($127) {
  $128 = ((($4)) + 1796|0);
  $129 = HEAP32[$128>>2]|0;
  _free($129);
 }
 $130 = ((($4)) + 1024|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = ((($4)) + 1024|0);
  $134 = HEAP32[$133>>2]|0;
  _free($134);
 }
 $135 = ((($4)) + 4|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0|0);
 if ($137) {
  $138 = ((($4)) + 4|0);
  $139 = HEAP32[$138>>2]|0;
  _free($139);
 }
 $140 = ((($4)) + 8|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)!=(0|0);
 if ($142) {
  $143 = ((($4)) + 8|0);
  $144 = HEAP32[$143>>2]|0;
  _free($144);
 }
 $145 = HEAP32[$4>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = HEAP32[$4>>2]|0;
  _free($147);
 }
 $148 = ((($5)) + 3196|0);
 $149 = HEAP32[$148>>2]|0;
 $150 = ($149|0)!=(0|0);
 if ($150) {
  $151 = ((($5)) + 3196|0);
  $152 = HEAP32[$151>>2]|0;
  _free($152);
 }
 $153 = ((($5)) + 3200|0);
 $154 = HEAP32[$153>>2]|0;
 $155 = ($154|0)!=(0|0);
 if ($155) {
  $156 = ((($5)) + 3200|0);
  $157 = HEAP32[$156>>2]|0;
  _free($157);
 }
 $158 = ((($5)) + 1796|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ($159|0)!=(0|0);
 if ($160) {
  $161 = ((($5)) + 1796|0);
  $162 = HEAP32[$161>>2]|0;
  _free($162);
 }
 $163 = ((($5)) + 1024|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = ($164|0)!=(0|0);
 if ($165) {
  $166 = ((($5)) + 1024|0);
  $167 = HEAP32[$166>>2]|0;
  _free($167);
 }
 $168 = ((($5)) + 4|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)!=(0|0);
 if ($170) {
  $171 = ((($5)) + 4|0);
  $172 = HEAP32[$171>>2]|0;
  _free($172);
 }
 $173 = ((($5)) + 8|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ($174|0)!=(0|0);
 if ($175) {
  $176 = ((($5)) + 8|0);
  $177 = HEAP32[$176>>2]|0;
  _free($177);
 }
 $178 = HEAP32[$5>>2]|0;
 $179 = ($178|0)!=(0|0);
 if ($179) {
  $180 = HEAP32[$5>>2]|0;
  _free($180);
 }
 $181 = ((($10)) + 8|0);
 $182 = HEAP32[$181>>2]|0;
 $183 = ($182|0)!=(0|0);
 if ($183) {
  $184 = ((($10)) + 8|0);
  $185 = HEAP32[$184>>2]|0;
  _free($185);
 }
 $186 = ((($10)) + 916|0);
 $187 = HEAP32[$186>>2]|0;
 $188 = ($187|0)!=(0|0);
 if (!($188)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $189 = ((($10)) + 916|0);
 $190 = HEAP32[$189>>2]|0;
 _free($190);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _kombinasi($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0.0, $12 = 0.0, $13 = 0.0, $14 = 0.0, $15 = 0.0, $2 = 0, $3 = 0, $4 = 0.0, $5 = 0.0, $6 = 0.0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = $1;
 $7 = $2;
 $8 = $3;
 $9 = (+_permutasi($7,$8));
 $5 = $9;
 $10 = $3;
 $11 = (+_faktorial($10));
 $6 = $11;
 $12 = $5;
 $13 = $6;
 $14 = $12 / $13;
 $4 = $14;
 $15 = $4;
 STACKTOP = sp;return (+$15);
}
function _funcGcd($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0;
 var $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37600|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37600|0);
 $$byval_copy29 = sp + 32248|0;
 $$byval_copy28 = sp + 29032|0;
 $$byval_copy27 = sp + 25816|0;
 $$byval_copy26 = sp + 22600|0;
 $$byval_copy = sp + 19384|0;
 $vararg_buffer24 = sp + 19376|0;
 $vararg_buffer22 = sp + 19368|0;
 $vararg_buffer20 = sp + 19360|0;
 $vararg_buffer18 = sp + 19352|0;
 $vararg_buffer16 = sp + 19344|0;
 $vararg_buffer13 = sp + 19336|0;
 $vararg_buffer11 = sp + 19328|0;
 $vararg_buffer7 = sp + 19320|0;
 $vararg_buffer4 = sp + 19312|0;
 $vararg_buffer2 = sp + 19304|0;
 $vararg_buffer = sp + 19296|0;
 $1 = sp + 16080|0;
 $3 = sp + 37000|0;
 $4 = sp + 12864|0;
 $5 = sp + 9648|0;
 $9 = sp + 36700|0;
 $10 = sp + 35464|0;
 $11 = sp + 36400|0;
 $12 = sp + 6432|0;
 $13 = sp + 3216|0;
 $14 = sp;
 $2 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($9|0),0,300)|0;
 _memset(($3|0),0,600)|0;
 _memset(($10|0),0,920)|0;
 _memset(($11|0),0,300)|0;
 _memset(($3|0),0,600)|0;
 $2 = 0;
 while(1) {
  (_getlex()|0);
  $15 = HEAP32[7954]|0;
  $16 = ($15|0)==(223);
  do {
   if ($16) {
    $17 = $2;
    $18 = ($17|0)==(0);
    if ($18) {
     $19 = HEAP32[(31976)>>2]|0;
     $6 = $19;
    }
    $20 = $2;
    $21 = ($20|0)==(1);
    if ($21) {
     $22 = HEAP32[(31976)>>2]|0;
     $7 = $22;
    }
   } else {
    $23 = HEAP32[7954]|0;
    $24 = ($23|0)==(226);
    if ($24) {
     _Error(10496,$vararg_buffer);
     break;
    }
    $25 = HEAP32[7954]|0;
    $26 = ($25|0)==(225);
    if ($26) {
     _Error(10496,$vararg_buffer2);
     break;
    }
    $27 = HEAP32[7954]|0;
    $28 = ($27|0)==(228);
    if (!($28)) {
     $85 = HEAP32[8088]|0;
     _memcpy(($$byval_copy29|0),($4|0),3216)|0;
     _ValLabel($14,(31976),$85,$$byval_copy29,232);
     _memcpy(($4|0),($14|0),3216)|0;
     $86 = ((($4)) + 84|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)==(0);
     if (!($88)) {
      _Error(10496,$vararg_buffer22);
      break;
     }
     $89 = $2;
     $90 = ($89|0)==(0);
     if ($90) {
      $91 = ((($4)) + 88|0);
      $92 = HEAP32[$91>>2]|0;
      $6 = $92;
     }
     $93 = $2;
     $94 = ($93|0)==(1);
     if (!($94)) {
      break;
     }
     $95 = ((($4)) + 88|0);
     $96 = HEAP32[$95>>2]|0;
     $7 = $96;
     break;
    }
    $29 = (_strlen((31976))|0);
    $30 = ($29>>>0)>(0);
    if ($30) {
     $31 = ((($4)) + 420|0);
     (_strcpy($31,(31976))|0);
     $32 = ((($4)) + 720|0);
     _getArrayName((31976),$32);
     $33 = ((($4)) + 870|0);
     _getArrayIdx((31976),$33);
     $34 = (_strlen(128380)|0);
     $35 = ($34>>>0)>(0);
     if ($35) {
      $36 = ((($4)) + 720|0);
      HEAP32[$vararg_buffer4>>2] = 128380;
      $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
      HEAP32[$vararg_ptr6>>2] = $36;
      (_snprintf($11,300,15808,$vararg_buffer4)|0);
      $37 = ((($4)) + 720|0);
      _memset(($37|0),0,150)|0;
      $38 = ((($4)) + 720|0);
      (_strcpy($38,$11)|0);
      $39 = ((($4)) + 870|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = $40 << 24 >> 24;
      $42 = (_isdigit($41)|0);
      $43 = ($42|0)!=(0);
      if (!($43)) {
       _memset(($11|0),0,300)|0;
       $44 = ((($4)) + 870|0);
       HEAP32[$vararg_buffer7>>2] = 128380;
       $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
       HEAP32[$vararg_ptr10>>2] = $44;
       (_snprintf($11,300,15808,$vararg_buffer7)|0);
       $45 = ((($4)) + 870|0);
       _memset(($45|0),0,150)|0;
       $46 = ((($4)) + 870|0);
       (_strcpy($46,$11)|0);
      }
     }
     $47 = ((($4)) + 870|0);
     $48 = HEAP8[$47>>0]|0;
     $49 = $48 << 24 >> 24;
     $50 = (_isdigit($49)|0);
     $51 = ($50|0)!=(0);
     $52 = ((($4)) + 870|0);
     do {
      if ($51) {
       $53 = (_atoi($52)|0);
       $8 = $53;
      } else {
       $54 = HEAP32[8088]|0;
       _memcpy(($$byval_copy|0),($5|0),3216)|0;
       _ValLabel($12,$52,$54,$$byval_copy,232);
       _memcpy(($5|0),($12|0),3216)|0;
       $55 = ((($5)) + 84|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(0);
       if ($57) {
        $58 = ((($5)) + 88|0);
        $59 = HEAP32[$58>>2]|0;
        $8 = $59;
        break;
       } else {
        _Error(16065,$vararg_buffer11);
        break;
       }
      }
     } while(0);
     $60 = ((($4)) + 720|0);
     $61 = HEAP32[8088]|0;
     _memcpy(($$byval_copy26|0),($4|0),3216)|0;
     _ValLabel($13,$60,$61,$$byval_copy26,232);
     _memcpy(($4|0),($13|0),3216)|0;
     $62 = ((($4)) + 870|0);
     $63 = $8;
     HEAP32[$vararg_buffer13>>2] = $63;
     (_snprintf($62,150,16176,$vararg_buffer13)|0);
     $64 = $8;
     $65 = ($64|0)<(0);
     $66 = $8;
     $67 = ($66|0)>(99999000);
     $or$cond = $65 | $67;
     if ($or$cond) {
      _Error(16096,$vararg_buffer16);
     }
     $68 = ((($4)) + 84|0);
     $69 = HEAP32[$68>>2]|0;
     $70 = ($69|0)==(6);
     if ($70) {
      $71 = ((($4)) + 404|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)!=(0);
      if ($73) {
       $74 = ((($4)) + 404|0);
       $75 = HEAP32[$74>>2]|0;
       $76 = ($75|0)==(0);
       if ($76) {
        _Error(10520,$vararg_buffer18);
       }
       $77 = $2;
       $78 = ($77|0)==(0);
       if ($78) {
        $79 = $8;
        _memcpy(($$byval_copy27|0),($4|0),3216)|0;
        $80 = (_get_int_array($$byval_copy27,$79)|0);
        $6 = $80;
       }
       $81 = $2;
       $82 = ($81|0)==(1);
       if (!($82)) {
        break;
       }
       $83 = $8;
       _memcpy(($$byval_copy28|0),($4|0),3216)|0;
       $84 = (_get_int_array($$byval_copy28,$83)|0);
       $7 = $84;
       break;
      }
     }
     _Error(10496,$vararg_buffer20);
    }
   }
  } while(0);
  $97 = $2;
  $98 = (($97) + 1)|0;
  $2 = $98;
  (_getlex()|0);
  $99 = HEAP32[7954]|0;
  $100 = ($99|0)==(227);
  if (!($100)) {
   break;
  }
  $101 = HEAP8[(31976)>>0]|0;
  $102 = $101 << 24 >> 24;
  $103 = ($102|0)==(44);
  if (!($103)) {
   break;
  }
 }
 _ungetlex();
 $104 = $2;
 $105 = ($104|0)!=(2);
 if ($105) {
  _Error(10496,$vararg_buffer24);
 } else {
  $106 = $6;
  $107 = $7;
  $108 = (_faktor_gcd($106,$107)|0);
  $109 = ((($1)) + 88|0);
  HEAP32[$109>>2] = $108;
  $110 = ((($1)) + 84|0);
  HEAP32[$110>>2] = 0;
 }
 $111 = ((($4)) + 3196|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)!=(0|0);
 if ($113) {
  $114 = ((($4)) + 3196|0);
  $115 = HEAP32[$114>>2]|0;
  _free($115);
 }
 $116 = ((($4)) + 3200|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = ((($4)) + 3200|0);
  $120 = HEAP32[$119>>2]|0;
  _free($120);
 }
 $121 = ((($4)) + 1796|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = ((($4)) + 1796|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
 }
 $126 = ((($4)) + 1024|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)!=(0|0);
 if ($128) {
  $129 = ((($4)) + 1024|0);
  $130 = HEAP32[$129>>2]|0;
  _free($130);
 }
 $131 = ((($4)) + 4|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132|0)!=(0|0);
 if ($133) {
  $134 = ((($4)) + 4|0);
  $135 = HEAP32[$134>>2]|0;
  _free($135);
 }
 $136 = ((($4)) + 8|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)!=(0|0);
 if ($138) {
  $139 = ((($4)) + 8|0);
  $140 = HEAP32[$139>>2]|0;
  _free($140);
 }
 $141 = HEAP32[$4>>2]|0;
 $142 = ($141|0)!=(0|0);
 if ($142) {
  $143 = HEAP32[$4>>2]|0;
  _free($143);
 }
 $144 = ((($5)) + 3196|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = ((($5)) + 3196|0);
  $148 = HEAP32[$147>>2]|0;
  _free($148);
 }
 $149 = ((($5)) + 3200|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($150|0)!=(0|0);
 if ($151) {
  $152 = ((($5)) + 3200|0);
  $153 = HEAP32[$152>>2]|0;
  _free($153);
 }
 $154 = ((($5)) + 1796|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = ((($5)) + 1796|0);
  $158 = HEAP32[$157>>2]|0;
  _free($158);
 }
 $159 = ((($5)) + 1024|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($160|0)!=(0|0);
 if ($161) {
  $162 = ((($5)) + 1024|0);
  $163 = HEAP32[$162>>2]|0;
  _free($163);
 }
 $164 = ((($5)) + 4|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ($165|0)!=(0|0);
 if ($166) {
  $167 = ((($5)) + 4|0);
  $168 = HEAP32[$167>>2]|0;
  _free($168);
 }
 $169 = ((($5)) + 8|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170|0)!=(0|0);
 if ($171) {
  $172 = ((($5)) + 8|0);
  $173 = HEAP32[$172>>2]|0;
  _free($173);
 }
 $174 = HEAP32[$5>>2]|0;
 $175 = ($174|0)!=(0|0);
 if ($175) {
  $176 = HEAP32[$5>>2]|0;
  _free($176);
 }
 $177 = ((($10)) + 8|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = ($178|0)!=(0|0);
 if ($179) {
  $180 = ((($10)) + 8|0);
  $181 = HEAP32[$180>>2]|0;
  _free($181);
 }
 $182 = ((($10)) + 916|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ($183|0)!=(0|0);
 if (!($184)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $185 = ((($10)) + 916|0);
 $186 = HEAP32[$185>>2]|0;
 _free($186);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _faktor_gcd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 while(1) {
  $5 = $3;
  $6 = ($5|0)!=(0);
  $7 = $2;
  if (!($6)) {
   break;
  }
  $8 = $3;
  $9 = (($7|0) % ($8|0))&-1;
  $4 = $9;
  $10 = $3;
  $2 = $10;
  $11 = $4;
  $3 = $11;
 }
 STACKTOP = sp;return ($7|0);
}
function _irnd() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[4]|0;
 $1 = Math_imul($0, 1566083941)|0;
 $2 = (($1) + 1)|0;
 HEAP32[4] = $2;
 $3 = HEAP32[4]|0;
 return ($3|0);
}
function _hhrnd() {
 var $0 = 0, $1 = 0.0, $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = (_irnd()|0);
 $1 = (+($0>>>0));
 $2 = 2.3283064365386963E-10 * $1;
 return (+$2);
}
function _funcJumUntaian($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0.0, $47 = 0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(20576|0);
 $$byval_copy10 = sp + 16128|0;
 $$byval_copy9 = sp + 12912|0;
 $$byval_copy = sp + 9696|0;
 $vararg_buffer7 = sp + 9688|0;
 $vararg_buffer5 = sp + 9680|0;
 $vararg_buffer3 = sp + 9672|0;
 $vararg_buffer1 = sp + 9664|0;
 $vararg_buffer = sp + 9656|0;
 $1 = sp + 6440|0;
 $3 = sp + 3224|0;
 $6 = sp + 19344|0;
 $7 = sp + 20272|0;
 $8 = sp;
 $2 = 0;
 $4 = 0;
 $5 = 0.0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($6|0),0,920)|0;
 _memset(($7|0),0,300)|0;
 (_getlex()|0);
 $9 = HEAP32[7954]|0;
 $10 = ($9|0)==(223);
 do {
  if ($10) {
   _Error(10558,$vararg_buffer);
  } else {
   $11 = HEAP32[7954]|0;
   $12 = ($11|0)==(226);
   if ($12) {
    _Error(10558,$vararg_buffer1);
    break;
   }
   $13 = HEAP32[7954]|0;
   $14 = ($13|0)==(225);
   if ($14) {
    _Error(10558,$vararg_buffer3);
    break;
   }
   $15 = HEAP32[7954]|0;
   $16 = ($15|0)==(228);
   if ($16) {
    _Error(10593,$vararg_buffer5);
    break;
   }
   $17 = HEAP32[8088]|0;
   _memcpy(($$byval_copy|0),($3|0),3216)|0;
   _ValLabel($8,(31976),$17,$$byval_copy,232);
   _memcpy(($3|0),($8|0),3216)|0;
   $18 = ((($3)) + 84|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(6);
   if ($20) {
    $21 = ((($3)) + 404|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)!=(0);
    if ($23) {
     $4 = 0;
     $2 = 0;
     while(1) {
      $24 = $2;
      $25 = ((($3)) + 1020|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)<($26|0);
      $28 = $4;
      if (!($27)) {
       break;
      }
      $29 = $2;
      _memcpy(($$byval_copy9|0),($3|0),3216)|0;
      $30 = (_get_int_array($$byval_copy9,$29)|0);
      $31 = (($28) + ($30))|0;
      $4 = $31;
      $32 = $2;
      $33 = (($32) + 1)|0;
      $2 = $33;
     }
     $34 = ((($1)) + 88|0);
     HEAP32[$34>>2] = $28;
     $35 = ((($1)) + 84|0);
     HEAP32[$35>>2] = 0;
     break;
    }
   }
   $36 = ((($3)) + 84|0);
   $37 = HEAP32[$36>>2]|0;
   $38 = ($37|0)==(7);
   if ($38) {
    $39 = ((($3)) + 408|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)!=(0);
    if ($41) {
     $5 = 0.0;
     $2 = 0;
     while(1) {
      $42 = $2;
      $43 = ((($3)) + 1020|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($42|0)<($44|0);
      $46 = $5;
      if (!($45)) {
       break;
      }
      $47 = $2;
      _memcpy(($$byval_copy10|0),($3|0),3216)|0;
      $48 = (+_get_dbl_array($$byval_copy10,$47));
      $49 = $46 + $48;
      $5 = $49;
      $50 = $2;
      $51 = (($50) + 1)|0;
      $2 = $51;
     }
     $52 = ((($1)) + 96|0);
     HEAPF64[$52>>3] = $46;
     $53 = ((($1)) + 84|0);
     HEAP32[$53>>2] = 1;
     break;
    }
   }
   _Error(10650,$vararg_buffer7);
  }
 } while(0);
 $54 = ((($3)) + 3196|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = ((($3)) + 3196|0);
  $58 = HEAP32[$57>>2]|0;
  _free($58);
 }
 $59 = ((($3)) + 3200|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)!=(0|0);
 if ($61) {
  $62 = ((($3)) + 3200|0);
  $63 = HEAP32[$62>>2]|0;
  _free($63);
 }
 $64 = ((($3)) + 1796|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0|0);
 if ($66) {
  $67 = ((($3)) + 1796|0);
  $68 = HEAP32[$67>>2]|0;
  _free($68);
 }
 $69 = ((($3)) + 1024|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)!=(0|0);
 if ($71) {
  $72 = ((($3)) + 1024|0);
  $73 = HEAP32[$72>>2]|0;
  _free($73);
 }
 $74 = ((($3)) + 4|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)!=(0|0);
 if ($76) {
  $77 = ((($3)) + 4|0);
  $78 = HEAP32[$77>>2]|0;
  _free($78);
 }
 $79 = ((($3)) + 8|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = ((($3)) + 8|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = HEAP32[$3>>2]|0;
 $85 = ($84|0)!=(0|0);
 if ($85) {
  $86 = HEAP32[$3>>2]|0;
  _free($86);
 }
 $87 = ((($6)) + 8|0);
 $88 = HEAP32[$87>>2]|0;
 $89 = ($88|0)!=(0|0);
 if ($89) {
  $90 = ((($6)) + 8|0);
  $91 = HEAP32[$90>>2]|0;
  _free($91);
 }
 $92 = ((($6)) + 916|0);
 $93 = HEAP32[$92>>2]|0;
 $94 = ($93|0)!=(0|0);
 if (!($94)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $95 = ((($6)) + 916|0);
 $96 = HEAP32[$95>>2]|0;
 _free($96);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcAveUntaian($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0.0;
 var $38 = 0.0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0.0, $50 = 0, $51 = 0.0, $52 = 0, $53 = 0.0, $54 = 0.0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0.0, $6 = 0, $60 = 0.0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 20576|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(20576|0);
 $$byval_copy10 = sp + 16128|0;
 $$byval_copy9 = sp + 12912|0;
 $$byval_copy = sp + 9696|0;
 $vararg_buffer7 = sp + 9688|0;
 $vararg_buffer5 = sp + 9680|0;
 $vararg_buffer3 = sp + 9672|0;
 $vararg_buffer1 = sp + 9664|0;
 $vararg_buffer = sp + 9656|0;
 $1 = sp + 6440|0;
 $3 = sp + 3224|0;
 $6 = sp + 19344|0;
 $7 = sp + 20272|0;
 $8 = sp;
 $2 = 0;
 $4 = 0;
 $5 = 0.0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($6|0),0,920)|0;
 _memset(($7|0),0,300)|0;
 (_getlex()|0);
 $9 = HEAP32[7954]|0;
 $10 = ($9|0)==(223);
 do {
  if ($10) {
   _Error(10691,$vararg_buffer);
  } else {
   $11 = HEAP32[7954]|0;
   $12 = ($11|0)==(226);
   if ($12) {
    _Error(10691,$vararg_buffer1);
    break;
   }
   $13 = HEAP32[7954]|0;
   $14 = ($13|0)==(225);
   if ($14) {
    _Error(10691,$vararg_buffer3);
    break;
   }
   $15 = HEAP32[7954]|0;
   $16 = ($15|0)==(228);
   if ($16) {
    _Error(10728,$vararg_buffer5);
    break;
   }
   $17 = HEAP32[8088]|0;
   _memcpy(($$byval_copy|0),($1|0),3216)|0;
   _ValLabel($8,(31976),$17,$$byval_copy,232);
   _memcpy(($3|0),($8|0),3216)|0;
   $18 = ((($3)) + 84|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = ($19|0)==(6);
   if ($20) {
    $21 = ((($3)) + 404|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = ($22|0)!=(0);
    if ($23) {
     $4 = 0;
     $2 = 0;
     while(1) {
      $24 = $2;
      $25 = ((($3)) + 1020|0);
      $26 = HEAP32[$25>>2]|0;
      $27 = ($24|0)<($26|0);
      $28 = $4;
      if (!($27)) {
       break;
      }
      $29 = $2;
      _memcpy(($$byval_copy9|0),($3|0),3216)|0;
      $30 = (_get_int_array($$byval_copy9,$29)|0);
      $31 = (($28) + ($30))|0;
      $4 = $31;
      $32 = $2;
      $33 = (($32) + 1)|0;
      $2 = $33;
     }
     $34 = (+($28|0));
     $35 = ((($3)) + 1020|0);
     $36 = HEAP32[$35>>2]|0;
     $37 = (+($36|0));
     $38 = $34 / $37;
     $39 = ((($1)) + 96|0);
     HEAPF64[$39>>3] = $38;
     $40 = ((($1)) + 84|0);
     HEAP32[$40>>2] = 1;
     break;
    }
   }
   $41 = ((($3)) + 84|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ($42|0)==(7);
   if ($43) {
    $44 = ((($3)) + 408|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)!=(0);
    if ($46) {
     $5 = 0.0;
     $2 = 0;
     while(1) {
      $47 = $2;
      $48 = ((($3)) + 1020|0);
      $49 = HEAP32[$48>>2]|0;
      $50 = ($47|0)<($49|0);
      $51 = $5;
      if (!($50)) {
       break;
      }
      $52 = $2;
      _memcpy(($$byval_copy10|0),($3|0),3216)|0;
      $53 = (+_get_dbl_array($$byval_copy10,$52));
      $54 = $51 + $53;
      $5 = $54;
      $55 = $2;
      $56 = (($55) + 1)|0;
      $2 = $56;
     }
     $57 = ((($3)) + 1020|0);
     $58 = HEAP32[$57>>2]|0;
     $59 = (+($58|0));
     $60 = $51 / $59;
     $61 = ((($1)) + 96|0);
     HEAPF64[$61>>3] = $60;
     $62 = ((($1)) + 84|0);
     HEAP32[$62>>2] = 1;
     break;
    }
   }
   _Error(10691,$vararg_buffer7);
  }
 } while(0);
 $63 = ((($3)) + 3196|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0|0);
 if ($65) {
  $66 = ((($3)) + 3196|0);
  $67 = HEAP32[$66>>2]|0;
  _free($67);
 }
 $68 = ((($3)) + 3200|0);
 $69 = HEAP32[$68>>2]|0;
 $70 = ($69|0)!=(0|0);
 if ($70) {
  $71 = ((($3)) + 3200|0);
  $72 = HEAP32[$71>>2]|0;
  _free($72);
 }
 $73 = ((($3)) + 1796|0);
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0|0);
 if ($75) {
  $76 = ((($3)) + 1796|0);
  $77 = HEAP32[$76>>2]|0;
  _free($77);
 }
 $78 = ((($3)) + 1024|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)!=(0|0);
 if ($80) {
  $81 = ((($3)) + 1024|0);
  $82 = HEAP32[$81>>2]|0;
  _free($82);
 }
 $83 = ((($3)) + 4|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)!=(0|0);
 if ($85) {
  $86 = ((($3)) + 4|0);
  $87 = HEAP32[$86>>2]|0;
  _free($87);
 }
 $88 = ((($3)) + 8|0);
 $89 = HEAP32[$88>>2]|0;
 $90 = ($89|0)!=(0|0);
 if ($90) {
  $91 = ((($3)) + 8|0);
  $92 = HEAP32[$91>>2]|0;
  _free($92);
 }
 $93 = HEAP32[$3>>2]|0;
 $94 = ($93|0)!=(0|0);
 if ($94) {
  $95 = HEAP32[$3>>2]|0;
  _free($95);
 }
 $96 = ((($6)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)!=(0|0);
 if ($98) {
  $99 = ((($6)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  _free($100);
 }
 $101 = ((($6)) + 916|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0|0);
 if (!($103)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $104 = ((($6)) + 916|0);
 $105 = HEAP32[$104>>2]|0;
 _free($105);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcVarUntaian($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0, $36 = 0, $37 = 0;
 var $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0.0, $72 = 0, $73 = 0.0;
 var $74 = 0.0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0.0, $86 = 0, $87 = 0.0, $88 = 0.0, $89 = 0.0, $9 = 0, $90 = 0.0, $91 = 0.0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0.0, $98 = 0.0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 27024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(27024|0);
 $$byval_copy12 = sp + 22568|0;
 $$byval_copy11 = sp + 19352|0;
 $$byval_copy10 = sp + 16136|0;
 $$byval_copy9 = sp + 12920|0;
 $$byval_copy = sp + 9704|0;
 $vararg_buffer7 = sp + 9696|0;
 $vararg_buffer5 = sp + 9688|0;
 $vararg_buffer3 = sp + 9680|0;
 $vararg_buffer1 = sp + 9672|0;
 $vararg_buffer = sp + 9664|0;
 $1 = sp + 6448|0;
 $3 = sp + 3232|0;
 $7 = sp + 25784|0;
 $8 = sp + 26712|0;
 $9 = sp;
 $2 = 0;
 $4 = 0;
 $5 = 0.0;
 $6 = 0.0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($7|0),0,920)|0;
 _memset(($8|0),0,300)|0;
 (_getlex()|0);
 $10 = HEAP32[7954]|0;
 $11 = ($10|0)==(223);
 do {
  if ($11) {
   _Error(10779,$vararg_buffer);
  } else {
   $12 = HEAP32[7954]|0;
   $13 = ($12|0)==(226);
   if ($13) {
    _Error(10779,$vararg_buffer1);
    break;
   }
   $14 = HEAP32[7954]|0;
   $15 = ($14|0)==(225);
   if ($15) {
    _Error(10779,$vararg_buffer3);
    break;
   }
   $16 = HEAP32[7954]|0;
   $17 = ($16|0)==(228);
   if ($17) {
    _Error(10814,$vararg_buffer5);
    break;
   }
   $18 = HEAP32[8088]|0;
   _memcpy(($$byval_copy|0),($1|0),3216)|0;
   _ValLabel($9,(31976),$18,$$byval_copy,232);
   _memcpy(($3|0),($9|0),3216)|0;
   $19 = ((($3)) + 84|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(6);
   if ($21) {
    $22 = ((($3)) + 404|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)!=(0);
    if ($24) {
     $4 = 0;
     $2 = 0;
     while(1) {
      $25 = $2;
      $26 = ((($3)) + 1020|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)<($27|0);
      $29 = $4;
      if (!($28)) {
       break;
      }
      $30 = $2;
      _memcpy(($$byval_copy9|0),($3|0),3216)|0;
      $31 = (_get_int_array($$byval_copy9,$30)|0);
      $32 = (($29) + ($31))|0;
      $4 = $32;
      $33 = $2;
      $34 = (($33) + 1)|0;
      $2 = $34;
     }
     $35 = (+($29|0));
     $36 = ((($3)) + 1020|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (+($37|0));
     $39 = $35 / $38;
     $5 = $39;
     $6 = 0.0;
     $2 = 0;
     while(1) {
      $40 = $2;
      $41 = ((($3)) + 1020|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($40|0)<($42|0);
      $44 = $6;
      if (!($43)) {
       break;
      }
      $45 = $2;
      _memcpy(($$byval_copy10|0),($3|0),3216)|0;
      $46 = (_get_int_array($$byval_copy10,$45)|0);
      $47 = (+($46|0));
      $48 = $5;
      $49 = $47 - $48;
      $50 = (+Math_pow((+$49),2.0));
      $51 = $44 + $50;
      $6 = $51;
      $52 = $2;
      $53 = (($52) + 1)|0;
      $2 = $53;
     }
     $54 = ((($3)) + 1020|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) - 1)|0;
     $57 = (+($56|0));
     $58 = $44 / $57;
     $59 = ((($1)) + 96|0);
     HEAPF64[$59>>3] = $58;
     $60 = ((($1)) + 84|0);
     HEAP32[$60>>2] = 1;
     break;
    }
   }
   $61 = ((($3)) + 84|0);
   $62 = HEAP32[$61>>2]|0;
   $63 = ($62|0)==(7);
   if ($63) {
    $64 = ((($3)) + 408|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)!=(0);
    if ($66) {
     $5 = 0.0;
     $2 = 0;
     while(1) {
      $67 = $2;
      $68 = ((($3)) + 1020|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($67|0)<($69|0);
      $71 = $5;
      if (!($70)) {
       break;
      }
      $72 = $2;
      _memcpy(($$byval_copy11|0),($3|0),3216)|0;
      $73 = (+_get_dbl_array($$byval_copy11,$72));
      $74 = $71 + $73;
      $5 = $74;
      $75 = $2;
      $76 = (($75) + 1)|0;
      $2 = $76;
     }
     $77 = ((($3)) + 1020|0);
     $78 = HEAP32[$77>>2]|0;
     $79 = (+($78|0));
     $80 = $71 / $79;
     $5 = $80;
     $6 = 0.0;
     $2 = 0;
     while(1) {
      $81 = $2;
      $82 = ((($3)) + 1020|0);
      $83 = HEAP32[$82>>2]|0;
      $84 = ($81|0)<($83|0);
      $85 = $6;
      if (!($84)) {
       break;
      }
      $86 = $2;
      _memcpy(($$byval_copy12|0),($3|0),3216)|0;
      $87 = (+_get_dbl_array($$byval_copy12,$86));
      $88 = $5;
      $89 = $87 - $88;
      $90 = (+Math_pow((+$89),2.0));
      $91 = $85 + $90;
      $6 = $91;
      $92 = $2;
      $93 = (($92) + 1)|0;
      $2 = $93;
     }
     $94 = ((($3)) + 1020|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = (($95) - 1)|0;
     $97 = (+($96|0));
     $98 = $85 / $97;
     $99 = ((($1)) + 96|0);
     HEAPF64[$99>>3] = $98;
     $100 = ((($1)) + 84|0);
     HEAP32[$100>>2] = 1;
     break;
    }
   }
   _Error(10779,$vararg_buffer7);
  }
 } while(0);
 $101 = ((($3)) + 3196|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = ((($3)) + 3196|0);
  $105 = HEAP32[$104>>2]|0;
  _free($105);
 }
 $106 = ((($3)) + 3200|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = ((($3)) + 3200|0);
  $110 = HEAP32[$109>>2]|0;
  _free($110);
 }
 $111 = ((($3)) + 1796|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)!=(0|0);
 if ($113) {
  $114 = ((($3)) + 1796|0);
  $115 = HEAP32[$114>>2]|0;
  _free($115);
 }
 $116 = ((($3)) + 1024|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = ((($3)) + 1024|0);
  $120 = HEAP32[$119>>2]|0;
  _free($120);
 }
 $121 = ((($3)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = ((($3)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
 }
 $126 = ((($3)) + 8|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)!=(0|0);
 if ($128) {
  $129 = ((($3)) + 8|0);
  $130 = HEAP32[$129>>2]|0;
  _free($130);
 }
 $131 = HEAP32[$3>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = HEAP32[$3>>2]|0;
  _free($133);
 }
 $134 = ((($7)) + 8|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = ((($7)) + 8|0);
  $138 = HEAP32[$137>>2]|0;
  _free($138);
 }
 $139 = ((($7)) + 916|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0|0);
 if (!($141)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $142 = ((($7)) + 916|0);
 $143 = HEAP32[$142>>2]|0;
 _free($143);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcStdDevUntaian($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy9 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0.0;
 var $36 = 0, $37 = 0, $38 = 0.0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0.0, $45 = 0, $46 = 0, $47 = 0.0, $48 = 0.0, $49 = 0.0, $5 = 0.0, $50 = 0.0, $51 = 0.0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0.0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0.0, $73 = 0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0.0, $89 = 0.0, $9 = 0;
 var $90 = 0.0, $91 = 0.0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0.0, $99 = 0.0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 27024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(27024|0);
 $$byval_copy12 = sp + 22568|0;
 $$byval_copy11 = sp + 19352|0;
 $$byval_copy10 = sp + 16136|0;
 $$byval_copy9 = sp + 12920|0;
 $$byval_copy = sp + 9704|0;
 $vararg_buffer7 = sp + 9696|0;
 $vararg_buffer5 = sp + 9688|0;
 $vararg_buffer3 = sp + 9680|0;
 $vararg_buffer1 = sp + 9672|0;
 $vararg_buffer = sp + 9664|0;
 $1 = sp + 6448|0;
 $3 = sp + 3232|0;
 $7 = sp + 25784|0;
 $8 = sp + 26712|0;
 $9 = sp;
 $2 = 0;
 $4 = 0;
 $5 = 0.0;
 $6 = 0.0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($7|0),0,920)|0;
 _memset(($8|0),0,300)|0;
 (_getlex()|0);
 $10 = HEAP32[7954]|0;
 $11 = ($10|0)==(223);
 do {
  if ($11) {
   _Error(10863,$vararg_buffer);
  } else {
   $12 = HEAP32[7954]|0;
   $13 = ($12|0)==(226);
   if ($13) {
    _Error(10863,$vararg_buffer1);
    break;
   }
   $14 = HEAP32[7954]|0;
   $15 = ($14|0)==(225);
   if ($15) {
    _Error(10863,$vararg_buffer3);
    break;
   }
   $16 = HEAP32[7954]|0;
   $17 = ($16|0)==(228);
   if ($17) {
    _Error(10895,$vararg_buffer5);
    break;
   }
   $18 = HEAP32[8088]|0;
   _memcpy(($$byval_copy|0),($1|0),3216)|0;
   _ValLabel($9,(31976),$18,$$byval_copy,232);
   _memcpy(($3|0),($9|0),3216)|0;
   $19 = ((($3)) + 84|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = ($20|0)==(6);
   if ($21) {
    $22 = ((($3)) + 404|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = ($23|0)!=(0);
    if ($24) {
     $4 = 0;
     $2 = 0;
     while(1) {
      $25 = $2;
      $26 = ((($3)) + 1020|0);
      $27 = HEAP32[$26>>2]|0;
      $28 = ($25|0)<($27|0);
      $29 = $4;
      if (!($28)) {
       break;
      }
      $30 = $2;
      _memcpy(($$byval_copy9|0),($3|0),3216)|0;
      $31 = (_get_int_array($$byval_copy9,$30)|0);
      $32 = (($29) + ($31))|0;
      $4 = $32;
      $33 = $2;
      $34 = (($33) + 1)|0;
      $2 = $34;
     }
     $35 = (+($29|0));
     $36 = ((($3)) + 1020|0);
     $37 = HEAP32[$36>>2]|0;
     $38 = (+($37|0));
     $39 = $35 / $38;
     $5 = $39;
     $6 = 0.0;
     $2 = 0;
     while(1) {
      $40 = $2;
      $41 = ((($3)) + 1020|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ($40|0)<($42|0);
      $44 = $6;
      if (!($43)) {
       break;
      }
      $45 = $2;
      _memcpy(($$byval_copy10|0),($3|0),3216)|0;
      $46 = (_get_int_array($$byval_copy10,$45)|0);
      $47 = (+($46|0));
      $48 = $5;
      $49 = $47 - $48;
      $50 = (+Math_pow((+$49),2.0));
      $51 = $44 + $50;
      $6 = $51;
      $52 = $2;
      $53 = (($52) + 1)|0;
      $2 = $53;
     }
     $54 = ((($3)) + 1020|0);
     $55 = HEAP32[$54>>2]|0;
     $56 = (($55) - 1)|0;
     $57 = (+($56|0));
     $58 = $44 / $57;
     $59 = (+Math_sqrt((+$58)));
     $60 = ((($1)) + 96|0);
     HEAPF64[$60>>3] = $59;
     $61 = ((($1)) + 84|0);
     HEAP32[$61>>2] = 1;
     break;
    }
   }
   $62 = ((($3)) + 84|0);
   $63 = HEAP32[$62>>2]|0;
   $64 = ($63|0)==(7);
   if ($64) {
    $65 = ((($3)) + 408|0);
    $66 = HEAP32[$65>>2]|0;
    $67 = ($66|0)!=(0);
    if ($67) {
     $5 = 0.0;
     $2 = 0;
     while(1) {
      $68 = $2;
      $69 = ((($3)) + 1020|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($68|0)<($70|0);
      $72 = $5;
      if (!($71)) {
       break;
      }
      $73 = $2;
      _memcpy(($$byval_copy11|0),($3|0),3216)|0;
      $74 = (+_get_dbl_array($$byval_copy11,$73));
      $75 = $72 + $74;
      $5 = $75;
      $76 = $2;
      $77 = (($76) + 1)|0;
      $2 = $77;
     }
     $78 = ((($3)) + 1020|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = (+($79|0));
     $81 = $72 / $80;
     $5 = $81;
     $6 = 0.0;
     $2 = 0;
     while(1) {
      $82 = $2;
      $83 = ((($3)) + 1020|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($82|0)<($84|0);
      $86 = $6;
      if (!($85)) {
       break;
      }
      $87 = $2;
      _memcpy(($$byval_copy12|0),($3|0),3216)|0;
      $88 = (+_get_dbl_array($$byval_copy12,$87));
      $89 = $5;
      $90 = $88 - $89;
      $91 = (+Math_pow((+$90),2.0));
      $92 = $86 + $91;
      $6 = $92;
      $93 = $2;
      $94 = (($93) + 1)|0;
      $2 = $94;
     }
     $95 = ((($3)) + 1020|0);
     $96 = HEAP32[$95>>2]|0;
     $97 = (($96) - 1)|0;
     $98 = (+($97|0));
     $99 = $86 / $98;
     $100 = (+Math_sqrt((+$99)));
     $101 = ((($1)) + 96|0);
     HEAPF64[$101>>3] = $100;
     $102 = ((($1)) + 84|0);
     HEAP32[$102>>2] = 1;
     break;
    }
   }
   _Error(10863,$vararg_buffer7);
  }
 } while(0);
 $103 = ((($3)) + 3196|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)!=(0|0);
 if ($105) {
  $106 = ((($3)) + 3196|0);
  $107 = HEAP32[$106>>2]|0;
  _free($107);
 }
 $108 = ((($3)) + 3200|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0|0);
 if ($110) {
  $111 = ((($3)) + 3200|0);
  $112 = HEAP32[$111>>2]|0;
  _free($112);
 }
 $113 = ((($3)) + 1796|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = ((($3)) + 1796|0);
  $117 = HEAP32[$116>>2]|0;
  _free($117);
 }
 $118 = ((($3)) + 1024|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)!=(0|0);
 if ($120) {
  $121 = ((($3)) + 1024|0);
  $122 = HEAP32[$121>>2]|0;
  _free($122);
 }
 $123 = ((($3)) + 4|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)!=(0|0);
 if ($125) {
  $126 = ((($3)) + 4|0);
  $127 = HEAP32[$126>>2]|0;
  _free($127);
 }
 $128 = ((($3)) + 8|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)!=(0|0);
 if ($130) {
  $131 = ((($3)) + 8|0);
  $132 = HEAP32[$131>>2]|0;
  _free($132);
 }
 $133 = HEAP32[$3>>2]|0;
 $134 = ($133|0)!=(0|0);
 if ($134) {
  $135 = HEAP32[$3>>2]|0;
  _free($135);
 }
 $136 = ((($7)) + 8|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)!=(0|0);
 if ($138) {
  $139 = ((($7)) + 8|0);
  $140 = HEAP32[$139>>2]|0;
  _free($140);
 }
 $141 = ((($7)) + 916|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($142|0)!=(0|0);
 if (!($143)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $144 = ((($7)) + 916|0);
 $145 = HEAP32[$144>>2]|0;
 _free($145);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcArsip($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $$byval_copy34 = 0, $$byval_copy35 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr12 = 0, $vararg_ptr27 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37008|0);
 $$byval_copy35 = sp + 32248|0;
 $$byval_copy34 = sp + 29032|0;
 $$byval_copy33 = sp + 35792|0;
 $$byval_copy32 = sp + 25816|0;
 $$byval_copy = sp + 22600|0;
 $vararg_buffer30 = sp + 22592|0;
 $vararg_buffer28 = sp + 22584|0;
 $vararg_buffer24 = sp + 22576|0;
 $vararg_buffer22 = sp + 22568|0;
 $vararg_buffer20 = sp + 22560|0;
 $vararg_buffer18 = sp + 22552|0;
 $vararg_buffer15 = sp + 22544|0;
 $vararg_buffer13 = sp + 22536|0;
 $vararg_buffer9 = sp + 22528|0;
 $vararg_buffer6 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $7 = sp + 36704|0;
 $8 = sp + 36404|0;
 $9 = sp + 36104|0;
 $10 = sp + 9648|0;
 $11 = sp + 6432|0;
 $12 = sp + 35464|0;
 $13 = sp + 3216|0;
 $14 = sp;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($7|0),0,300)|0;
 _memset(($8|0),0,300)|0;
 _memset(($9|0),0,300)|0;
 $4 = 0;
 $5 = 0;
 while(1) {
  (_getlex()|0);
  $15 = HEAP32[7954]|0;
  $16 = ($15|0)==(223);
  $17 = HEAP32[7954]|0;
  $18 = ($17|0)==(226);
  $or$cond = $16 | $18;
  do {
   if ($or$cond) {
    _Error(10949,$vararg_buffer);
   } else {
    $19 = HEAP32[7954]|0;
    $20 = ($19|0)==(225);
    if ($20) {
     $21 = $4;
     $22 = ($21|0)==(0);
     if ($22) {
      (_strcpy($7,(31976))|0);
      break;
     }
     $23 = $4;
     $24 = ($23|0)==(1);
     if (!($24)) {
      break;
     }
     (_strcpy($8,(31976))|0);
     break;
    }
    $25 = HEAP32[7954]|0;
    $26 = ($25|0)==(228);
    if (!($26)) {
     $90 = (_strlen(128380)|0);
     $91 = ($90>>>0)>(0);
     if ($91) {
      HEAP32[$vararg_buffer24>>2] = 128380;
      $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
      HEAP32[$vararg_ptr27>>2] = (31976);
      (_snprintf($9,300,15808,$vararg_buffer24)|0);
      $92 = HEAP32[8091]|0;
      _memcpy(($$byval_copy34|0),($1|0),3216)|0;
      _ValLabel($13,$9,$92,$$byval_copy34,232);
      _memcpy(($2|0),($13|0),3216)|0;
     } else {
      $93 = HEAP32[8088]|0;
      _memcpy(($$byval_copy35|0),($1|0),3216)|0;
      _ValLabel($14,(31976),$93,$$byval_copy35,232);
      _memcpy(($2|0),($14|0),3216)|0;
     }
     $94 = ((($2)) + 84|0);
     $95 = HEAP32[$94>>2]|0;
     $96 = ($95|0)==(3);
     if (!($96)) {
      $103 = ((($2)) + 3208|0);
      $104 = HEAP32[$103>>2]|0;
      $105 = ($104|0)==(17);
      $106 = $4;
      $107 = ($106|0)==(0);
      $or$cond5 = $105 & $107;
      if (!($or$cond5)) {
       break;
      }
      $108 = ((($2)) + 3196|0);
      $109 = HEAP32[$108>>2]|0;
      (_strcpy($7,$109)|0);
      break;
     }
     $97 = $4;
     $98 = ($97|0)==(0);
     if ($98) {
      $99 = ((($2)) + 104|0);
      (_strcpy($7,$99)|0);
      break;
     }
     $100 = $4;
     $101 = ($100|0)==(1);
     if (!($101)) {
      break;
     }
     $102 = ((($2)) + 104|0);
     (_strcpy($8,$102)|0);
     break;
    }
    $27 = (_strlen((31976))|0);
    $28 = ($27>>>0)>(0);
    if ($28) {
     $29 = ((($2)) + 420|0);
     (_strcpy($29,(31976))|0);
     $30 = ((($2)) + 720|0);
     _getArrayName((31976),$30);
     $31 = ((($2)) + 870|0);
     _getArrayIdx((31976),$31);
     $32 = (_strlen(128380)|0);
     $33 = ($32>>>0)>(0);
     if ($33) {
      $34 = ((($2)) + 720|0);
      HEAP32[$vararg_buffer6>>2] = 128380;
      $vararg_ptr8 = ((($vararg_buffer6)) + 4|0);
      HEAP32[$vararg_ptr8>>2] = $34;
      (_snprintf($9,300,15808,$vararg_buffer6)|0);
      $35 = ((($2)) + 720|0);
      _memset(($35|0),0,150)|0;
      $36 = ((($2)) + 720|0);
      (_strcpy($36,$9)|0);
      $37 = ((($2)) + 870|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38 << 24 >> 24;
      $40 = (_isdigit($39)|0);
      $41 = ($40|0)!=(0);
      if (!($41)) {
       _memset(($9|0),0,300)|0;
       $42 = ((($2)) + 870|0);
       HEAP32[$vararg_buffer9>>2] = 128380;
       $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
       HEAP32[$vararg_ptr12>>2] = $42;
       (_snprintf($9,300,15808,$vararg_buffer9)|0);
       $43 = ((($2)) + 870|0);
       _memset(($43|0),0,150)|0;
       $44 = ((($2)) + 870|0);
       (_strcpy($44,$9)|0);
      }
     }
     $45 = ((($2)) + 870|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46 << 24 >> 24;
     $48 = (_isdigit($47)|0);
     $49 = ($48|0)!=(0);
     $50 = ((($2)) + 870|0);
     do {
      if ($49) {
       $51 = (_atoi($50)|0);
       $6 = $51;
      } else {
       $52 = HEAP32[8088]|0;
       _memcpy(($$byval_copy|0),($3|0),3216)|0;
       _ValLabel($10,$50,$52,$$byval_copy,232);
       _memcpy(($3|0),($10|0),3216)|0;
       $53 = ((($3)) + 84|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54|0)==(0);
       if ($55) {
        $56 = ((($3)) + 88|0);
        $57 = HEAP32[$56>>2]|0;
        $6 = $57;
        break;
       } else {
        _Error(16065,$vararg_buffer13);
        break;
       }
      }
     } while(0);
     $58 = ((($2)) + 720|0);
     $59 = HEAP32[8088]|0;
     _memcpy(($$byval_copy32|0),($2|0),3216)|0;
     _ValLabel($11,$58,$59,$$byval_copy32,232);
     _memcpy(($2|0),($11|0),3216)|0;
     $60 = ((($2)) + 870|0);
     $61 = $6;
     HEAP32[$vararg_buffer15>>2] = $61;
     (_snprintf($60,150,16087,$vararg_buffer15)|0);
     $62 = $6;
     $63 = ($62|0)<(0);
     $64 = $6;
     $65 = ($64|0)>(99999000);
     $or$cond3 = $63 | $65;
     if ($or$cond3) {
      _Error(16096,$vararg_buffer18);
     }
     $66 = ((($2)) + 84|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(8);
     if ($68) {
      $69 = ((($2)) + 412|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)!=(0);
      if ($71) {
       $72 = ((($2)) + 412|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($73|0)==(0);
       if ($74) {
        _Error(10974,$vararg_buffer20);
       }
       _memset(((72140)|0),0,256)|0;
       _memset(((71832)|0),0,300)|0;
       $75 = ((($2)) + 720|0);
       (_strcpy((72140),$75)|0);
       $76 = ((($2)) + 412|0);
       $77 = HEAP32[$76>>2]|0;
       HEAP32[8086] = $77;
       $78 = HEAP32[8086]|0;
       $79 = ($78|0)<(0);
       if ($79) {
        (_printf(16303,$vararg_buffer22)|0);
       } else {
        $80 = HEAP32[8086]|0;
        HEAP32[17956] = $80;
        $81 = $6;
        HEAP32[(71828)>>2] = $81;
        _memcpy(($$byval_copy33|0),(71824|0),312)|0;
        $82 = (_string_findData($$byval_copy33)|0);
        HEAP32[8074] = $82;
        $83 = HEAP32[8074]|0;
        $84 = ($83|0)<(0);
        if (!($84)) {
         $85 = HEAP32[8074]|0;
         _string_getElement($12,$85);
         _memcpy((71824|0),($12|0),312)|0;
        }
       }
       $86 = $4;
       $87 = ($86|0)==(0);
       if ($87) {
        (_strcpy($7,(71832))|0);
        break;
       }
       $88 = $4;
       $89 = ($88|0)==(1);
       if ($89) {
        (_strcpy($8,(71832))|0);
       }
      }
     }
    }
   }
  } while(0);
  $110 = $4;
  $111 = (($110) + 1)|0;
  $4 = $111;
  (_getlex()|0);
  $112 = HEAP32[7954]|0;
  $113 = ($112|0)==(227);
  if (!($113)) {
   break;
  }
  $114 = HEAP8[(31976)>>0]|0;
  $115 = $114 << 24 >> 24;
  $116 = ($115|0)==(44);
  if (!($116)) {
   break;
  }
 }
 _ungetlex();
 $117 = $4;
 $118 = ($117|0)!=(2);
 do {
  if ($118) {
   _Error(10949,$vararg_buffer28);
  } else {
   $119 = ((($1)) + 1800|0);
   HEAP32[$119>>2] = 1;
   $120 = ((($1)) + 84|0);
   HEAP32[$120>>2] = 2;
   $121 = ((($1)) + 1482|0);
   (_strcpy($121,$7)|0);
   $122 = HEAP8[$8>>0]|0;
   $123 = $122 << 24 >> 24;
   $124 = ($123|0)==(98);
   if ($124) {
    $125 = (_fopen($7,16704)|0);
    $126 = ((($1)) + 1796|0);
    HEAP32[$126>>2] = $125;
    $127 = ((($1)) + 1800|0);
    HEAP32[$127>>2] = 1;
    break;
   }
   $128 = HEAP8[$8>>0]|0;
   $129 = $128 << 24 >> 24;
   $130 = ($129|0)==(116);
   if ($130) {
    $131 = (_fopen($7,11020)|0);
    $132 = ((($1)) + 1796|0);
    HEAP32[$132>>2] = $131;
    $133 = ((($1)) + 1800|0);
    HEAP32[$133>>2] = 1;
    break;
   }
   $134 = HEAP8[$8>>0]|0;
   $135 = $134 << 24 >> 24;
   $136 = ($135|0)==(115);
   if ($136) {
    $137 = (_fopen($7,11022)|0);
    $138 = ((($1)) + 1796|0);
    HEAP32[$138>>2] = $137;
    $139 = ((($1)) + 1800|0);
    HEAP32[$139>>2] = 1;
    break;
   } else {
    _Error(11024,$vararg_buffer30);
    break;
   }
  }
 } while(0);
 $140 = ((($3)) + 4|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)!=(0|0);
 if ($142) {
  $143 = ((($3)) + 4|0);
  $144 = HEAP32[$143>>2]|0;
  _free($144);
 }
 $145 = ((($3)) + 8|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)!=(0|0);
 if ($147) {
  $148 = ((($3)) + 8|0);
  $149 = HEAP32[$148>>2]|0;
  _free($149);
 }
 $150 = HEAP32[$3>>2]|0;
 $151 = ($150|0)!=(0|0);
 if (!($151)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $152 = HEAP32[$3>>2]|0;
 _free($152);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcBacaArsip($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 24032|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(24032|0);
 $$byval_copy2 = sp + 19304|0;
 $$byval_copy = sp + 16088|0;
 $vararg_buffer = sp + 16080|0;
 $1 = sp + 12864|0;
 $2 = sp + 9648|0;
 $3 = sp + 6432|0;
 $5 = sp + 22824|0;
 $6 = sp + 22524|0;
 $7 = sp + 3216|0;
 $8 = sp;
 $4 = 0;
 _memset(($1|0),0,3216)|0;
 $9 = ((($1)) + 88|0);
 HEAP32[$9>>2] = 0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,1200)|0;
 _memset(($6|0),0,300)|0;
 (_getlex()|0);
 $10 = HEAP32[7954]|0;
 $11 = ($10|0)==(224);
 do {
  if ($11) {
   $12 = (_strlen(128380)|0);
   $13 = ($12>>>0)>(0);
   if ($13) {
    HEAP32[$vararg_buffer>>2] = 128380;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = (31976);
    (_snprintf($6,300,15808,$vararg_buffer)|0);
    $14 = HEAP32[8091]|0;
    _memcpy(($$byval_copy|0),($1|0),3216)|0;
    _ValLabel($7,$6,$14,$$byval_copy,232);
    _memcpy(($2|0),($7|0),3216)|0;
   } else {
    $15 = HEAP32[8088]|0;
    _memcpy(($$byval_copy2|0),($1|0),3216)|0;
    _ValLabel($8,(31976),$15,$$byval_copy2,232);
    _memcpy(($2|0),($8|0),3216)|0;
   }
   $16 = ((($2)) + 84|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ($17|0)==(2);
   if ($18) {
    $19 = ((($2)) + 1796|0);
    $20 = HEAP32[$19>>2]|0;
    $4 = $20;
    $21 = $4;
    (_fgets($5,1200,$21)|0);
    $22 = ((($1)) + 84|0);
    HEAP32[$22>>2] = 3;
    $23 = ((($1)) + 104|0);
    (_strcpy($23,$5)|0);
    $24 = (_strlen($5)|0);
    $25 = ($24>>>0)>(0);
    $26 = ((($1)) + 88|0);
    if ($25) {
     HEAP32[$26>>2] = 1;
     break;
    } else {
     HEAP32[$26>>2] = 0;
     break;
    }
   }
  }
 } while(0);
 $27 = ((($3)) + 4|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)!=(0|0);
 if ($29) {
  $30 = ((($3)) + 4|0);
  $31 = HEAP32[$30>>2]|0;
  _free($31);
 }
 $32 = ((($3)) + 8|0);
 $33 = HEAP32[$32>>2]|0;
 $34 = ($33|0)!=(0|0);
 if ($34) {
  $35 = ((($3)) + 8|0);
  $36 = HEAP32[$35>>2]|0;
  _free($36);
 }
 $37 = HEAP32[$3>>2]|0;
 $38 = ($37|0)!=(0|0);
 if (!($38)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $39 = HEAP32[$3>>2]|0;
 _free($39);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcApakahArsip($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0;
 var $vararg_ptr10 = 0, $vararg_ptr27 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37008|0);
 $$byval_copy33 = sp + 32256|0;
 $$byval_copy32 = sp + 29040|0;
 $$byval_copy31 = sp + 35792|0;
 $$byval_copy30 = sp + 25824|0;
 $$byval_copy = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer24 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $5 = sp + 36704|0;
 $6 = sp + 36404|0;
 $7 = sp + 36104|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 35472|0;
 $11 = sp + 3216|0;
 $12 = sp;
 $4 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,300)|0;
 _memset(($6|0),0,300)|0;
 _memset(($7|0),0,300)|0;
 (_getlex()|0);
 $13 = ((($1)) + 104|0);
 (_strcpy($13,1358125)|0);
 $14 = HEAP32[7954]|0;
 $15 = ($14|0)==(223);
 do {
  if ($15) {
   _Error(11065,$vararg_buffer);
  } else {
   $16 = HEAP32[7954]|0;
   $17 = ($16|0)==(226);
   if ($17) {
    _Error(11065,$vararg_buffer2);
    break;
   }
   $18 = HEAP32[7954]|0;
   $19 = ($18|0)==(225);
   if ($19) {
    $20 = (_node_isfile((31976))|0);
    $21 = ((($1)) + 88|0);
    HEAP32[$21>>2] = $20;
    $22 = ((($1)) + 84|0);
    HEAP32[$22>>2] = 0;
    break;
   }
   $23 = HEAP32[7954]|0;
   $24 = ($23|0)==(228);
   if (!($24)) {
    $98 = (_strlen(128380)|0);
    $99 = ($98>>>0)>(0);
    if ($99) {
     HEAP32[$vararg_buffer24>>2] = 128380;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = (31976);
     (_snprintf($7,300,15808,$vararg_buffer24)|0);
     $100 = HEAP32[8091]|0;
     _memcpy(($$byval_copy32|0),($1|0),3216)|0;
     _ValLabel($11,$7,$100,$$byval_copy32,232);
     _memcpy(($2|0),($11|0),3216)|0;
    } else {
     $101 = HEAP32[8088]|0;
     _memcpy(($$byval_copy33|0),($1|0),3216)|0;
     _ValLabel($12,(31976),$101,$$byval_copy33,232);
     _memcpy(($2|0),($12|0),3216)|0;
    }
    $102 = ((($2)) + 84|0);
    $103 = HEAP32[$102>>2]|0;
    $104 = ($103|0)==(3);
    if ($104) {
     $105 = ((($2)) + 104|0);
     $106 = (_node_isfile($105)|0);
     $107 = ((($1)) + 88|0);
     HEAP32[$107>>2] = $106;
     $108 = ((($1)) + 84|0);
     HEAP32[$108>>2] = 0;
     break;
    } else {
     _Error(11065,$vararg_buffer28);
     break;
    }
   }
   $25 = (_strlen((31976))|0);
   $26 = ($25>>>0)>(0);
   if ($26) {
    $27 = ((($2)) + 420|0);
    (_strcpy($27,(31976))|0);
    $28 = ((($2)) + 720|0);
    _getArrayName((31976),$28);
    $29 = ((($2)) + 870|0);
    _getArrayIdx((31976),$29);
    $30 = (_strlen(128380)|0);
    $31 = ($30>>>0)>(0);
    if ($31) {
     $32 = ((($2)) + 720|0);
     HEAP32[$vararg_buffer4>>2] = 128380;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $32;
     (_snprintf($7,300,15808,$vararg_buffer4)|0);
     $33 = ((($2)) + 720|0);
     _memset(($33|0),0,150)|0;
     $34 = ((($2)) + 720|0);
     (_strcpy($34,$7)|0);
     $35 = ((($2)) + 870|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36 << 24 >> 24;
     $38 = (_isdigit($37)|0);
     $39 = ($38|0)!=(0);
     if (!($39)) {
      _memset(($7|0),0,300)|0;
      $40 = ((($2)) + 870|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $40;
      (_snprintf($7,300,15808,$vararg_buffer7)|0);
      $41 = ((($2)) + 870|0);
      _memset(($41|0),0,150)|0;
      $42 = ((($2)) + 870|0);
      (_strcpy($42,$7)|0);
     }
    }
    $43 = ((($2)) + 870|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 << 24 >> 24;
    $46 = (_isdigit($45)|0);
    $47 = ($46|0)!=(0);
    $48 = ((($2)) + 870|0);
    do {
     if ($47) {
      $49 = (_atoi($48)|0);
      $4 = $49;
     } else {
      $50 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($3|0),3216)|0;
      _ValLabel($8,$48,$50,$$byval_copy,232);
      _memcpy(($3|0),($8|0),3216)|0;
      $51 = ((($3)) + 84|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($52|0)==(0);
      if ($53) {
       $54 = ((($3)) + 88|0);
       $55 = HEAP32[$54>>2]|0;
       $4 = $55;
       break;
      } else {
       _Error(16065,$vararg_buffer11);
       break;
      }
     }
    } while(0);
    $56 = ((($2)) + 720|0);
    $57 = HEAP32[8088]|0;
    _memcpy(($$byval_copy30|0),($2|0),3216)|0;
    _ValLabel($9,$56,$57,$$byval_copy30,232);
    _memcpy(($2|0),($9|0),3216)|0;
    $58 = ((($2)) + 870|0);
    $59 = $4;
    HEAP32[$vararg_buffer13>>2] = $59;
    (_snprintf($58,150,16087,$vararg_buffer13)|0);
    $60 = $4;
    $61 = ($60|0)<(0);
    $62 = $4;
    $63 = ($62|0)>(99999000);
    $or$cond = $61 | $63;
    if ($or$cond) {
     _Error(16096,$vararg_buffer16);
    }
    $64 = ((($2)) + 84|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(8);
    if ($66) {
     $67 = ((($2)) + 412|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)!=(0);
     if ($69) {
      $70 = ((($2)) + 412|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)==(0);
      if ($72) {
       _Error(11098,$vararg_buffer18);
      }
      _memset(((72140)|0),0,256)|0;
      _memset(((71832)|0),0,300)|0;
      $73 = ((($2)) + 720|0);
      (_strcpy((72140),$73)|0);
      $74 = ((($2)) + 412|0);
      $75 = HEAP32[$74>>2]|0;
      HEAP32[8086] = $75;
      $76 = HEAP32[8086]|0;
      $77 = ($76|0)<(0);
      if ($77) {
       (_printf(16303,$vararg_buffer20)|0);
      } else {
       $78 = HEAP32[8086]|0;
       HEAP32[17956] = $78;
       $79 = $4;
       HEAP32[(71828)>>2] = $79;
       _memcpy(($$byval_copy31|0),(71824|0),312)|0;
       $80 = (_string_findData($$byval_copy31)|0);
       HEAP32[8074] = $80;
       $81 = HEAP32[8074]|0;
       $82 = ($81|0)<(0);
       if (!($82)) {
        $83 = HEAP32[8074]|0;
        _string_getElement($10,$83);
        _memcpy((71824|0),($10|0),312)|0;
       }
      }
      $84 = (_node_isfile((71832))|0);
      $85 = ((($1)) + 88|0);
      HEAP32[$85>>2] = $84;
      $86 = ((($1)) + 84|0);
      HEAP32[$86>>2] = 0;
      break;
     }
    }
    $87 = ((($2)) + 84|0);
    $88 = HEAP32[$87>>2]|0;
    $89 = ($88|0)==(10);
    if ($89) {
     $90 = $4;
     $91 = ((($2)) + 1024|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($92) + ($90<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = (_node_isfile($94)|0);
     $96 = ((($1)) + 88|0);
     HEAP32[$96>>2] = $95;
     $97 = ((($1)) + 84|0);
     HEAP32[$97>>2] = 0;
     break;
    } else {
     _Error(11065,$vararg_buffer22);
     break;
    }
   }
  }
 } while(0);
 $109 = ((($1)) + 84|0);
 HEAP32[$109>>2] = 0;
 $110 = ((($3)) + 4|0);
 $111 = HEAP32[$110>>2]|0;
 $112 = ($111|0)!=(0|0);
 if ($112) {
  $113 = ((($3)) + 4|0);
  $114 = HEAP32[$113>>2]|0;
  _free($114);
 }
 $115 = ((($3)) + 8|0);
 $116 = HEAP32[$115>>2]|0;
 $117 = ($116|0)!=(0|0);
 if ($117) {
  $118 = ((($3)) + 8|0);
  $119 = HEAP32[$118>>2]|0;
  _free($119);
 }
 $120 = HEAP32[$3>>2]|0;
 $121 = ($120|0)!=(0|0);
 if (!($121)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $122 = HEAP32[$3>>2]|0;
 _free($122);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _node_isfile($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(160|0);
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 72|0;
 $1 = $0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $6 = $1;
 $7 = (_stat($6,$2)|0);
 $8 = ($7|0)==(-1);
 if (!($8)) {
  $35 = ((($2)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 & 61440;
  $38 = ($37|0)==(32768);
  if ($38) {
   $5 = 1;
   $1 = 0;
   $39 = $5;
   STACKTOP = sp;return ($39|0);
  } else {
   $5 = 0;
   $1 = 0;
   $39 = $5;
   STACKTOP = sp;return ($39|0);
  }
 }
 $9 = HEAP32[35]|0;
 $10 = $1;
 HEAP32[$vararg_buffer>>2] = $10;
 (_fprintf($9,11145,$vararg_buffer)|0);
 $11 = (___errno_location()|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(9);
 if ($13) {
  $14 = HEAP32[35]|0;
  (_fprintf($14,11171,$vararg_buffer1)|0);
 }
 $15 = (___errno_location()|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(2);
 if ($17) {
  $18 = HEAP32[35]|0;
  (_fprintf($18,11199,$vararg_buffer3)|0);
 }
 $19 = (___errno_location()|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(20);
 if ($21) {
  $22 = HEAP32[35]|0;
  (_fprintf($22,11230,$vararg_buffer5)|0);
 }
 $23 = (___errno_location()|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(13);
 if ($25) {
  $26 = HEAP32[35]|0;
  (_fprintf($26,11269,$vararg_buffer7)|0);
 }
 $27 = (___errno_location()|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(12);
 if ($29) {
  $30 = HEAP32[35]|0;
  (_fprintf($30,11297,$vararg_buffer9)|0);
 }
 $31 = (___errno_location()|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(36);
 if (!($33)) {
  _Error(11355,$vararg_buffer13);
  _exit(1);
  // unreachable;
 }
 $34 = HEAP32[35]|0;
 (_fprintf($34,11326,$vararg_buffer11)|0);
 _Error(11355,$vararg_buffer13);
 _exit(1);
 // unreachable;
 return (0)|0;
}
function _funcBesarArsip($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr27 = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37008|0);
 $$byval_copy33 = sp + 32256|0;
 $$byval_copy32 = sp + 29040|0;
 $$byval_copy31 = sp + 35792|0;
 $$byval_copy30 = sp + 25824|0;
 $$byval_copy = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer24 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $5 = sp + 36704|0;
 $6 = sp + 36404|0;
 $7 = sp + 36104|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 35472|0;
 $11 = sp + 3216|0;
 $12 = sp;
 $4 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,300)|0;
 _memset(($6|0),0,300)|0;
 _memset(($7|0),0,300)|0;
 (_getlex()|0);
 $13 = HEAP32[7954]|0;
 $14 = ($13|0)==(223);
 do {
  if ($14) {
   _Error(11368,$vararg_buffer);
  } else {
   $15 = HEAP32[7954]|0;
   $16 = ($15|0)==(226);
   if ($16) {
    _Error(11368,$vararg_buffer2);
    break;
   }
   $17 = HEAP32[7954]|0;
   $18 = ($17|0)==(225);
   if ($18) {
    $19 = ((($1)) + 104|0);
    $20 = (_node_size((31976))|0);
    (_strcpy($19,$20)|0);
    $21 = ((($1)) + 84|0);
    HEAP32[$21>>2] = 3;
    break;
   }
   $22 = HEAP32[7954]|0;
   $23 = ($22|0)==(228);
   if (!($23)) {
    $97 = (_strlen(128380)|0);
    $98 = ($97>>>0)>(0);
    if ($98) {
     HEAP32[$vararg_buffer24>>2] = 128380;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = (31976);
     (_snprintf($7,300,15808,$vararg_buffer24)|0);
     $99 = HEAP32[8091]|0;
     _memcpy(($$byval_copy32|0),($1|0),3216)|0;
     _ValLabel($11,$7,$99,$$byval_copy32,232);
     _memcpy(($2|0),($11|0),3216)|0;
    } else {
     $100 = HEAP32[8088]|0;
     _memcpy(($$byval_copy33|0),($1|0),3216)|0;
     _ValLabel($12,(31976),$100,$$byval_copy33,232);
     _memcpy(($2|0),($12|0),3216)|0;
    }
    $101 = ((($2)) + 84|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102|0)==(3);
    if ($103) {
     $104 = ((($1)) + 104|0);
     $105 = ((($2)) + 104|0);
     $106 = (_node_size($105)|0);
     (_strcpy($104,$106)|0);
     $107 = ((($1)) + 84|0);
     HEAP32[$107>>2] = 3;
     break;
    } else {
     _Error(11368,$vararg_buffer28);
     break;
    }
   }
   $24 = (_strlen((31976))|0);
   $25 = ($24>>>0)>(0);
   if ($25) {
    $26 = ((($2)) + 420|0);
    (_strcpy($26,(31976))|0);
    $27 = ((($2)) + 720|0);
    _getArrayName((31976),$27);
    $28 = ((($2)) + 870|0);
    _getArrayIdx((31976),$28);
    $29 = (_strlen(128380)|0);
    $30 = ($29>>>0)>(0);
    if ($30) {
     $31 = ((($2)) + 720|0);
     HEAP32[$vararg_buffer4>>2] = 128380;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $31;
     (_snprintf($7,300,15808,$vararg_buffer4)|0);
     $32 = ((($2)) + 720|0);
     _memset(($32|0),0,150)|0;
     $33 = ((($2)) + 720|0);
     (_strcpy($33,$7)|0);
     $34 = ((($2)) + 870|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = (_isdigit($36)|0);
     $38 = ($37|0)!=(0);
     if (!($38)) {
      _memset(($7|0),0,300)|0;
      $39 = ((($2)) + 870|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $39;
      (_snprintf($7,300,15808,$vararg_buffer7)|0);
      $40 = ((($2)) + 870|0);
      _memset(($40|0),0,150)|0;
      $41 = ((($2)) + 870|0);
      (_strcpy($41,$7)|0);
     }
    }
    $42 = ((($2)) + 870|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = (_isdigit($44)|0);
    $46 = ($45|0)!=(0);
    $47 = ((($2)) + 870|0);
    do {
     if ($46) {
      $48 = (_atoi($47)|0);
      $4 = $48;
     } else {
      $49 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($3|0),3216)|0;
      _ValLabel($8,$47,$49,$$byval_copy,232);
      _memcpy(($3|0),($8|0),3216)|0;
      $50 = ((($3)) + 84|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0);
      if ($52) {
       $53 = ((($3)) + 88|0);
       $54 = HEAP32[$53>>2]|0;
       $4 = $54;
       break;
      } else {
       _Error(16065,$vararg_buffer11);
       break;
      }
     }
    } while(0);
    $55 = ((($2)) + 720|0);
    $56 = HEAP32[8088]|0;
    _memcpy(($$byval_copy30|0),($2|0),3216)|0;
    _ValLabel($9,$55,$56,$$byval_copy30,232);
    _memcpy(($2|0),($9|0),3216)|0;
    $57 = ((($2)) + 870|0);
    $58 = $4;
    HEAP32[$vararg_buffer13>>2] = $58;
    (_snprintf($57,150,16087,$vararg_buffer13)|0);
    $59 = $4;
    $60 = ($59|0)<(0);
    $61 = $4;
    $62 = ($61|0)>(99999000);
    $or$cond = $60 | $62;
    if ($or$cond) {
     _Error(16096,$vararg_buffer16);
    }
    $63 = ((($2)) + 84|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(8);
    if ($65) {
     $66 = ((($2)) + 412|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)!=(0);
     if ($68) {
      $69 = ((($2)) + 412|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)==(0);
      if ($71) {
       _Error(11400,$vararg_buffer18);
      }
      _memset(((72140)|0),0,256)|0;
      _memset(((71832)|0),0,300)|0;
      $72 = ((($2)) + 720|0);
      (_strcpy((72140),$72)|0);
      $73 = ((($2)) + 412|0);
      $74 = HEAP32[$73>>2]|0;
      HEAP32[8086] = $74;
      $75 = HEAP32[8086]|0;
      $76 = ($75|0)<(0);
      if ($76) {
       (_printf(16303,$vararg_buffer20)|0);
      } else {
       $77 = HEAP32[8086]|0;
       HEAP32[17956] = $77;
       $78 = $4;
       HEAP32[(71828)>>2] = $78;
       _memcpy(($$byval_copy31|0),(71824|0),312)|0;
       $79 = (_string_findData($$byval_copy31)|0);
       HEAP32[8074] = $79;
       $80 = HEAP32[8074]|0;
       $81 = ($80|0)<(0);
       if (!($81)) {
        $82 = HEAP32[8074]|0;
        _string_getElement($10,$82);
        _memcpy((71824|0),($10|0),312)|0;
       }
      }
      $83 = ((($1)) + 104|0);
      $84 = (_node_size((71832))|0);
      (_strcpy($83,$84)|0);
      $85 = ((($1)) + 84|0);
      HEAP32[$85>>2] = 3;
      break;
     }
    }
    $86 = ((($2)) + 84|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(10);
    if ($88) {
     $89 = ((($1)) + 104|0);
     $90 = $4;
     $91 = ((($2)) + 1024|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($92) + ($90<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = (_node_size($94)|0);
     (_strcpy($89,$95)|0);
     $96 = ((($1)) + 84|0);
     HEAP32[$96>>2] = 3;
     break;
    } else {
     _Error(11368,$vararg_buffer22);
     break;
    }
   }
  }
 } while(0);
 $108 = ((($3)) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0|0);
 if ($110) {
  $111 = ((($3)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  _free($112);
 }
 $113 = ((($3)) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = ((($3)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  _free($117);
 }
 $118 = HEAP32[$3>>2]|0;
 $119 = ($118|0)!=(0|0);
 if (!($119)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $120 = HEAP32[$3>>2]|0;
 _free($120);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _node_size($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0, $vararg_buffer18 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $vararg_buffer18 = sp + 72|0;
 $vararg_buffer15 = sp + 64|0;
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 84|0;
 $4 = sp + 164|0;
 $1 = $0;
 $3 = 0;
 $5 = 0;
 dest=$4; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = $1;
 $7 = (_stat($6,$2)|0);
 $8 = ($7|0)==(-1);
 if (!($8)) {
  $35 = ((($2)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 & 61440;
  $38 = ($37|0)==(32768);
  if ($38) {
   $39 = ((($2)) + 36|0);
   $40 = HEAP32[$39>>2]|0;
   HEAP32[$vararg_buffer15>>2] = $40;
   (_sprintf($4,11446,$vararg_buffer15)|0);
   $5 = $4;
   $1 = 0;
   $47 = $5;
   STACKTOP = sp;return ($47|0);
  }
  $41 = ((($2)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & 61440;
  $44 = ($43|0)==(16384);
  if ($44) {
   $45 = ((($2)) + 36|0);
   $46 = HEAP32[$45>>2]|0;
   HEAP32[$vararg_buffer18>>2] = $46;
   (_sprintf($4,11446,$vararg_buffer18)|0);
   $5 = $4;
   $1 = 0;
   $47 = $5;
   STACKTOP = sp;return ($47|0);
  } else {
   (_strcpy($4,16063)|0);
   $5 = $4;
   $1 = 0;
   $47 = $5;
   STACKTOP = sp;return ($47|0);
  }
 }
 $9 = HEAP32[35]|0;
 $10 = $1;
 HEAP32[$vararg_buffer>>2] = $10;
 (_fprintf($9,11145,$vararg_buffer)|0);
 $11 = (___errno_location()|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(9);
 if ($13) {
  $14 = HEAP32[35]|0;
  (_fprintf($14,11171,$vararg_buffer1)|0);
 }
 $15 = (___errno_location()|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(2);
 if ($17) {
  $18 = HEAP32[35]|0;
  (_fprintf($18,11199,$vararg_buffer3)|0);
 }
 $19 = (___errno_location()|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(20);
 if ($21) {
  $22 = HEAP32[35]|0;
  (_fprintf($22,11230,$vararg_buffer5)|0);
 }
 $23 = (___errno_location()|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(13);
 if ($25) {
  $26 = HEAP32[35]|0;
  (_fprintf($26,11269,$vararg_buffer7)|0);
 }
 $27 = (___errno_location()|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(12);
 if ($29) {
  $30 = HEAP32[35]|0;
  (_fprintf($30,11297,$vararg_buffer9)|0);
 }
 $31 = (___errno_location()|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(36);
 if (!($33)) {
  _Error(11355,$vararg_buffer13);
  _exit(1);
  // unreachable;
 }
 $34 = HEAP32[35]|0;
 (_fprintf($34,11326,$vararg_buffer11)|0);
 _Error(11355,$vararg_buffer13);
 _exit(1);
 // unreachable;
 return (0)|0;
}
function _funcWaktuAksesArsip($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr27 = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37008|0);
 $$byval_copy33 = sp + 32256|0;
 $$byval_copy32 = sp + 29040|0;
 $$byval_copy31 = sp + 35792|0;
 $$byval_copy30 = sp + 25824|0;
 $$byval_copy = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer24 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $5 = sp + 36704|0;
 $6 = sp + 36404|0;
 $7 = sp + 36104|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 35472|0;
 $11 = sp + 3216|0;
 $12 = sp;
 $4 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,300)|0;
 _memset(($6|0),0,300)|0;
 _memset(($7|0),0,300)|0;
 (_getlex()|0);
 $13 = HEAP32[7954]|0;
 $14 = ($13|0)==(223);
 do {
  if ($14) {
   _Error(11450,$vararg_buffer);
  } else {
   $15 = HEAP32[7954]|0;
   $16 = ($15|0)==(226);
   if ($16) {
    _Error(11450,$vararg_buffer2);
    break;
   }
   $17 = HEAP32[7954]|0;
   $18 = ($17|0)==(225);
   if ($18) {
    $19 = ((($1)) + 104|0);
    $20 = (_node_accesstime((31976))|0);
    (_strcpy($19,$20)|0);
    $21 = ((($1)) + 84|0);
    HEAP32[$21>>2] = 3;
    break;
   }
   $22 = HEAP32[7954]|0;
   $23 = ($22|0)==(228);
   if (!($23)) {
    $97 = (_strlen(128380)|0);
    $98 = ($97>>>0)>(0);
    if ($98) {
     HEAP32[$vararg_buffer24>>2] = 128380;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = (31976);
     (_snprintf($7,300,15808,$vararg_buffer24)|0);
     $99 = HEAP32[8091]|0;
     _memcpy(($$byval_copy32|0),($1|0),3216)|0;
     _ValLabel($11,$7,$99,$$byval_copy32,232);
     _memcpy(($2|0),($11|0),3216)|0;
    } else {
     $100 = HEAP32[8088]|0;
     _memcpy(($$byval_copy33|0),($1|0),3216)|0;
     _ValLabel($12,(31976),$100,$$byval_copy33,232);
     _memcpy(($2|0),($12|0),3216)|0;
    }
    $101 = ((($2)) + 84|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102|0)==(3);
    if ($103) {
     $104 = ((($1)) + 104|0);
     $105 = ((($2)) + 104|0);
     $106 = (_node_accesstime($105)|0);
     (_strcpy($104,$106)|0);
     $107 = ((($1)) + 84|0);
     HEAP32[$107>>2] = 3;
     break;
    } else {
     _Error(11450,$vararg_buffer28);
     break;
    }
   }
   $24 = (_strlen((31976))|0);
   $25 = ($24>>>0)>(0);
   if ($25) {
    $26 = ((($2)) + 420|0);
    (_strcpy($26,(31976))|0);
    $27 = ((($2)) + 720|0);
    _getArrayName((31976),$27);
    $28 = ((($2)) + 870|0);
    _getArrayIdx((31976),$28);
    $29 = (_strlen(128380)|0);
    $30 = ($29>>>0)>(0);
    if ($30) {
     $31 = ((($2)) + 720|0);
     HEAP32[$vararg_buffer4>>2] = 128380;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $31;
     (_snprintf($7,300,15808,$vararg_buffer4)|0);
     $32 = ((($2)) + 720|0);
     _memset(($32|0),0,150)|0;
     $33 = ((($2)) + 720|0);
     (_strcpy($33,$7)|0);
     $34 = ((($2)) + 870|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = (_isdigit($36)|0);
     $38 = ($37|0)!=(0);
     if (!($38)) {
      _memset(($7|0),0,300)|0;
      $39 = ((($2)) + 870|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $39;
      (_snprintf($7,300,15808,$vararg_buffer7)|0);
      $40 = ((($2)) + 870|0);
      _memset(($40|0),0,150)|0;
      $41 = ((($2)) + 870|0);
      (_strcpy($41,$7)|0);
     }
    }
    $42 = ((($2)) + 870|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = (_isdigit($44)|0);
    $46 = ($45|0)!=(0);
    $47 = ((($2)) + 870|0);
    do {
     if ($46) {
      $48 = (_atoi($47)|0);
      $4 = $48;
     } else {
      $49 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($3|0),3216)|0;
      _ValLabel($8,$47,$49,$$byval_copy,232);
      _memcpy(($3|0),($8|0),3216)|0;
      $50 = ((($3)) + 84|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0);
      if ($52) {
       $53 = ((($3)) + 88|0);
       $54 = HEAP32[$53>>2]|0;
       $4 = $54;
       break;
      } else {
       _Error(16065,$vararg_buffer11);
       break;
      }
     }
    } while(0);
    $55 = ((($2)) + 720|0);
    $56 = HEAP32[8088]|0;
    _memcpy(($$byval_copy30|0),($2|0),3216)|0;
    _ValLabel($9,$55,$56,$$byval_copy30,232);
    _memcpy(($2|0),($9|0),3216)|0;
    $57 = ((($2)) + 870|0);
    $58 = $4;
    HEAP32[$vararg_buffer13>>2] = $58;
    (_snprintf($57,150,16087,$vararg_buffer13)|0);
    $59 = $4;
    $60 = ($59|0)<(0);
    $61 = $4;
    $62 = ($61|0)>(99999000);
    $or$cond = $60 | $62;
    if ($or$cond) {
     _Error(16096,$vararg_buffer16);
    }
    $63 = ((($2)) + 84|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(8);
    if ($65) {
     $66 = ((($2)) + 412|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)!=(0);
     if ($68) {
      $69 = ((($2)) + 412|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)==(0);
      if ($71) {
       _Error(11488,$vararg_buffer18);
      }
      _memset(((72140)|0),0,256)|0;
      _memset(((71832)|0),0,300)|0;
      $72 = ((($2)) + 720|0);
      (_strcpy((72140),$72)|0);
      $73 = ((($2)) + 412|0);
      $74 = HEAP32[$73>>2]|0;
      HEAP32[8086] = $74;
      $75 = HEAP32[8086]|0;
      $76 = ($75|0)<(0);
      if ($76) {
       (_printf(16303,$vararg_buffer20)|0);
      } else {
       $77 = HEAP32[8086]|0;
       HEAP32[17956] = $77;
       $78 = $4;
       HEAP32[(71828)>>2] = $78;
       _memcpy(($$byval_copy31|0),(71824|0),312)|0;
       $79 = (_string_findData($$byval_copy31)|0);
       HEAP32[8074] = $79;
       $80 = HEAP32[8074]|0;
       $81 = ($80|0)<(0);
       if (!($81)) {
        $82 = HEAP32[8074]|0;
        _string_getElement($10,$82);
        _memcpy((71824|0),($10|0),312)|0;
       }
      }
      $83 = ((($1)) + 104|0);
      $84 = (_node_accesstime((71832))|0);
      (_strcpy($83,$84)|0);
      $85 = ((($1)) + 84|0);
      HEAP32[$85>>2] = 3;
      break;
     }
    }
    $86 = ((($2)) + 84|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(10);
    if ($88) {
     $89 = ((($1)) + 104|0);
     $90 = $4;
     $91 = ((($2)) + 1024|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($92) + ($90<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = (_node_accesstime($94)|0);
     (_strcpy($89,$95)|0);
     $96 = ((($1)) + 84|0);
     HEAP32[$96>>2] = 3;
     break;
    } else {
     _Error(11450,$vararg_buffer22);
     break;
    }
   }
  }
 } while(0);
 $108 = ((($3)) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0|0);
 if ($110) {
  $111 = ((($3)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  _free($112);
 }
 $113 = ((($3)) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = ((($3)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  _free($117);
 }
 $118 = HEAP32[$3>>2]|0;
 $119 = ($118|0)!=(0|0);
 if (!($119)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $120 = HEAP32[$3>>2]|0;
 _free($120);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _node_accesstime($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 68|0;
 $4 = sp + 148|0;
 $1 = $0;
 $3 = 0;
 $5 = 0;
 dest=$4; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = $1;
 $7 = (_stat($6,$2)|0);
 $8 = ($7|0)==(-1);
 if (!($8)) {
  $35 = ((($2)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 & 61440;
  $38 = ($37|0)==(32768);
  if ($38) {
   $39 = ((($2)) + 48|0);
   $40 = (_localtime(($39|0))|0);
   (_strftime(($4|0),30,(11540|0),($40|0))|0);
   $5 = $4;
   $1 = 0;
   $47 = $5;
   STACKTOP = sp;return ($47|0);
  }
  $41 = ((($2)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & 61440;
  $44 = ($43|0)==(16384);
  if ($44) {
   $45 = ((($2)) + 48|0);
   $46 = (_localtime(($45|0))|0);
   (_strftime(($4|0),30,(11540|0),($46|0))|0);
   $5 = $4;
   $1 = 0;
   $47 = $5;
   STACKTOP = sp;return ($47|0);
  } else {
   (_strcpy($4,1358125)|0);
   $5 = $4;
   $1 = 0;
   $47 = $5;
   STACKTOP = sp;return ($47|0);
  }
 }
 $9 = HEAP32[35]|0;
 $10 = $1;
 HEAP32[$vararg_buffer>>2] = $10;
 (_fprintf($9,11145,$vararg_buffer)|0);
 $11 = (___errno_location()|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(9);
 if ($13) {
  $14 = HEAP32[35]|0;
  (_fprintf($14,11171,$vararg_buffer1)|0);
 }
 $15 = (___errno_location()|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(2);
 if ($17) {
  $18 = HEAP32[35]|0;
  (_fprintf($18,11199,$vararg_buffer3)|0);
 }
 $19 = (___errno_location()|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(20);
 if ($21) {
  $22 = HEAP32[35]|0;
  (_fprintf($22,11230,$vararg_buffer5)|0);
 }
 $23 = (___errno_location()|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(13);
 if ($25) {
  $26 = HEAP32[35]|0;
  (_fprintf($26,11269,$vararg_buffer7)|0);
 }
 $27 = (___errno_location()|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(12);
 if ($29) {
  $30 = HEAP32[35]|0;
  (_fprintf($30,11297,$vararg_buffer9)|0);
 }
 $31 = (___errno_location()|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(36);
 if (!($33)) {
  _Error(11355,$vararg_buffer13);
  _exit(1);
  // unreachable;
 }
 $34 = HEAP32[35]|0;
 (_fprintf($34,11326,$vararg_buffer11)|0);
 _Error(11355,$vararg_buffer13);
 _exit(1);
 // unreachable;
 return (0)|0;
}
function _funcWaktuRubahArsip($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr27 = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37008|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37008|0);
 $$byval_copy33 = sp + 32256|0;
 $$byval_copy32 = sp + 29040|0;
 $$byval_copy31 = sp + 35792|0;
 $$byval_copy30 = sp + 25824|0;
 $$byval_copy = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer24 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $5 = sp + 36704|0;
 $6 = sp + 36404|0;
 $7 = sp + 36104|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 35472|0;
 $11 = sp + 3216|0;
 $12 = sp;
 $4 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,300)|0;
 _memset(($6|0),0,300)|0;
 _memset(($7|0),0,300)|0;
 (_getlex()|0);
 $13 = HEAP32[7954]|0;
 $14 = ($13|0)==(223);
 do {
  if ($14) {
   _Error(11558,$vararg_buffer);
  } else {
   $15 = HEAP32[7954]|0;
   $16 = ($15|0)==(226);
   if ($16) {
    _Error(11558,$vararg_buffer2);
    break;
   }
   $17 = HEAP32[7954]|0;
   $18 = ($17|0)==(225);
   if ($18) {
    $19 = ((($1)) + 104|0);
    $20 = (_node_modifytime((31976))|0);
    (_strcpy($19,$20)|0);
    $21 = ((($1)) + 84|0);
    HEAP32[$21>>2] = 3;
    break;
   }
   $22 = HEAP32[7954]|0;
   $23 = ($22|0)==(228);
   if (!($23)) {
    $97 = (_strlen(128380)|0);
    $98 = ($97>>>0)>(0);
    if ($98) {
     HEAP32[$vararg_buffer24>>2] = 128380;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = (31976);
     (_snprintf($7,300,15808,$vararg_buffer24)|0);
     $99 = HEAP32[8091]|0;
     _memcpy(($$byval_copy32|0),($1|0),3216)|0;
     _ValLabel($11,$7,$99,$$byval_copy32,232);
     _memcpy(($2|0),($11|0),3216)|0;
    } else {
     $100 = HEAP32[8088]|0;
     _memcpy(($$byval_copy33|0),($1|0),3216)|0;
     _ValLabel($12,(31976),$100,$$byval_copy33,232);
     _memcpy(($2|0),($12|0),3216)|0;
    }
    $101 = ((($2)) + 84|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102|0)==(3);
    if ($103) {
     $104 = ((($1)) + 104|0);
     $105 = ((($2)) + 104|0);
     $106 = (_node_modifytime($105)|0);
     (_strcpy($104,$106)|0);
     $107 = ((($1)) + 84|0);
     HEAP32[$107>>2] = 3;
     break;
    } else {
     _Error(11450,$vararg_buffer28);
     break;
    }
   }
   $24 = (_strlen((31976))|0);
   $25 = ($24>>>0)>(0);
   if ($25) {
    $26 = ((($2)) + 420|0);
    (_strcpy($26,(31976))|0);
    $27 = ((($2)) + 720|0);
    _getArrayName((31976),$27);
    $28 = ((($2)) + 870|0);
    _getArrayIdx((31976),$28);
    $29 = (_strlen(128380)|0);
    $30 = ($29>>>0)>(0);
    if ($30) {
     $31 = ((($2)) + 720|0);
     HEAP32[$vararg_buffer4>>2] = 128380;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $31;
     (_snprintf($7,300,15808,$vararg_buffer4)|0);
     $32 = ((($2)) + 720|0);
     _memset(($32|0),0,150)|0;
     $33 = ((($2)) + 720|0);
     (_strcpy($33,$7)|0);
     $34 = ((($2)) + 870|0);
     $35 = HEAP8[$34>>0]|0;
     $36 = $35 << 24 >> 24;
     $37 = (_isdigit($36)|0);
     $38 = ($37|0)!=(0);
     if (!($38)) {
      _memset(($7|0),0,300)|0;
      $39 = ((($2)) + 870|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $39;
      (_snprintf($7,300,15808,$vararg_buffer7)|0);
      $40 = ((($2)) + 870|0);
      _memset(($40|0),0,150)|0;
      $41 = ((($2)) + 870|0);
      (_strcpy($41,$7)|0);
     }
    }
    $42 = ((($2)) + 870|0);
    $43 = HEAP8[$42>>0]|0;
    $44 = $43 << 24 >> 24;
    $45 = (_isdigit($44)|0);
    $46 = ($45|0)!=(0);
    $47 = ((($2)) + 870|0);
    do {
     if ($46) {
      $48 = (_atoi($47)|0);
      $4 = $48;
     } else {
      $49 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($3|0),3216)|0;
      _ValLabel($8,$47,$49,$$byval_copy,232);
      _memcpy(($3|0),($8|0),3216)|0;
      $50 = ((($3)) + 84|0);
      $51 = HEAP32[$50>>2]|0;
      $52 = ($51|0)==(0);
      if ($52) {
       $53 = ((($3)) + 88|0);
       $54 = HEAP32[$53>>2]|0;
       $4 = $54;
       break;
      } else {
       _Error(16065,$vararg_buffer11);
       break;
      }
     }
    } while(0);
    $55 = ((($2)) + 720|0);
    $56 = HEAP32[8088]|0;
    _memcpy(($$byval_copy30|0),($2|0),3216)|0;
    _ValLabel($9,$55,$56,$$byval_copy30,232);
    _memcpy(($2|0),($9|0),3216)|0;
    $57 = ((($2)) + 870|0);
    $58 = $4;
    HEAP32[$vararg_buffer13>>2] = $58;
    (_snprintf($57,150,16087,$vararg_buffer13)|0);
    $59 = $4;
    $60 = ($59|0)<(0);
    $61 = $4;
    $62 = ($61|0)>(99999000);
    $or$cond = $60 | $62;
    if ($or$cond) {
     _Error(16096,$vararg_buffer16);
    }
    $63 = ((($2)) + 84|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)==(8);
    if ($65) {
     $66 = ((($2)) + 412|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)!=(0);
     if ($68) {
      $69 = ((($2)) + 412|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)==(0);
      if ($71) {
       _Error(11596,$vararg_buffer18);
      }
      _memset(((72140)|0),0,256)|0;
      _memset(((71832)|0),0,300)|0;
      $72 = ((($2)) + 720|0);
      (_strcpy((72140),$72)|0);
      $73 = ((($2)) + 412|0);
      $74 = HEAP32[$73>>2]|0;
      HEAP32[8086] = $74;
      $75 = HEAP32[8086]|0;
      $76 = ($75|0)<(0);
      if ($76) {
       (_printf(16303,$vararg_buffer20)|0);
      } else {
       $77 = HEAP32[8086]|0;
       HEAP32[17956] = $77;
       $78 = $4;
       HEAP32[(71828)>>2] = $78;
       _memcpy(($$byval_copy31|0),(71824|0),312)|0;
       $79 = (_string_findData($$byval_copy31)|0);
       HEAP32[8074] = $79;
       $80 = HEAP32[8074]|0;
       $81 = ($80|0)<(0);
       if (!($81)) {
        $82 = HEAP32[8074]|0;
        _string_getElement($10,$82);
        _memcpy((71824|0),($10|0),312)|0;
       }
      }
      $83 = ((($1)) + 104|0);
      $84 = (_node_modifytime((71832))|0);
      (_strcpy($83,$84)|0);
      $85 = ((($1)) + 84|0);
      HEAP32[$85>>2] = 3;
      break;
     }
    }
    $86 = ((($2)) + 84|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==(10);
    if ($88) {
     $89 = ((($1)) + 104|0);
     $90 = $4;
     $91 = ((($2)) + 1024|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = (($92) + ($90<<2)|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = (_node_modifytime($94)|0);
     (_strcpy($89,$95)|0);
     $96 = ((($1)) + 84|0);
     HEAP32[$96>>2] = 3;
     break;
    } else {
     _Error(11558,$vararg_buffer22);
     break;
    }
   }
  }
 } while(0);
 $108 = ((($3)) + 4|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0|0);
 if ($110) {
  $111 = ((($3)) + 4|0);
  $112 = HEAP32[$111>>2]|0;
  _free($112);
 }
 $113 = ((($3)) + 8|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = ((($3)) + 8|0);
  $117 = HEAP32[$116>>2]|0;
  _free($117);
 }
 $118 = HEAP32[$3>>2]|0;
 $119 = ($118|0)!=(0|0);
 if (!($119)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $120 = HEAP32[$3>>2]|0;
 _free($120);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _node_modifytime($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer13 = sp + 56|0;
 $vararg_buffer11 = sp + 48|0;
 $vararg_buffer9 = sp + 40|0;
 $vararg_buffer7 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 68|0;
 $4 = sp + 148|0;
 $1 = $0;
 $3 = 0;
 $5 = 0;
 dest=$4; stop=dest+30|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = $1;
 $7 = (_stat($6,$2)|0);
 $8 = ($7|0)==(-1);
 if (!($8)) {
  $35 = ((($2)) + 12|0);
  $36 = HEAP32[$35>>2]|0;
  $37 = $36 & 61440;
  $38 = ($37|0)==(32768);
  if ($38) {
   $39 = ((($2)) + 56|0);
   $40 = (_localtime(($39|0))|0);
   (_strftime(($4|0),30,(11540|0),($40|0))|0);
   $5 = $4;
   $1 = 0;
   $47 = $5;
   STACKTOP = sp;return ($47|0);
  }
  $41 = ((($2)) + 12|0);
  $42 = HEAP32[$41>>2]|0;
  $43 = $42 & 61440;
  $44 = ($43|0)==(16384);
  if ($44) {
   $45 = ((($2)) + 56|0);
   $46 = (_localtime(($45|0))|0);
   (_strftime(($4|0),30,(11540|0),($46|0))|0);
   $5 = $4;
   $1 = 0;
   $47 = $5;
   STACKTOP = sp;return ($47|0);
  } else {
   (_strcpy($4,1358125)|0);
   $5 = $4;
   $1 = 0;
   $47 = $5;
   STACKTOP = sp;return ($47|0);
  }
 }
 $9 = HEAP32[35]|0;
 $10 = $1;
 HEAP32[$vararg_buffer>>2] = $10;
 (_fprintf($9,11145,$vararg_buffer)|0);
 $11 = (___errno_location()|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)==(9);
 if ($13) {
  $14 = HEAP32[35]|0;
  (_fprintf($14,11171,$vararg_buffer1)|0);
 }
 $15 = (___errno_location()|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(2);
 if ($17) {
  $18 = HEAP32[35]|0;
  (_fprintf($18,11199,$vararg_buffer3)|0);
 }
 $19 = (___errno_location()|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(20);
 if ($21) {
  $22 = HEAP32[35]|0;
  (_fprintf($22,11230,$vararg_buffer5)|0);
 }
 $23 = (___errno_location()|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)==(13);
 if ($25) {
  $26 = HEAP32[35]|0;
  (_fprintf($26,11269,$vararg_buffer7)|0);
 }
 $27 = (___errno_location()|0);
 $28 = HEAP32[$27>>2]|0;
 $29 = ($28|0)==(12);
 if ($29) {
  $30 = HEAP32[35]|0;
  (_fprintf($30,11297,$vararg_buffer9)|0);
 }
 $31 = (___errno_location()|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)==(36);
 if (!($33)) {
  _Error(11355,$vararg_buffer13);
  _exit(1);
  // unreachable;
 }
 $34 = HEAP32[35]|0;
 (_fprintf($34,11326,$vararg_buffer11)|0);
 _Error(11355,$vararg_buffer13);
 _exit(1);
 // unreachable;
 return (0)|0;
}
function _funcANGKA_KAH($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37904|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37904|0);
 $$byval_copy27 = sp + 32232|0;
 $$byval_copy26 = sp + 29016|0;
 $$byval_copy25 = sp + 36688|0;
 $$byval_copy24 = sp + 25800|0;
 $$byval_copy = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer14 = sp + 22552|0;
 $vararg_buffer12 = sp + 22544|0;
 $vararg_buffer9 = sp + 22536|0;
 $vararg_buffer7 = sp + 22528|0;
 $vararg_buffer3 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 37304|0;
 $3 = sp + 16080|0;
 $4 = sp + 12864|0;
 $6 = sp + 35760|0;
 $7 = sp + 37000|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 35448|0;
 $11 = sp + 3216|0;
 $12 = sp;
 $5 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($2|0),0,600)|0;
 _memset(($6|0),0,920)|0;
 _memset(($7|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 (_getlex()|0);
 $13 = ((($1)) + 84|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[7954]|0;
 $15 = ($14|0)==(223);
 do {
  if ($15) {
   $16 = ((($1)) + 88|0);
   HEAP32[$16>>2] = 0;
  } else {
   $17 = HEAP32[7954]|0;
   $18 = ($17|0)==(226);
   if ($18) {
    $19 = ((($1)) + 88|0);
    HEAP32[$19>>2] = 0;
    break;
   }
   $20 = HEAP32[7954]|0;
   $21 = ($20|0)==(225);
   if ($21) {
    $22 = ((($1)) + 84|0);
    HEAP32[$22>>2] = 0;
    $23 = (_strlen((31976))|0);
    $24 = ($23|0)!=(1);
    if ($24) {
     $25 = ((($1)) + 88|0);
     HEAP32[$25>>2] = 0;
     break;
    }
    $26 = HEAP8[(31976)>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = (_isdigit($27)|0);
    $29 = ($28|0)!=(0);
    $30 = ((($1)) + 88|0);
    if ($29) {
     HEAP32[$30>>2] = 1;
     break;
    } else {
     HEAP32[$30>>2] = 0;
     break;
    }
   }
   $31 = HEAP32[7954]|0;
   $32 = ($31|0)==(228);
   if (!($32)) {
    $102 = (_strlen(128380)|0);
    $103 = ($102>>>0)>(0);
    if ($103) {
     HEAP32[$vararg_buffer20>>2] = 128380;
     $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
     HEAP32[$vararg_ptr23>>2] = (31976);
     (_snprintf($7,300,15808,$vararg_buffer20)|0);
     $104 = HEAP32[8088]|0;
     _memcpy(($$byval_copy26|0),($3|0),3216)|0;
     _ValLabel($11,$7,$104,$$byval_copy26,232);
     _memcpy(($3|0),($11|0),3216)|0;
    } else {
     $105 = HEAP32[8088]|0;
     _memcpy(($$byval_copy27|0),($3|0),3216)|0;
     _ValLabel($12,(31976),$105,$$byval_copy27,232);
     _memcpy(($3|0),($12|0),3216)|0;
    }
    $106 = ((($3)) + 84|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==(3);
    $109 = ((($1)) + 84|0);
    HEAP32[$109>>2] = 0;
    if (!($108)) {
     $120 = ((($1)) + 88|0);
     HEAP32[$120>>2] = 0;
     break;
    }
    $110 = ((($3)) + 104|0);
    $111 = (_strlen($110)|0);
    $112 = ($111|0)!=(1);
    if ($112) {
     $113 = ((($1)) + 88|0);
     HEAP32[$113>>2] = 0;
     break;
    }
    $114 = ((($3)) + 104|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115 << 24 >> 24;
    $117 = (_isdigit($116)|0);
    $118 = ($117|0)!=(0);
    $119 = ((($1)) + 88|0);
    if ($118) {
     HEAP32[$119>>2] = 1;
     break;
    } else {
     HEAP32[$119>>2] = 0;
     break;
    }
   }
   $33 = (_strlen((31976))|0);
   $34 = ($33>>>0)>(0);
   if ($34) {
    $35 = ((($3)) + 420|0);
    (_strcpy($35,(31976))|0);
    $36 = ((($3)) + 720|0);
    _getArrayName((31976),$36);
    $37 = ((($3)) + 870|0);
    _getArrayIdx((31976),$37);
    $38 = (_strlen(128380)|0);
    $39 = ($38>>>0)>(0);
    if ($39) {
     $40 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer>>2] = 128380;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = $40;
     (_snprintf($7,300,15808,$vararg_buffer)|0);
     $41 = ((($3)) + 720|0);
     _memset(($41|0),0,150)|0;
     $42 = ((($3)) + 720|0);
     (_strcpy($42,$7)|0);
     $43 = ((($3)) + 870|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = (_isdigit($45)|0);
     $47 = ($46|0)!=(0);
     if (!($47)) {
      _memset(($7|0),0,300)|0;
      $48 = ((($3)) + 870|0);
      HEAP32[$vararg_buffer3>>2] = 128380;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
      HEAP32[$vararg_ptr6>>2] = $48;
      (_snprintf($7,300,15808,$vararg_buffer3)|0);
      $49 = ((($3)) + 870|0);
      _memset(($49|0),0,150)|0;
      $50 = ((($3)) + 870|0);
      (_strcpy($50,$7)|0);
     }
    }
    $51 = ((($3)) + 870|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52 << 24 >> 24;
    $54 = (_isdigit($53)|0);
    $55 = ($54|0)!=(0);
    $56 = ((($3)) + 870|0);
    do {
     if ($55) {
      $57 = (_atol($56)|0);
      $5 = $57;
     } else {
      $58 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($4|0),3216)|0;
      _ValLabel($8,$56,$58,$$byval_copy,232);
      _memcpy(($4|0),($8|0),3216)|0;
      $59 = ((($4)) + 84|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0);
      if ($61) {
       $62 = ((($4)) + 88|0);
       $63 = HEAP32[$62>>2]|0;
       $5 = $63;
       break;
      } else {
       _Error(16065,$vararg_buffer7);
       break;
      }
     }
    } while(0);
    $64 = ((($3)) + 720|0);
    $65 = HEAP32[8088]|0;
    _memcpy(($$byval_copy24|0),($3|0),3216)|0;
    _ValLabel($9,$64,$65,$$byval_copy24,232);
    _memcpy(($3|0),($9|0),3216)|0;
    $66 = ((($3)) + 870|0);
    $67 = $5;
    HEAP32[$vararg_buffer9>>2] = $67;
    (_snprintf($66,150,16087,$vararg_buffer9)|0);
    $68 = $5;
    $69 = ($68|0)<(0);
    $70 = $5;
    $71 = ($70|0)>(99999000);
    $or$cond = $69 | $71;
    if ($or$cond) {
     _Error(16096,$vararg_buffer12);
    }
    $72 = ((($3)) + 84|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(8);
    if ($74) {
     $75 = ((($3)) + 412|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)!=(0);
     if ($77) {
      $78 = ((($3)) + 412|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0);
      if ($80) {
       _Error(11648,$vararg_buffer14);
      }
      $81 = ((($1)) + 84|0);
      HEAP32[$81>>2] = 0;
      _memset(((72140)|0),0,256)|0;
      _memset(((71832)|0),0,300)|0;
      $82 = ((($3)) + 720|0);
      (_strcpy((72140),$82)|0);
      $83 = ((($3)) + 412|0);
      $84 = HEAP32[$83>>2]|0;
      HEAP32[8086] = $84;
      $85 = HEAP32[8086]|0;
      $86 = ($85|0)<(0);
      if ($86) {
       (_printf(16303,$vararg_buffer16)|0);
       break;
      }
      $87 = HEAP32[8086]|0;
      HEAP32[17956] = $87;
      $88 = $5;
      HEAP32[(71828)>>2] = $88;
      _memcpy(($$byval_copy25|0),(71824|0),312)|0;
      $89 = (_string_findData($$byval_copy25)|0);
      HEAP32[8074] = $89;
      $90 = HEAP32[8074]|0;
      $91 = ($90|0)<(0);
      if ($91) {
       (_printf(11692,$vararg_buffer18)|0);
       break;
      }
      $92 = HEAP32[8074]|0;
      _string_getElement($10,$92);
      _memcpy((71824|0),($10|0),312)|0;
      $93 = (_strlen((71832))|0);
      $94 = ($93|0)!=(1);
      if ($94) {
       $95 = ((($1)) + 88|0);
       HEAP32[$95>>2] = 0;
       break;
      }
      $96 = HEAP8[(71832)>>0]|0;
      $97 = $96 << 24 >> 24;
      $98 = (_isdigit($97)|0);
      $99 = ($98|0)!=(0);
      $100 = ((($1)) + 88|0);
      if ($99) {
       HEAP32[$100>>2] = 1;
       break;
      } else {
       HEAP32[$100>>2] = 0;
       break;
      }
     }
    }
    $101 = ((($1)) + 88|0);
    HEAP32[$101>>2] = 0;
   }
  }
 } while(0);
 $121 = ((($3)) + 3196|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = ((($3)) + 3196|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
 }
 $126 = ((($3)) + 3200|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)!=(0|0);
 if ($128) {
  $129 = ((($3)) + 3200|0);
  $130 = HEAP32[$129>>2]|0;
  _free($130);
 }
 $131 = ((($3)) + 1796|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132|0)!=(0|0);
 if ($133) {
  $134 = ((($3)) + 1796|0);
  $135 = HEAP32[$134>>2]|0;
  _free($135);
 }
 $136 = ((($3)) + 1024|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)!=(0|0);
 if ($138) {
  $139 = ((($3)) + 1024|0);
  $140 = HEAP32[$139>>2]|0;
  _free($140);
 }
 $141 = ((($3)) + 4|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($142|0)!=(0|0);
 if ($143) {
  $144 = ((($3)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  _free($145);
 }
 $146 = ((($3)) + 8|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)!=(0|0);
 if ($148) {
  $149 = ((($3)) + 8|0);
  $150 = HEAP32[$149>>2]|0;
  _free($150);
 }
 $151 = HEAP32[$3>>2]|0;
 $152 = ($151|0)!=(0|0);
 if ($152) {
  $153 = HEAP32[$3>>2]|0;
  _free($153);
 }
 $154 = ((($4)) + 3196|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = ((($4)) + 3196|0);
  $158 = HEAP32[$157>>2]|0;
  _free($158);
 }
 $159 = ((($4)) + 3200|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($160|0)!=(0|0);
 if ($161) {
  $162 = ((($4)) + 3200|0);
  $163 = HEAP32[$162>>2]|0;
  _free($163);
 }
 $164 = ((($4)) + 1796|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ($165|0)!=(0|0);
 if ($166) {
  $167 = ((($4)) + 1796|0);
  $168 = HEAP32[$167>>2]|0;
  _free($168);
 }
 $169 = ((($4)) + 1024|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170|0)!=(0|0);
 if ($171) {
  $172 = ((($4)) + 1024|0);
  $173 = HEAP32[$172>>2]|0;
  _free($173);
 }
 $174 = ((($4)) + 4|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ($175|0)!=(0|0);
 if ($176) {
  $177 = ((($4)) + 4|0);
  $178 = HEAP32[$177>>2]|0;
  _free($178);
 }
 $179 = ((($4)) + 8|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($180|0)!=(0|0);
 if ($181) {
  $182 = ((($4)) + 8|0);
  $183 = HEAP32[$182>>2]|0;
  _free($183);
 }
 $184 = HEAP32[$4>>2]|0;
 $185 = ($184|0)!=(0|0);
 if ($185) {
  $186 = HEAP32[$4>>2]|0;
  _free($186);
 }
 $187 = ((($6)) + 8|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ($188|0)!=(0|0);
 if ($189) {
  $190 = ((($6)) + 8|0);
  $191 = HEAP32[$190>>2]|0;
  _free($191);
 }
 $192 = ((($6)) + 916|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ($193|0)!=(0|0);
 if (!($194)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $195 = ((($6)) + 916|0);
 $196 = HEAP32[$195>>2]|0;
 _free($196);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcHURUF_KAH($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, $vararg_ptr2 = 0, $vararg_ptr23 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37904|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37904|0);
 $$byval_copy27 = sp + 32232|0;
 $$byval_copy26 = sp + 29016|0;
 $$byval_copy25 = sp + 36688|0;
 $$byval_copy24 = sp + 25800|0;
 $$byval_copy = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer14 = sp + 22552|0;
 $vararg_buffer12 = sp + 22544|0;
 $vararg_buffer9 = sp + 22536|0;
 $vararg_buffer7 = sp + 22528|0;
 $vararg_buffer3 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 37304|0;
 $3 = sp + 16080|0;
 $4 = sp + 12864|0;
 $6 = sp + 35760|0;
 $7 = sp + 37000|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 35448|0;
 $11 = sp + 3216|0;
 $12 = sp;
 $5 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($2|0),0,600)|0;
 _memset(($6|0),0,920)|0;
 _memset(($7|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 (_getlex()|0);
 $13 = ((($1)) + 84|0);
 HEAP32[$13>>2] = 0;
 $14 = HEAP32[7954]|0;
 $15 = ($14|0)==(223);
 do {
  if ($15) {
   $16 = ((($1)) + 88|0);
   HEAP32[$16>>2] = 0;
  } else {
   $17 = HEAP32[7954]|0;
   $18 = ($17|0)==(226);
   if ($18) {
    $19 = ((($1)) + 88|0);
    HEAP32[$19>>2] = 0;
    break;
   }
   $20 = HEAP32[7954]|0;
   $21 = ($20|0)==(225);
   if ($21) {
    $22 = ((($1)) + 84|0);
    HEAP32[$22>>2] = 0;
    $23 = (_strlen((31976))|0);
    $24 = ($23|0)!=(1);
    if ($24) {
     $25 = ((($1)) + 88|0);
     HEAP32[$25>>2] = 0;
     break;
    }
    $26 = HEAP8[(31976)>>0]|0;
    $27 = $26 << 24 >> 24;
    $28 = (_isalpha($27)|0);
    $29 = ($28|0)!=(0);
    $30 = ((($1)) + 88|0);
    if ($29) {
     HEAP32[$30>>2] = 1;
     break;
    } else {
     HEAP32[$30>>2] = 0;
     break;
    }
   }
   $31 = HEAP32[7954]|0;
   $32 = ($31|0)==(228);
   if (!($32)) {
    $102 = (_strlen(128380)|0);
    $103 = ($102>>>0)>(0);
    if ($103) {
     HEAP32[$vararg_buffer20>>2] = 128380;
     $vararg_ptr23 = ((($vararg_buffer20)) + 4|0);
     HEAP32[$vararg_ptr23>>2] = (31976);
     (_snprintf($7,300,15808,$vararg_buffer20)|0);
     $104 = HEAP32[8091]|0;
     _memcpy(($$byval_copy26|0),($3|0),3216)|0;
     _ValLabel($11,$7,$104,$$byval_copy26,232);
     _memcpy(($3|0),($11|0),3216)|0;
    } else {
     $105 = HEAP32[8088]|0;
     _memcpy(($$byval_copy27|0),($3|0),3216)|0;
     _ValLabel($12,(31976),$105,$$byval_copy27,232);
     _memcpy(($3|0),($12|0),3216)|0;
    }
    $106 = ((($3)) + 84|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==(3);
    $109 = ((($1)) + 84|0);
    HEAP32[$109>>2] = 0;
    if (!($108)) {
     $120 = ((($1)) + 88|0);
     HEAP32[$120>>2] = 0;
     break;
    }
    $110 = ((($3)) + 104|0);
    $111 = (_strlen($110)|0);
    $112 = ($111|0)!=(1);
    if ($112) {
     $113 = ((($1)) + 88|0);
     HEAP32[$113>>2] = 0;
     break;
    }
    $114 = ((($3)) + 104|0);
    $115 = HEAP8[$114>>0]|0;
    $116 = $115 << 24 >> 24;
    $117 = (_isalpha($116)|0);
    $118 = ($117|0)!=(0);
    $119 = ((($1)) + 88|0);
    if ($118) {
     HEAP32[$119>>2] = 1;
     break;
    } else {
     HEAP32[$119>>2] = 0;
     break;
    }
   }
   $33 = (_strlen((31976))|0);
   $34 = ($33>>>0)>(0);
   if ($34) {
    $35 = ((($3)) + 420|0);
    (_strcpy($35,(31976))|0);
    $36 = ((($3)) + 720|0);
    _getArrayName((31976),$36);
    $37 = ((($3)) + 870|0);
    _getArrayIdx((31976),$37);
    $38 = (_strlen(128380)|0);
    $39 = ($38>>>0)>(0);
    if ($39) {
     $40 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer>>2] = 128380;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = $40;
     (_snprintf($7,300,15808,$vararg_buffer)|0);
     $41 = ((($3)) + 720|0);
     _memset(($41|0),0,150)|0;
     $42 = ((($3)) + 720|0);
     (_strcpy($42,$7)|0);
     $43 = ((($3)) + 870|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = (_isdigit($45)|0);
     $47 = ($46|0)!=(0);
     if (!($47)) {
      _memset(($7|0),0,300)|0;
      $48 = ((($3)) + 870|0);
      HEAP32[$vararg_buffer3>>2] = 128380;
      $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
      HEAP32[$vararg_ptr6>>2] = $48;
      (_snprintf($7,300,15808,$vararg_buffer3)|0);
      $49 = ((($3)) + 870|0);
      _memset(($49|0),0,150)|0;
      $50 = ((($3)) + 870|0);
      (_strcpy($50,$7)|0);
     }
    }
    $51 = ((($3)) + 870|0);
    $52 = HEAP8[$51>>0]|0;
    $53 = $52 << 24 >> 24;
    $54 = (_isdigit($53)|0);
    $55 = ($54|0)!=(0);
    $56 = ((($3)) + 870|0);
    do {
     if ($55) {
      $57 = (_atol($56)|0);
      $5 = $57;
     } else {
      $58 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($4|0),3216)|0;
      _ValLabel($8,$56,$58,$$byval_copy,232);
      _memcpy(($4|0),($8|0),3216)|0;
      $59 = ((($4)) + 84|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(0);
      if ($61) {
       $62 = ((($4)) + 88|0);
       $63 = HEAP32[$62>>2]|0;
       $5 = $63;
       break;
      } else {
       _Error(16065,$vararg_buffer7);
       break;
      }
     }
    } while(0);
    $64 = ((($3)) + 720|0);
    $65 = HEAP32[8088]|0;
    _memcpy(($$byval_copy24|0),($3|0),3216)|0;
    _ValLabel($9,$64,$65,$$byval_copy24,232);
    _memcpy(($3|0),($9|0),3216)|0;
    $66 = ((($3)) + 870|0);
    $67 = $5;
    HEAP32[$vararg_buffer9>>2] = $67;
    (_snprintf($66,150,16087,$vararg_buffer9)|0);
    $68 = $5;
    $69 = ($68|0)<(0);
    $70 = $5;
    $71 = ($70|0)>(99999000);
    $or$cond = $69 | $71;
    if ($or$cond) {
     _Error(16096,$vararg_buffer12);
    }
    $72 = ((($3)) + 84|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ($73|0)==(8);
    if ($74) {
     $75 = ((($3)) + 412|0);
     $76 = HEAP32[$75>>2]|0;
     $77 = ($76|0)!=(0);
     if ($77) {
      $78 = ((($3)) + 412|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0);
      if ($80) {
       _Error(11741,$vararg_buffer14);
      }
      $81 = ((($1)) + 84|0);
      HEAP32[$81>>2] = 0;
      _memset(((72140)|0),0,256)|0;
      _memset(((71832)|0),0,300)|0;
      $82 = ((($3)) + 720|0);
      (_strcpy((72140),$82)|0);
      $83 = ((($3)) + 412|0);
      $84 = HEAP32[$83>>2]|0;
      HEAP32[8086] = $84;
      $85 = HEAP32[8086]|0;
      $86 = ($85|0)<(0);
      if ($86) {
       (_printf(16303,$vararg_buffer16)|0);
       break;
      }
      $87 = HEAP32[8086]|0;
      HEAP32[17956] = $87;
      $88 = $5;
      HEAP32[(71828)>>2] = $88;
      _memcpy(($$byval_copy25|0),(71824|0),312)|0;
      $89 = (_string_findData($$byval_copy25)|0);
      HEAP32[8074] = $89;
      $90 = HEAP32[8074]|0;
      $91 = ($90|0)<(0);
      if ($91) {
       (_printf(11785,$vararg_buffer18)|0);
       break;
      }
      $92 = HEAP32[8074]|0;
      _string_getElement($10,$92);
      _memcpy((71824|0),($10|0),312)|0;
      $93 = (_strlen((71832))|0);
      $94 = ($93|0)!=(1);
      if ($94) {
       $95 = ((($1)) + 88|0);
       HEAP32[$95>>2] = 0;
       break;
      }
      $96 = HEAP8[(71832)>>0]|0;
      $97 = $96 << 24 >> 24;
      $98 = (_isalpha($97)|0);
      $99 = ($98|0)!=(0);
      $100 = ((($1)) + 88|0);
      if ($99) {
       HEAP32[$100>>2] = 1;
       break;
      } else {
       HEAP32[$100>>2] = 0;
       break;
      }
     }
    }
    $101 = ((($1)) + 88|0);
    HEAP32[$101>>2] = 0;
   }
  }
 } while(0);
 $121 = ((($3)) + 3196|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = ((($3)) + 3196|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
 }
 $126 = ((($3)) + 3200|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)!=(0|0);
 if ($128) {
  $129 = ((($3)) + 3200|0);
  $130 = HEAP32[$129>>2]|0;
  _free($130);
 }
 $131 = ((($3)) + 1796|0);
 $132 = HEAP32[$131>>2]|0;
 $133 = ($132|0)!=(0|0);
 if ($133) {
  $134 = ((($3)) + 1796|0);
  $135 = HEAP32[$134>>2]|0;
  _free($135);
 }
 $136 = ((($3)) + 1024|0);
 $137 = HEAP32[$136>>2]|0;
 $138 = ($137|0)!=(0|0);
 if ($138) {
  $139 = ((($3)) + 1024|0);
  $140 = HEAP32[$139>>2]|0;
  _free($140);
 }
 $141 = ((($3)) + 4|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($142|0)!=(0|0);
 if ($143) {
  $144 = ((($3)) + 4|0);
  $145 = HEAP32[$144>>2]|0;
  _free($145);
 }
 $146 = ((($3)) + 8|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)!=(0|0);
 if ($148) {
  $149 = ((($3)) + 8|0);
  $150 = HEAP32[$149>>2]|0;
  _free($150);
 }
 $151 = HEAP32[$3>>2]|0;
 $152 = ($151|0)!=(0|0);
 if ($152) {
  $153 = HEAP32[$3>>2]|0;
  _free($153);
 }
 $154 = ((($4)) + 3196|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = ((($4)) + 3196|0);
  $158 = HEAP32[$157>>2]|0;
  _free($158);
 }
 $159 = ((($4)) + 3200|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($160|0)!=(0|0);
 if ($161) {
  $162 = ((($4)) + 3200|0);
  $163 = HEAP32[$162>>2]|0;
  _free($163);
 }
 $164 = ((($4)) + 1796|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ($165|0)!=(0|0);
 if ($166) {
  $167 = ((($4)) + 1796|0);
  $168 = HEAP32[$167>>2]|0;
  _free($168);
 }
 $169 = ((($4)) + 1024|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170|0)!=(0|0);
 if ($171) {
  $172 = ((($4)) + 1024|0);
  $173 = HEAP32[$172>>2]|0;
  _free($173);
 }
 $174 = ((($4)) + 4|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ($175|0)!=(0|0);
 if ($176) {
  $177 = ((($4)) + 4|0);
  $178 = HEAP32[$177>>2]|0;
  _free($178);
 }
 $179 = ((($4)) + 8|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($180|0)!=(0|0);
 if ($181) {
  $182 = ((($4)) + 8|0);
  $183 = HEAP32[$182>>2]|0;
  _free($183);
 }
 $184 = HEAP32[$4>>2]|0;
 $185 = ($184|0)!=(0|0);
 if ($185) {
  $186 = HEAP32[$4>>2]|0;
  _free($186);
 }
 $187 = ((($6)) + 8|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ($188|0)!=(0|0);
 if ($189) {
  $190 = ((($6)) + 8|0);
  $191 = HEAP32[$190>>2]|0;
  _free($191);
 }
 $192 = ((($6)) + 916|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ($193|0)!=(0|0);
 if (!($194)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $195 = ((($6)) + 916|0);
 $196 = HEAP32[$195>>2]|0;
 _free($196);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcHURUF_NO($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0;
 var $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 35312|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(35312|0);
 $$byval_copy33 = sp + 29032|0;
 $$byval_copy32 = sp + 33496|0;
 $$byval_copy31 = sp + 25816|0;
 $$byval_copy30 = sp + 22600|0;
 $$byval_copy = sp + 19384|0;
 $vararg_buffer28 = sp + 19376|0;
 $vararg_buffer26 = sp + 19368|0;
 $vararg_buffer24 = sp + 19360|0;
 $vararg_buffer22 = sp + 19352|0;
 $vararg_buffer20 = sp + 19344|0;
 $vararg_buffer18 = sp + 19336|0;
 $vararg_buffer16 = sp + 19328|0;
 $vararg_buffer13 = sp + 19320|0;
 $vararg_buffer11 = sp + 19312|0;
 $vararg_buffer7 = sp + 19304|0;
 $vararg_buffer = sp + 19296|0;
 $1 = sp + 16080|0;
 $3 = sp + 34712|0;
 $4 = sp + 34112|0;
 $5 = sp + 12864|0;
 $6 = sp + 9648|0;
 $9 = sp + 32560|0;
 $10 = sp + 33808|0;
 $11 = sp + 6432|0;
 $12 = sp + 3216|0;
 $13 = sp + 32248|0;
 $14 = sp;
 $2 = 0;
 $7 = 0;
 $8 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($6|0),0,3216)|0;
 _memset(($3|0),0,600)|0;
 _memset(($4|0),0,600)|0;
 _memset(($9|0),0,920)|0;
 _memset(($10|0),0,300)|0;
 $2 = 0;
 $15 = ((($1)) + 84|0);
 HEAP32[$15>>2] = 3;
 while(1) {
  (_getlex()|0);
  $8 = -1;
  $16 = HEAP32[7954]|0;
  $17 = ($16|0)==(223);
  do {
   if ($17) {
    $18 = $2;
    $19 = ($18|0)==(1);
    if ($19) {
     $20 = HEAP32[(31976)>>2]|0;
     $8 = $20;
    }
   } else {
    $21 = HEAP32[7954]|0;
    $22 = ($21|0)==(225);
    if ($22) {
     $23 = $2;
     $24 = ($23|0)==(0);
     if (!($24)) {
      break;
     }
     (_strcpy($3,(31976))|0);
     break;
    }
    $25 = HEAP32[7954]|0;
    $26 = ($25|0)==(228);
    if (!($26)) {
     $102 = HEAP32[8088]|0;
     _memcpy(($$byval_copy33|0),($5|0),3216)|0;
     _ValLabel($14,(31976),$102,$$byval_copy33,232);
     _memcpy(($5|0),($14|0),3216)|0;
     $103 = ((($5)) + 104|0);
     $104 = (_strlen($103)|0);
     $105 = ($104>>>0)>(0);
     if ($105) {
      $106 = $2;
      $107 = ($106|0)==(0);
      if (!($107)) {
       break;
      }
      $108 = ((($5)) + 104|0);
      (_strcpy($3,$108)|0);
      break;
     } else {
      $109 = ((($5)) + 84|0);
      $110 = HEAP32[$109>>2]|0;
      $111 = ($110|0)==(0);
      $112 = $2;
      $113 = ($112|0)==(1);
      $or$cond5 = $111 & $113;
      if (!($or$cond5)) {
       break;
      }
      $114 = ((($5)) + 88|0);
      $115 = HEAP32[$114>>2]|0;
      $8 = $115;
      break;
     }
    }
    $27 = (_strlen((31976))|0);
    $28 = ($27>>>0)>(0);
    if ($28) {
     $29 = ((($5)) + 420|0);
     (_strcpy($29,(31976))|0);
     $30 = ((($5)) + 720|0);
     _getArrayName((31976),$30);
     $31 = ((($5)) + 870|0);
     _getArrayIdx((31976),$31);
     $32 = (_strlen(128380)|0);
     $33 = ($32>>>0)>(0);
     if ($33) {
      $34 = ((($5)) + 720|0);
      HEAP32[$vararg_buffer>>2] = 128380;
      $vararg_ptr6 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr6>>2] = $34;
      (_snprintf($10,300,15808,$vararg_buffer)|0);
      $35 = ((($5)) + 720|0);
      _memset(($35|0),0,150)|0;
      $36 = ((($5)) + 720|0);
      (_strcpy($36,$10)|0);
      $37 = ((($5)) + 870|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38 << 24 >> 24;
      $40 = (_isdigit($39)|0);
      $41 = ($40|0)!=(0);
      if (!($41)) {
       _memset(($10|0),0,300)|0;
       $42 = ((($5)) + 870|0);
       HEAP32[$vararg_buffer7>>2] = 128380;
       $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
       HEAP32[$vararg_ptr10>>2] = $42;
       (_snprintf($10,300,15808,$vararg_buffer7)|0);
       $43 = ((($5)) + 870|0);
       _memset(($43|0),0,150)|0;
       $44 = ((($5)) + 870|0);
       (_strcpy($44,$10)|0);
      }
     }
     $45 = ((($5)) + 870|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46 << 24 >> 24;
     $48 = (_isdigit($47)|0);
     $49 = ($48|0)!=(0);
     $50 = ((($5)) + 870|0);
     do {
      if ($49) {
       $51 = (_atol($50)|0);
       $7 = $51;
      } else {
       $52 = HEAP32[8088]|0;
       _memcpy(($$byval_copy|0),($6|0),3216)|0;
       _ValLabel($11,$50,$52,$$byval_copy,232);
       _memcpy(($6|0),($11|0),3216)|0;
       $53 = ((($6)) + 84|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54|0)==(0);
       if ($55) {
        $56 = ((($6)) + 88|0);
        $57 = HEAP32[$56>>2]|0;
        $7 = $57;
        break;
       } else {
        _Error(16065,$vararg_buffer11);
        break;
       }
      }
     } while(0);
     $58 = ((($5)) + 720|0);
     $59 = HEAP32[8088]|0;
     _memcpy(($$byval_copy30|0),($5|0),3216)|0;
     _ValLabel($12,$58,$59,$$byval_copy30,232);
     _memcpy(($5|0),($12|0),3216)|0;
     $60 = ((($5)) + 870|0);
     $61 = $7;
     HEAP32[$vararg_buffer13>>2] = $61;
     (_snprintf($60,150,16087,$vararg_buffer13)|0);
     $62 = $7;
     $63 = ($62|0)<(0);
     $64 = $7;
     $65 = ($64|0)>(99999000);
     $or$cond = $63 | $65;
     if ($or$cond) {
      _Error(16096,$vararg_buffer16);
     }
     $66 = ((($5)) + 84|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(6);
     if ($68) {
      $69 = ((($5)) + 404|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)!=(0);
      if ($71) {
       $72 = ((($5)) + 404|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($73|0)==(0);
       if ($74) {
        _Error(11835,$vararg_buffer18);
       }
       $75 = ((($5)) + 404|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ($76|0)!=(0);
       $78 = $2;
       $79 = ($78|0)==(1);
       $or$cond3 = $77 & $79;
       if ($or$cond3) {
        $80 = $7;
        _memcpy(($$byval_copy31|0),($5|0),3216)|0;
        $81 = (_get_int_array($$byval_copy31,$80)|0);
        $8 = $81;
       }
      }
     }
     $82 = ((($5)) + 84|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==(8);
     if ($84) {
      $85 = ((($5)) + 412|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)!=(0);
      if ($87) {
       _memset(((72140)|0),0,256)|0;
       _memset(((71832)|0),0,300)|0;
       $88 = ((($5)) + 720|0);
       (_strcpy((72140),$88)|0);
       $89 = ((($5)) + 412|0);
       $90 = HEAP32[$89>>2]|0;
       HEAP32[8086] = $90;
       $91 = HEAP32[8086]|0;
       $92 = ($91|0)<(0);
       if ($92) {
        (_printf(16303,$vararg_buffer20)|0);
        break;
       }
       $93 = HEAP32[8086]|0;
       HEAP32[17956] = $93;
       $94 = $7;
       HEAP32[(71828)>>2] = $94;
       _memcpy(($$byval_copy32|0),(71824|0),312)|0;
       $95 = (_string_findData($$byval_copy32)|0);
       HEAP32[8074] = $95;
       $96 = HEAP32[8074]|0;
       $97 = ($96|0)<(0);
       if ($97) {
        (_printf(11878,$vararg_buffer22)|0);
        break;
       }
       $98 = HEAP32[8074]|0;
       _string_getElement($13,$98);
       _memcpy((71824|0),($13|0),312)|0;
       $99 = $2;
       $100 = ($99|0)==(0);
       if (!($100)) {
        break;
       }
       (_strcpy($3,(71832))|0);
       break;
      }
     }
     $101 = ((($1)) + 104|0);
     (_strcpy($101,1358125)|0);
    }
   }
  } while(0);
  $116 = $2;
  $117 = (($116) + 1)|0;
  $2 = $117;
  (_getlex()|0);
  $118 = HEAP32[7954]|0;
  $119 = ($118|0)==(227);
  if (!($119)) {
   break;
  }
  $120 = HEAP8[(31976)>>0]|0;
  $121 = $120 << 24 >> 24;
  $122 = ($121|0)==(44);
  if (!($122)) {
   break;
  }
 }
 _ungetlex();
 $123 = $2;
 $124 = ($123|0)!=(2);
 if ($124) {
  _Error(11914,$vararg_buffer24);
 } else {
  $125 = (_strlen($3)|0);
  $126 = $8;
  $127 = ($125|0)<($126|0);
  if ($127) {
   _Error(11943,$vararg_buffer26);
  }
  $128 = $8;
  $129 = ($128|0)<(0);
  if ($129) {
   _Error(11943,$vararg_buffer28);
  }
  $130 = $8;
  $131 = (($3) + ($130)|0);
  $132 = HEAP8[$131>>0]|0;
  $133 = ((($1)) + 104|0);
  HEAP8[$133>>0] = $132;
  $134 = ((($1)) + 104|0);
  $135 = ((($134)) + 1|0);
  HEAP8[$135>>0] = 0;
  $136 = ((($1)) + 84|0);
  HEAP32[$136>>2] = 3;
 }
 $137 = ((($5)) + 3196|0);
 $138 = HEAP32[$137>>2]|0;
 $139 = ($138|0)!=(0|0);
 if ($139) {
  $140 = ((($5)) + 3196|0);
  $141 = HEAP32[$140>>2]|0;
  _free($141);
 }
 $142 = ((($5)) + 3200|0);
 $143 = HEAP32[$142>>2]|0;
 $144 = ($143|0)!=(0|0);
 if ($144) {
  $145 = ((($5)) + 3200|0);
  $146 = HEAP32[$145>>2]|0;
  _free($146);
 }
 $147 = ((($5)) + 1796|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)!=(0|0);
 if ($149) {
  $150 = ((($5)) + 1796|0);
  $151 = HEAP32[$150>>2]|0;
  _free($151);
 }
 $152 = ((($5)) + 1024|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = ($153|0)!=(0|0);
 if ($154) {
  $155 = ((($5)) + 1024|0);
  $156 = HEAP32[$155>>2]|0;
  _free($156);
 }
 $157 = ((($5)) + 4|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = ($158|0)!=(0|0);
 if ($159) {
  $160 = ((($5)) + 4|0);
  $161 = HEAP32[$160>>2]|0;
  _free($161);
 }
 $162 = ((($5)) + 8|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)!=(0|0);
 if ($164) {
  $165 = ((($5)) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  _free($166);
 }
 $167 = HEAP32[$5>>2]|0;
 $168 = ($167|0)!=(0|0);
 if ($168) {
  $169 = HEAP32[$5>>2]|0;
  _free($169);
 }
 $170 = ((($6)) + 3196|0);
 $171 = HEAP32[$170>>2]|0;
 $172 = ($171|0)!=(0|0);
 if ($172) {
  $173 = ((($6)) + 3196|0);
  $174 = HEAP32[$173>>2]|0;
  _free($174);
 }
 $175 = ((($6)) + 3200|0);
 $176 = HEAP32[$175>>2]|0;
 $177 = ($176|0)!=(0|0);
 if ($177) {
  $178 = ((($6)) + 3200|0);
  $179 = HEAP32[$178>>2]|0;
  _free($179);
 }
 $180 = ((($6)) + 1796|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = ($181|0)!=(0|0);
 if ($182) {
  $183 = ((($6)) + 1796|0);
  $184 = HEAP32[$183>>2]|0;
  _free($184);
 }
 $185 = ((($6)) + 1024|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ($186|0)!=(0|0);
 if ($187) {
  $188 = ((($6)) + 1024|0);
  $189 = HEAP32[$188>>2]|0;
  _free($189);
 }
 $190 = ((($6)) + 4|0);
 $191 = HEAP32[$190>>2]|0;
 $192 = ($191|0)!=(0|0);
 if ($192) {
  $193 = ((($6)) + 4|0);
  $194 = HEAP32[$193>>2]|0;
  _free($194);
 }
 $195 = ((($6)) + 8|0);
 $196 = HEAP32[$195>>2]|0;
 $197 = ($196|0)!=(0|0);
 if ($197) {
  $198 = ((($6)) + 8|0);
  $199 = HEAP32[$198>>2]|0;
  _free($199);
 }
 $200 = HEAP32[$6>>2]|0;
 $201 = ($200|0)!=(0|0);
 if ($201) {
  $202 = HEAP32[$6>>2]|0;
  _free($202);
 }
 $203 = ((($9)) + 8|0);
 $204 = HEAP32[$203>>2]|0;
 $205 = ($204|0)!=(0|0);
 if ($205) {
  $206 = ((($9)) + 8|0);
  $207 = HEAP32[$206>>2]|0;
  _free($207);
 }
 $208 = ((($9)) + 916|0);
 $209 = HEAP32[$208>>2]|0;
 $210 = ($209|0)!=(0|0);
 if (!($210)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $211 = ((($9)) + 916|0);
 $212 = HEAP32[$211>>2]|0;
 _free($212);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcKE_ANGKA($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0.0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $21 = 0, $22 = 0, $23 = 0.0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0.0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr27 = 0;
 var $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 38192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(38192|0);
 $$byval_copy32 = sp + 32248|0;
 $$byval_copy31 = sp + 29032|0;
 $$byval_copy30 = sp + 36968|0;
 $$byval_copy29 = sp + 36704|0;
 $$byval_copy28 = sp + 25816|0;
 $$byval_copy = sp + 22600|0;
 $vararg_buffer24 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 37584|0;
 $3 = sp + 16080|0;
 $4 = sp + 12864|0;
 $6 = sp + 35776|0;
 $7 = sp + 37280|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 35464|0;
 $11 = sp + 3216|0;
 $12 = sp;
 $5 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($2|0),0,600)|0;
 _memset(($6|0),0,920)|0;
 _memset(($7|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 (_getlex()|0);
 $13 = HEAP32[7954]|0;
 $14 = ($13|0)==(223);
 do {
  if ($14) {
   _Error(11968,$vararg_buffer);
  } else {
   $15 = HEAP32[7954]|0;
   $16 = ($15|0)==(226);
   if ($16) {
    _Error(12000,$vararg_buffer2);
    break;
   }
   $17 = HEAP32[7954]|0;
   $18 = ($17|0)==(225);
   if ($18) {
    $19 = (_strlen((31976))|0);
    $20 = ($19>>>0)>(0);
    if (!($20)) {
     $29 = ((($1)) + 88|0);
     HEAP32[$29>>2] = 0;
     break;
    }
    $21 = (_checkFloatBuf((31976))|0);
    $22 = ($21|0)==(1);
    if ($22) {
     $23 = (+_atof((31976)));
     $24 = ((($1)) + 96|0);
     HEAPF64[$24>>3] = $23;
     $25 = ((($1)) + 84|0);
     HEAP32[$25>>2] = 1;
     break;
    } else {
     $26 = (_atol((31976))|0);
     $27 = ((($1)) + 88|0);
     HEAP32[$27>>2] = $26;
     $28 = ((($1)) + 84|0);
     HEAP32[$28>>2] = 0;
     break;
    }
   }
   $30 = HEAP32[7954]|0;
   $31 = ($30|0)==(228);
   if (!($31)) {
    $102 = (_strlen(128380)|0);
    $103 = ($102>>>0)>(0);
    if ($103) {
     HEAP32[$vararg_buffer24>>2] = 128380;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = (31976);
     (_snprintf($7,300,15808,$vararg_buffer24)|0);
     $104 = HEAP32[8091]|0;
     _memcpy(($$byval_copy31|0),($3|0),3216)|0;
     _ValLabel($11,$7,$104,$$byval_copy31,232);
     _memcpy(($3|0),($11|0),3216)|0;
    } else {
     $105 = HEAP32[8088]|0;
     _memcpy(($$byval_copy32|0),($3|0),3216)|0;
     _ValLabel($12,(31976),$105,$$byval_copy32,232);
     _memcpy(($3|0),($12|0),3216)|0;
    }
    $106 = ((($3)) + 84|0);
    $107 = HEAP32[$106>>2]|0;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $124 = ((($1)) + 88|0);
     HEAP32[$124>>2] = 0;
     break;
    }
    $109 = ((($3)) + 104|0);
    $110 = (_strlen($109)|0);
    $111 = ($110>>>0)>(0);
    if (!($111)) {
     $122 = ((($1)) + 88|0);
     HEAP32[$122>>2] = 0;
     $123 = ((($1)) + 84|0);
     HEAP32[$123>>2] = 0;
     break;
    }
    $112 = ((($3)) + 104|0);
    $113 = (_checkFloatBuf($112)|0);
    $114 = ($113|0)==(1);
    $115 = ((($3)) + 104|0);
    if ($114) {
     $116 = (+_atof($115));
     $117 = ((($1)) + 96|0);
     HEAPF64[$117>>3] = $116;
     $118 = ((($1)) + 84|0);
     HEAP32[$118>>2] = 1;
     break;
    } else {
     $119 = (_atol($115)|0);
     $120 = ((($1)) + 88|0);
     HEAP32[$120>>2] = $119;
     $121 = ((($1)) + 84|0);
     HEAP32[$121>>2] = 0;
     break;
    }
   }
   $32 = (_strlen((31976))|0);
   $33 = ($32>>>0)>(0);
   if ($33) {
    $34 = ((($3)) + 420|0);
    (_strcpy($34,(31976))|0);
    $35 = ((($3)) + 720|0);
    _getArrayName((31976),$35);
    $36 = ((($3)) + 870|0);
    _getArrayIdx((31976),$36);
    $37 = (_strlen(128380)|0);
    $38 = ($37>>>0)>(0);
    if ($38) {
     $39 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer4>>2] = 128380;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $39;
     (_snprintf($7,300,15808,$vararg_buffer4)|0);
     $40 = ((($3)) + 720|0);
     _memset(($40|0),0,150)|0;
     $41 = ((($3)) + 720|0);
     (_strcpy($41,$7)|0);
     $42 = ((($3)) + 870|0);
     $43 = HEAP8[$42>>0]|0;
     $44 = $43 << 24 >> 24;
     $45 = (_isdigit($44)|0);
     $46 = ($45|0)!=(0);
     if (!($46)) {
      _memset(($7|0),0,300)|0;
      $47 = ((($3)) + 870|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $47;
      (_snprintf($7,300,15808,$vararg_buffer7)|0);
      $48 = ((($3)) + 870|0);
      _memset(($48|0),0,150)|0;
      $49 = ((($3)) + 870|0);
      (_strcpy($49,$7)|0);
     }
    }
    $50 = ((($3)) + 870|0);
    $51 = HEAP8[$50>>0]|0;
    $52 = $51 << 24 >> 24;
    $53 = (_isdigit($52)|0);
    $54 = ($53|0)!=(0);
    $55 = ((($3)) + 870|0);
    do {
     if ($54) {
      $56 = (_atol($55)|0);
      $5 = $56;
     } else {
      $57 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($4|0),3216)|0;
      _ValLabel($8,$55,$57,$$byval_copy,232);
      _memcpy(($4|0),($8|0),3216)|0;
      $58 = ((($4)) + 84|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ($59|0)==(0);
      if ($60) {
       $61 = ((($4)) + 88|0);
       $62 = HEAP32[$61>>2]|0;
       $5 = $62;
       break;
      } else {
       _Error(16065,$vararg_buffer11);
       break;
      }
     }
    } while(0);
    $63 = ((($3)) + 720|0);
    $64 = HEAP32[8088]|0;
    _memcpy(($$byval_copy28|0),($3|0),3216)|0;
    _ValLabel($9,$63,$64,$$byval_copy28,232);
    _memcpy(($3|0),($9|0),3216)|0;
    $65 = ((($3)) + 870|0);
    $66 = $5;
    HEAP32[$vararg_buffer13>>2] = $66;
    (_snprintf($65,150,16087,$vararg_buffer13)|0);
    $67 = $5;
    $68 = ($67|0)<(0);
    $69 = $5;
    $70 = ($69|0)>(99999000);
    $or$cond = $68 | $70;
    if ($or$cond) {
     _Error(16096,$vararg_buffer16);
    }
    $71 = ((($3)) + 84|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($72|0)==(8);
    if ($73) {
     $74 = ((($3)) + 412|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)!=(0);
     if ($76) {
      $77 = ((($3)) + 412|0);
      $78 = HEAP32[$77>>2]|0;
      $79 = ($78|0)==(0);
      if ($79) {
       _Error(12034,$vararg_buffer18);
      }
      _memset(((72140)|0),0,256)|0;
      $80 = ((($3)) + 720|0);
      (_strcpy((72140),$80)|0);
      _memcpy(($$byval_copy29|0),((72136)|0),264)|0;
      $81 = (_stackStr_getID($$byval_copy29)|0);
      HEAP32[8086] = $81;
      $82 = HEAP32[8086]|0;
      $83 = ($82|0)<(0);
      if ($83) {
       (_printf(16303,$vararg_buffer20)|0);
       break;
      }
      $84 = HEAP32[8086]|0;
      HEAP32[17956] = $84;
      $85 = $5;
      HEAP32[(71828)>>2] = $85;
      _memcpy(($$byval_copy30|0),(71824|0),312)|0;
      $86 = (_string_findData($$byval_copy30)|0);
      HEAP32[8074] = $86;
      $87 = HEAP32[8074]|0;
      $88 = ($87|0)<(0);
      if ($88) {
       (_printf(11878,$vararg_buffer22)|0);
       break;
      }
      $89 = HEAP32[8074]|0;
      _string_getElement($10,$89);
      _memcpy((71824|0),($10|0),312)|0;
      $90 = (_strlen((71832))|0);
      $91 = ($90>>>0)>(0);
      if (!($91)) {
       $100 = ((($1)) + 88|0);
       HEAP32[$100>>2] = 0;
       break;
      }
      $92 = (_checkFloatBuf((71832))|0);
      $93 = ($92|0)==(1);
      if ($93) {
       $94 = (+_strtodbl((71832)));
       $95 = ((($1)) + 96|0);
       HEAPF64[$95>>3] = $94;
       $96 = ((($1)) + 84|0);
       HEAP32[$96>>2] = 1;
       break;
      } else {
       $97 = (_atol((71832))|0);
       $98 = ((($1)) + 88|0);
       HEAP32[$98>>2] = $97;
       $99 = ((($1)) + 84|0);
       HEAP32[$99>>2] = 0;
       break;
      }
     }
    }
    $101 = ((($1)) + 88|0);
    HEAP32[$101>>2] = 0;
   }
  }
 } while(0);
 $125 = ((($3)) + 3196|0);
 $126 = HEAP32[$125>>2]|0;
 $127 = ($126|0)!=(0|0);
 if ($127) {
  $128 = ((($3)) + 3196|0);
  $129 = HEAP32[$128>>2]|0;
  _free($129);
 }
 $130 = ((($3)) + 3200|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = ((($3)) + 3200|0);
  $134 = HEAP32[$133>>2]|0;
  _free($134);
 }
 $135 = ((($3)) + 1796|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0|0);
 if ($137) {
  $138 = ((($3)) + 1796|0);
  $139 = HEAP32[$138>>2]|0;
  _free($139);
 }
 $140 = ((($3)) + 1024|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)!=(0|0);
 if ($142) {
  $143 = ((($3)) + 1024|0);
  $144 = HEAP32[$143>>2]|0;
  _free($144);
 }
 $145 = ((($3)) + 4|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)!=(0|0);
 if ($147) {
  $148 = ((($3)) + 4|0);
  $149 = HEAP32[$148>>2]|0;
  _free($149);
 }
 $150 = ((($3)) + 8|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ($151|0)!=(0|0);
 if ($152) {
  $153 = ((($3)) + 8|0);
  $154 = HEAP32[$153>>2]|0;
  _free($154);
 }
 $155 = HEAP32[$3>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = HEAP32[$3>>2]|0;
  _free($157);
 }
 $158 = ((($4)) + 3196|0);
 $159 = HEAP32[$158>>2]|0;
 $160 = ($159|0)!=(0|0);
 if ($160) {
  $161 = ((($4)) + 3196|0);
  $162 = HEAP32[$161>>2]|0;
  _free($162);
 }
 $163 = ((($4)) + 3200|0);
 $164 = HEAP32[$163>>2]|0;
 $165 = ($164|0)!=(0|0);
 if ($165) {
  $166 = ((($4)) + 3200|0);
  $167 = HEAP32[$166>>2]|0;
  _free($167);
 }
 $168 = ((($4)) + 1796|0);
 $169 = HEAP32[$168>>2]|0;
 $170 = ($169|0)!=(0|0);
 if ($170) {
  $171 = ((($4)) + 1796|0);
  $172 = HEAP32[$171>>2]|0;
  _free($172);
 }
 $173 = ((($4)) + 1024|0);
 $174 = HEAP32[$173>>2]|0;
 $175 = ($174|0)!=(0|0);
 if ($175) {
  $176 = ((($4)) + 1024|0);
  $177 = HEAP32[$176>>2]|0;
  _free($177);
 }
 $178 = ((($4)) + 4|0);
 $179 = HEAP32[$178>>2]|0;
 $180 = ($179|0)!=(0|0);
 if ($180) {
  $181 = ((($4)) + 4|0);
  $182 = HEAP32[$181>>2]|0;
  _free($182);
 }
 $183 = ((($4)) + 8|0);
 $184 = HEAP32[$183>>2]|0;
 $185 = ($184|0)!=(0|0);
 if ($185) {
  $186 = ((($4)) + 8|0);
  $187 = HEAP32[$186>>2]|0;
  _free($187);
 }
 $188 = HEAP32[$4>>2]|0;
 $189 = ($188|0)!=(0|0);
 if ($189) {
  $190 = HEAP32[$4>>2]|0;
  _free($190);
 }
 $191 = ((($6)) + 8|0);
 $192 = HEAP32[$191>>2]|0;
 $193 = ($192|0)!=(0|0);
 if ($193) {
  $194 = ((($6)) + 8|0);
  $195 = HEAP32[$194>>2]|0;
  _free($195);
 }
 $196 = ((($6)) + 916|0);
 $197 = HEAP32[$196>>2]|0;
 $198 = ($197|0)!=(0|0);
 if (!($198)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $199 = ((($6)) + 916|0);
 $200 = HEAP32[$199>>2]|0;
 _free($200);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _checkFloatBuf($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $3 = 0;
 $4 = 0;
 while(1) {
  $5 = $4;
  $6 = (($5) + 1)|0;
  $4 = $6;
  $7 = $1;
  $8 = (($7) + ($5)|0);
  $9 = HEAP8[$8>>0]|0;
  $2 = $9;
  $10 = $2;
  $11 = $10 << 24 >> 24;
  $12 = ($11|0)==(46);
  if ($12) {
   $3 = 1;
  }
  $13 = $2;
  $14 = $13 << 24 >> 24;
  $15 = (_isspace($14)|0);
  $16 = ($15|0)!=(0);
  if ($16) {
   label = 6;
   break;
  }
  $17 = $2;
  $18 = $17 << 24 >> 24;
  $19 = ($18|0)!=(0);
  if (!($19)) {
   label = 6;
   break;
  }
 }
 if ((label|0) == 6) {
  $20 = $3;
  STACKTOP = sp;return ($20|0);
 }
 return (0)|0;
}
function _funcKE_HURUF($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy42 = 0, $$byval_copy43 = 0, $$byval_copy44 = 0, $$byval_copy45 = 0, $$byval_copy46 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer30 = 0;
 var $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 43760|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(43760|0);
 $$byval_copy46 = sp + 38712|0;
 $$byval_copy45 = sp + 35496|0;
 $$byval_copy44 = sp + 32280|0;
 $$byval_copy43 = sp + 29064|0;
 $$byval_copy42 = sp + 25848|0;
 $$byval_copy = sp + 22632|0;
 $vararg_buffer40 = sp + 22624|0;
 $vararg_buffer37 = sp + 22616|0;
 $vararg_buffer34 = sp + 22608|0;
 $vararg_buffer30 = sp + 22600|0;
 $vararg_buffer27 = sp + 22592|0;
 $vararg_buffer24 = sp + 22584|0;
 $vararg_buffer22 = sp + 22576|0;
 $vararg_buffer20 = sp + 22568|0;
 $vararg_buffer17 = sp + 22560|0;
 $vararg_buffer15 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer5 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 43152|0;
 $3 = sp + 16080|0;
 $4 = sp + 12864|0;
 $6 = sp + 41928|0;
 $7 = sp + 42852|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 3216|0;
 $11 = sp;
 $5 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($2|0),0,600)|0;
 _memset(($6|0),0,920)|0;
 _memset(($7|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 (_getlex()|0);
 $12 = ((($1)) + 84|0);
 HEAP32[$12>>2] = 3;
 $13 = HEAP32[7954]|0;
 $14 = ($13|0)==(223);
 do {
  if ($14) {
   $15 = ((($1)) + 104|0);
   $16 = HEAP32[(31976)>>2]|0;
   HEAP32[$vararg_buffer>>2] = $16;
   (_snprintf($15,300,16087,$vararg_buffer)|0);
  } else {
   $17 = HEAP32[7954]|0;
   $18 = ($17|0)==(226);
   if ($18) {
    $19 = ((($1)) + 104|0);
    $20 = +HEAPF64[(31976)>>3];
    HEAPF64[$vararg_buffer2>>3] = $20;
    (_snprintf($19,300,16221,$vararg_buffer2)|0);
    break;
   }
   $21 = HEAP32[7954]|0;
   $22 = ($21|0)==(225);
   if ($22) {
    _Error(12077,$vararg_buffer5);
    break;
   }
   $23 = HEAP32[7954]|0;
   $24 = ($23|0)==(228);
   if (!($24)) {
    $88 = (_strlen(128380)|0);
    $89 = ($88>>>0)>(0);
    if ($89) {
     HEAP32[$vararg_buffer30>>2] = 128380;
     $vararg_ptr33 = ((($vararg_buffer30)) + 4|0);
     HEAP32[$vararg_ptr33>>2] = (31976);
     (_snprintf($7,300,15808,$vararg_buffer30)|0);
     $90 = HEAP32[8091]|0;
     _memcpy(($$byval_copy45|0),($3|0),3216)|0;
     _ValLabel($10,$7,$90,$$byval_copy45,232);
     _memcpy(($3|0),($10|0),3216)|0;
    } else {
     $91 = HEAP32[8088]|0;
     _memcpy(($$byval_copy46|0),($3|0),3216)|0;
     _ValLabel($11,(31976),$91,$$byval_copy46,232);
     _memcpy(($3|0),($11|0),3216)|0;
    }
    $92 = ((($1)) + 84|0);
    HEAP32[$92>>2] = 3;
    $93 = ((($3)) + 84|0);
    $94 = HEAP32[$93>>2]|0;
    $95 = ($94|0)==(0);
    if ($95) {
     $96 = ((($3)) + 88|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)!=(0);
     $99 = ((($1)) + 104|0);
     if ($98) {
      $100 = ((($3)) + 88|0);
      $101 = HEAP32[$100>>2]|0;
      HEAP32[$vararg_buffer34>>2] = $101;
      (_snprintf($99,300,16087,$vararg_buffer34)|0);
      break;
     } else {
      (_strcpy($99,1358125)|0);
      break;
     }
    } else {
     $102 = ((($3)) + 84|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)==(1);
     if ($104) {
      $105 = ((($1)) + 104|0);
      $106 = ((($3)) + 96|0);
      $107 = +HEAPF64[$106>>3];
      HEAPF64[$vararg_buffer37>>3] = $107;
      (_snprintf($105,300,16221,$vararg_buffer37)|0);
      break;
     } else {
      _Error(12151,$vararg_buffer40);
      break;
     }
    }
   }
   $25 = (_strlen((31976))|0);
   $26 = ($25>>>0)>(0);
   if ($26) {
    $27 = ((($3)) + 420|0);
    (_strcpy($27,(31976))|0);
    $28 = ((($3)) + 720|0);
    _getArrayName((31976),$28);
    $29 = ((($3)) + 870|0);
    _getArrayIdx((31976),$29);
    $30 = (_strlen(128380)|0);
    $31 = ($30>>>0)>(0);
    if ($31) {
     $32 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer7>>2] = 128380;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = $32;
     (_snprintf($7,300,15808,$vararg_buffer7)|0);
     $33 = ((($3)) + 720|0);
     _memset(($33|0),0,150)|0;
     $34 = ((($3)) + 720|0);
     (_strcpy($34,$7)|0);
     $35 = ((($3)) + 870|0);
     $36 = HEAP8[$35>>0]|0;
     $37 = $36 << 24 >> 24;
     $38 = (_isdigit($37)|0);
     $39 = ($38|0)!=(0);
     if (!($39)) {
      _memset(($7|0),0,300)|0;
      $40 = ((($3)) + 870|0);
      HEAP32[$vararg_buffer11>>2] = 128380;
      $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
      HEAP32[$vararg_ptr14>>2] = $40;
      (_snprintf($7,300,15808,$vararg_buffer11)|0);
      $41 = ((($3)) + 870|0);
      _memset(($41|0),0,150)|0;
      $42 = ((($3)) + 870|0);
      (_strcpy($42,$7)|0);
     }
    }
    $43 = ((($3)) + 870|0);
    $44 = HEAP8[$43>>0]|0;
    $45 = $44 << 24 >> 24;
    $46 = (_isdigit($45)|0);
    $47 = ($46|0)!=(0);
    $48 = ((($3)) + 870|0);
    do {
     if ($47) {
      $49 = (_atol($48)|0);
      $5 = $49;
     } else {
      $50 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($4|0),3216)|0;
      _ValLabel($8,$48,$50,$$byval_copy,232);
      _memcpy(($4|0),($8|0),3216)|0;
      $51 = ((($4)) + 84|0);
      $52 = HEAP32[$51>>2]|0;
      $53 = ($52|0)==(0);
      if ($53) {
       $54 = ((($4)) + 88|0);
       $55 = HEAP32[$54>>2]|0;
       $5 = $55;
       break;
      } else {
       _Error(16065,$vararg_buffer15);
       break;
      }
     }
    } while(0);
    $56 = ((($3)) + 720|0);
    $57 = HEAP32[8088]|0;
    _memcpy(($$byval_copy42|0),($3|0),3216)|0;
    _ValLabel($9,$56,$57,$$byval_copy42,232);
    _memcpy(($3|0),($9|0),3216)|0;
    $58 = ((($3)) + 870|0);
    $59 = $5;
    HEAP32[$vararg_buffer17>>2] = $59;
    (_snprintf($58,150,16087,$vararg_buffer17)|0);
    $60 = $5;
    $61 = ($60|0)<(0);
    $62 = $5;
    $63 = ($62|0)>(99999000);
    $or$cond = $61 | $63;
    if ($or$cond) {
     _Error(16096,$vararg_buffer20);
    }
    $64 = ((($3)) + 84|0);
    $65 = HEAP32[$64>>2]|0;
    $66 = ($65|0)==(6);
    if ($66) {
     $67 = ((($3)) + 404|0);
     $68 = HEAP32[$67>>2]|0;
     $69 = ($68|0)!=(0);
     if ($69) {
      $70 = ((($3)) + 404|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)==(0);
      if ($72) {
       _Error(12108,$vararg_buffer22);
      }
      $73 = ((($1)) + 84|0);
      HEAP32[$73>>2] = 3;
      $74 = ((($1)) + 104|0);
      $75 = $5;
      _memcpy(($$byval_copy43|0),($3|0),3216)|0;
      $76 = (_get_int_array($$byval_copy43,$75)|0);
      HEAP32[$vararg_buffer24>>2] = $76;
      (_snprintf($74,300,16176,$vararg_buffer24)|0);
      break;
     }
    }
    $77 = ((($3)) + 84|0);
    $78 = HEAP32[$77>>2]|0;
    $79 = ($78|0)==(7);
    if ($79) {
     $80 = ((($3)) + 408|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)!=(0);
     if ($82) {
      $83 = ((($1)) + 84|0);
      HEAP32[$83>>2] = 3;
      $84 = ((($1)) + 104|0);
      $85 = $5;
      _memcpy(($$byval_copy44|0),($3|0),3216)|0;
      $86 = (+_get_dbl_array($$byval_copy44,$85));
      HEAPF64[$vararg_buffer27>>3] = $86;
      (_snprintf($84,300,16221,$vararg_buffer27)|0);
      break;
     }
    }
    $87 = ((($1)) + 104|0);
    (_strcpy($87,1358125)|0);
   }
  }
 } while(0);
 $108 = ((($3)) + 3196|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(0|0);
 if ($110) {
  $111 = ((($3)) + 3196|0);
  $112 = HEAP32[$111>>2]|0;
  _free($112);
 }
 $113 = ((($3)) + 3200|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = ((($3)) + 3200|0);
  $117 = HEAP32[$116>>2]|0;
  _free($117);
 }
 $118 = ((($3)) + 1796|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)!=(0|0);
 if ($120) {
  $121 = ((($3)) + 1796|0);
  $122 = HEAP32[$121>>2]|0;
  _free($122);
 }
 $123 = ((($3)) + 1024|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)!=(0|0);
 if ($125) {
  $126 = ((($3)) + 1024|0);
  $127 = HEAP32[$126>>2]|0;
  _free($127);
 }
 $128 = ((($3)) + 4|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)!=(0|0);
 if ($130) {
  $131 = ((($3)) + 4|0);
  $132 = HEAP32[$131>>2]|0;
  _free($132);
 }
 $133 = ((($3)) + 8|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)!=(0|0);
 if ($135) {
  $136 = ((($3)) + 8|0);
  $137 = HEAP32[$136>>2]|0;
  _free($137);
 }
 $138 = HEAP32[$3>>2]|0;
 $139 = ($138|0)!=(0|0);
 if ($139) {
  $140 = HEAP32[$3>>2]|0;
  _free($140);
 }
 $141 = ((($4)) + 3196|0);
 $142 = HEAP32[$141>>2]|0;
 $143 = ($142|0)!=(0|0);
 if ($143) {
  $144 = ((($4)) + 3196|0);
  $145 = HEAP32[$144>>2]|0;
  _free($145);
 }
 $146 = ((($4)) + 3200|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)!=(0|0);
 if ($148) {
  $149 = ((($4)) + 3200|0);
  $150 = HEAP32[$149>>2]|0;
  _free($150);
 }
 $151 = ((($4)) + 1796|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($152|0)!=(0|0);
 if ($153) {
  $154 = ((($4)) + 1796|0);
  $155 = HEAP32[$154>>2]|0;
  _free($155);
 }
 $156 = ((($4)) + 1024|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = ($157|0)!=(0|0);
 if ($158) {
  $159 = ((($4)) + 1024|0);
  $160 = HEAP32[$159>>2]|0;
  _free($160);
 }
 $161 = ((($4)) + 4|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)!=(0|0);
 if ($163) {
  $164 = ((($4)) + 4|0);
  $165 = HEAP32[$164>>2]|0;
  _free($165);
 }
 $166 = ((($4)) + 8|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)!=(0|0);
 if ($168) {
  $169 = ((($4)) + 8|0);
  $170 = HEAP32[$169>>2]|0;
  _free($170);
 }
 $171 = HEAP32[$4>>2]|0;
 $172 = ($171|0)!=(0|0);
 if ($172) {
  $173 = HEAP32[$4>>2]|0;
  _free($173);
 }
 $174 = ((($6)) + 8|0);
 $175 = HEAP32[$174>>2]|0;
 $176 = ($175|0)!=(0|0);
 if ($176) {
  $177 = ((($6)) + 8|0);
  $178 = HEAP32[$177>>2]|0;
  _free($178);
 }
 $179 = ((($6)) + 916|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($180|0)!=(0|0);
 if (!($181)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $182 = ((($6)) + 916|0);
 $183 = HEAP32[$182>>2]|0;
 _free($183);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcSambung($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer26 = 0, $vararg_buffer5 = 0, $vararg_buffer9 = 0, $vararg_ptr25 = 0, $vararg_ptr4 = 0, $vararg_ptr8 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 38528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(38528|0);
 $$byval_copy31 = sp + 32248|0;
 $$byval_copy30 = sp + 29032|0;
 $$byval_copy29 = sp + 36704|0;
 $$byval_copy28 = sp + 25816|0;
 $$byval_copy = sp + 22600|0;
 $vararg_buffer26 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer14 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer9 = sp + 22536|0;
 $vararg_buffer5 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 38220|0;
 $3 = sp + 37920|0;
 $5 = sp + 37320|0;
 $6 = sp + 16080|0;
 $7 = sp + 12864|0;
 $9 = sp + 35776|0;
 $10 = sp + 37016|0;
 $11 = sp + 9648|0;
 $12 = sp + 6432|0;
 $13 = sp + 35464|0;
 $14 = sp + 3216|0;
 $15 = sp;
 $4 = 0;
 $8 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 _memset(($6|0),0,3216)|0;
 _memset(($7|0),0,3216)|0;
 _memset(($5|0),0,600)|0;
 _memset(($9|0),0,920)|0;
 _memset(($10|0),0,300)|0;
 _memset(($5|0),0,600)|0;
 $4 = 0;
 $16 = ((($1)) + 84|0);
 HEAP32[$16>>2] = 3;
 while(1) {
  (_getlex()|0);
  $17 = HEAP32[7954]|0;
  $18 = ($17|0)==(223);
  do {
   if ($18) {
    _Error(12175,$vararg_buffer);
   } else {
    $19 = HEAP32[7954]|0;
    $20 = ($19|0)==(225);
    if ($20) {
     $21 = $4;
     $22 = ($21|0)==(0);
     if ($22) {
      (_strcpy($2,(31976))|0);
     }
     $23 = $4;
     $24 = ($23|0)==(1);
     if (!($24)) {
      break;
     }
     (_strcpy($3,(31976))|0);
     break;
    }
    $25 = HEAP32[7954]|0;
    $26 = ($25|0)==(228);
    if (!($26)) {
     $117 = (_strlen(128380)|0);
     $118 = ($117>>>0)>(0);
     if ($118) {
      HEAP32[$vararg_buffer22>>2] = 128380;
      $vararg_ptr25 = ((($vararg_buffer22)) + 4|0);
      HEAP32[$vararg_ptr25>>2] = (31976);
      (_snprintf($10,300,15808,$vararg_buffer22)|0);
      $119 = HEAP32[8091]|0;
      _memcpy(($$byval_copy30|0),($7|0),3216)|0;
      _ValLabel($14,$10,$119,$$byval_copy30,232);
      _memcpy(($6|0),($14|0),3216)|0;
     } else {
      $120 = HEAP32[8088]|0;
      _memcpy(($$byval_copy31|0),($6|0),3216)|0;
      _ValLabel($15,(31976),$120,$$byval_copy31,232);
      _memcpy(($6|0),($15|0),3216)|0;
     }
     $121 = ((($6)) + 84|0);
     $122 = HEAP32[$121>>2]|0;
     $123 = ($122|0)==(3);
     if (!($123)) {
      break;
     }
     $124 = ((($6)) + 104|0);
     $125 = (_strlen($124)|0);
     $126 = ($125>>>0)>(0);
     if (!($126)) {
      break;
     }
     $127 = $4;
     $128 = ($127|0)==(0);
     if ($128) {
      $129 = ((($6)) + 104|0);
      (_strcpy($2,$129)|0);
     }
     $130 = $4;
     $131 = ($130|0)==(1);
     if (!($131)) {
      break;
     }
     $132 = ((($6)) + 104|0);
     (_strcpy($3,$132)|0);
     break;
    }
    $27 = (_strlen((31976))|0);
    $28 = ($27>>>0)>(0);
    if ($28) {
     $29 = ((($6)) + 420|0);
     (_strcpy($29,(31976))|0);
     $30 = ((($6)) + 720|0);
     _getArrayName((31976),$30);
     $31 = ((($6)) + 870|0);
     _getArrayIdx((31976),$31);
     $32 = (_strlen(128380)|0);
     $33 = ($32>>>0)>(0);
     if ($33) {
      $34 = ((($6)) + 720|0);
      HEAP32[$vararg_buffer2>>2] = 128380;
      $vararg_ptr4 = ((($vararg_buffer2)) + 4|0);
      HEAP32[$vararg_ptr4>>2] = $34;
      (_snprintf($10,300,15808,$vararg_buffer2)|0);
      $35 = ((($6)) + 720|0);
      _memset(($35|0),0,150)|0;
      $36 = ((($6)) + 720|0);
      (_strcpy($36,$10)|0);
      $37 = ((($6)) + 870|0);
      $38 = HEAP8[$37>>0]|0;
      $39 = $38 << 24 >> 24;
      $40 = (_isdigit($39)|0);
      $41 = ($40|0)!=(0);
      if (!($41)) {
       _memset(($10|0),0,300)|0;
       $42 = ((($6)) + 870|0);
       HEAP32[$vararg_buffer5>>2] = 128380;
       $vararg_ptr8 = ((($vararg_buffer5)) + 4|0);
       HEAP32[$vararg_ptr8>>2] = $42;
       (_snprintf($10,300,15808,$vararg_buffer5)|0);
       $43 = ((($6)) + 870|0);
       _memset(($43|0),0,150)|0;
       $44 = ((($6)) + 870|0);
       (_strcpy($44,$10)|0);
      }
     }
     $45 = ((($6)) + 870|0);
     $46 = HEAP8[$45>>0]|0;
     $47 = $46 << 24 >> 24;
     $48 = (_isdigit($47)|0);
     $49 = ($48|0)!=(0);
     $50 = ((($6)) + 870|0);
     do {
      if ($49) {
       $51 = (_atol($50)|0);
       $8 = $51;
      } else {
       $52 = HEAP32[8088]|0;
       _memcpy(($$byval_copy|0),($7|0),3216)|0;
       _ValLabel($11,$50,$52,$$byval_copy,232);
       _memcpy(($7|0),($11|0),3216)|0;
       $53 = ((($7)) + 84|0);
       $54 = HEAP32[$53>>2]|0;
       $55 = ($54|0)==(0);
       if ($55) {
        $56 = ((($7)) + 88|0);
        $57 = HEAP32[$56>>2]|0;
        $8 = $57;
        break;
       } else {
        _Error(16065,$vararg_buffer9);
        break;
       }
      }
     } while(0);
     $58 = ((($6)) + 720|0);
     $59 = HEAP32[8088]|0;
     _memcpy(($$byval_copy28|0),($6|0),3216)|0;
     _ValLabel($12,$58,$59,$$byval_copy28,232);
     _memcpy(($6|0),($12|0),3216)|0;
     $60 = ((($6)) + 870|0);
     $61 = $8;
     HEAP32[$vararg_buffer11>>2] = $61;
     (_snprintf($60,150,16087,$vararg_buffer11)|0);
     $62 = $8;
     $63 = ($62|0)<(0);
     $64 = $8;
     $65 = ($64|0)>(99999000);
     $or$cond = $63 | $65;
     if ($or$cond) {
      _Error(16096,$vararg_buffer14);
     }
     $66 = ((($6)) + 84|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = ($67|0)==(8);
     if ($68) {
      $69 = ((($6)) + 412|0);
      $70 = HEAP32[$69>>2]|0;
      $71 = ($70|0)!=(0);
      if ($71) {
       $72 = ((($6)) + 412|0);
       $73 = HEAP32[$72>>2]|0;
       $74 = ($73|0)==(0);
       if ($74) {
        _Error(12203,$vararg_buffer16);
       }
       $75 = ((($1)) + 84|0);
       HEAP32[$75>>2] = 3;
       _memset(((72140)|0),0,256)|0;
       _memset(((71832)|0),0,300)|0;
       $76 = ((($6)) + 720|0);
       (_strcpy((72140),$76)|0);
       $77 = ((($6)) + 412|0);
       $78 = HEAP32[$77>>2]|0;
       HEAP32[8086] = $78;
       $79 = HEAP32[8086]|0;
       $80 = ($79|0)<(0);
       if ($80) {
        (_printf(16303,$vararg_buffer18)|0);
        break;
       }
       $81 = HEAP32[8086]|0;
       HEAP32[17956] = $81;
       $82 = $8;
       HEAP32[(71828)>>2] = $82;
       _memcpy(($$byval_copy29|0),(71824|0),312)|0;
       $83 = (_string_findData($$byval_copy29)|0);
       HEAP32[8074] = $83;
       $84 = HEAP32[8074]|0;
       $85 = ($84|0)<(0);
       if ($85) {
        (_printf(11878,$vararg_buffer20)|0);
        break;
       }
       $86 = HEAP32[8074]|0;
       _string_getElement($13,$86);
       _memcpy((71824|0),($13|0),312)|0;
       $87 = $4;
       $88 = ($87|0)==(0);
       if ($88) {
        (_strcpy($2,(71832))|0);
       }
       $89 = $4;
       $90 = ($89|0)==(1);
       if (!($90)) {
        break;
       }
       (_strcpy($3,(71832))|0);
       break;
      }
     }
     $91 = ((($6)) + 84|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($92|0)==(10);
     if (!($93)) {
      $116 = ((($1)) + 104|0);
      (_strcpy($116,1358125)|0);
      break;
     }
     $94 = ((($1)) + 84|0);
     HEAP32[$94>>2] = 3;
     $95 = $8;
     $96 = ((($6)) + 1024|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (($97) + ($95<<2)|0);
     $99 = HEAP32[$98>>2]|0;
     $100 = (_strlen($99)|0);
     $101 = ($100>>>0)>(0);
     if ($101) {
      $102 = $4;
      $103 = ($102|0)==(0);
      if ($103) {
       $104 = $8;
       $105 = ((($6)) + 1024|0);
       $106 = HEAP32[$105>>2]|0;
       $107 = (($106) + ($104<<2)|0);
       $108 = HEAP32[$107>>2]|0;
       (_strcpy($2,$108)|0);
      }
      $109 = $4;
      $110 = ($109|0)==(1);
      if ($110) {
       $111 = $8;
       $112 = ((($6)) + 1024|0);
       $113 = HEAP32[$112>>2]|0;
       $114 = (($113) + ($111<<2)|0);
       $115 = HEAP32[$114>>2]|0;
       (_strcpy($3,$115)|0);
      }
     }
    }
   }
  } while(0);
  $133 = $4;
  $134 = (($133) + 1)|0;
  $4 = $134;
  (_getlex()|0);
  $135 = HEAP32[7954]|0;
  $136 = ($135|0)==(227);
  if (!($136)) {
   break;
  }
  $137 = HEAP8[(31976)>>0]|0;
  $138 = $137 << 24 >> 24;
  $139 = ($138|0)==(44);
  if (!($139)) {
   break;
  }
 }
 _ungetlex();
 $140 = $4;
 $141 = ($140|0)!=(2);
 if ($141) {
  _Error(12175,$vararg_buffer26);
 } else {
  (_strcat($2,$3)|0);
  $142 = ((($1)) + 104|0);
  (_strcpy($142,$2)|0);
  $143 = ((($1)) + 84|0);
  HEAP32[$143>>2] = 3;
 }
 $144 = ((($6)) + 3196|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = ((($6)) + 3196|0);
  $148 = HEAP32[$147>>2]|0;
  _free($148);
 }
 $149 = ((($6)) + 3200|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($150|0)!=(0|0);
 if ($151) {
  $152 = ((($6)) + 3200|0);
  $153 = HEAP32[$152>>2]|0;
  _free($153);
 }
 $154 = ((($6)) + 1796|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = ((($6)) + 1796|0);
  $158 = HEAP32[$157>>2]|0;
  _free($158);
 }
 $159 = ((($6)) + 1024|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($160|0)!=(0|0);
 if ($161) {
  $162 = ((($6)) + 1024|0);
  $163 = HEAP32[$162>>2]|0;
  _free($163);
 }
 $164 = ((($6)) + 4|0);
 $165 = HEAP32[$164>>2]|0;
 $166 = ($165|0)!=(0|0);
 if ($166) {
  $167 = ((($6)) + 4|0);
  $168 = HEAP32[$167>>2]|0;
  _free($168);
 }
 $169 = ((($6)) + 8|0);
 $170 = HEAP32[$169>>2]|0;
 $171 = ($170|0)!=(0|0);
 if ($171) {
  $172 = ((($6)) + 8|0);
  $173 = HEAP32[$172>>2]|0;
  _free($173);
 }
 $174 = HEAP32[$6>>2]|0;
 $175 = ($174|0)!=(0|0);
 if ($175) {
  $176 = HEAP32[$6>>2]|0;
  _free($176);
 }
 $177 = ((($7)) + 3196|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = ($178|0)!=(0|0);
 if ($179) {
  $180 = ((($7)) + 3196|0);
  $181 = HEAP32[$180>>2]|0;
  _free($181);
 }
 $182 = ((($7)) + 3200|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ($183|0)!=(0|0);
 if ($184) {
  $185 = ((($7)) + 3200|0);
  $186 = HEAP32[$185>>2]|0;
  _free($186);
 }
 $187 = ((($7)) + 1796|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ($188|0)!=(0|0);
 if ($189) {
  $190 = ((($7)) + 1796|0);
  $191 = HEAP32[$190>>2]|0;
  _free($191);
 }
 $192 = ((($7)) + 1024|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ($193|0)!=(0|0);
 if ($194) {
  $195 = ((($7)) + 1024|0);
  $196 = HEAP32[$195>>2]|0;
  _free($196);
 }
 $197 = ((($7)) + 4|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = ($198|0)!=(0|0);
 if ($199) {
  $200 = ((($7)) + 4|0);
  $201 = HEAP32[$200>>2]|0;
  _free($201);
 }
 $202 = ((($7)) + 8|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = ($203|0)!=(0|0);
 if ($204) {
  $205 = ((($7)) + 8|0);
  $206 = HEAP32[$205>>2]|0;
  _free($206);
 }
 $207 = HEAP32[$7>>2]|0;
 $208 = ($207|0)!=(0|0);
 if ($208) {
  $209 = HEAP32[$7>>2]|0;
  _free($209);
 }
 $210 = ((($9)) + 8|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = ($211|0)!=(0|0);
 if ($212) {
  $213 = ((($9)) + 8|0);
  $214 = HEAP32[$213>>2]|0;
  _free($214);
 }
 $215 = ((($9)) + 916|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = ($216|0)!=(0|0);
 if (!($217)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $218 = ((($9)) + 916|0);
 $219 = HEAP32[$218>>2]|0;
 _free($219);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcGabung($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy52 = 0, $$byval_copy53 = 0, $$byval_copy54 = 0, $$byval_copy55 = 0, $$byval_copy56 = 0, $$byval_copy57 = 0, $1 = 0, $10 = 0, $100 = 0.0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $2 = 0, $20 = 0.0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer16 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer41 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer5 = 0, $vararg_buffer50 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr40 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 47616|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(47616|0);
 $$byval_copy57 = sp + 41960|0;
 $$byval_copy56 = sp + 38744|0;
 $$byval_copy55 = sp + 35528|0;
 $$byval_copy54 = sp + 32312|0;
 $$byval_copy53 = sp + 29096|0;
 $$byval_copy52 = sp + 25880|0;
 $$byval_copy = sp + 22664|0;
 $vararg_buffer50 = sp + 22656|0;
 $vararg_buffer47 = sp + 22648|0;
 $vararg_buffer44 = sp + 22640|0;
 $vararg_buffer41 = sp + 22632|0;
 $vararg_buffer37 = sp + 22624|0;
 $vararg_buffer35 = sp + 22616|0;
 $vararg_buffer33 = sp + 22608|0;
 $vararg_buffer30 = sp + 22600|0;
 $vararg_buffer28 = sp + 22592|0;
 $vararg_buffer25 = sp + 22584|0;
 $vararg_buffer23 = sp + 22576|0;
 $vararg_buffer21 = sp + 22568|0;
 $vararg_buffer18 = sp + 22560|0;
 $vararg_buffer16 = sp + 22552|0;
 $vararg_buffer12 = sp + 22544|0;
 $vararg_buffer8 = sp + 22536|0;
 $vararg_buffer5 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 47308|0;
 $3 = sp + 47008|0;
 $5 = sp + 46408|0;
 $6 = sp + 16080|0;
 $7 = sp + 12864|0;
 $9 = sp + 45176|0;
 $10 = sp + 46104|0;
 $11 = sp + 9648|0;
 $12 = sp + 6432|0;
 $13 = sp + 3216|0;
 $14 = sp;
 $4 = 0;
 $8 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 _memset(($6|0),0,3216)|0;
 _memset(($7|0),0,3216)|0;
 _memset(($5|0),0,600)|0;
 _memset(($9|0),0,920)|0;
 _memset(($10|0),0,300)|0;
 $4 = 0;
 (_strcpy($5,1358125)|0);
 while(1) {
  (_getlex()|0);
  $15 = HEAP32[7954]|0;
  $16 = ($15|0)==(223);
  do {
   if ($16) {
    $17 = HEAP32[(31976)>>2]|0;
    HEAP32[$vararg_buffer>>2] = $17;
    (_snprintf($2,300,16087,$vararg_buffer)|0);
    (_strcat($5,$2)|0);
   } else {
    $18 = HEAP32[7954]|0;
    $19 = ($18|0)==(226);
    if ($19) {
     $20 = +HEAPF64[(31976)>>3];
     HEAPF64[$vararg_buffer2>>3] = $20;
     (_snprintf($2,300,16221,$vararg_buffer2)|0);
     (_strcat($5,$2)|0);
     break;
    }
    $21 = HEAP32[7954]|0;
    $22 = ($21|0)==(225);
    if ($22) {
     HEAP32[$vararg_buffer5>>2] = (31976);
     (_snprintf($2,300,19231,$vararg_buffer5)|0);
     (_strcat($5,$2)|0);
     break;
    }
    $23 = HEAP32[7954]|0;
    $24 = ($23|0)==(228);
    if (!($24)) {
     $87 = (_strlen(128380)|0);
     $88 = ($87>>>0)>(0);
     if ($88) {
      HEAP32[$vararg_buffer37>>2] = 128380;
      $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
      HEAP32[$vararg_ptr40>>2] = (31976);
      (_snprintf($10,300,15808,$vararg_buffer37)|0);
      $89 = HEAP32[8091]|0;
      _memcpy(($$byval_copy56|0),($7|0),3216)|0;
      _ValLabel($13,$10,$89,$$byval_copy56,232);
      _memcpy(($6|0),($13|0),3216)|0;
     } else {
      $90 = HEAP32[8088]|0;
      _memcpy(($$byval_copy57|0),($6|0),3216)|0;
      _ValLabel($14,(31976),$90,$$byval_copy57,232);
      _memcpy(($6|0),($14|0),3216)|0;
     }
     $91 = ((($6)) + 84|0);
     $92 = HEAP32[$91>>2]|0;
     $93 = ($92|0)==(0);
     if ($93) {
      $94 = ((($6)) + 88|0);
      $95 = HEAP32[$94>>2]|0;
      HEAP32[$vararg_buffer41>>2] = $95;
      (_snprintf($2,300,16087,$vararg_buffer41)|0);
      (_strcat($5,$2)|0);
      break;
     }
     $96 = ((($6)) + 84|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = ($97|0)==(1);
     if ($98) {
      $99 = ((($6)) + 96|0);
      $100 = +HEAPF64[$99>>3];
      HEAPF64[$vararg_buffer44>>3] = $100;
      (_snprintf($2,300,16221,$vararg_buffer44)|0);
      (_strcat($5,$2)|0);
      break;
     }
     $101 = ((($6)) + 84|0);
     $102 = HEAP32[$101>>2]|0;
     $103 = ($102|0)==(3);
     if ($103) {
      $104 = ((($6)) + 104|0);
      HEAP32[$vararg_buffer47>>2] = $104;
      (_snprintf($2,300,19231,$vararg_buffer47)|0);
      (_strcat($5,$2)|0);
      break;
     } else {
      _Error(12286,$vararg_buffer50);
      break;
     }
    }
    $25 = (_strlen((31976))|0);
    $26 = ($25>>>0)>(0);
    if ($26) {
     $27 = ((($6)) + 420|0);
     (_strcpy($27,(31976))|0);
     $28 = ((($6)) + 720|0);
     _getArrayName((31976),$28);
     $29 = ((($6)) + 870|0);
     _getArrayIdx((31976),$29);
     $30 = (_strlen(128380)|0);
     $31 = ($30>>>0)>(0);
     if ($31) {
      $32 = ((($6)) + 720|0);
      HEAP32[$vararg_buffer8>>2] = 128380;
      $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
      HEAP32[$vararg_ptr11>>2] = $32;
      (_snprintf($10,300,15808,$vararg_buffer8)|0);
      $33 = ((($6)) + 720|0);
      _memset(($33|0),0,150)|0;
      $34 = ((($6)) + 720|0);
      (_strcpy($34,$10)|0);
      $35 = ((($6)) + 870|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = $36 << 24 >> 24;
      $38 = (_isdigit($37)|0);
      $39 = ($38|0)!=(0);
      if (!($39)) {
       _memset(($10|0),0,300)|0;
       $40 = ((($6)) + 870|0);
       HEAP32[$vararg_buffer12>>2] = 128380;
       $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
       HEAP32[$vararg_ptr15>>2] = $40;
       (_snprintf($10,300,15808,$vararg_buffer12)|0);
       $41 = ((($6)) + 870|0);
       _memset(($41|0),0,150)|0;
       $42 = ((($6)) + 870|0);
       (_strcpy($42,$10)|0);
      }
     }
     $43 = ((($6)) + 870|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = $44 << 24 >> 24;
     $46 = (_isdigit($45)|0);
     $47 = ($46|0)!=(0);
     $48 = ((($6)) + 870|0);
     do {
      if ($47) {
       $49 = (_atol($48)|0);
       $8 = $49;
      } else {
       $50 = HEAP32[8088]|0;
       _memcpy(($$byval_copy|0),($7|0),3216)|0;
       _ValLabel($11,$48,$50,$$byval_copy,232);
       _memcpy(($7|0),($11|0),3216)|0;
       $51 = ((($7)) + 84|0);
       $52 = HEAP32[$51>>2]|0;
       $53 = ($52|0)==(0);
       if ($53) {
        $54 = ((($7)) + 88|0);
        $55 = HEAP32[$54>>2]|0;
        $8 = $55;
        break;
       } else {
        _Error(16065,$vararg_buffer16);
        break;
       }
      }
     } while(0);
     $56 = ((($6)) + 720|0);
     $57 = HEAP32[8088]|0;
     _memcpy(($$byval_copy52|0),($6|0),3216)|0;
     _ValLabel($12,$56,$57,$$byval_copy52,232);
     _memcpy(($6|0),($12|0),3216)|0;
     $58 = ((($6)) + 870|0);
     $59 = $8;
     HEAP32[$vararg_buffer18>>2] = $59;
     (_snprintf($58,150,16087,$vararg_buffer18)|0);
     $60 = $8;
     $61 = ($60|0)<(0);
     $62 = $8;
     $63 = ($62|0)>(99999000);
     $or$cond = $61 | $63;
     if ($or$cond) {
      _Error(16096,$vararg_buffer21);
     }
     $64 = ((($6)) + 84|0);
     $65 = HEAP32[$64>>2]|0;
     $66 = ($65|0)==(6);
     if ($66) {
      $67 = ((($6)) + 404|0);
      $68 = HEAP32[$67>>2]|0;
      $69 = ($68|0)==(0);
      if ($69) {
       _Error(12245,$vararg_buffer23);
      }
      $70 = $8;
      _memcpy(($$byval_copy53|0),($6|0),3216)|0;
      $71 = (_get_int_array($$byval_copy53,$70)|0);
      HEAP32[$vararg_buffer25>>2] = $71;
      (_snprintf($2,300,16176,$vararg_buffer25)|0);
      (_strcat($5,$2)|0);
      break;
     }
     $72 = ((($6)) + 84|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($73|0)==(7);
     if ($74) {
      $75 = ((($6)) + 408|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)==(0);
      if ($77) {
       _Error(12245,$vararg_buffer28);
      }
      $78 = $8;
      _memcpy(($$byval_copy54|0),($6|0),3216)|0;
      $79 = (+_get_dbl_array($$byval_copy54,$78));
      HEAPF64[$vararg_buffer30>>3] = $79;
      (_snprintf($2,300,16221,$vararg_buffer30)|0);
      (_strcat($5,$2)|0);
      break;
     }
     $80 = ((($6)) + 84|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==(8);
     if (!($82)) {
      _Error(12286,$vararg_buffer35);
      break;
     }
     $83 = ((($6)) + 412|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = ($84|0)==(0);
     if ($85) {
      _Error(12245,$vararg_buffer33);
     }
     $86 = $8;
     _memcpy(($$byval_copy55|0),($6|0),3216)|0;
     (_get_str_array($$byval_copy55,$86,$2)|0);
     (_strcat($5,$2)|0);
    }
   }
  } while(0);
  $105 = $4;
  $106 = (($105) + 1)|0;
  $4 = $106;
  (_getlex()|0);
  $107 = HEAP32[7954]|0;
  $108 = ($107|0)==(227);
  if (!($108)) {
   break;
  }
  $109 = HEAP8[(31976)>>0]|0;
  $110 = $109 << 24 >> 24;
  $111 = ($110|0)==(44);
  if (!($111)) {
   break;
  }
 }
 _ungetlex();
 $112 = ((($1)) + 104|0);
 (_strcpy($112,$5)|0);
 $113 = ((($1)) + 84|0);
 HEAP32[$113>>2] = 3;
 $114 = ((($6)) + 3196|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = ($115|0)!=(0|0);
 if ($116) {
  $117 = ((($6)) + 3196|0);
  $118 = HEAP32[$117>>2]|0;
  _free($118);
 }
 $119 = ((($6)) + 3200|0);
 $120 = HEAP32[$119>>2]|0;
 $121 = ($120|0)!=(0|0);
 if ($121) {
  $122 = ((($6)) + 3200|0);
  $123 = HEAP32[$122>>2]|0;
  _free($123);
 }
 $124 = ((($6)) + 1796|0);
 $125 = HEAP32[$124>>2]|0;
 $126 = ($125|0)!=(0|0);
 if ($126) {
  $127 = ((($6)) + 1796|0);
  $128 = HEAP32[$127>>2]|0;
  _free($128);
 }
 $129 = ((($6)) + 1024|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)!=(0|0);
 if ($131) {
  $132 = ((($6)) + 1024|0);
  $133 = HEAP32[$132>>2]|0;
  _free($133);
 }
 $134 = ((($6)) + 4|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = ((($6)) + 4|0);
  $138 = HEAP32[$137>>2]|0;
  _free($138);
 }
 $139 = ((($6)) + 8|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = ((($6)) + 8|0);
  $143 = HEAP32[$142>>2]|0;
  _free($143);
 }
 $144 = HEAP32[$6>>2]|0;
 $145 = ($144|0)!=(0|0);
 if ($145) {
  $146 = HEAP32[$6>>2]|0;
  _free($146);
 }
 $147 = ((($7)) + 3196|0);
 $148 = HEAP32[$147>>2]|0;
 $149 = ($148|0)!=(0|0);
 if ($149) {
  $150 = ((($7)) + 3196|0);
  $151 = HEAP32[$150>>2]|0;
  _free($151);
 }
 $152 = ((($7)) + 3200|0);
 $153 = HEAP32[$152>>2]|0;
 $154 = ($153|0)!=(0|0);
 if ($154) {
  $155 = ((($7)) + 3200|0);
  $156 = HEAP32[$155>>2]|0;
  _free($156);
 }
 $157 = ((($7)) + 1796|0);
 $158 = HEAP32[$157>>2]|0;
 $159 = ($158|0)!=(0|0);
 if ($159) {
  $160 = ((($7)) + 1796|0);
  $161 = HEAP32[$160>>2]|0;
  _free($161);
 }
 $162 = ((($7)) + 1024|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)!=(0|0);
 if ($164) {
  $165 = ((($7)) + 1024|0);
  $166 = HEAP32[$165>>2]|0;
  _free($166);
 }
 $167 = ((($7)) + 4|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ($168|0)!=(0|0);
 if ($169) {
  $170 = ((($7)) + 4|0);
  $171 = HEAP32[$170>>2]|0;
  _free($171);
 }
 $172 = ((($7)) + 8|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = ($173|0)!=(0|0);
 if ($174) {
  $175 = ((($7)) + 8|0);
  $176 = HEAP32[$175>>2]|0;
  _free($176);
 }
 $177 = HEAP32[$7>>2]|0;
 $178 = ($177|0)!=(0|0);
 if ($178) {
  $179 = HEAP32[$7>>2]|0;
  _free($179);
 }
 $180 = ((($9)) + 8|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = ($181|0)!=(0|0);
 if ($182) {
  $183 = ((($9)) + 8|0);
  $184 = HEAP32[$183>>2]|0;
  _free($184);
 }
 $185 = ((($9)) + 916|0);
 $186 = HEAP32[$185>>2]|0;
 $187 = ($186|0)!=(0|0);
 if (!($187)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $188 = ((($9)) + 916|0);
 $189 = HEAP32[$188>>2]|0;
 _free($189);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcEKSPRESI($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0;
 var $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0;
 var $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr13 = 0, $vararg_ptr3 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 55968|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(55968|0);
 $$byval_copy30 = sp + 51536|0;
 $$byval_copy29 = sp + 48320|0;
 $$byval_copy28 = sp + 45104|0;
 $$byval_copy27 = sp + 41888|0;
 $$byval_copy26 = sp + 38672|0;
 $$byval_copy25 = sp + 35456|0;
 $$byval_copy = sp + 32240|0;
 $vararg_buffer23 = sp + 32232|0;
 $vararg_buffer21 = sp + 32224|0;
 $vararg_buffer19 = sp + 32216|0;
 $vararg_buffer17 = sp + 32208|0;
 $vararg_buffer14 = sp + 32200|0;
 $vararg_buffer10 = sp + 32192|0;
 $vararg_buffer8 = sp + 32184|0;
 $vararg_buffer4 = sp + 32176|0;
 $vararg_buffer1 = sp + 32168|0;
 $vararg_buffer = sp + 32160|0;
 $1 = sp + 28944|0;
 $2 = sp + 55660|0;
 $3 = sp + 55360|0;
 $4 = sp + 55060|0;
 $7 = sp + 25728|0;
 $8 = sp + 22512|0;
 $9 = sp + 19296|0;
 $10 = sp + 54760|0;
 $11 = sp + 16080|0;
 $12 = sp + 12864|0;
 $13 = sp + 9648|0;
 $14 = sp + 6432|0;
 $15 = sp + 3216|0;
 $16 = sp;
 $5 = 0;
 $6 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 _memset(($4|0),0,300)|0;
 _memset(($7|0),0,3216)|0;
 _memset(($8|0),0,3216)|0;
 _memset(($9|0),0,3216)|0;
 _memset(($10|0),0,300)|0;
 $5 = 0;
 while(1) {
  (_getlex()|0);
  $17 = HEAP32[7954]|0;
  $18 = ($17|0)==(223);
  do {
   if ($18) {
    _Error(12313,$vararg_buffer);
   } else {
    $19 = HEAP32[7954]|0;
    $20 = ($19|0)==(225);
    if ($20) {
     $21 = $5;
     $22 = ($21|0)==(0);
     if ($22) {
      (_strcpy($2,(31976))|0);
     }
     $23 = $5;
     $24 = ($23|0)==(1);
     if (!($24)) {
      break;
     }
     (_strcpy($3,(31976))|0);
     break;
    }
    $25 = HEAP32[7954]|0;
    $26 = ($25|0)==(224);
    if ($26) {
     $27 = (_strlen(128380)|0);
     $28 = ($27>>>0)>(0);
     if ($28) {
      HEAP32[$vararg_buffer1>>2] = 128380;
      $vararg_ptr3 = ((($vararg_buffer1)) + 4|0);
      HEAP32[$vararg_ptr3>>2] = (31976);
      (_snprintf($10,300,15808,$vararg_buffer1)|0);
      $29 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($1|0),3216)|0;
      _ValLabel($11,$10,$29,$$byval_copy,232);
      _memcpy(($1|0),($11|0),3216)|0;
     } else {
      $30 = HEAP32[8088]|0;
      _memcpy(($$byval_copy25|0),($1|0),3216)|0;
      _ValLabel($12,(31976),$30,$$byval_copy25,232);
      _memcpy(($1|0),($12|0),3216)|0;
     }
     $31 = ((($1)) + 84|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==(3);
     if (!($33)) {
      break;
     }
     $34 = ((($1)) + 104|0);
     $35 = (_strlen($34)|0);
     $36 = ($35>>>0)>(0);
     if (!($36)) {
      break;
     }
     $37 = $5;
     $38 = ($37|0)==(0);
     if ($38) {
      $39 = ((($1)) + 104|0);
      (_strcpy($2,$39)|0);
     }
     $40 = $5;
     $41 = ($40|0)==(1);
     if (!($41)) {
      break;
     }
     $42 = ((($1)) + 104|0);
     (_strcpy($3,$42)|0);
     break;
    }
    $43 = HEAP32[7954]|0;
    $44 = ($43|0)==(228);
    if ($44) {
     $45 = ((($7)) + 420|0);
     (_strcpy($45,(31976))|0);
     $46 = ((($7)) + 720|0);
     _getArrayName((31976),$46);
     $47 = ((($7)) + 870|0);
     _getArrayIdx((31976),$47);
     $48 = ((($7)) + 870|0);
     $49 = HEAP8[$48>>0]|0;
     $50 = $49 << 24 >> 24;
     $51 = (_isdigit($50)|0);
     $52 = ($51|0)!=(0);
     do {
      if ($52) {
       $53 = ((($7)) + 870|0);
       $54 = (_atol($53)|0);
       $6 = $54;
      } else {
       $55 = (_strlen(128380)|0);
       $56 = ($55>>>0)>(0);
       if ($56) {
        $57 = ((($7)) + 870|0);
        HEAP32[$vararg_buffer4>>2] = 128380;
        $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
        HEAP32[$vararg_ptr7>>2] = $57;
        (_snprintf($10,300,15808,$vararg_buffer4)|0);
        $58 = HEAP32[8088]|0;
        _memcpy(($$byval_copy26|0),($9|0),3216)|0;
        _ValLabel($13,$10,$58,$$byval_copy26,232);
        _memcpy(($9|0),($13|0),3216)|0;
       } else {
        $59 = ((($7)) + 870|0);
        $60 = HEAP32[8088]|0;
        _memcpy(($$byval_copy27|0),($9|0),3216)|0;
        _ValLabel($14,$59,$60,$$byval_copy27,232);
        _memcpy(($9|0),($14|0),3216)|0;
       }
       $61 = ((($9)) + 84|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($62|0)==(0);
       if ($63) {
        $64 = ((($9)) + 88|0);
        $65 = HEAP32[$64>>2]|0;
        $6 = $65;
        break;
       } else {
        _Error(16065,$vararg_buffer8);
        break;
       }
      }
     } while(0);
     $66 = (_strlen(128380)|0);
     $67 = ($66>>>0)>(0);
     if ($67) {
      _memset(($10|0),0,300)|0;
      $68 = ((($7)) + 720|0);
      HEAP32[$vararg_buffer10>>2] = 128380;
      $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
      HEAP32[$vararg_ptr13>>2] = $68;
      (_snprintf($10,300,15808,$vararg_buffer10)|0);
      $69 = HEAP32[8088]|0;
      _memcpy(($$byval_copy28|0),($7|0),3216)|0;
      _ValLabel($15,$10,$69,$$byval_copy28,232);
      _memcpy(($8|0),($15|0),3216)|0;
     } else {
      $70 = ((($7)) + 720|0);
      $71 = HEAP32[8088]|0;
      _memcpy(($$byval_copy29|0),($7|0),3216)|0;
      _ValLabel($16,$70,$71,$$byval_copy29,232);
      _memcpy(($8|0),($16|0),3216)|0;
     }
     $72 = ((($8)) + 870|0);
     $73 = $6;
     HEAP32[$vararg_buffer14>>2] = $73;
     (_snprintf($72,150,16087,$vararg_buffer14)|0);
     $74 = ((($8)) + 1020|0);
     $75 = HEAP32[$74>>2]|0;
     $76 = ($75|0)<=(0);
     do {
      if ($76) {
       (_printf(16091,$vararg_buffer17)|0);
      } else {
       $77 = $6;
       $78 = ($77|0)<(0);
       if (!($78)) {
        $79 = $6;
        $80 = ((($8)) + 1020|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = (($81) - 1)|0;
        $83 = ($79|0)>($82|0);
        if (!($83)) {
         break;
        }
       }
       _Error(16096,$vararg_buffer19);
      }
     } while(0);
     $84 = ((($8)) + 84|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==(8);
     if ($86) {
      $87 = ((($8)) + 412|0);
      $88 = HEAP32[$87>>2]|0;
      $89 = ($88|0)==(0);
      if ($89) {
       _Error(16224,$vararg_buffer21);
      }
      $90 = $6;
      _memcpy(($$byval_copy30|0),($8|0),3216)|0;
      $91 = (_get_str_array($$byval_copy30,$90,$4)|0);
      $92 = ($91|0)!=(0);
      $93 = $5;
      $94 = ($93|0)==(0);
      if ($92) {
       if ($94) {
        (_strcpy($2,$4)|0);
       }
       $97 = $5;
       $98 = ($97|0)==(1);
       if (!($98)) {
        break;
       }
       (_strcpy($3,$4)|0);
       break;
      } else {
       if ($94) {
        (_strcpy($2,1358125)|0);
       }
       $95 = $5;
       $96 = ($95|0)==(1);
       if (!($96)) {
        break;
       }
       (_strcpy($3,1358125)|0);
       break;
      }
     }
    }
   }
  } while(0);
  $99 = $5;
  $100 = (($99) + 1)|0;
  $5 = $100;
  (_getlex()|0);
  $101 = HEAP32[7954]|0;
  $102 = ($101|0)==(227);
  if (!($102)) {
   break;
  }
  $103 = HEAP8[(31976)>>0]|0;
  $104 = $103 << 24 >> 24;
  $105 = ($104|0)==(44);
  if (!($105)) {
   break;
  }
 }
 _ungetlex();
 $106 = $5;
 $107 = ($106|0)!=(2);
 if ($107) {
  _Error(12313,$vararg_buffer23);
 } else {
  $108 = (_unixRegexBuf($2,$3)|0);
  $109 = ($108|0)==(1);
  $110 = ((($1)) + 88|0);
  if ($109) {
   HEAP32[$110>>2] = 1;
  } else {
   HEAP32[$110>>2] = 0;
  }
  $111 = ((($1)) + 84|0);
  HEAP32[$111>>2] = 0;
  $112 = ((($1)) + 104|0);
  (_strcpy($112,1358125)|0);
 }
 $113 = ((($7)) + 3196|0);
 $114 = HEAP32[$113>>2]|0;
 $115 = ($114|0)!=(0|0);
 if ($115) {
  $116 = ((($7)) + 3196|0);
  $117 = HEAP32[$116>>2]|0;
  _free($117);
 }
 $118 = ((($7)) + 3200|0);
 $119 = HEAP32[$118>>2]|0;
 $120 = ($119|0)!=(0|0);
 if ($120) {
  $121 = ((($7)) + 3200|0);
  $122 = HEAP32[$121>>2]|0;
  _free($122);
 }
 $123 = ((($7)) + 1796|0);
 $124 = HEAP32[$123>>2]|0;
 $125 = ($124|0)!=(0|0);
 if ($125) {
  $126 = ((($7)) + 1796|0);
  $127 = HEAP32[$126>>2]|0;
  _free($127);
 }
 $128 = ((($7)) + 1024|0);
 $129 = HEAP32[$128>>2]|0;
 $130 = ($129|0)!=(0|0);
 if ($130) {
  $131 = ((($7)) + 1024|0);
  $132 = HEAP32[$131>>2]|0;
  _free($132);
 }
 $133 = ((($7)) + 4|0);
 $134 = HEAP32[$133>>2]|0;
 $135 = ($134|0)!=(0|0);
 if ($135) {
  $136 = ((($7)) + 4|0);
  $137 = HEAP32[$136>>2]|0;
  _free($137);
 }
 $138 = ((($7)) + 8|0);
 $139 = HEAP32[$138>>2]|0;
 $140 = ($139|0)!=(0|0);
 if ($140) {
  $141 = ((($7)) + 8|0);
  $142 = HEAP32[$141>>2]|0;
  _free($142);
 }
 $143 = HEAP32[$7>>2]|0;
 $144 = ($143|0)!=(0|0);
 if ($144) {
  $145 = HEAP32[$7>>2]|0;
  _free($145);
 }
 $146 = ((($9)) + 3196|0);
 $147 = HEAP32[$146>>2]|0;
 $148 = ($147|0)!=(0|0);
 if ($148) {
  $149 = ((($9)) + 3196|0);
  $150 = HEAP32[$149>>2]|0;
  _free($150);
 }
 $151 = ((($9)) + 3200|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($152|0)!=(0|0);
 if ($153) {
  $154 = ((($9)) + 3200|0);
  $155 = HEAP32[$154>>2]|0;
  _free($155);
 }
 $156 = ((($9)) + 1796|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = ($157|0)!=(0|0);
 if ($158) {
  $159 = ((($9)) + 1796|0);
  $160 = HEAP32[$159>>2]|0;
  _free($160);
 }
 $161 = ((($9)) + 1024|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)!=(0|0);
 if ($163) {
  $164 = ((($9)) + 1024|0);
  $165 = HEAP32[$164>>2]|0;
  _free($165);
 }
 $166 = ((($9)) + 4|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)!=(0|0);
 if ($168) {
  $169 = ((($9)) + 4|0);
  $170 = HEAP32[$169>>2]|0;
  _free($170);
 }
 $171 = ((($9)) + 8|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)!=(0|0);
 if ($173) {
  $174 = ((($9)) + 8|0);
  $175 = HEAP32[$174>>2]|0;
  _free($175);
 }
 $176 = HEAP32[$9>>2]|0;
 $177 = ($176|0)!=(0|0);
 if ($177) {
  $178 = HEAP32[$9>>2]|0;
  _free($178);
 }
 $179 = ((($8)) + 3196|0);
 $180 = HEAP32[$179>>2]|0;
 $181 = ($180|0)!=(0|0);
 if ($181) {
  $182 = ((($8)) + 3196|0);
  $183 = HEAP32[$182>>2]|0;
  _free($183);
 }
 $184 = ((($8)) + 3200|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = ($185|0)!=(0|0);
 if ($186) {
  $187 = ((($8)) + 3200|0);
  $188 = HEAP32[$187>>2]|0;
  _free($188);
 }
 $189 = ((($8)) + 1796|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = ($190|0)!=(0|0);
 if ($191) {
  $192 = ((($8)) + 1796|0);
  $193 = HEAP32[$192>>2]|0;
  _free($193);
 }
 $194 = ((($8)) + 1024|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = ($195|0)!=(0|0);
 if ($196) {
  $197 = ((($8)) + 1024|0);
  $198 = HEAP32[$197>>2]|0;
  _free($198);
 }
 $199 = ((($8)) + 4|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = ($200|0)!=(0|0);
 if ($201) {
  $202 = ((($8)) + 4|0);
  $203 = HEAP32[$202>>2]|0;
  _free($203);
 }
 $204 = ((($8)) + 8|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ($205|0)!=(0|0);
 if ($206) {
  $207 = ((($8)) + 8|0);
  $208 = HEAP32[$207>>2]|0;
  _free($208);
 }
 $209 = HEAP32[$8>>2]|0;
 $210 = ($209|0)!=(0|0);
 if (!($210)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $211 = HEAP32[$8>>2]|0;
 _free($211);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcAMBIL_DIR($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0;
 var $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0;
 var $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr27 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 38544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(38544|0);
 $$byval_copy33 = sp + 32256|0;
 $$byval_copy32 = sp + 29040|0;
 $$byval_copy31 = sp + 36720|0;
 $$byval_copy30 = sp + 25824|0;
 $$byval_copy = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer24 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 38236|0;
 $3 = sp + 37936|0;
 $7 = sp + 37336|0;
 $8 = sp + 16080|0;
 $9 = sp + 12864|0;
 $11 = sp + 35784|0;
 $12 = sp + 37032|0;
 $13 = sp + 9648|0;
 $14 = sp + 6432|0;
 $15 = sp + 35472|0;
 $16 = sp + 3216|0;
 $17 = sp;
 $4 = 0;
 $5 = 0;
 $10 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 _memset(($8|0),0,3216)|0;
 _memset(($9|0),0,3216)|0;
 _memset(($7|0),0,600)|0;
 _memset(($11|0),0,920)|0;
 _memset(($12|0),0,300)|0;
 $6 = 0;
 (_getlex()|0);
 $18 = HEAP32[7954]|0;
 $19 = ($18|0)==(223);
 do {
  if ($19) {
   _Error(12342,$vararg_buffer);
  } else {
   $20 = HEAP32[7954]|0;
   $21 = ($20|0)==(226);
   if ($21) {
    _Error(12342,$vararg_buffer2);
    break;
   }
   $22 = HEAP32[7954]|0;
   $23 = ($22|0)==(225);
   if ($23) {
    $6 = 0;
    $24 = (_dir_content((31976))|0);
    $6 = $24;
    $25 = (_dir_content((31976))|0);
    $26 = ((($1)) + 1024|0);
    HEAP32[$26>>2] = $25;
    $5 = 0;
    $27 = $6;
    $28 = ($27|0)!=(0|0);
    if ($28) {
     $4 = 0;
     while(1) {
      $29 = $4;
      $30 = $6;
      $31 = (($30) + ($29<<2)|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = ($32|0)!=(0|0);
      if (!($33)) {
       break;
      }
      $34 = $5;
      $35 = (($34) + 1)|0;
      $5 = $35;
      $36 = $4;
      $37 = (($36) + 1)|0;
      $4 = $37;
     }
     $38 = $6;
     _dir_free($38);
    }
    $39 = $5;
    $40 = ((($1)) + 1020|0);
    HEAP32[$40>>2] = $39;
    $41 = ((($1)) + 1028|0);
    HEAP32[$41>>2] = 1;
    $42 = ((($1)) + 84|0);
    HEAP32[$42>>2] = 10;
    break;
   }
   $43 = HEAP32[7954]|0;
   $44 = ($43|0)==(228);
   if (!($44)) {
    $123 = (_strlen(128380)|0);
    $124 = ($123>>>0)>(0);
    if ($124) {
     HEAP32[$vararg_buffer24>>2] = 128380;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = (31976);
     (_snprintf($12,300,15808,$vararg_buffer24)|0);
     $125 = HEAP32[8088]|0;
     _memcpy(($$byval_copy32|0),($1|0),3216)|0;
     _ValLabel($16,$12,$125,$$byval_copy32,232);
     _memcpy(($1|0),($16|0),3216)|0;
    } else {
     $126 = HEAP32[8088]|0;
     _memcpy(($$byval_copy33|0),($1|0),3216)|0;
     _ValLabel($17,(31976),$126,$$byval_copy33,232);
     _memcpy(($1|0),($17|0),3216)|0;
    }
    $127 = ((($1)) + 84|0);
    $128 = HEAP32[$127>>2]|0;
    $129 = ($128|0)==(3);
    if (!($129)) {
     _Error(12342,$vararg_buffer28);
     break;
    }
    $6 = 0;
    $130 = ((($1)) + 104|0);
    $131 = (_dir_content($130)|0);
    $6 = $131;
    $132 = ((($1)) + 104|0);
    $133 = (_dir_content($132)|0);
    $134 = ((($1)) + 1024|0);
    HEAP32[$134>>2] = $133;
    $5 = 0;
    $135 = $6;
    $136 = ($135|0)!=(0|0);
    if ($136) {
     $4 = 0;
     while(1) {
      $137 = $4;
      $138 = $6;
      $139 = (($138) + ($137<<2)|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)!=(0|0);
      if (!($141)) {
       break;
      }
      $142 = $5;
      $143 = (($142) + 1)|0;
      $5 = $143;
      $144 = $4;
      $145 = (($144) + 1)|0;
      $4 = $145;
     }
     $146 = $6;
     _dir_free($146);
    }
    $147 = $5;
    $148 = ((($1)) + 1020|0);
    HEAP32[$148>>2] = $147;
    $149 = ((($1)) + 1028|0);
    HEAP32[$149>>2] = 1;
    $150 = ((($1)) + 84|0);
    HEAP32[$150>>2] = 10;
    break;
   }
   $45 = (_strlen((31976))|0);
   $46 = ($45>>>0)>(0);
   if ($46) {
    $47 = ((($8)) + 420|0);
    (_strcpy($47,(31976))|0);
    $48 = ((($8)) + 720|0);
    _getArrayName((31976),$48);
    $49 = ((($8)) + 870|0);
    _getArrayIdx((31976),$49);
    $50 = (_strlen(128380)|0);
    $51 = ($50>>>0)>(0);
    if ($51) {
     $52 = ((($8)) + 720|0);
     HEAP32[$vararg_buffer4>>2] = 128380;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $52;
     (_snprintf($12,300,15808,$vararg_buffer4)|0);
     $53 = ((($8)) + 720|0);
     _memset(($53|0),0,150)|0;
     $54 = ((($8)) + 720|0);
     (_strcpy($54,$12)|0);
     $55 = ((($8)) + 870|0);
     $56 = HEAP8[$55>>0]|0;
     $57 = $56 << 24 >> 24;
     $58 = (_isdigit($57)|0);
     $59 = ($58|0)!=(0);
     if (!($59)) {
      _memset(($12|0),0,300)|0;
      $60 = ((($8)) + 870|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $60;
      (_snprintf($12,300,15808,$vararg_buffer7)|0);
      $61 = ((($8)) + 870|0);
      _memset(($61|0),0,150)|0;
      $62 = ((($8)) + 870|0);
      (_strcpy($62,$12)|0);
     }
    }
    $63 = ((($8)) + 870|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $66 = (_isdigit($65)|0);
    $67 = ($66|0)!=(0);
    $68 = ((($8)) + 870|0);
    do {
     if ($67) {
      $69 = (_atol($68)|0);
      $10 = $69;
     } else {
      $70 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($9|0),3216)|0;
      _ValLabel($13,$68,$70,$$byval_copy,232);
      _memcpy(($9|0),($13|0),3216)|0;
      $71 = ((($9)) + 84|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ($72|0)==(0);
      if ($73) {
       $74 = ((($9)) + 88|0);
       $75 = HEAP32[$74>>2]|0;
       $10 = $75;
       break;
      } else {
       _Error(16065,$vararg_buffer11);
       break;
      }
     }
    } while(0);
    $76 = ((($8)) + 720|0);
    $77 = HEAP32[8088]|0;
    _memcpy(($$byval_copy30|0),($8|0),3216)|0;
    _ValLabel($14,$76,$77,$$byval_copy30,232);
    _memcpy(($8|0),($14|0),3216)|0;
    $78 = ((($8)) + 870|0);
    $79 = $10;
    HEAP32[$vararg_buffer13>>2] = $79;
    (_snprintf($78,150,16087,$vararg_buffer13)|0);
    $80 = $10;
    $81 = ($80|0)<(0);
    $82 = $10;
    $83 = ($82|0)>(99999000);
    $or$cond = $81 | $83;
    if ($or$cond) {
     _Error(16096,$vararg_buffer16);
    }
    $84 = ((($8)) + 84|0);
    $85 = HEAP32[$84>>2]|0;
    $86 = ($85|0)==(8);
    if ($86) {
     $87 = ((($8)) + 412|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ($88|0)!=(0);
     if ($89) {
      $90 = ((($8)) + 404|0);
      $91 = HEAP32[$90>>2]|0;
      $92 = ($91|0)==(0);
      if ($92) {
       _Error(12372,$vararg_buffer18);
      }
      _memset(((72140)|0),0,256)|0;
      _memset(((71832)|0),0,300)|0;
      $93 = ((($8)) + 720|0);
      (_strcpy((72140),$93)|0);
      $94 = ((($8)) + 412|0);
      $95 = HEAP32[$94>>2]|0;
      HEAP32[8086] = $95;
      $96 = HEAP32[8086]|0;
      $97 = ($96|0)<(0);
      if ($97) {
       (_printf(16303,$vararg_buffer20)|0);
      } else {
       $98 = HEAP32[8086]|0;
       HEAP32[17956] = $98;
       $99 = $10;
       HEAP32[(71828)>>2] = $99;
       _memcpy(($$byval_copy31|0),(71824|0),312)|0;
       $100 = (_string_findData($$byval_copy31)|0);
       HEAP32[8074] = $100;
       $101 = HEAP32[8074]|0;
       $102 = ($101|0)<(0);
       if (!($102)) {
        $103 = HEAP32[8074]|0;
        _string_getElement($15,$103);
        _memcpy((71824|0),($15|0),312)|0;
       }
      }
      $6 = 0;
      $104 = (_dir_content((71832))|0);
      $6 = $104;
      $105 = (_dir_content((71832))|0);
      $106 = ((($1)) + 1024|0);
      HEAP32[$106>>2] = $105;
      $5 = 0;
      $107 = $6;
      $108 = ($107|0)!=(0|0);
      if ($108) {
       $4 = 0;
       while(1) {
        $109 = $4;
        $110 = $6;
        $111 = (($110) + ($109<<2)|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = ($112|0)!=(0|0);
        if (!($113)) {
         break;
        }
        $114 = $5;
        $115 = (($114) + 1)|0;
        $5 = $115;
        $116 = $4;
        $117 = (($116) + 1)|0;
        $4 = $117;
       }
       $118 = $6;
       _dir_free($118);
      }
      $119 = $5;
      $120 = ((($1)) + 1020|0);
      HEAP32[$120>>2] = $119;
      $121 = ((($1)) + 1028|0);
      HEAP32[$121>>2] = 1;
      $122 = ((($1)) + 84|0);
      HEAP32[$122>>2] = 10;
      break;
     }
    }
    _Error(12342,$vararg_buffer22);
   }
  }
 } while(0);
 $151 = ((($8)) + 3196|0);
 $152 = HEAP32[$151>>2]|0;
 $153 = ($152|0)!=(0|0);
 if ($153) {
  $154 = ((($8)) + 3196|0);
  $155 = HEAP32[$154>>2]|0;
  _free($155);
 }
 $156 = ((($8)) + 3200|0);
 $157 = HEAP32[$156>>2]|0;
 $158 = ($157|0)!=(0|0);
 if ($158) {
  $159 = ((($8)) + 3200|0);
  $160 = HEAP32[$159>>2]|0;
  _free($160);
 }
 $161 = ((($8)) + 1796|0);
 $162 = HEAP32[$161>>2]|0;
 $163 = ($162|0)!=(0|0);
 if ($163) {
  $164 = ((($8)) + 1796|0);
  $165 = HEAP32[$164>>2]|0;
  _free($165);
 }
 $166 = ((($8)) + 1024|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)!=(0|0);
 if ($168) {
  $169 = ((($8)) + 1024|0);
  $170 = HEAP32[$169>>2]|0;
  _free($170);
 }
 $171 = ((($8)) + 4|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)!=(0|0);
 if ($173) {
  $174 = ((($8)) + 4|0);
  $175 = HEAP32[$174>>2]|0;
  _free($175);
 }
 $176 = ((($8)) + 8|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ($177|0)!=(0|0);
 if ($178) {
  $179 = ((($8)) + 8|0);
  $180 = HEAP32[$179>>2]|0;
  _free($180);
 }
 $181 = HEAP32[$8>>2]|0;
 $182 = ($181|0)!=(0|0);
 if ($182) {
  $183 = HEAP32[$8>>2]|0;
  _free($183);
 }
 $184 = ((($9)) + 3196|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = ($185|0)!=(0|0);
 if ($186) {
  $187 = ((($9)) + 3196|0);
  $188 = HEAP32[$187>>2]|0;
  _free($188);
 }
 $189 = ((($9)) + 3200|0);
 $190 = HEAP32[$189>>2]|0;
 $191 = ($190|0)!=(0|0);
 if ($191) {
  $192 = ((($9)) + 3200|0);
  $193 = HEAP32[$192>>2]|0;
  _free($193);
 }
 $194 = ((($9)) + 1796|0);
 $195 = HEAP32[$194>>2]|0;
 $196 = ($195|0)!=(0|0);
 if ($196) {
  $197 = ((($9)) + 1796|0);
  $198 = HEAP32[$197>>2]|0;
  _free($198);
 }
 $199 = ((($9)) + 1024|0);
 $200 = HEAP32[$199>>2]|0;
 $201 = ($200|0)!=(0|0);
 if ($201) {
  $202 = ((($9)) + 1024|0);
  $203 = HEAP32[$202>>2]|0;
  _free($203);
 }
 $204 = ((($9)) + 4|0);
 $205 = HEAP32[$204>>2]|0;
 $206 = ($205|0)!=(0|0);
 if ($206) {
  $207 = ((($9)) + 4|0);
  $208 = HEAP32[$207>>2]|0;
  _free($208);
 }
 $209 = ((($9)) + 8|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = ($210|0)!=(0|0);
 if ($211) {
  $212 = ((($9)) + 8|0);
  $213 = HEAP32[$212>>2]|0;
  _free($213);
 }
 $214 = HEAP32[$9>>2]|0;
 $215 = ($214|0)!=(0|0);
 if ($215) {
  $216 = HEAP32[$9>>2]|0;
  _free($216);
 }
 $217 = ((($11)) + 8|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = ($218|0)!=(0|0);
 if ($219) {
  $220 = ((($11)) + 8|0);
  $221 = HEAP32[$220>>2]|0;
  _free($221);
 }
 $222 = ((($11)) + 916|0);
 $223 = HEAP32[$222>>2]|0;
 $224 = ($223|0)!=(0|0);
 if ($224) {
  $225 = ((($11)) + 916|0);
  $226 = HEAP32[$225>>2]|0;
  _free($226);
 }
 $227 = $6;
 $228 = ($227|0)!=(0|0);
 if (!($228)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $4 = 0;
 while(1) {
  $229 = $4;
  $230 = $6;
  $231 = (($230) + ($229<<2)|0);
  $232 = HEAP32[$231>>2]|0;
  $233 = ($232|0)!=(0|0);
  if (!($233)) {
   break;
  }
  $234 = $5;
  $235 = (($234) + 1)|0;
  $5 = $235;
  $236 = $4;
  $237 = (($236) + 1)|0;
  $4 = $237;
 }
 $238 = $6;
 $239 = ($238|0)!=(0|0);
 if (!($239)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $240 = $6;
 $241 = ((($240)) + -4|0);
 $6 = $241;
 $242 = $6;
 $243 = HEAP32[$242>>2]|0;
 _free($243);
 $244 = $6;
 _free($244);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _dir_content($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = $0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $9 = $2;
 $10 = ($9|0)==(0|0);
 if ($10) {
  $1 = 0;
  $57 = $1;
  STACKTOP = sp;return ($57|0);
 }
 $11 = $2;
 $12 = (_strlen($11)|0);
 $13 = (($12) + 1)|0;
 $14 = (_malloc($13)|0);
 $7 = $14;
 $15 = $7;
 $16 = ($15|0)==(0|0);
 if ($16) {
  $1 = 0;
  $57 = $1;
  STACKTOP = sp;return ($57|0);
 }
 $17 = $7;
 $18 = $2;
 (_strcpy($17,$18)|0);
 HEAP32[18485] = 0;
 $19 = $7;
 $20 = (_opendir($19)|0);
 HEAP32[18485] = $20;
 $21 = ($20|0)==(0|0);
 if ($21) {
  _perror(12416);
  _exit(-1);
  // unreachable;
 }
 $5 = 0;
 $22 = HEAP32[18485]|0;
 $23 = (_readdir($22)|0);
 $3 = $23;
 while(1) {
  $24 = $3;
  $25 = ($24|0)!=(0|0);
  $26 = $4;
  if (!($25)) {
   break;
  }
  $27 = $5;
  $28 = (($27) + 3)|0;
  $29 = $28<<2;
  $30 = (_realloc($26,$29)|0);
  $8 = $30;
  $31 = $8;
  $32 = ($31|0)==(0|0);
  if ($32) {
   label = 10;
   break;
  }
  $35 = $3;
  $36 = ((($35)) + 11|0);
  $37 = ($36|0)!=(0|0);
  if ($37) {
   $38 = $3;
   $39 = ((($38)) + 11|0);
   $40 = $5;
   $41 = (($40) + 1)|0;
   $5 = $41;
   $42 = $8;
   $43 = (($42) + ($41<<2)|0);
   HEAP32[$43>>2] = $39;
   $44 = $8;
   $4 = $44;
  }
  $45 = HEAP32[18485]|0;
  $46 = (_readdir($45)|0);
  $3 = $46;
 }
 if ((label|0) == 10) {
  $33 = $4;
  _free($33);
  $34 = $7;
  _free($34);
  $1 = 0;
  $57 = $1;
  STACKTOP = sp;return ($57|0);
 }
 $47 = ($26|0)!=(0|0);
 $48 = $7;
 if ($47) {
  $49 = $4;
  HEAP32[$49>>2] = $48;
  $50 = $4;
  $51 = ((($50)) + 4|0);
  $4 = $51;
  $52 = $5;
  $53 = $4;
  $54 = (($53) + ($52<<2)|0);
  HEAP32[$54>>2] = 0;
 } else {
  _free($48);
  $55 = HEAP32[18485]|0;
  (_closedir($55)|0);
 }
 $56 = $4;
 $1 = $56;
 $57 = $1;
 STACKTOP = sp;return ($57|0);
}
function _dir_free($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = ($2|0)!=(0|0);
 if (!($3)) {
  STACKTOP = sp;return;
 }
 $4 = $1;
 $5 = ((($4)) + -4|0);
 $1 = $5;
 $6 = $1;
 $7 = HEAP32[$6>>2]|0;
 _free($7);
 $8 = $1;
 _free($8);
 STACKTOP = sp;return;
}
function _funcBUAT_DIR($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr27 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37328|0);
 $$byval_copy33 = sp + 32256|0;
 $$byval_copy32 = sp + 29040|0;
 $$byval_copy31 = sp + 36712|0;
 $$byval_copy30 = sp + 25824|0;
 $$byval_copy = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer24 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $5 = sp + 35784|0;
 $6 = sp + 37024|0;
 $7 = sp + 9648|0;
 $8 = sp + 6432|0;
 $9 = sp + 35472|0;
 $10 = sp + 3216|0;
 $11 = sp;
 $4 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,920)|0;
 _memset(($6|0),0,300)|0;
 (_getlex()|0);
 $12 = HEAP32[7954]|0;
 $13 = ($12|0)==(223);
 do {
  if ($13) {
   _Error(12431,$vararg_buffer);
  } else {
   $14 = HEAP32[7954]|0;
   $15 = ($14|0)==(226);
   if ($15) {
    _Error(12431,$vararg_buffer2);
    break;
   }
   $16 = HEAP32[7954]|0;
   $17 = ($16|0)==(225);
   if ($17) {
    $18 = (_mkdir((31976),493)|0);
    $19 = ((($1)) + 88|0);
    HEAP32[$19>>2] = $18;
    $20 = ((($1)) + 84|0);
    HEAP32[$20>>2] = 0;
    break;
   }
   $21 = HEAP32[7954]|0;
   $22 = ($21|0)==(228);
   if (!($22)) {
    $85 = (_strlen(128380)|0);
    $86 = ($85>>>0)>(0);
    if ($86) {
     HEAP32[$vararg_buffer24>>2] = 128380;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = (31976);
     (_snprintf($6,300,15808,$vararg_buffer24)|0);
     $87 = HEAP32[8088]|0;
     _memcpy(($$byval_copy32|0),($1|0),3216)|0;
     _ValLabel($10,$6,$87,$$byval_copy32,232);
     _memcpy(($1|0),($10|0),3216)|0;
    } else {
     $88 = HEAP32[8088]|0;
     _memcpy(($$byval_copy33|0),($1|0),3216)|0;
     _ValLabel($11,(31976),$88,$$byval_copy33,232);
     _memcpy(($1|0),($11|0),3216)|0;
    }
    $89 = ((($1)) + 84|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($90|0)==(3);
    if ($91) {
     $92 = ((($1)) + 104|0);
     $93 = (_mkdir($92,493)|0);
     $94 = ((($1)) + 88|0);
     HEAP32[$94>>2] = $93;
     $95 = ((($1)) + 84|0);
     HEAP32[$95>>2] = 0;
     break;
    } else {
     _Error(12431,$vararg_buffer28);
     break;
    }
   }
   $23 = (_strlen((31976))|0);
   $24 = ($23>>>0)>(0);
   if ($24) {
    $25 = ((($2)) + 420|0);
    (_strcpy($25,(31976))|0);
    $26 = ((($2)) + 720|0);
    _getArrayName((31976),$26);
    $27 = ((($2)) + 870|0);
    _getArrayIdx((31976),$27);
    $28 = (_strlen(128380)|0);
    $29 = ($28>>>0)>(0);
    if ($29) {
     $30 = ((($2)) + 720|0);
     HEAP32[$vararg_buffer4>>2] = 128380;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $30;
     (_snprintf($6,300,15808,$vararg_buffer4)|0);
     $31 = ((($2)) + 720|0);
     _memset(($31|0),0,150)|0;
     $32 = ((($2)) + 720|0);
     (_strcpy($32,$6)|0);
     $33 = ((($2)) + 870|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = (_isdigit($35)|0);
     $37 = ($36|0)!=(0);
     if (!($37)) {
      _memset(($6|0),0,300)|0;
      $38 = ((($2)) + 870|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $38;
      (_snprintf($6,300,15808,$vararg_buffer7)|0);
      $39 = ((($2)) + 870|0);
      _memset(($39|0),0,150)|0;
      $40 = ((($2)) + 870|0);
      (_strcpy($40,$6)|0);
     }
    }
    $41 = ((($2)) + 870|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42 << 24 >> 24;
    $44 = (_isdigit($43)|0);
    $45 = ($44|0)!=(0);
    $46 = ((($2)) + 870|0);
    do {
     if ($45) {
      $47 = (_atol($46)|0);
      $4 = $47;
     } else {
      $48 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($3|0),3216)|0;
      _ValLabel($7,$46,$48,$$byval_copy,232);
      _memcpy(($3|0),($7|0),3216)|0;
      $49 = ((($3)) + 84|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = ((($3)) + 88|0);
       $53 = HEAP32[$52>>2]|0;
       $4 = $53;
       break;
      } else {
       _Error(16065,$vararg_buffer11);
       break;
      }
     }
    } while(0);
    $54 = ((($2)) + 720|0);
    $55 = HEAP32[8088]|0;
    _memcpy(($$byval_copy30|0),($2|0),3216)|0;
    _ValLabel($8,$54,$55,$$byval_copy30,232);
    _memcpy(($2|0),($8|0),3216)|0;
    $56 = ((($2)) + 870|0);
    $57 = $4;
    HEAP32[$vararg_buffer13>>2] = $57;
    (_snprintf($56,150,16087,$vararg_buffer13)|0);
    $58 = $4;
    $59 = ($58|0)<(0);
    $60 = $4;
    $61 = ($60|0)>(99999000);
    $or$cond = $59 | $61;
    if ($or$cond) {
     _Error(16096,$vararg_buffer16);
    }
    $62 = ((($2)) + 84|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(8);
    if ($64) {
     $65 = ((($2)) + 412|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)!=(0);
     if ($67) {
      $68 = ((($2)) + 404|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0);
      if ($70) {
       _Error(12460,$vararg_buffer18);
      }
      _memset(((72140)|0),0,256)|0;
      _memset(((71832)|0),0,300)|0;
      $71 = ((($2)) + 720|0);
      (_strcpy((72140),$71)|0);
      $72 = ((($2)) + 412|0);
      $73 = HEAP32[$72>>2]|0;
      HEAP32[8086] = $73;
      $74 = HEAP32[8086]|0;
      $75 = ($74|0)<(0);
      if ($75) {
       (_printf(16303,$vararg_buffer20)|0);
      } else {
       $76 = HEAP32[8086]|0;
       HEAP32[17956] = $76;
       $77 = $4;
       HEAP32[(71828)>>2] = $77;
       _memcpy(($$byval_copy31|0),(71824|0),312)|0;
       $78 = (_string_findData($$byval_copy31)|0);
       HEAP32[8074] = $78;
       $79 = HEAP32[8074]|0;
       $80 = ($79|0)<(0);
       if (!($80)) {
        $81 = HEAP32[8074]|0;
        _string_getElement($9,$81);
        _memcpy((71824|0),($9|0),312)|0;
       }
      }
      $82 = (_mkdir((71832),493)|0);
      $83 = ((($1)) + 88|0);
      HEAP32[$83>>2] = $82;
      $84 = ((($1)) + 84|0);
      HEAP32[$84>>2] = 0;
      break;
     }
    }
    _Error(12431,$vararg_buffer22);
   }
  }
 } while(0);
 $96 = ((($2)) + 3196|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)!=(0|0);
 if ($98) {
  $99 = ((($2)) + 3196|0);
  $100 = HEAP32[$99>>2]|0;
  _free($100);
 }
 $101 = ((($2)) + 3200|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = ((($2)) + 3200|0);
  $105 = HEAP32[$104>>2]|0;
  _free($105);
 }
 $106 = ((($2)) + 1796|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = ((($2)) + 1796|0);
  $110 = HEAP32[$109>>2]|0;
  _free($110);
 }
 $111 = ((($2)) + 1024|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)!=(0|0);
 if ($113) {
  $114 = ((($2)) + 1024|0);
  $115 = HEAP32[$114>>2]|0;
  _free($115);
 }
 $116 = ((($2)) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = ((($2)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  _free($120);
 }
 $121 = ((($2)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = ((($2)) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
 }
 $126 = HEAP32[$2>>2]|0;
 $127 = ($126|0)!=(0|0);
 if ($127) {
  $128 = HEAP32[$2>>2]|0;
  _free($128);
 }
 $129 = ((($3)) + 3196|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)!=(0|0);
 if ($131) {
  $132 = ((($3)) + 3196|0);
  $133 = HEAP32[$132>>2]|0;
  _free($133);
 }
 $134 = ((($3)) + 3200|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = ((($3)) + 3200|0);
  $138 = HEAP32[$137>>2]|0;
  _free($138);
 }
 $139 = ((($3)) + 1796|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = ((($3)) + 1796|0);
  $143 = HEAP32[$142>>2]|0;
  _free($143);
 }
 $144 = ((($3)) + 1024|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = ((($3)) + 1024|0);
  $148 = HEAP32[$147>>2]|0;
  _free($148);
 }
 $149 = ((($3)) + 4|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($150|0)!=(0|0);
 if ($151) {
  $152 = ((($3)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  _free($153);
 }
 $154 = ((($3)) + 8|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = ((($3)) + 8|0);
  $158 = HEAP32[$157>>2]|0;
  _free($158);
 }
 $159 = HEAP32[$3>>2]|0;
 $160 = ($159|0)!=(0|0);
 if ($160) {
  $161 = HEAP32[$3>>2]|0;
  _free($161);
 }
 $162 = ((($5)) + 8|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)!=(0|0);
 if ($164) {
  $165 = ((($5)) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  _free($166);
 }
 $167 = ((($5)) + 916|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ($168|0)!=(0|0);
 if (!($169)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $170 = ((($5)) + 916|0);
 $171 = HEAP32[$170>>2]|0;
 _free($171);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcHAPUS_DIR($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr27 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37328|0);
 $$byval_copy33 = sp + 32256|0;
 $$byval_copy32 = sp + 29040|0;
 $$byval_copy31 = sp + 36712|0;
 $$byval_copy30 = sp + 25824|0;
 $$byval_copy = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer24 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $5 = sp + 35784|0;
 $6 = sp + 37024|0;
 $7 = sp + 9648|0;
 $8 = sp + 6432|0;
 $9 = sp + 35472|0;
 $10 = sp + 3216|0;
 $11 = sp;
 $4 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,920)|0;
 _memset(($6|0),0,300)|0;
 (_getlex()|0);
 $12 = HEAP32[7954]|0;
 $13 = ($12|0)==(223);
 do {
  if ($13) {
   _Error(12503,$vararg_buffer);
  } else {
   $14 = HEAP32[7954]|0;
   $15 = ($14|0)==(226);
   if ($15) {
    _Error(12503,$vararg_buffer2);
    break;
   }
   $16 = HEAP32[7954]|0;
   $17 = ($16|0)==(225);
   if ($17) {
    $18 = (_rmdir((31976))|0);
    $19 = ((($1)) + 88|0);
    HEAP32[$19>>2] = $18;
    $20 = ((($1)) + 84|0);
    HEAP32[$20>>2] = 0;
    break;
   }
   $21 = HEAP32[7954]|0;
   $22 = ($21|0)==(228);
   if (!($22)) {
    $85 = (_strlen(128380)|0);
    $86 = ($85>>>0)>(0);
    if ($86) {
     HEAP32[$vararg_buffer24>>2] = 128380;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = (31976);
     (_snprintf($6,300,15808,$vararg_buffer24)|0);
     $87 = HEAP32[8088]|0;
     _memcpy(($$byval_copy32|0),($1|0),3216)|0;
     _ValLabel($10,$6,$87,$$byval_copy32,232);
     _memcpy(($1|0),($10|0),3216)|0;
    } else {
     $88 = HEAP32[8088]|0;
     _memcpy(($$byval_copy33|0),($1|0),3216)|0;
     _ValLabel($11,(31976),$88,$$byval_copy33,232);
     _memcpy(($1|0),($11|0),3216)|0;
    }
    $89 = ((($1)) + 84|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($90|0)==(3);
    if ($91) {
     $92 = ((($1)) + 104|0);
     $93 = (_rmdir($92)|0);
     $94 = ((($1)) + 88|0);
     HEAP32[$94>>2] = $93;
     $95 = ((($1)) + 84|0);
     HEAP32[$95>>2] = 0;
     break;
    } else {
     _Error(12503,$vararg_buffer28);
     break;
    }
   }
   $23 = (_strlen((31976))|0);
   $24 = ($23>>>0)>(0);
   if ($24) {
    $25 = ((($2)) + 420|0);
    (_strcpy($25,(31976))|0);
    $26 = ((($2)) + 720|0);
    _getArrayName((31976),$26);
    $27 = ((($2)) + 870|0);
    _getArrayIdx((31976),$27);
    $28 = (_strlen(128380)|0);
    $29 = ($28>>>0)>(0);
    if ($29) {
     $30 = ((($2)) + 720|0);
     HEAP32[$vararg_buffer4>>2] = 128380;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $30;
     (_snprintf($6,300,15808,$vararg_buffer4)|0);
     $31 = ((($2)) + 720|0);
     _memset(($31|0),0,150)|0;
     $32 = ((($2)) + 720|0);
     (_strcpy($32,$6)|0);
     $33 = ((($2)) + 870|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = (_isdigit($35)|0);
     $37 = ($36|0)!=(0);
     if (!($37)) {
      _memset(($6|0),0,300)|0;
      $38 = ((($2)) + 870|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $38;
      (_snprintf($6,300,15808,$vararg_buffer7)|0);
      $39 = ((($2)) + 870|0);
      _memset(($39|0),0,150)|0;
      $40 = ((($2)) + 870|0);
      (_strcpy($40,$6)|0);
     }
    }
    $41 = ((($2)) + 870|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42 << 24 >> 24;
    $44 = (_isdigit($43)|0);
    $45 = ($44|0)!=(0);
    $46 = ((($2)) + 870|0);
    do {
     if ($45) {
      $47 = (_atol($46)|0);
      $4 = $47;
     } else {
      $48 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($3|0),3216)|0;
      _ValLabel($7,$46,$48,$$byval_copy,232);
      _memcpy(($3|0),($7|0),3216)|0;
      $49 = ((($3)) + 84|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = ((($3)) + 88|0);
       $53 = HEAP32[$52>>2]|0;
       $4 = $53;
       break;
      } else {
       _Error(16065,$vararg_buffer11);
       break;
      }
     }
    } while(0);
    $54 = ((($2)) + 720|0);
    $55 = HEAP32[8088]|0;
    _memcpy(($$byval_copy30|0),($2|0),3216)|0;
    _ValLabel($8,$54,$55,$$byval_copy30,232);
    _memcpy(($2|0),($8|0),3216)|0;
    $56 = ((($2)) + 870|0);
    $57 = $4;
    HEAP32[$vararg_buffer13>>2] = $57;
    (_snprintf($56,150,16087,$vararg_buffer13)|0);
    $58 = $4;
    $59 = ($58|0)<(0);
    $60 = $4;
    $61 = ($60|0)>(99999000);
    $or$cond = $59 | $61;
    if ($or$cond) {
     _Error(16096,$vararg_buffer16);
    }
    $62 = ((($2)) + 84|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(8);
    if ($64) {
     $65 = ((($2)) + 412|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)!=(0);
     if ($67) {
      $68 = ((($2)) + 404|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0);
      if ($70) {
       _Error(12460,$vararg_buffer18);
      }
      _memset(((72140)|0),0,256)|0;
      _memset(((71832)|0),0,300)|0;
      $71 = ((($2)) + 720|0);
      (_strcpy((72140),$71)|0);
      $72 = ((($2)) + 412|0);
      $73 = HEAP32[$72>>2]|0;
      HEAP32[8086] = $73;
      $74 = HEAP32[8086]|0;
      $75 = ($74|0)<(0);
      if ($75) {
       (_printf(16303,$vararg_buffer20)|0);
      } else {
       $76 = HEAP32[8086]|0;
       HEAP32[17956] = $76;
       $77 = $4;
       HEAP32[(71828)>>2] = $77;
       _memcpy(($$byval_copy31|0),(71824|0),312)|0;
       $78 = (_string_findData($$byval_copy31)|0);
       HEAP32[8074] = $78;
       $79 = HEAP32[8074]|0;
       $80 = ($79|0)<(0);
       if (!($80)) {
        $81 = HEAP32[8074]|0;
        _string_getElement($9,$81);
        _memcpy((71824|0),($9|0),312)|0;
       }
      }
      $82 = (_rmdir((71832))|0);
      $83 = ((($1)) + 88|0);
      HEAP32[$83>>2] = $82;
      $84 = ((($1)) + 84|0);
      HEAP32[$84>>2] = 0;
      break;
     }
    }
    _Error(12503,$vararg_buffer22);
   }
  }
 } while(0);
 $96 = ((($2)) + 3196|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)!=(0|0);
 if ($98) {
  $99 = ((($2)) + 3196|0);
  $100 = HEAP32[$99>>2]|0;
  _free($100);
 }
 $101 = ((($2)) + 3200|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = ((($2)) + 3200|0);
  $105 = HEAP32[$104>>2]|0;
  _free($105);
 }
 $106 = ((($2)) + 1796|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = ((($2)) + 1796|0);
  $110 = HEAP32[$109>>2]|0;
  _free($110);
 }
 $111 = ((($2)) + 1024|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)!=(0|0);
 if ($113) {
  $114 = ((($2)) + 1024|0);
  $115 = HEAP32[$114>>2]|0;
  _free($115);
 }
 $116 = ((($2)) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = ((($2)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  _free($120);
 }
 $121 = ((($2)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = ((($2)) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
 }
 $126 = HEAP32[$2>>2]|0;
 $127 = ($126|0)!=(0|0);
 if ($127) {
  $128 = HEAP32[$2>>2]|0;
  _free($128);
 }
 $129 = ((($3)) + 3196|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)!=(0|0);
 if ($131) {
  $132 = ((($3)) + 3196|0);
  $133 = HEAP32[$132>>2]|0;
  _free($133);
 }
 $134 = ((($3)) + 3200|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = ((($3)) + 3200|0);
  $138 = HEAP32[$137>>2]|0;
  _free($138);
 }
 $139 = ((($3)) + 1796|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = ((($3)) + 1796|0);
  $143 = HEAP32[$142>>2]|0;
  _free($143);
 }
 $144 = ((($3)) + 1024|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = ((($3)) + 1024|0);
  $148 = HEAP32[$147>>2]|0;
  _free($148);
 }
 $149 = ((($3)) + 4|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($150|0)!=(0|0);
 if ($151) {
  $152 = ((($3)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  _free($153);
 }
 $154 = ((($3)) + 8|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = ((($3)) + 8|0);
  $158 = HEAP32[$157>>2]|0;
  _free($158);
 }
 $159 = HEAP32[$3>>2]|0;
 $160 = ($159|0)!=(0|0);
 if ($160) {
  $161 = HEAP32[$3>>2]|0;
  _free($161);
 }
 $162 = ((($5)) + 8|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)!=(0|0);
 if ($164) {
  $165 = ((($5)) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  _free($166);
 }
 $167 = ((($5)) + 916|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ($168|0)!=(0|0);
 if (!($169)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $170 = ((($5)) + 916|0);
 $171 = HEAP32[$170>>2]|0;
 _free($171);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcGANTI_DIR($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr27 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37328|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37328|0);
 $$byval_copy33 = sp + 32256|0;
 $$byval_copy32 = sp + 29040|0;
 $$byval_copy31 = sp + 36712|0;
 $$byval_copy30 = sp + 25824|0;
 $$byval_copy = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer24 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $5 = sp + 35784|0;
 $6 = sp + 37024|0;
 $7 = sp + 9648|0;
 $8 = sp + 6432|0;
 $9 = sp + 35472|0;
 $10 = sp + 3216|0;
 $11 = sp;
 $4 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,920)|0;
 _memset(($6|0),0,300)|0;
 (_getlex()|0);
 $12 = HEAP32[7954]|0;
 $13 = ($12|0)==(223);
 do {
  if ($13) {
   _Error(12533,$vararg_buffer);
  } else {
   $14 = HEAP32[7954]|0;
   $15 = ($14|0)==(226);
   if ($15) {
    _Error(12533,$vararg_buffer2);
    break;
   }
   $16 = HEAP32[7954]|0;
   $17 = ($16|0)==(225);
   if ($17) {
    $18 = (_chdir((31976))|0);
    $19 = ((($1)) + 88|0);
    HEAP32[$19>>2] = $18;
    $20 = ((($1)) + 84|0);
    HEAP32[$20>>2] = 0;
    break;
   }
   $21 = HEAP32[7954]|0;
   $22 = ($21|0)==(228);
   if (!($22)) {
    $85 = (_strlen(128380)|0);
    $86 = ($85>>>0)>(0);
    if ($86) {
     HEAP32[$vararg_buffer24>>2] = 128380;
     $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
     HEAP32[$vararg_ptr27>>2] = (31976);
     (_snprintf($6,300,15808,$vararg_buffer24)|0);
     $87 = HEAP32[8088]|0;
     _memcpy(($$byval_copy32|0),($1|0),3216)|0;
     _ValLabel($10,$6,$87,$$byval_copy32,232);
     _memcpy(($1|0),($10|0),3216)|0;
    } else {
     $88 = HEAP32[8088]|0;
     _memcpy(($$byval_copy33|0),($1|0),3216)|0;
     _ValLabel($11,(31976),$88,$$byval_copy33,232);
     _memcpy(($1|0),($11|0),3216)|0;
    }
    $89 = ((($1)) + 84|0);
    $90 = HEAP32[$89>>2]|0;
    $91 = ($90|0)==(3);
    if ($91) {
     $92 = ((($1)) + 104|0);
     $93 = (_chdir($92)|0);
     $94 = ((($1)) + 88|0);
     HEAP32[$94>>2] = $93;
     $95 = ((($1)) + 84|0);
     HEAP32[$95>>2] = 0;
     break;
    } else {
     _Error(12533,$vararg_buffer28);
     break;
    }
   }
   $23 = (_strlen((31976))|0);
   $24 = ($23>>>0)>(0);
   if ($24) {
    $25 = ((($2)) + 420|0);
    (_strcpy($25,(31976))|0);
    $26 = ((($2)) + 720|0);
    _getArrayName((31976),$26);
    $27 = ((($2)) + 870|0);
    _getArrayIdx((31976),$27);
    $28 = (_strlen(128380)|0);
    $29 = ($28>>>0)>(0);
    if ($29) {
     $30 = ((($2)) + 720|0);
     HEAP32[$vararg_buffer4>>2] = 128380;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $30;
     (_snprintf($6,300,15808,$vararg_buffer4)|0);
     $31 = ((($2)) + 720|0);
     _memset(($31|0),0,150)|0;
     $32 = ((($2)) + 720|0);
     (_strcpy($32,$6)|0);
     $33 = ((($2)) + 870|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = (_isdigit($35)|0);
     $37 = ($36|0)!=(0);
     if (!($37)) {
      _memset(($6|0),0,300)|0;
      $38 = ((($2)) + 870|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $38;
      (_snprintf($6,300,15808,$vararg_buffer7)|0);
      $39 = ((($2)) + 870|0);
      _memset(($39|0),0,150)|0;
      $40 = ((($2)) + 870|0);
      (_strcpy($40,$6)|0);
     }
    }
    $41 = ((($2)) + 870|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42 << 24 >> 24;
    $44 = (_isdigit($43)|0);
    $45 = ($44|0)!=(0);
    $46 = ((($2)) + 870|0);
    do {
     if ($45) {
      $47 = (_atol($46)|0);
      $4 = $47;
     } else {
      $48 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($3|0),3216)|0;
      _ValLabel($7,$46,$48,$$byval_copy,232);
      _memcpy(($3|0),($7|0),3216)|0;
      $49 = ((($3)) + 84|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = ((($3)) + 88|0);
       $53 = HEAP32[$52>>2]|0;
       $4 = $53;
       break;
      } else {
       _Error(16065,$vararg_buffer11);
       break;
      }
     }
    } while(0);
    $54 = ((($2)) + 720|0);
    $55 = HEAP32[8088]|0;
    _memcpy(($$byval_copy30|0),($2|0),3216)|0;
    _ValLabel($8,$54,$55,$$byval_copy30,232);
    _memcpy(($2|0),($8|0),3216)|0;
    $56 = ((($2)) + 870|0);
    $57 = $4;
    HEAP32[$vararg_buffer13>>2] = $57;
    (_snprintf($56,150,16087,$vararg_buffer13)|0);
    $58 = $4;
    $59 = ($58|0)<(0);
    $60 = $4;
    $61 = ($60|0)>(99999000);
    $or$cond = $59 | $61;
    if ($or$cond) {
     _Error(16096,$vararg_buffer16);
    }
    $62 = ((($2)) + 84|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(8);
    if ($64) {
     $65 = ((($2)) + 412|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)!=(0);
     if ($67) {
      $68 = ((($2)) + 404|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0);
      if ($70) {
       _Error(12563,$vararg_buffer18);
      }
      _memset(((72140)|0),0,256)|0;
      _memset(((71832)|0),0,300)|0;
      $71 = ((($2)) + 720|0);
      (_strcpy((72140),$71)|0);
      $72 = ((($2)) + 412|0);
      $73 = HEAP32[$72>>2]|0;
      HEAP32[8086] = $73;
      $74 = HEAP32[8086]|0;
      $75 = ($74|0)<(0);
      if ($75) {
       (_printf(16303,$vararg_buffer20)|0);
      } else {
       $76 = HEAP32[8086]|0;
       HEAP32[17956] = $76;
       $77 = $4;
       HEAP32[(71828)>>2] = $77;
       _memcpy(($$byval_copy31|0),(71824|0),312)|0;
       $78 = (_string_findData($$byval_copy31)|0);
       HEAP32[8074] = $78;
       $79 = HEAP32[8074]|0;
       $80 = ($79|0)<(0);
       if (!($80)) {
        $81 = HEAP32[8074]|0;
        _string_getElement($9,$81);
        _memcpy((71824|0),($9|0),312)|0;
       }
      }
      $82 = (_chdir((71832))|0);
      $83 = ((($1)) + 88|0);
      HEAP32[$83>>2] = $82;
      $84 = ((($1)) + 84|0);
      HEAP32[$84>>2] = 0;
      break;
     }
    }
    _Error(12533,$vararg_buffer22);
   }
  }
 } while(0);
 $96 = ((($2)) + 3196|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)!=(0|0);
 if ($98) {
  $99 = ((($2)) + 3196|0);
  $100 = HEAP32[$99>>2]|0;
  _free($100);
 }
 $101 = ((($2)) + 3200|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = ((($2)) + 3200|0);
  $105 = HEAP32[$104>>2]|0;
  _free($105);
 }
 $106 = ((($2)) + 1796|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = ((($2)) + 1796|0);
  $110 = HEAP32[$109>>2]|0;
  _free($110);
 }
 $111 = ((($2)) + 1024|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)!=(0|0);
 if ($113) {
  $114 = ((($2)) + 1024|0);
  $115 = HEAP32[$114>>2]|0;
  _free($115);
 }
 $116 = ((($2)) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = ((($2)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  _free($120);
 }
 $121 = ((($2)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = ((($2)) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
 }
 $126 = HEAP32[$2>>2]|0;
 $127 = ($126|0)!=(0|0);
 if ($127) {
  $128 = HEAP32[$2>>2]|0;
  _free($128);
 }
 $129 = ((($3)) + 3196|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)!=(0|0);
 if ($131) {
  $132 = ((($3)) + 3196|0);
  $133 = HEAP32[$132>>2]|0;
  _free($133);
 }
 $134 = ((($3)) + 3200|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = ((($3)) + 3200|0);
  $138 = HEAP32[$137>>2]|0;
  _free($138);
 }
 $139 = ((($3)) + 1796|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = ((($3)) + 1796|0);
  $143 = HEAP32[$142>>2]|0;
  _free($143);
 }
 $144 = ((($3)) + 1024|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = ((($3)) + 1024|0);
  $148 = HEAP32[$147>>2]|0;
  _free($148);
 }
 $149 = ((($3)) + 4|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($150|0)!=(0|0);
 if ($151) {
  $152 = ((($3)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  _free($153);
 }
 $154 = ((($3)) + 8|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = ((($3)) + 8|0);
  $158 = HEAP32[$157>>2]|0;
  _free($158);
 }
 $159 = HEAP32[$3>>2]|0;
 $160 = ($159|0)!=(0|0);
 if ($160) {
  $161 = HEAP32[$3>>2]|0;
  _free($161);
 }
 $162 = ((($5)) + 8|0);
 $163 = HEAP32[$162>>2]|0;
 $164 = ($163|0)!=(0|0);
 if ($164) {
  $165 = ((($5)) + 8|0);
  $166 = HEAP32[$165>>2]|0;
  _free($166);
 }
 $167 = ((($5)) + 916|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ($168|0)!=(0|0);
 if (!($169)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $170 = ((($5)) + 916|0);
 $171 = HEAP32[$170>>2]|0;
 _free($171);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcPOSISI_DIR($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3520|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3520|0);
 $1 = sp;
 $2 = sp + 3216|0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 $3 = (_Mygetcwd($2,300)|0);
 $4 = ($3|0)==(0|0);
 $5 = ((($1)) + 104|0);
 if ($4) {
  (_strcpy($5,1358125)|0);
 } else {
  (_strcpy($5,$2)|0);
 }
 $6 = ((($1)) + 84|0);
 HEAP32[$6>>2] = 3;
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _Mygetcwd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = $3;
 $7 = (_getcwd($5,$6)|0);
 $4 = $7;
 $8 = $4;
 $9 = ($8|0)!=(0|0);
 if (!($9)) {
  _Error(12607,$vararg_buffer);
 }
 $10 = $4;
 STACKTOP = sp;return ($10|0);
}
function _funcPing($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy5 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 21760|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(21760|0);
 $$byval_copy5 = sp + 16096|0;
 $$byval_copy = sp + 12880|0;
 $vararg_buffer3 = sp + 12872|0;
 $vararg_buffer = sp + 12864|0;
 $1 = sp + 9648|0;
 $2 = sp + 6432|0;
 $3 = sp + 21452|0;
 $4 = sp + 21152|0;
 $10 = sp + 20552|0;
 $11 = sp + 19312|0;
 $12 = sp + 20252|0;
 $13 = sp + 3216|0;
 $14 = sp;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,300)|0;
 _memset(($4|0),0,300)|0;
 _memset(($10|0),0,600)|0;
 _memset(($11|0),0,920)|0;
 _memset(($12|0),0,300)|0;
 $5 = 0;
 $6 = 0;
 while(1) {
  (_getlex()|0);
  $15 = HEAP32[7954]|0;
  $16 = ($15|0)==(223);
  do {
   if ($16) {
    $17 = $5;
    $18 = ($17|0)==(1);
    if ($18) {
     $19 = HEAP32[(31976)>>2]|0;
     $8 = $19;
     break;
    }
    $20 = $5;
    $21 = ($20|0)==(2);
    if ($21) {
     $22 = HEAP32[(31976)>>2]|0;
     $9 = $22;
    }
   } else {
    $23 = HEAP32[7954]|0;
    $24 = ($23|0)==(225);
    if ($24) {
     $25 = $5;
     $26 = ($25|0)==(0);
     if (!($26)) {
      break;
     }
     (_strcpy($3,(31976))|0);
     break;
    }
    $27 = HEAP32[7954]|0;
    $28 = ($27|0)==(224);
    if ($28) {
     $29 = (_strlen(128380)|0);
     $30 = ($29>>>0)>(0);
     if ($30) {
      HEAP32[$vararg_buffer>>2] = 128380;
      $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr2>>2] = (31976);
      (_sprintf($12,15808,$vararg_buffer)|0);
      $31 = HEAP32[8091]|0;
      _memcpy(($$byval_copy|0),($2|0),3216)|0;
      _ValLabel($13,$12,$31,$$byval_copy,232);
      _memcpy(($2|0),($13|0),3216)|0;
     } else {
      $32 = HEAP32[8088]|0;
      _memcpy(($$byval_copy5|0),($2|0),3216)|0;
      _ValLabel($14,(31976),$32,$$byval_copy5,232);
      _memcpy(($2|0),($14|0),3216)|0;
     }
     $33 = ((($2)) + 84|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0);
     if (!($35)) {
      $44 = ((($2)) + 84|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)==(3);
      $47 = $5;
      $48 = ($47|0)==(0);
      $or$cond = $46 & $48;
      if (!($or$cond)) {
       break;
      }
      $49 = ((($2)) + 104|0);
      (_strcpy($3,$49)|0);
      break;
     }
     $36 = $5;
     $37 = ($36|0)==(1);
     if ($37) {
      $38 = ((($2)) + 88|0);
      $39 = HEAP32[$38>>2]|0;
      $8 = $39;
      break;
     }
     $40 = $5;
     $41 = ($40|0)==(2);
     if ($41) {
      $42 = ((($2)) + 88|0);
      $43 = HEAP32[$42>>2]|0;
      $9 = $43;
     }
    }
   }
  } while(0);
  $50 = $5;
  $51 = (($50) + 1)|0;
  $5 = $51;
  (_getlex()|0);
  $52 = HEAP32[7954]|0;
  $53 = ($52|0)==(227);
  if (!($53)) {
   break;
  }
  $54 = HEAP8[(31976)>>0]|0;
  $55 = $54 << 24 >> 24;
  $56 = ($55|0)==(44);
  if (!($56)) {
   break;
  }
 }
 _ungetlex();
 $57 = $5;
 $58 = ($57|0)==(3);
 if ($58) {
  $59 = $8;
  $60 = $9;
  $61 = (_Ping_ux($3,$59,$60)|0);
  $62 = ((($1)) + 88|0);
  HEAP32[$62>>2] = $61;
  $63 = ((($1)) + 84|0);
  HEAP32[$63>>2] = 0;
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 } else {
  _Error(12614,$vararg_buffer3);
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
}
function _funcIKAT_SOKET($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy3 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 17024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(17024|0);
 $$byval_copy3 = sp + 12880|0;
 $$byval_copy = sp + 9664|0;
 $vararg_buffer1 = sp + 9656|0;
 $vararg_buffer = sp + 9648|0;
 $1 = sp + 6432|0;
 $2 = sp + 16720|0;
 $3 = sp + 16420|0;
 $10 = sp + 16120|0;
 $11 = sp + 3216|0;
 $12 = sp;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $7 = 0;
 $8 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 _memset(($10|0),0,300)|0;
 $4 = 0;
 $5 = 0;
 while(1) {
  (_getlex()|0);
  $13 = HEAP32[7954]|0;
  $14 = ($13|0)==(223);
  do {
   if ($14) {
    _Error(12639,$vararg_buffer);
   } else {
    $15 = HEAP32[7954]|0;
    $16 = ($15|0)==(225);
    if ($16) {
     $17 = $4;
     $18 = ($17|0)==(1);
     if (!($18)) {
      break;
     }
     (_strcpy($3,(31976))|0);
     break;
    }
    $19 = HEAP32[8088]|0;
    _memcpy(($$byval_copy|0),($1|0),3216)|0;
    _ValLabel($11,(31976),$19,$$byval_copy,232);
    _memcpy(($1|0),($11|0),3216)|0;
    $20 = $4;
    $21 = ($20|0)==(0);
    do {
     if ($21) {
      $22 = ((($1)) + 84|0);
      $23 = HEAP32[$22>>2]|0;
      $24 = ($23|0)==(4);
      if (!($24)) {
       $25 = ((($1)) + 84|0);
       $26 = HEAP32[$25>>2]|0;
       $27 = ($26|0)==(5);
       if (!($27)) {
        break;
       }
      }
      $28 = ((($1)) + 84|0);
      $29 = HEAP32[$28>>2]|0;
      $5 = $29;
      $30 = ((($1)) + 1804|0);
      $31 = HEAP32[$30>>2]|0;
      $9 = $31;
     }
    } while(0);
    $32 = $4;
    $33 = ($32|0)==(1);
    if ($33) {
     (_strcpy($3,(31976))|0);
    }
   }
  } while(0);
  $34 = $4;
  $35 = (($34) + 1)|0;
  $4 = $35;
  (_getlex()|0);
  $36 = HEAP32[7954]|0;
  $37 = ($36|0)==(227);
  if (!($37)) {
   break;
  }
  $38 = HEAP8[(31976)>>0]|0;
  $39 = $38 << 24 >> 24;
  $40 = ($39|0)==(44);
  if (!($40)) {
   break;
  }
 }
 _ungetlex();
 $41 = $4;
 $42 = ($41|0)!=(2);
 if ($42) {
  _Error(12639,$vararg_buffer1);
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 } else {
  $43 = $9;
  $44 = (_ux_ikatSocket($43,$3)|0);
  $45 = ((($1)) + 1804|0);
  HEAP32[$45>>2] = $44;
  $46 = $5;
  $47 = ((($1)) + 84|0);
  HEAP32[$47>>2] = $46;
  $48 = HEAP32[8088]|0;
  _memcpy(($$byval_copy3|0),($1|0),3216)|0;
  _ValLabel($12,(31976),$48,$$byval_copy3,233);
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
}
function _funcTRIMA_SOKET($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 9984|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(9984|0);
 $$byval_copy = sp + 6464|0;
 $vararg_buffer5 = sp + 6456|0;
 $vararg_buffer3 = sp + 6448|0;
 $vararg_buffer1 = sp + 6440|0;
 $vararg_buffer = sp + 6432|0;
 $1 = sp + 3216|0;
 $2 = sp + 9680|0;
 $3 = sp;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 (_getlex()|0);
 $4 = HEAP32[7954]|0;
 $5 = ($4|0)==(223);
 if ($5) {
  _Error(12670,$vararg_buffer);
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $6 = HEAP32[7954]|0;
 $7 = ($6|0)==(225);
 if ($7) {
  _Error(12670,$vararg_buffer1);
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $8 = HEAP32[8088]|0;
 _memcpy(($$byval_copy|0),($1|0),3216)|0;
 _ValLabel($3,(31976),$8,$$byval_copy,232);
 _memcpy(($1|0),($3|0),3216)|0;
 $9 = ((($1)) + 84|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(4);
 if (!($11)) {
  $12 = ((($1)) + 84|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(5);
  if (!($14)) {
   _Error(12670,$vararg_buffer5);
   _memcpy(($0|0),($1|0),3216)|0;
   STACKTOP = sp;return;
  }
 }
 $15 = ((($1)) + 1804|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ($16|0)==(0);
 if ($17) {
  _Error(12702,$vararg_buffer3);
 }
 $18 = ((($1)) + 1804|0);
 $19 = HEAP32[$18>>2]|0;
 $20 = (_ux_terimaSocket($19)|0);
 $21 = ((($1)) + 1804|0);
 HEAP32[$21>>2] = $20;
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcBACA_SOKET($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 9984|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(9984|0);
 $$byval_copy = sp + 6456|0;
 $vararg_buffer3 = sp + 6448|0;
 $vararg_buffer1 = sp + 6440|0;
 $vararg_buffer = sp + 6432|0;
 $1 = sp + 3216|0;
 $2 = sp + 9672|0;
 $3 = sp;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 (_getlex()|0);
 $4 = HEAP32[7954]|0;
 $5 = ($4|0)==(223);
 if ($5) {
  _Error(12714,$vararg_buffer);
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $6 = HEAP32[7954]|0;
 $7 = ($6|0)==(225);
 if ($7) {
  _Error(12714,$vararg_buffer1);
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $8 = HEAP32[8088]|0;
 _memcpy(($$byval_copy|0),($1|0),3216)|0;
 _ValLabel($3,(31976),$8,$$byval_copy,232);
 _memcpy(($1|0),($3|0),3216)|0;
 $9 = ((($1)) + 84|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($10|0)==(4);
 if (!($11)) {
  $12 = ((($1)) + 84|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)==(5);
  if (!($14)) {
   _Error(12714,$vararg_buffer3);
   _memcpy(($0|0),($1|0),3216)|0;
   STACKTOP = sp;return;
  }
 }
 $15 = ((($1)) + 104|0);
 $16 = ((($1)) + 1804|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = (_ux_bacaSocket($17)|0);
 (_strcpy($15,$18)|0);
 $19 = ((($1)) + 84|0);
 HEAP32[$19>>2] = 3;
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcTULIS_SOKET($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy37 = 0, $$byval_copy38 = 0, $$byval_copy39 = 0, $$byval_copy40 = 0, $$byval_copy41 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0.0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $vararg_buffer = 0, $vararg_buffer12 = 0;
 var $vararg_buffer14 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer4 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 37040|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(37040|0);
 $$byval_copy41 = sp + 32272|0;
 $$byval_copy40 = sp + 35824|0;
 $$byval_copy39 = sp + 29056|0;
 $$byval_copy38 = sp + 25840|0;
 $$byval_copy37 = sp + 22624|0;
 $$byval_copy = sp + 19408|0;
 $vararg_buffer35 = sp + 19400|0;
 $vararg_buffer33 = sp + 19392|0;
 $vararg_buffer31 = sp + 19384|0;
 $vararg_buffer29 = sp + 19376|0;
 $vararg_buffer26 = sp + 19368|0;
 $vararg_buffer24 = sp + 19360|0;
 $vararg_buffer21 = sp + 19352|0;
 $vararg_buffer19 = sp + 19344|0;
 $vararg_buffer17 = sp + 19336|0;
 $vararg_buffer14 = sp + 19328|0;
 $vararg_buffer12 = sp + 19320|0;
 $vararg_buffer8 = sp + 19312|0;
 $vararg_buffer4 = sp + 19304|0;
 $vararg_buffer = sp + 19296|0;
 $1 = sp + 16080|0;
 $2 = sp + 12864|0;
 $3 = sp + 9648|0;
 $7 = sp + 36736|0;
 $8 = sp + 36436|0;
 $11 = sp + 36136|0;
 $12 = sp + 6432|0;
 $13 = sp + 3216|0;
 $14 = sp + 35488|0;
 $15 = sp;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 $9 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($7|0),0,300)|0;
 _memset(($8|0),0,300)|0;
 _memset(($11|0),0,300)|0;
 $6 = 0;
 $4 = 0;
 while(1) {
  (_getlex()|0);
  $16 = HEAP32[7954]|0;
  $17 = ($16|0)==(223);
  do {
   if ($17) {
    $18 = $6;
    $19 = ($18|0)==(1);
    if ($19) {
     $20 = HEAP32[(31976)>>2]|0;
     HEAP32[$vararg_buffer>>2] = $20;
     (_sprintf($8,16087,$vararg_buffer)|0);
    }
   } else {
    $21 = HEAP32[7954]|0;
    $22 = ($21|0)==(225);
    $23 = HEAP32[7954]|0;
    $24 = ($23|0)==(226);
    $or$cond = $22 | $24;
    if ($or$cond) {
     $25 = $6;
     $26 = ($25|0)==(1);
     if (!($26)) {
      break;
     }
     (_strcpy($8,(31976))|0);
     break;
    }
    $27 = HEAP32[7954]|0;
    $28 = ($27|0)==(228);
    if (!($28)) {
     $103 = HEAP32[8088]|0;
     _memcpy(($$byval_copy41|0),($1|0),3216)|0;
     _ValLabel($15,(31976),$103,$$byval_copy41,232);
     _memcpy(($1|0),($15|0),3216)|0;
     $104 = $6;
     $105 = ($104|0)==(0);
     do {
      if ($105) {
       $106 = ((($1)) + 84|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ($107|0)==(4);
       if (!($108)) {
        $109 = ((($1)) + 84|0);
        $110 = HEAP32[$109>>2]|0;
        $111 = ($110|0)==(5);
        if (!($111)) {
         break;
        }
       }
       $112 = ((($1)) + 84|0);
       $113 = HEAP32[$112>>2]|0;
       $4 = $113;
       $114 = ((($1)) + 1804|0);
       $115 = HEAP32[$114>>2]|0;
       $10 = $115;
      }
     } while(0);
     $116 = $6;
     $117 = ($116|0)==(1);
     if (!($117)) {
      break;
     }
     (_strcpy($8,(31976))|0);
     break;
    }
    $29 = $6;
    $30 = ($29|0)==(1);
    if ($30) {
     $31 = (_strlen((31976))|0);
     $32 = ($31>>>0)>(0);
     if ($32) {
      $33 = ((($2)) + 420|0);
      (_strcpy($33,(31976))|0);
      $34 = ((($2)) + 720|0);
      _getArrayName((31976),$34);
      $35 = ((($2)) + 870|0);
      _getArrayIdx((31976),$35);
      $36 = (_strlen(128380)|0);
      $37 = ($36>>>0)>(0);
      if ($37) {
       $38 = ((($2)) + 720|0);
       HEAP32[$vararg_buffer4>>2] = 128380;
       $vararg_ptr7 = ((($vararg_buffer4)) + 4|0);
       HEAP32[$vararg_ptr7>>2] = $38;
       (_sprintf($11,15808,$vararg_buffer4)|0);
       $39 = ((($2)) + 720|0);
       _memset(($39|0),0,150)|0;
       $40 = ((($2)) + 720|0);
       (_strcpy($40,$11)|0);
       $41 = ((($2)) + 870|0);
       $42 = HEAP8[$41>>0]|0;
       $43 = $42 << 24 >> 24;
       $44 = (_isdigit($43)|0);
       $45 = ($44|0)!=(0);
       if (!($45)) {
        _memset(($11|0),0,300)|0;
        $46 = ((($2)) + 870|0);
        HEAP32[$vararg_buffer8>>2] = 128380;
        $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
        HEAP32[$vararg_ptr11>>2] = $46;
        (_sprintf($11,15808,$vararg_buffer8)|0);
        $47 = ((($2)) + 870|0);
        _memset(($47|0),0,150)|0;
        $48 = ((($2)) + 870|0);
        (_strcpy($48,$11)|0);
       }
      }
      $49 = ((($2)) + 870|0);
      $50 = HEAP8[$49>>0]|0;
      $51 = $50 << 24 >> 24;
      $52 = (_isdigit($51)|0);
      $53 = ($52|0)!=(0);
      $54 = ((($2)) + 870|0);
      do {
       if ($53) {
        $55 = (_atol($54)|0);
        $9 = $55;
       } else {
        $56 = HEAP32[8088]|0;
        _memcpy(($$byval_copy|0),($3|0),3216)|0;
        _ValLabel($12,$54,$56,$$byval_copy,232);
        _memcpy(($3|0),($12|0),3216)|0;
        $57 = ((($3)) + 84|0);
        $58 = HEAP32[$57>>2]|0;
        $59 = ($58|0)==(0);
        if ($59) {
         $60 = ((($3)) + 88|0);
         $61 = HEAP32[$60>>2]|0;
         $9 = $61;
         break;
        } else {
         _Error(16065,$vararg_buffer12);
         break;
        }
       }
      } while(0);
      $62 = ((($2)) + 720|0);
      $63 = HEAP32[8088]|0;
      _memcpy(($$byval_copy37|0),($2|0),3216)|0;
      _ValLabel($13,$62,$63,$$byval_copy37,232);
      _memcpy(($2|0),($13|0),3216)|0;
      $64 = ((($2)) + 870|0);
      $65 = $9;
      HEAP32[$vararg_buffer14>>2] = $65;
      (_sprintf($64,16087,$vararg_buffer14)|0);
      $66 = $9;
      $67 = ($66|0)<(0);
      $68 = $9;
      $69 = ($68|0)>(99999000);
      $or$cond3 = $67 | $69;
      if ($or$cond3) {
       _Error(16096,$vararg_buffer17);
      }
      $70 = ((($2)) + 84|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)==(6);
      if ($72) {
       $73 = ((($2)) + 404|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = ($74|0)==(0);
       if ($75) {
        _Error(10974,$vararg_buffer19);
       }
       $76 = $9;
       _memcpy(($$byval_copy38|0),($2|0),3216)|0;
       $77 = (_get_int_array($$byval_copy38,$76)|0);
       HEAP32[$vararg_buffer21>>2] = $77;
       (_sprintf($8,16176,$vararg_buffer21)|0);
       break;
      }
      $78 = ((($2)) + 84|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(7);
      if ($80) {
       $81 = ((($2)) + 408|0);
       $82 = HEAP32[$81>>2]|0;
       $83 = ($82|0)==(0);
       if ($83) {
        _Error(10974,$vararg_buffer24);
       }
       $84 = $9;
       _memcpy(($$byval_copy39|0),($2|0),3216)|0;
       $85 = (+_get_dbl_array($$byval_copy39,$84));
       HEAPF64[$vararg_buffer26>>3] = $85;
       (_sprintf($8,16221,$vararg_buffer26)|0);
       break;
      }
      $86 = ((($2)) + 84|0);
      $87 = HEAP32[$86>>2]|0;
      $88 = ($87|0)==(8);
      if ($88) {
       $89 = ((($2)) + 412|0);
       $90 = HEAP32[$89>>2]|0;
       $91 = ($90|0)==(0);
       if ($91) {
        _Error(10974,$vararg_buffer29);
       }
       _memset(((72140)|0),0,256)|0;
       _memset(((71832)|0),0,300)|0;
       $92 = ((($2)) + 720|0);
       (_strcpy((72140),$92)|0);
       $93 = ((($2)) + 412|0);
       $94 = HEAP32[$93>>2]|0;
       HEAP32[8086] = $94;
       $95 = HEAP32[8086]|0;
       $96 = ($95|0)<(0);
       if ($96) {
        (_printf(16303,$vararg_buffer31)|0);
        break;
       }
       $97 = HEAP32[8086]|0;
       HEAP32[17956] = $97;
       $98 = $9;
       HEAP32[(71828)>>2] = $98;
       _memcpy(($$byval_copy40|0),(71824|0),312)|0;
       $99 = (_string_findData($$byval_copy40)|0);
       HEAP32[8074] = $99;
       $100 = HEAP32[8074]|0;
       $101 = ($100|0)<(0);
       if ($101) {
        (_printf(11878,$vararg_buffer33)|0);
        break;
       } else {
        $102 = HEAP32[8074]|0;
        _string_getElement($14,$102);
        _memcpy((71824|0),($14|0),312)|0;
        (_strcpy($8,(71832))|0);
        break;
       }
      }
     }
    }
   }
  } while(0);
  $118 = $6;
  $119 = (($118) + 1)|0;
  $6 = $119;
  (_getlex()|0);
  $120 = HEAP32[7954]|0;
  $121 = ($120|0)==(227);
  if (!($121)) {
   break;
  }
  $122 = HEAP8[(31976)>>0]|0;
  $123 = $122 << 24 >> 24;
  $124 = ($123|0)==(44);
  if (!($124)) {
   break;
  }
 }
 _ungetlex();
 $125 = $6;
 $126 = ($125|0)!=(2);
 if ($126) {
  _Error(12745,$vararg_buffer35);
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 } else {
  $127 = $10;
  $128 = (_ux_tulisSocket($127,$8)|0);
  $129 = ((($1)) + 88|0);
  HEAP32[$129>>2] = $128;
  $130 = ((($1)) + 84|0);
  HEAP32[$130>>2] = 0;
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
}
function _funcKONEK_SOKET($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 10592|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(10592|0);
 $$byval_copy = sp + 6448|0;
 $vararg_buffer1 = sp + 6440|0;
 $vararg_buffer = sp + 6432|0;
 $1 = sp + 3216|0;
 $2 = sp + 10280|0;
 $3 = sp + 9980|0;
 $8 = sp + 9680|0;
 $9 = sp;
 $4 = 0;
 $5 = 0;
 $6 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 _memset(($8|0),0,300)|0;
 $4 = 0;
 $5 = 0;
 while(1) {
  (_getlex()|0);
  $10 = HEAP32[7954]|0;
  $11 = ($10|0)==(223);
  do {
   if ($11) {
    _Error(12777,$vararg_buffer);
   } else {
    $12 = HEAP32[7954]|0;
    $13 = ($12|0)==(225);
    if ($13) {
     $14 = $4;
     $15 = ($14|0)==(1);
     if ($15) {
      (_strcpy($2,(31976))|0);
     }
     $16 = $4;
     $17 = ($16|0)==(2);
     if (!($17)) {
      break;
     }
     (_strcpy($3,(31976))|0);
     break;
    }
    $18 = HEAP32[8088]|0;
    _memcpy(($$byval_copy|0),($1|0),3216)|0;
    _ValLabel($9,(31976),$18,$$byval_copy,232);
    _memcpy(($1|0),($9|0),3216)|0;
    $19 = $4;
    $20 = ($19|0)==(0);
    do {
     if ($20) {
      $21 = ((($1)) + 84|0);
      $22 = HEAP32[$21>>2]|0;
      $23 = ($22|0)==(4);
      if (!($23)) {
       $24 = ((($1)) + 84|0);
       $25 = HEAP32[$24>>2]|0;
       $26 = ($25|0)==(5);
       if (!($26)) {
        break;
       }
      }
      $27 = ((($1)) + 84|0);
      $28 = HEAP32[$27>>2]|0;
      $5 = $28;
      $29 = ((($1)) + 1804|0);
      $30 = HEAP32[$29>>2]|0;
      $7 = $30;
     }
    } while(0);
    $31 = $4;
    $32 = ($31|0)==(1);
    if ($32) {
     (_strcpy($2,(31976))|0);
    }
    $33 = $4;
    $34 = ($33|0)==(2);
    if ($34) {
     (_strcpy($3,(31976))|0);
    }
   }
  } while(0);
  $35 = $4;
  $36 = (($35) + 1)|0;
  $4 = $36;
  (_getlex()|0);
  $37 = HEAP32[7954]|0;
  $38 = ($37|0)==(227);
  if (!($38)) {
   break;
  }
  $39 = HEAP8[(31976)>>0]|0;
  $40 = $39 << 24 >> 24;
  $41 = ($40|0)==(44);
  if (!($41)) {
   break;
  }
 }
 _ungetlex();
 $42 = $4;
 $43 = ($42|0)!=(3);
 if ($43) {
  _Error(12777,$vararg_buffer1);
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 } else {
  $44 = $7;
  $45 = (_ux_connectSocket($44,$2,$3)|0);
  $46 = ((($1)) + 88|0);
  HEAP32[$46>>2] = $45;
  $47 = ((($1)) + 84|0);
  HEAP32[$47>>2] = 0;
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
}
function _funcSaklarStatus($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 22832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(22832|0);
 $$byval_copy2 = sp + 19304|0;
 $$byval_copy = sp + 16088|0;
 $vararg_buffer = sp + 16080|0;
 $1 = sp + 12864|0;
 $2 = sp + 9648|0;
 $3 = sp + 6432|0;
 $4 = sp + 22524|0;
 $6 = sp + 3216|0;
 $7 = sp;
 $5 = -1;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,300)|0;
 (_getlex()|0);
 $8 = HEAP32[7954]|0;
 $9 = ($8|0)==(225);
 if ($9) {
  $10 = (_power_stat((31976))|0);
  $11 = ((($1)) + 88|0);
  HEAP32[$11>>2] = $10;
  $12 = ((($1)) + 84|0);
  HEAP32[$12>>2] = 0;
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $13 = HEAP32[7954]|0;
 $14 = ($13|0)==(224);
 if (!($14)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $15 = (_strlen(128380)|0);
 $16 = ($15>>>0)>(0);
 if ($16) {
  HEAP32[$vararg_buffer>>2] = 128380;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = (31976);
  (_snprintf($4,300,15808,$vararg_buffer)|0);
  $17 = HEAP32[8088]|0;
  _memcpy(($$byval_copy|0),($2|0),3216)|0;
  _ValLabel($6,$4,$17,$$byval_copy,232);
  _memcpy(($3|0),($6|0),3216)|0;
 } else {
  $18 = HEAP32[8088]|0;
  _memcpy(($$byval_copy2|0),($2|0),3216)|0;
  _ValLabel($7,(31976),$18,$$byval_copy2,232);
  _memcpy(($3|0),($7|0),3216)|0;
 }
 $19 = ((($3)) + 84|0);
 $20 = HEAP32[$19>>2]|0;
 $21 = ($20|0)==(3);
 if (!($21)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $22 = ((($3)) + 104|0);
 $23 = (_power_stat($22)|0);
 $24 = ((($1)) + 88|0);
 HEAP32[$24>>2] = $23;
 $25 = ((($1)) + 84|0);
 HEAP32[$25>>2] = 0;
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _power_stat($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var $vararg_buffer1 = 0, $vararg_buffer3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(176|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 168|0;
 $5 = sp + 40|0;
 $1 = $0;
 $2 = 0;
 $4 = 0;
 $6 = -1;
 ;HEAP8[$3>>0]=0|0;HEAP8[$3+1>>0]=0|0;HEAP8[$3+2>>0]=0|0;HEAP8[$3+3>>0]=0|0;
 dest=$5; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $7 = (_fopen(15848,15871)|0);
 $2 = $7;
 $8 = ($7|0)==(0|0);
 if ($8) {
  (_printf(15874,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $9 = $2;
 _rewind($9);
 $10 = $1;
 (_strcpy($3,$10)|0);
 $11 = $2;
 (_fwrite($3,1,3,$11)|0);
 $12 = $2;
 (_fclose($12)|0);
 dest=$5; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $13 = $1;
 (_strcpy($3,$13)|0);
 HEAP32[$vararg_buffer1>>2] = $3;
 (_sprintf($5,15975,$vararg_buffer1)|0);
 $14 = (_fopen($5,16704)|0);
 $2 = $14;
 $15 = ($14|0)==(0|0);
 if ($15) {
  (_printf(16004,$vararg_buffer3)|0);
  _exit(1);
  // unreachable;
 } else {
  ;HEAP8[$3>>0]=0|0;HEAP8[$3+1>>0]=0|0;HEAP8[$3+2>>0]=0|0;HEAP8[$3+3>>0]=0|0;
  $16 = $2;
  (_fread($3,4,1,$16)|0);
  $17 = $2;
  (_fclose($17)|0);
  $18 = (_atoi($3)|0);
  $6 = $18;
  $19 = $6;
  STACKTOP = sp;return ($19|0);
 }
 return (0)|0;
}
function _funcOther($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 29280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(29280|0);
 $$byval_copy11 = sp + 25752|0;
 $$byval_copy10 = sp + 22536|0;
 $$byval_copy = sp + 19320|0;
 $vararg_buffer6 = sp + 19312|0;
 $vararg_buffer2 = sp + 19304|0;
 $vararg_buffer = sp + 19296|0;
 $1 = sp + 16080|0;
 $2 = sp + 12864|0;
 $3 = sp + 9648|0;
 $4 = sp + 28968|0;
 $5 = sp + 6432|0;
 $6 = sp + 3216|0;
 $7 = sp;
 _memset(($1|0),0,3216)|0;
 _memset(($4|0),0,300)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,300)|0;
 $8 = (_strcmp((31976),12809)|0);
 $9 = ($8|0)!=(0);
 do {
  if ($9) {
   $10 = (_strcmp((31976),12837)|0);
   $11 = ($10|0)!=(0);
   if ($11) {
    $12 = (_strcmp((31976),12863)|0);
    $13 = ($12|0)!=(0);
    if ($13) {
     $14 = (_strcmp((31976),12871)|0);
     $15 = ($14|0)!=(0);
     if ($15) {
      $16 = (_strcmp((31976),12879)|0);
      $17 = ($16|0)!=(0);
      if ($17) {
       break;
      }
     }
    }
    _memset(($3|0),0,3216)|0;
    _memset(($2|0),0,3216)|0;
    (_getlex()|0);
    $18 = HEAP32[7954]|0;
    $19 = ($18|0)==(228);
    if ($19) {
     $20 = (_strlen((31976))|0);
     $21 = ($20>>>0)>(0);
     if (!($21)) {
      break;
     }
     $22 = ((($2)) + 420|0);
     (_strcpy($22,(31976))|0);
     $23 = ((($2)) + 720|0);
     _getArrayName((31976),$23);
     $24 = ((($2)) + 870|0);
     _getArrayIdx((31976),$24);
     $25 = (_strlen(128380)|0);
     $26 = ($25>>>0)>(0);
     if ($26) {
      $27 = ((($2)) + 720|0);
      HEAP32[$vararg_buffer>>2] = 128380;
      $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
      HEAP32[$vararg_ptr1>>2] = $27;
      (_snprintf($4,300,15808,$vararg_buffer)|0);
      $28 = ((($2)) + 720|0);
      _memset(($28|0),0,150)|0;
      $29 = ((($2)) + 720|0);
      (_strcpy($29,$4)|0);
      $30 = ((($2)) + 870|0);
      $31 = HEAP8[$30>>0]|0;
      $32 = $31 << 24 >> 24;
      $33 = (_isdigit($32)|0);
      $34 = ($33|0)!=(0);
      if (!($34)) {
       _memset(($4|0),0,300)|0;
       $35 = ((($2)) + 870|0);
       HEAP32[$vararg_buffer2>>2] = 128380;
       $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
       HEAP32[$vararg_ptr5>>2] = $35;
       (_snprintf($4,300,15808,$vararg_buffer2)|0);
       $36 = ((($2)) + 870|0);
       _memset(($36|0),0,150)|0;
       $37 = ((($2)) + 870|0);
       (_strcpy($37,$4)|0);
      }
     }
     $38 = ((($2)) + 720|0);
     $39 = HEAP32[8088]|0;
     _memcpy(($$byval_copy|0),($2|0),3216)|0;
     _ValLabel($5,$38,$39,$$byval_copy,232);
     _memcpy(($2|0),($5|0),3216)|0;
     $40 = ((($3)) + 1020|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ((($1)) + 88|0);
     HEAP32[$42>>2] = $41;
     $43 = ((($1)) + 84|0);
     HEAP32[$43>>2] = 0;
     break;
    }
    $44 = HEAP32[7954]|0;
    $45 = ($44|0)==(225);
    if ($45) {
     $46 = (_strlen((31976))|0);
     $47 = ((($1)) + 88|0);
     HEAP32[$47>>2] = $46;
     $48 = ((($1)) + 84|0);
     HEAP32[$48>>2] = 0;
     break;
    }
    $49 = HEAP32[7954]|0;
    $50 = ($49|0)==(224);
    if (!($50)) {
     $76 = ((($1)) + 88|0);
     HEAP32[$76>>2] = 0;
     $77 = ((($1)) + 84|0);
     HEAP32[$77>>2] = 0;
     break;
    }
    $51 = (_strlen(128380)|0);
    $52 = ($51>>>0)>(0);
    if ($52) {
     HEAP32[$vararg_buffer6>>2] = 128380;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = (31976);
     (_snprintf($4,300,15808,$vararg_buffer6)|0);
     $53 = HEAP32[8088]|0;
     _memcpy(($$byval_copy10|0),($2|0),3216)|0;
     _ValLabel($6,$4,$53,$$byval_copy10,232);
     _memcpy(($3|0),($6|0),3216)|0;
    } else {
     $54 = HEAP32[8088]|0;
     _memcpy(($$byval_copy11|0),($2|0),3216)|0;
     _ValLabel($7,(31976),$54,$$byval_copy11,232);
     _memcpy(($3|0),($7|0),3216)|0;
    }
    $55 = ((($3)) + 84|0);
    $56 = HEAP32[$55>>2]|0;
    $57 = ($56|0)==(3);
    if ($57) {
     $58 = ((($3)) + 104|0);
     $59 = (_strlen($58)|0);
     $60 = ((($1)) + 88|0);
     HEAP32[$60>>2] = $59;
     $61 = ((($1)) + 84|0);
     HEAP32[$61>>2] = 0;
     break;
    }
    $62 = ((($3)) + 84|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)>=(6);
    if ($64) {
     $65 = ((($3)) + 84|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)<=(8);
     if ($67) {
      $68 = ((($3)) + 1020|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ((($1)) + 88|0);
      HEAP32[$70>>2] = $69;
      $71 = ((($1)) + 84|0);
      HEAP32[$71>>2] = 0;
      break;
     }
    }
    $72 = ((($3)) + 1020|0);
    $73 = HEAP32[$72>>2]|0;
    $74 = ((($1)) + 88|0);
    HEAP32[$74>>2] = $73;
    $75 = ((($1)) + 84|0);
    HEAP32[$75>>2] = 0;
   }
  }
 } while(0);
 $78 = ((($2)) + 4|0);
 $79 = HEAP32[$78>>2]|0;
 $80 = ($79|0)!=(0|0);
 if ($80) {
  $81 = ((($2)) + 4|0);
  $82 = HEAP32[$81>>2]|0;
  _free($82);
 }
 $83 = ((($2)) + 8|0);
 $84 = HEAP32[$83>>2]|0;
 $85 = ($84|0)!=(0|0);
 if ($85) {
  $86 = ((($2)) + 8|0);
  $87 = HEAP32[$86>>2]|0;
  _free($87);
 }
 $88 = HEAP32[$2>>2]|0;
 $89 = ($88|0)!=(0|0);
 if ($89) {
  $90 = HEAP32[$2>>2]|0;
  _free($90);
 }
 $91 = ((($3)) + 4|0);
 $92 = HEAP32[$91>>2]|0;
 $93 = ($92|0)!=(0|0);
 if ($93) {
  $94 = ((($3)) + 4|0);
  $95 = HEAP32[$94>>2]|0;
  _free($95);
 }
 $96 = ((($3)) + 8|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)!=(0|0);
 if ($98) {
  $99 = ((($3)) + 8|0);
  $100 = HEAP32[$99>>2]|0;
  _free($100);
 }
 $101 = HEAP32[$3>>2]|0;
 $102 = ($101|0)!=(0|0);
 if (!($102)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $103 = HEAP32[$3>>2]|0;
 _free($103);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _funcLingkup($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $$byval_copy34 = 0, $$byval_copy35 = 0, $$byval_copy36 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr29 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 36688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(36688|0);
 $$byval_copy36 = sp + 32264|0;
 $$byval_copy35 = sp + 29048|0;
 $$byval_copy34 = sp + 36064|0;
 $$byval_copy33 = sp + 35800|0;
 $$byval_copy32 = sp + 25832|0;
 $$byval_copy = sp + 22616|0;
 $vararg_buffer30 = sp + 22608|0;
 $vararg_buffer26 = sp + 22600|0;
 $vararg_buffer24 = sp + 22592|0;
 $vararg_buffer22 = sp + 22584|0;
 $vararg_buffer20 = sp + 22576|0;
 $vararg_buffer18 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer13 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer7 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $5 = sp + 36376|0;
 $6 = sp + 9648|0;
 $7 = sp + 6432|0;
 $8 = sp + 35480|0;
 $9 = sp + 3216|0;
 $10 = sp;
 $4 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,300)|0;
 (_getlex()|0);
 $11 = HEAP32[7954]|0;
 $12 = ($11|0)==(223);
 do {
  if ($12) {
   _Error(12887,$vararg_buffer);
  } else {
   $13 = HEAP32[7954]|0;
   $14 = ($13|0)==(226);
   if ($14) {
    _Error(12887,$vararg_buffer2);
    break;
   }
   $15 = HEAP32[7954]|0;
   $16 = ($15|0)==(225);
   if ($16) {
    $17 = ((($1)) + 104|0);
    _getLingkup((31976),$17);
    $18 = ((($1)) + 84|0);
    HEAP32[$18>>2] = 3;
    break;
   }
   $19 = HEAP32[7954]|0;
   $20 = ($19|0)==(228);
   if (!($20)) {
    $91 = (_strlen(128380)|0);
    $92 = ($91>>>0)>(0);
    if ($92) {
     HEAP32[$vararg_buffer26>>2] = 128380;
     $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
     HEAP32[$vararg_ptr29>>2] = (31976);
     (_snprintf($5,300,15808,$vararg_buffer26)|0);
     $93 = HEAP32[8088]|0;
     _memcpy(($$byval_copy35|0),($1|0),3216)|0;
     _ValLabel($9,$5,$93,$$byval_copy35,232);
     _memcpy(($1|0),($9|0),3216)|0;
    } else {
     $94 = HEAP32[8088]|0;
     _memcpy(($$byval_copy36|0),($1|0),3216)|0;
     _ValLabel($10,(31976),$94,$$byval_copy36,232);
     _memcpy(($1|0),($10|0),3216)|0;
    }
    $95 = ((($1)) + 84|0);
    $96 = HEAP32[$95>>2]|0;
    $97 = ($96|0)==(3);
    if ($97) {
     $98 = ((($1)) + 104|0);
     $99 = ((($1)) + 104|0);
     _getLingkup($98,$99);
     $100 = ((($1)) + 84|0);
     HEAP32[$100>>2] = 3;
     break;
    } else {
     _Error(12887,$vararg_buffer30);
     break;
    }
   }
   $21 = (_strlen((31976))|0);
   $22 = ($21>>>0)>(0);
   if ($22) {
    $23 = ((($2)) + 420|0);
    (_strcpy($23,(31976))|0);
    $24 = ((($2)) + 720|0);
    _getArrayName((31976),$24);
    $25 = ((($2)) + 870|0);
    _getArrayIdx((31976),$25);
    $26 = (_strlen(128380)|0);
    $27 = ($26>>>0)>(0);
    if ($27) {
     $28 = ((($2)) + 720|0);
     HEAP32[$vararg_buffer4>>2] = 128380;
     $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
     HEAP32[$vararg_ptr6>>2] = $28;
     (_snprintf($5,300,15808,$vararg_buffer4)|0);
     $29 = ((($2)) + 720|0);
     _memset(($29|0),0,150)|0;
     $30 = ((($2)) + 720|0);
     (_strcpy($30,$5)|0);
     $31 = ((($2)) + 870|0);
     $32 = HEAP8[$31>>0]|0;
     $33 = $32 << 24 >> 24;
     $34 = (_isdigit($33)|0);
     $35 = ($34|0)!=(0);
     if (!($35)) {
      _memset(($5|0),0,300)|0;
      $36 = ((($2)) + 870|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $36;
      (_snprintf($5,300,15808,$vararg_buffer7)|0);
      $37 = ((($2)) + 870|0);
      _memset(($37|0),0,150)|0;
      $38 = ((($2)) + 870|0);
      (_strcpy($38,$5)|0);
     }
    }
    $39 = ((($2)) + 870|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = (_isdigit($41)|0);
    $43 = ($42|0)!=(0);
    $44 = ((($2)) + 870|0);
    do {
     if ($43) {
      $45 = (_atol($44)|0);
      $4 = $45;
     } else {
      $46 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($3|0),3216)|0;
      _ValLabel($6,$44,$46,$$byval_copy,232);
      _memcpy(($3|0),($6|0),3216)|0;
      $47 = ((($3)) + 84|0);
      $48 = HEAP32[$47>>2]|0;
      $49 = ($48|0)==(0);
      if ($49) {
       $50 = ((($3)) + 88|0);
       $51 = HEAP32[$50>>2]|0;
       $4 = $51;
       break;
      } else {
       _Error(16065,$vararg_buffer11);
       break;
      }
     }
    } while(0);
    $52 = ((($2)) + 720|0);
    $53 = HEAP32[8088]|0;
    _memcpy(($$byval_copy32|0),($2|0),3216)|0;
    _ValLabel($7,$52,$53,$$byval_copy32,232);
    _memcpy(($2|0),($7|0),3216)|0;
    $54 = ((($2)) + 870|0);
    $55 = $4;
    HEAP32[$vararg_buffer13>>2] = $55;
    (_snprintf($54,150,16087,$vararg_buffer13)|0);
    $56 = $4;
    $57 = ($56|0)<(0);
    $58 = $4;
    $59 = ($58|0)>(99999000);
    $or$cond = $57 | $59;
    if ($or$cond) {
     _Error(16096,$vararg_buffer16);
    }
    $60 = ((($2)) + 84|0);
    $61 = HEAP32[$60>>2]|0;
    $62 = ($61|0)==(8);
    if ($62) {
     $63 = ((($2)) + 412|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = ($64|0)!=(0);
     if ($65) {
      $66 = ((($2)) + 412|0);
      $67 = HEAP32[$66>>2]|0;
      $68 = ($67|0)==(0);
      if ($68) {
       _Error(12915,$vararg_buffer18);
      }
      _memset(((72140)|0),0,256)|0;
      $69 = ((($2)) + 720|0);
      (_strcpy((72140),$69)|0);
      _memcpy(($$byval_copy33|0),((72136)|0),264)|0;
      $70 = (_stackStr_getID($$byval_copy33)|0);
      HEAP32[8086] = $70;
      $71 = HEAP32[8086]|0;
      $72 = ($71|0)<(0);
      do {
       if ($72) {
        (_printf(16303,$vararg_buffer20)|0);
       } else {
        $73 = HEAP32[8086]|0;
        HEAP32[17956] = $73;
        $74 = $4;
        HEAP32[(71828)>>2] = $74;
        _memcpy(($$byval_copy34|0),(71824|0),312)|0;
        $75 = (_string_findData($$byval_copy34)|0);
        HEAP32[8074] = $75;
        $76 = HEAP32[8074]|0;
        $77 = ($76|0)<(0);
        if ($77) {
         (_printf(11878,$vararg_buffer22)|0);
         break;
        } else {
         $78 = HEAP32[8074]|0;
         _string_getElement($8,$78);
         _memcpy((71824|0),($8|0),312)|0;
         $79 = ((($1)) + 104|0);
         _getLingkup((71832),$79);
         break;
        }
       }
      } while(0);
      $80 = ((($1)) + 84|0);
      HEAP32[$80>>2] = 3;
      break;
     }
    }
    $81 = ((($2)) + 84|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ($82|0)==(10);
    if ($83) {
     $84 = $4;
     $85 = ((($2)) + 1024|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = (($86) + ($84<<2)|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = ((($1)) + 104|0);
     _getLingkup($88,$89);
     $90 = ((($1)) + 84|0);
     HEAP32[$90>>2] = 3;
     break;
    } else {
     _Error(12887,$vararg_buffer24);
     break;
    }
   }
  }
 } while(0);
 $101 = ((($2)) + 3196|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = ((($2)) + 3196|0);
  $105 = HEAP32[$104>>2]|0;
  _free($105);
 }
 $106 = ((($2)) + 3200|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = ((($2)) + 3200|0);
  $110 = HEAP32[$109>>2]|0;
  _free($110);
 }
 $111 = ((($2)) + 1796|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)!=(0|0);
 if ($113) {
  $114 = ((($2)) + 1796|0);
  $115 = HEAP32[$114>>2]|0;
  _free($115);
 }
 $116 = ((($2)) + 1024|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = ((($2)) + 1024|0);
  $120 = HEAP32[$119>>2]|0;
  _free($120);
 }
 $121 = ((($2)) + 4|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = ((($2)) + 4|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
 }
 $126 = ((($2)) + 8|0);
 $127 = HEAP32[$126>>2]|0;
 $128 = ($127|0)!=(0|0);
 if ($128) {
  $129 = ((($2)) + 8|0);
  $130 = HEAP32[$129>>2]|0;
  _free($130);
 }
 $131 = HEAP32[$2>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = HEAP32[$2>>2]|0;
  _free($133);
 }
 $134 = ((($3)) + 3196|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = ((($3)) + 3196|0);
  $138 = HEAP32[$137>>2]|0;
  _free($138);
 }
 $139 = ((($3)) + 3200|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = ((($3)) + 3200|0);
  $143 = HEAP32[$142>>2]|0;
  _free($143);
 }
 $144 = ((($3)) + 1796|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = ((($3)) + 1796|0);
  $148 = HEAP32[$147>>2]|0;
  _free($148);
 }
 $149 = ((($3)) + 1024|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($150|0)!=(0|0);
 if ($151) {
  $152 = ((($3)) + 1024|0);
  $153 = HEAP32[$152>>2]|0;
  _free($153);
 }
 $154 = ((($3)) + 4|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = ((($3)) + 4|0);
  $158 = HEAP32[$157>>2]|0;
  _free($158);
 }
 $159 = ((($3)) + 8|0);
 $160 = HEAP32[$159>>2]|0;
 $161 = ($160|0)!=(0|0);
 if ($161) {
  $162 = ((($3)) + 8|0);
  $163 = HEAP32[$162>>2]|0;
  _free($163);
 }
 $164 = HEAP32[$3>>2]|0;
 $165 = ($164|0)!=(0|0);
 if (!($165)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $166 = HEAP32[$3>>2]|0;
 _free($166);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _getLingkup($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $4 = 0;
 $5 = $2;
 $6 = (_getenv(($5|0))|0);
 $4 = $6;
 $7 = $4;
 $8 = ($7|0)!=(0|0);
 if ($8) {
  $9 = $4;
  $10 = (_strlen($9)|0);
  $11 = ($10>>>0)>(0);
  if ($11) {
   $12 = $3;
   $13 = $4;
   (_strcpy($12,$13)|0);
   STACKTOP = sp;return;
  }
 }
 $14 = $3;
 (_strcpy($14,1358125)|0);
 STACKTOP = sp;return;
}
function _funcKONFIGURASI($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 14416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(14416|0);
 $$byval_copy = sp + 9696|0;
 $vararg_buffer12 = sp + 9688|0;
 $vararg_buffer9 = sp + 9680|0;
 $vararg_buffer6 = sp + 9672|0;
 $vararg_buffer3 = sp + 9664|0;
 $vararg_buffer1 = sp + 9656|0;
 $vararg_buffer = sp + 9648|0;
 $1 = sp + 6432|0;
 $2 = sp + 14116|0;
 $3 = sp + 13816|0;
 $4 = sp + 13216|0;
 $6 = sp + 3216|0;
 $7 = sp + 12916|0;
 $8 = sp;
 $5 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 _memset(($4|0),0,600)|0;
 _memset(($6|0),0,3216)|0;
 _memset(($7|0),0,300)|0;
 $5 = 0;
 while(1) {
  (_getlex()|0);
  $9 = HEAP32[7954]|0;
  $10 = ($9|0)==(223);
  do {
   if ($10) {
    _Error(12957,$vararg_buffer);
   } else {
    $11 = HEAP32[7954]|0;
    $12 = ($11|0)==(225);
    if ($12) {
     $13 = $5;
     $14 = ($13|0)==(0);
     if ($14) {
      HEAP32[$vararg_buffer1>>2] = (31976);
      (_snprintf($2,300,19231,$vararg_buffer1)|0);
     }
     $15 = $5;
     $16 = ($15|0)==(1);
     if (!($16)) {
      break;
     }
     HEAP32[$vararg_buffer3>>2] = (31976);
     (_snprintf($3,300,19231,$vararg_buffer3)|0);
     break;
    }
    $17 = HEAP32[8088]|0;
    _memcpy(($$byval_copy|0),($1|0),3216)|0;
    _ValLabel($8,(31976),$17,$$byval_copy,232);
    _memcpy(($1|0),($8|0),3216)|0;
    $18 = ((($1)) + 104|0);
    $19 = (_strlen($18)|0);
    $20 = ($19>>>0)>(0);
    if ($20) {
     $21 = $5;
     $22 = ($21|0)==(0);
     if ($22) {
      $23 = ((($1)) + 104|0);
      HEAP32[$vararg_buffer6>>2] = $23;
      (_snprintf($2,300,19231,$vararg_buffer6)|0);
     }
     $24 = $5;
     $25 = ($24|0)==(1);
     if ($25) {
      $26 = ((($1)) + 104|0);
      HEAP32[$vararg_buffer9>>2] = $26;
      (_snprintf($3,300,19231,$vararg_buffer9)|0);
     }
    }
   }
  } while(0);
  $27 = $5;
  $28 = (($27) + 1)|0;
  $5 = $28;
  (_getlex()|0);
  $29 = HEAP32[7954]|0;
  $30 = ($29|0)==(227);
  if (!($30)) {
   break;
  }
  $31 = HEAP8[(31976)>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(44);
  if (!($33)) {
   break;
  }
 }
 _ungetlex();
 $34 = $5;
 $35 = ($34|0)!=(2);
 if ($35) {
  _Error(12957,$vararg_buffer12);
 } else {
  (_getFromConf($2,$3,$4)|0);
  $36 = ((($1)) + 104|0);
  (_strcpy($36,$4)|0);
  $37 = ((($1)) + 84|0);
  HEAP32[$37>>2] = 3;
 }
 $38 = ((($6)) + 3196|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)!=(0|0);
 if ($40) {
  $41 = ((($6)) + 3196|0);
  $42 = HEAP32[$41>>2]|0;
  _free($42);
 }
 $43 = ((($6)) + 3200|0);
 $44 = HEAP32[$43>>2]|0;
 $45 = ($44|0)!=(0|0);
 if ($45) {
  $46 = ((($6)) + 3200|0);
  $47 = HEAP32[$46>>2]|0;
  _free($47);
 }
 $48 = ((($6)) + 1796|0);
 $49 = HEAP32[$48>>2]|0;
 $50 = ($49|0)!=(0|0);
 if ($50) {
  $51 = ((($6)) + 1796|0);
  $52 = HEAP32[$51>>2]|0;
  _free($52);
 }
 $53 = ((($6)) + 1024|0);
 $54 = HEAP32[$53>>2]|0;
 $55 = ($54|0)!=(0|0);
 if ($55) {
  $56 = ((($6)) + 1024|0);
  $57 = HEAP32[$56>>2]|0;
  _free($57);
 }
 $58 = ((($6)) + 4|0);
 $59 = HEAP32[$58>>2]|0;
 $60 = ($59|0)!=(0|0);
 if ($60) {
  $61 = ((($6)) + 4|0);
  $62 = HEAP32[$61>>2]|0;
  _free($62);
 }
 $63 = ((($6)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 $65 = ($64|0)!=(0|0);
 if ($65) {
  $66 = ((($6)) + 8|0);
  $67 = HEAP32[$66>>2]|0;
  _free($67);
 }
 $68 = HEAP32[$6>>2]|0;
 $69 = ($68|0)!=(0|0);
 if (!($69)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $70 = HEAP32[$6>>2]|0;
 _free($70);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _getFromConf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 2704|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(2704|0);
 $vararg_buffer = sp;
 $8 = sp + 648|0;
 $13 = sp + 340|0;
 $14 = sp + 40|0;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $10 = 12989;
 $11 = 0;
 $12 = 0;
 $15 = 0;
 $16 = $4;
 $17 = (_fopen($16,16704)|0);
 $7 = $17;
 $18 = $7;
 $19 = ($18|0)==(0|0);
 if ($19) {
  $20 = $4;
  HEAP32[$vararg_buffer>>2] = $20;
  _Error(12992,$vararg_buffer);
  $3 = 0;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 }
 _memset(($8|0),0,2048)|0;
 _memset(($13|0),0,300)|0;
 _memset(($14|0),0,300)|0;
 while(1) {
  $21 = $7;
  $22 = (_fgets($8,2048,$21)|0);
  $23 = ($22|0)!=(0|0);
  if (!($23)) {
   label = 23;
   break;
  }
  $24 = HEAP8[$8>>0]|0;
  $9 = $24;
  $25 = $9;
  $26 = $25 << 24 >> 24;
  $27 = ($26|0)!=(35);
  if ($27) {
   $28 = $9;
   $29 = $28 << 24 >> 24;
   $30 = ($29|0)!=(0);
   if ($30) {
    $31 = $9;
    $32 = $31 << 24 >> 24;
    $33 = ($32|0)!=(10);
    if ($33) {
     $34 = $9;
     $35 = $34 << 24 >> 24;
     $36 = ($35|0)!=(13);
     if ($36) {
      $37 = $10;
      $38 = (_split($8,$37)|0);
      $12 = $38;
      $39 = $12;
      $40 = ($39|0)!=(0|0);
      if ($40) {
       $11 = 0;
       while(1) {
        $41 = $11;
        $42 = $12;
        $43 = (($42) + ($41<<2)|0);
        $44 = HEAP32[$43>>2]|0;
        $45 = ($44|0)!=(0|0);
        if (!($45)) {
         break;
        }
        _memset(($13|0),0,300)|0;
        _memset(($14|0),0,300)|0;
        $46 = $12;
        $47 = HEAP32[$46>>2]|0;
        (_strcpy($13,$47)|0);
        $48 = $12;
        $49 = ((($48)) + 4|0);
        $50 = HEAP32[$49>>2]|0;
        (_strcpy($14,$50)|0);
        $51 = $11;
        $52 = (($51) + 1)|0;
        $11 = $52;
       }
       $53 = $12;
       _split_free($53);
      }
      $54 = $5;
      $55 = (_strcmp($13,$54)|0);
      $56 = ($55|0)==(0);
      if ($56) {
       label = 15;
       break;
      }
     }
    }
   }
  }
  _memset(($8|0),0,2048)|0;
 }
 if ((label|0) == 15) {
  $57 = $6;
  (_strcpy($57,$14)|0);
  $58 = $7;
  (_fclose($58)|0);
  $59 = $12;
  $60 = ($59|0)!=(0|0);
  if ($60) {
   $11 = 0;
   while(1) {
    $61 = $11;
    $62 = $12;
    $63 = (($62) + ($61<<2)|0);
    $64 = HEAP32[$63>>2]|0;
    $65 = ($64|0)!=(0|0);
    if (!($65)) {
     break;
    }
    $66 = $11;
    $67 = (($66) + 1)|0;
    $11 = $67;
   }
   $68 = $12;
   $69 = ($68|0)!=(0|0);
   if ($69) {
    $70 = $12;
    $71 = ((($70)) + -4|0);
    $12 = $71;
    $72 = $12;
    $73 = HEAP32[$72>>2]|0;
    _free($73);
    $74 = $12;
    _free($74);
   }
  }
  $3 = 1;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 }
 else if ((label|0) == 23) {
  $75 = $7;
  (_fclose($75)|0);
  $76 = $12;
  $77 = ($76|0)!=(0|0);
  if ($77) {
   $11 = 0;
   while(1) {
    $78 = $11;
    $79 = $12;
    $80 = (($79) + ($78<<2)|0);
    $81 = HEAP32[$80>>2]|0;
    $82 = ($81|0)!=(0|0);
    if (!($82)) {
     break;
    }
    $83 = $11;
    $84 = (($83) + 1)|0;
    $11 = $84;
   }
   $85 = $12;
   $86 = ($85|0)!=(0|0);
   if ($86) {
    $87 = $12;
    $88 = ((($87)) + -4|0);
    $12 = $88;
    $89 = $12;
    $90 = HEAP32[$89>>2]|0;
    _free($90);
    $91 = $12;
    _free($91);
   }
  }
  $3 = 1;
  $92 = $3;
  STACKTOP = sp;return ($92|0);
 }
 return (0)|0;
}
function _SQLInterpreter($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0;
 var $$byval_copy33 = 0, $$byval_copy34 = 0, $$byval_copy35 = 0, $$byval_copy36 = 0, $$byval_copy37 = 0, $$byval_copy38 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0;
 var $31 = 0, $310 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0;
 var $vararg_buffer6 = 0, $vararg_buffer9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 11968|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(11968|0);
 $$byval_copy38 = sp + 7728|0;
 $$byval_copy37 = sp + 7424|0;
 $$byval_copy36 = sp + 7408|0;
 $$byval_copy35 = sp + 7104|0;
 $$byval_copy34 = sp + 7088|0;
 $$byval_copy33 = sp + 6784|0;
 $$byval_copy32 = sp + 6768|0;
 $$byval_copy31 = sp + 6464|0;
 $$byval_copy30 = sp + 6448|0;
 $$byval_copy29 = sp + 6144|0;
 $$byval_copy28 = sp + 6128|0;
 $$byval_copy27 = sp + 5824|0;
 $$byval_copy26 = sp + 5808|0;
 $$byval_copy25 = sp + 5504|0;
 $$byval_copy24 = sp + 5488|0;
 $$byval_copy23 = sp + 5184|0;
 $$byval_copy22 = sp + 5168|0;
 $$byval_copy21 = sp + 4864|0;
 $$byval_copy20 = sp + 4848|0;
 $$byval_copy19 = sp + 4544|0;
 $$byval_copy18 = sp + 4528|0;
 $$byval_copy17 = sp + 4224|0;
 $$byval_copy16 = sp + 4208|0;
 $$byval_copy15 = sp + 3904|0;
 $$byval_copy14 = sp + 3888|0;
 $$byval_copy = sp + 3584|0;
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer9 = sp + 32|0;
 $vararg_buffer6 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $2 = sp + 3272|0;
 $3 = sp + 3256|0;
 $4 = sp + 2936|0;
 $5 = sp + 7872|0;
 $6 = sp + 7808|0;
 $8 = sp + 7744|0;
 $9 = sp + 2608|0;
 $10 = sp + 2288|0;
 $11 = sp + 1968|0;
 $12 = sp + 1648|0;
 $13 = sp + 1328|0;
 $14 = sp + 1008|0;
 $15 = sp + 688|0;
 $16 = sp + 368|0;
 $17 = sp + 48|0;
 $1 = $0;
 $7 = 0;
 _memset(($2|0),0,304)|0;
 ;HEAP32[$3>>2]=0|0;HEAP32[$3+4>>2]=0|0;HEAP32[$3+8>>2]=0|0;
 _memcpy(($$byval_copy|0),($2|0),304)|0;
 ;HEAP32[$$byval_copy14>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy14+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy14+8>>2]=HEAP32[$3+8>>2]|0;
 $18 = (_SQLValLabel($$byval_copy,$$byval_copy14,13015,0,10)|0);
 $19 = ($18|0)!=(0);
 if ($19) {
  _memcpy(($$byval_copy15|0),($2|0),304)|0;
  ;HEAP32[$$byval_copy16>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy16+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy16+8>>2]=HEAP32[$3+8>>2]|0;
  _SQLError($$byval_copy15,$$byval_copy16,13023,$vararg_buffer);
 }
 _memset(($5|0),0,4096)|0;
 _memset(($2|0),0,304)|0;
 HEAP32[$3>>2] = 0;
 $20 = ((($3)) + 4|0);
 HEAP32[$20>>2] = 0;
 $21 = $1;
 $22 = (_strlen($21)|0);
 $23 = (($22) + 1)|0;
 $24 = (_malloc($23)|0);
 $25 = ((($3)) + 8|0);
 HEAP32[$25>>2] = $24;
 $26 = $1;
 $27 = ((($3)) + 8|0);
 HEAP32[$27>>2] = $26;
 while(1) {
  dest=$6; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
  _memcpy(($$byval_copy17|0),($2|0),304)|0;
  ;HEAP32[$$byval_copy18>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy18+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy18+8>>2]=HEAP32[$3+8>>2]|0;
  _SQLgetlex($9,$$byval_copy17,$$byval_copy18);
  _memcpy(($4|0),($9|0),320)|0;
  _memcpy(($2|0),($4|0),304)|0;
  $28 = ((($4)) + 304|0);
  ;HEAP32[$3>>2]=HEAP32[$28>>2]|0;HEAP32[$3+4>>2]=HEAP32[$28+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$28+8>>2]|0;
  $29 = HEAP32[$2>>2]|0;
  L6: do {
   switch ($29|0) {
   case 0:  {
    HEAP32[$2>>2] = 5;
    break;
   }
   case 9:  {
    $30 = ((($2)) + 4|0);
    (_strcpy($6,$30)|0);
    (_strcat($5,$6)|0);
    break;
   }
   case 8:  {
    $31 = ((($2)) + 4|0);
    HEAP32[$vararg_buffer1>>2] = $31;
    (_snprintf($6,64,13060,$vararg_buffer1)|0);
    (_strcat($5,$6)|0);
    break;
   }
   case 7:  {
    dest=$8; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    $32 = ((($2)) + 4|0);
    (_strcpy($8,$32)|0);
    $33 = (_strcmp($8,13066)|0);
    $34 = ($33|0)!=(0);
    if ($34) {
     $35 = (_strcmp($8,13072)|0);
     $36 = ($35|0)!=(0);
     if ($36) {
      $45 = (_strcmp($8,13122)|0);
      $46 = ($45|0)!=(0);
      if ($46) {
       $47 = (_strcmp($8,13127)|0);
       $48 = ($47|0)!=(0);
       if ($48) {
        $49 = (_strcmp($8,13139)|0);
        $50 = ($49|0)!=(0);
        if ($50) {
         $51 = (_strcmp($8,13148)|0);
         $52 = ($51|0)!=(0);
         if ($52) {
          $53 = (_strcmp($8,13170)|0);
          $54 = ($53|0)!=(0);
          if ($54) {
           $55 = (_strcmp($8,13179)|0);
           $56 = ($55|0)!=(0);
           if ($56) {
            $57 = (_strcmp($8,13200)|0);
            $58 = ($57|0)!=(0);
            if ($58) {
             $59 = (_strcmp($8,13209)|0);
             $60 = ($59|0)!=(0);
             if ($60) {
              $61 = (_strcmp($8,13226)|0);
              $62 = ($61|0)!=(0);
              do {
               if ($62) {
                $63 = (_strcmp($8,13235)|0);
                $64 = ($63|0)!=(0);
                if (!($64)) {
                 break;
                }
                $65 = (_strcmp($8,13252)|0);
                $66 = ($65|0)!=(0);
                do {
                 if ($66) {
                  $67 = (_strcmp($8,13258)|0);
                  $68 = ($67|0)!=(0);
                  if (!($68)) {
                   break;
                  }
                  $69 = (_strcmp($8,13272)|0);
                  $70 = ($69|0)!=(0);
                  do {
                   if ($70) {
                    $71 = (_strcmp($8,13280)|0);
                    $72 = ($71|0)!=(0);
                    if (!($72)) {
                     break;
                    }
                    $77 = (_strcmp($8,13310)|0);
                    $78 = ($77|0)!=(0);
                    do {
                     if ($78) {
                      $79 = (_strcmp($8,13315)|0);
                      $80 = ($79|0)!=(0);
                      if (!($80)) {
                       break;
                      }
                      $88 = (_strcmp($8,13340)|0);
                      $89 = ($88|0)!=(0);
                      do {
                       if ($89) {
                        $90 = (_strcmp($8,13346)|0);
                        $91 = ($90|0)!=(0);
                        if (!($91)) {
                         break;
                        }
                        $99 = (_strcmp($8,13377)|0);
                        $100 = ($99|0)!=(0);
                        do {
                         if ($100) {
                          $101 = (_strcmp($8,13384)|0);
                          $102 = ($101|0)!=(0);
                          if (!($102)) {
                           break;
                          }
                          $105 = (_strcmp($8,13401)|0);
                          $106 = ($105|0)!=(0);
                          do {
                           if ($106) {
                            $107 = (_strcmp($8,13405)|0);
                            $108 = ($107|0)!=(0);
                            if (!($108)) {
                             break;
                            }
                            $109 = (_strcmp($8,13414)|0);
                            $110 = ($109|0)!=(0);
                            do {
                             if ($110) {
                              $111 = (_strcmp($8,13418)|0);
                              $112 = ($111|0)!=(0);
                              if (!($112)) {
                               break;
                              }
                              $113 = (_strcmp($8,13427)|0);
                              $114 = ($113|0)!=(0);
                              do {
                               if ($114) {
                                $115 = (_strcmp($8,13432)|0);
                                $116 = ($115|0)!=(0);
                                if (!($116)) {
                                 break;
                                }
                                $117 = (_strcmp($8,13441)|0);
                                $118 = ($117|0)!=(0);
                                do {
                                 if ($118) {
                                  $119 = (_strcmp($8,13447)|0);
                                  $120 = ($119|0)!=(0);
                                  if (!($120)) {
                                   break;
                                  }
                                  $121 = (_strcmp($8,13457)|0);
                                  $122 = ($121|0)!=(0);
                                  do {
                                   if ($122) {
                                    $123 = (_strcmp($8,16172)|0);
                                    $124 = ($123|0)!=(0);
                                    if (!($124)) {
                                     break;
                                    }
                                    $125 = (_strcmp($8,13464)|0);
                                    $126 = ($125|0)!=(0);
                                    if (!($126)) {
                                     break;
                                    }
                                    $127 = (_strcmp($8,13471)|0);
                                    $128 = ($127|0)!=(0);
                                    if (!($128)) {
                                     break;
                                    }
                                    $129 = (_strcmp($8,13481)|0);
                                    $130 = ($129|0)!=(0);
                                    do {
                                     if ($130) {
                                      $131 = (_strcmp($8,13490)|0);
                                      $132 = ($131|0)!=(0);
                                      if (!($132)) {
                                       break;
                                      }
                                      $133 = (_strcmp($8,13504)|0);
                                      $134 = ($133|0)!=(0);
                                      do {
                                       if ($134) {
                                        $135 = (_strcmp($8,13516)|0);
                                        $136 = ($135|0)!=(0);
                                        if (!($136)) {
                                         break;
                                        }
                                        $137 = (_strcmp($8,13536)|0);
                                        $138 = ($137|0)!=(0);
                                        do {
                                         if ($138) {
                                          $139 = (_strcmp($8,13540)|0);
                                          $140 = ($139|0)!=(0);
                                          if (!($140)) {
                                           break;
                                          }
                                          $141 = (_strcmp($8,13553)|0);
                                          $142 = ($141|0)!=(0);
                                          do {
                                           if ($142) {
                                            $143 = (_strcmp($8,13562)|0);
                                            $144 = ($143|0)!=(0);
                                            if (!($144)) {
                                             break;
                                            }
                                            $145 = (_strcmp($8,13577)|0);
                                            $146 = ($145|0)!=(0);
                                            do {
                                             if ($146) {
                                              $147 = (_strcmp($8,13583)|0);
                                              $148 = ($147|0)!=(0);
                                              if (!($148)) {
                                               break;
                                              }
                                              $149 = (_strcmp($8,13594)|0);
                                              $150 = ($149|0)!=(0);
                                              do {
                                               if ($150) {
                                                $151 = (_strcmp($8,13602)|0);
                                                $152 = ($151|0)!=(0);
                                                if (!($152)) {
                                                 break;
                                                }
                                                $153 = (_strcmp($8,13616)|0);
                                                $154 = ($153|0)!=(0);
                                                do {
                                                 if ($154) {
                                                  $155 = (_strcmp($8,13623)|0);
                                                  $156 = ($155|0)!=(0);
                                                  if (!($156)) {
                                                   break;
                                                  }
                                                  $169 = (_strcmp($8,13674)|0);
                                                  $170 = ($169|0)!=(0);
                                                  do {
                                                   if ($170) {
                                                    $171 = (_strcmp($8,13683)|0);
                                                    $172 = ($171|0)!=(0);
                                                    if (!($172)) {
                                                     break;
                                                    }
                                                    $173 = (_strcmp($8,13697)|0);
                                                    $174 = ($173|0)!=(0);
                                                    do {
                                                     if ($174) {
                                                      $175 = (_strcmp($8,13705)|0);
                                                      $176 = ($175|0)!=(0);
                                                      if (!($176)) {
                                                       break;
                                                      }
                                                      $177 = (_strcmp($8,13719)|0);
                                                      $178 = ($177|0)!=(0);
                                                      do {
                                                       if ($178) {
                                                        $179 = (_strcmp($8,13725)|0);
                                                        $180 = ($179|0)!=(0);
                                                        if (!($180)) {
                                                         break;
                                                        }
                                                        $181 = (_strcmp($8,13735)|0);
                                                        $182 = ($181|0)!=(0);
                                                        do {
                                                         if ($182) {
                                                          $183 = (_strcmp($8,13744)|0);
                                                          $184 = ($183|0)!=(0);
                                                          if (!($184)) {
                                                           break;
                                                          }
                                                          $185 = (_strcmp($8,13761)|0);
                                                          $186 = ($185|0)!=(0);
                                                          do {
                                                           if ($186) {
                                                            $187 = (_strcmp($8,13768)|0);
                                                            $188 = ($187|0)!=(0);
                                                            if (!($188)) {
                                                             break;
                                                            }
                                                            $189 = (_strcmp($8,13780)|0);
                                                            $190 = ($189|0)!=(0);
                                                            do {
                                                             if ($190) {
                                                              $191 = (_strcmp($8,13790)|0);
                                                              $192 = ($191|0)!=(0);
                                                              if (!($192)) {
                                                               break;
                                                              }
                                                              $193 = (_strcmp($8,13805)|0);
                                                              $194 = ($193|0)!=(0);
                                                              do {
                                                               if ($194) {
                                                                $195 = (_strcmp($8,13811)|0);
                                                                $196 = ($195|0)!=(0);
                                                                if (!($196)) {
                                                                 break;
                                                                }
                                                                $197 = (_strcmp($8,13719)|0);
                                                                $198 = ($197|0)!=(0);
                                                                do {
                                                                 if ($198) {
                                                                  $199 = (_strcmp($8,13725)|0);
                                                                  $200 = ($199|0)!=(0);
                                                                  if (!($200)) {
                                                                   break;
                                                                  }
                                                                  $201 = (_strcmp($8,13824)|0);
                                                                  $202 = ($201|0)!=(0);
                                                                  do {
                                                                   if ($202) {
                                                                    $203 = (_strcmp($8,13829)|0);
                                                                    $204 = ($203|0)!=(0);
                                                                    if (!($204)) {
                                                                     break;
                                                                    }
                                                                    $205 = (_strcmp($8,13839)|0);
                                                                    $206 = ($205|0)!=(0);
                                                                    do {
                                                                     if ($206) {
                                                                      $207 = (_strcmp($8,13847)|0);
                                                                      $208 = ($207|0)!=(0);
                                                                      if (!($208)) {
                                                                       break;
                                                                      }
                                                                      $209 = (_strcmp($8,13862)|0);
                                                                      $210 = ($209|0)!=(0);
                                                                      do {
                                                                       if ($210) {
                                                                        $211 = (_strcmp($8,13871)|0);
                                                                        $212 = ($211|0)!=(0);
                                                                        if (!($212)) {
                                                                         break;
                                                                        }
                                                                        $246 = (_strcmp($8,14032)|0);
                                                                        $247 = ($246|0)!=(0);
                                                                        do {
                                                                         if ($247) {
                                                                          $248 = (_strcmp($8,14042)|0);
                                                                          $249 = ($248|0)!=(0);
                                                                          if (!($249)) {
                                                                           break;
                                                                          }
                                                                          $250 = (_strcmp($8,14061)|0);
                                                                          $251 = ($250|0)!=(0);
                                                                          do {
                                                                           if ($251) {
                                                                            $252 = (_strcmp($8,14076)|0);
                                                                            $253 = ($252|0)!=(0);
                                                                            if (!($253)) {
                                                                             break;
                                                                            }
                                                                            $254 = (_strcmp($8,14104)|0);
                                                                            $255 = ($254|0)!=(0);
                                                                            do {
                                                                             if ($255) {
                                                                              $256 = (_strcmp($8,14117)|0);
                                                                              $257 = ($256|0)!=(0);
                                                                              if (!($257)) {
                                                                               break;
                                                                              }
                                                                              $258 = (_strcmp($8,14143)|0);
                                                                              $259 = ($258|0)!=(0);
                                                                              do {
                                                                               if ($259) {
                                                                                $260 = (_strcmp($8,14152)|0);
                                                                                $261 = ($260|0)!=(0);
                                                                                if (!($261)) {
                                                                                 break;
                                                                                }
                                                                                $262 = (_strcmp($8,14170)|0);
                                                                                $263 = ($262|0)!=(0);
                                                                                do {
                                                                                 if ($263) {
                                                                                  $264 = (_strcmp($8,14181)|0);
                                                                                  $265 = ($264|0)!=(0);
                                                                                  if (!($265)) {
                                                                                   break;
                                                                                  }
                                                                                  $266 = (_strcmp($8,14201)|0);
                                                                                  $267 = ($266|0)!=(0);
                                                                                  do {
                                                                                   if ($267) {
                                                                                    $268 = (_strcmp($8,14214)|0);
                                                                                    $269 = ($268|0)!=(0);
                                                                                    if (!($269)) {
                                                                                     break;
                                                                                    }
                                                                                    $270 = (_strcmp($8,14234)|0);
                                                                                    $271 = ($270|0)!=(0);
                                                                                    do {
                                                                                     if ($271) {
                                                                                      $272 = (_strcmp($8,14240)|0);
                                                                                      $273 = ($272|0)!=(0);
                                                                                      if (!($273)) {
                                                                                       break;
                                                                                      }
                                                                                      $274 = (_strcmp($8,14252)|0);
                                                                                      $275 = ($274|0)!=(0);
                                                                                      do {
                                                                                       if ($275) {
                                                                                        $276 = (_strcmp($8,14259)|0);
                                                                                        $277 = ($276|0)!=(0);
                                                                                        if (!($277)) {
                                                                                         break;
                                                                                        }
                                                                                        $278 = (_strcmp($8,14272)|0);
                                                                                        $279 = ($278|0)!=(0);
                                                                                        do {
                                                                                         if ($279) {
                                                                                          $280 = (_strcmp($8,14277)|0);
                                                                                          $281 = ($280|0)!=(0);
                                                                                          if (!($281)) {
                                                                                           break;
                                                                                          }
                                                                                          $282 = (_strcmp($8,14288)|0);
                                                                                          $283 = ($282|0)!=(0);
                                                                                          do {
                                                                                           if ($283) {
                                                                                            $284 = (_strcmp($8,14296)|0);
                                                                                            $285 = ($284|0)!=(0);
                                                                                            if (!($285)) {
                                                                                             break;
                                                                                            }
                                                                                            $286 = (_strcmp($8,14310)|0);
                                                                                            $287 = ($286|0)!=(0);
                                                                                            do {
                                                                                             if ($287) {
                                                                                              $288 = (_strcmp($8,14318)|0);
                                                                                              $289 = ($288|0)!=(0);
                                                                                              if (!($289)) {
                                                                                               break;
                                                                                              }
                                                                                              $290 = (_strcmp($8,14331)|0);
                                                                                              $291 = ($290|0)!=(0);
                                                                                              do {
                                                                                               if ($291) {
                                                                                                $292 = (_strcmp($8,14339)|0);
                                                                                                $293 = ($292|0)!=(0);
                                                                                                if (!($293)) {
                                                                                                 break;
                                                                                                }
                                                                                                $294 = (_strcmp($8,14351)|0);
                                                                                                $295 = ($294|0)!=(0);
                                                                                                do {
                                                                                                 if ($295) {
                                                                                                  $296 = (_strcmp($8,14360)|0);
                                                                                                  $297 = ($296|0)!=(0);
                                                                                                  if (!($297)) {
                                                                                                   break;
                                                                                                  }
                                                                                                  $298 = (_strcmp($8,14376)|0);
                                                                                                  $299 = ($298|0)!=(0);
                                                                                                  do {
                                                                                                   if ($299) {
                                                                                                    $300 = (_strcmp($8,14385)|0);
                                                                                                    $301 = ($300|0)!=(0);
                                                                                                    if (!($301)) {
                                                                                                     break;
                                                                                                    }
                                                                                                    $302 = ((($2)) + 4|0);
                                                                                                    HEAP32[$vararg_buffer9>>2] = $302;
                                                                                                    (_snprintf($6,64,16828,$vararg_buffer9)|0);
                                                                                                    (_strcat($5,$6)|0);
                                                                                                    break L6;
                                                                                                   }
                                                                                                  } while(0);
                                                                                                  (_strcat($5,14394)|0);
                                                                                                  break L6;
                                                                                                 }
                                                                                                } while(0);
                                                                                                (_strcat($5,14369)|0);
                                                                                                break L6;
                                                                                               }
                                                                                              } while(0);
                                                                                              (_strcat($5,14347)|0);
                                                                                              break L6;
                                                                                             }
                                                                                            } while(0);
                                                                                            (_strcat($5,14326)|0);
                                                                                            break L6;
                                                                                           }
                                                                                          } while(0);
                                                                                          (_strcat($5,14304)|0);
                                                                                          break L6;
                                                                                         }
                                                                                        } while(0);
                                                                                        (_strcat($5,14282)|0);
                                                                                        break L6;
                                                                                       }
                                                                                      } while(0);
                                                                                      (_strcat($5,14266)|0);
                                                                                      break L6;
                                                                                     }
                                                                                    } while(0);
                                                                                    (_strcat($5,14246)|0);
                                                                                    break L6;
                                                                                   }
                                                                                  } while(0);
                                                                                  (_strcat($5,14227)|0);
                                                                                  break L6;
                                                                                 }
                                                                                } while(0);
                                                                                (_strcat($5,14192)|0);
                                                                                break L6;
                                                                               }
                                                                              } while(0);
                                                                              (_strcat($5,14161)|0);
                                                                              break L6;
                                                                             }
                                                                            } while(0);
                                                                            (_strcat($5,14130)|0);
                                                                            break L6;
                                                                           }
                                                                          } while(0);
                                                                          (_strcat($5,14091)|0);
                                                                          break L6;
                                                                         }
                                                                        } while(0);
                                                                        (_strcat($5,14052)|0);
                                                                        break L6;
                                                                       }
                                                                      } while(0);
                                                                      _memcpy(($$byval_copy31|0),($2|0),304)|0;
                                                                      ;HEAP32[$$byval_copy32>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy32+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy32+8>>2]=HEAP32[$3+8>>2]|0;
                                                                      _SQLgetlex($16,$$byval_copy31,$$byval_copy32);
                                                                      _memcpy(($4|0),($16|0),320)|0;
                                                                      _memcpy(($2|0),($4|0),304)|0;
                                                                      $213 = ((($4)) + 304|0);
                                                                      ;HEAP32[$3>>2]=HEAP32[$213>>2]|0;HEAP32[$3+4>>2]=HEAP32[$213+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$213+8>>2]|0;
                                                                      $214 = ((($2)) + 4|0);
                                                                      (_strcpy($8,$214)|0);
                                                                      $215 = ((($2)) + 4|0);
                                                                      $216 = (_strcmp($215,13719)|0);
                                                                      $217 = ($216|0)!=(0);
                                                                      do {
                                                                       if ($217) {
                                                                        $218 = (_strcmp($8,13725)|0);
                                                                        $219 = ($218|0)!=(0);
                                                                        if (!($219)) {
                                                                         break;
                                                                        }
                                                                        $220 = ((($2)) + 4|0);
                                                                        $221 = (_strcmp($220,13892)|0);
                                                                        $222 = ($221|0)!=(0);
                                                                        do {
                                                                         if ($222) {
                                                                          $223 = (_strcmp($8,13899)|0);
                                                                          $224 = ($223|0)!=(0);
                                                                          if (!($224)) {
                                                                           break;
                                                                          }
                                                                          $225 = ((($2)) + 4|0);
                                                                          $226 = (_strcmp($225,13918)|0);
                                                                          $227 = ($226|0)!=(0);
                                                                          do {
                                                                           if ($227) {
                                                                            $228 = (_strcmp($8,13923)|0);
                                                                            $229 = ($228|0)!=(0);
                                                                            if (!($229)) {
                                                                             break;
                                                                            }
                                                                            (_strcat($5,14026)|0);
                                                                            break L6;
                                                                           }
                                                                          } while(0);
                                                                          _memset(($4|0),0,320)|0;
                                                                          _memcpy(($$byval_copy33|0),($2|0),304)|0;
                                                                          ;HEAP32[$$byval_copy34>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy34+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy34+8>>2]=HEAP32[$3+8>>2]|0;
                                                                          _SQLgetlex($17,$$byval_copy33,$$byval_copy34);
                                                                          _memcpy(($4|0),($17|0),320)|0;
                                                                          _memcpy(($2|0),($4|0),304)|0;
                                                                          $230 = ((($4)) + 304|0);
                                                                          ;HEAP32[$3>>2]=HEAP32[$230>>2]|0;HEAP32[$3+4>>2]=HEAP32[$230+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$230+8>>2]|0;
                                                                          $231 = ((($2)) + 4|0);
                                                                          $232 = (_strcmp($231,13928)|0);
                                                                          $233 = ($232|0)!=(0);
                                                                          do {
                                                                           if ($233) {
                                                                            $234 = (_strcmp($8,13933)|0);
                                                                            $235 = ($234|0)!=(0);
                                                                            if (!($235)) {
                                                                             break;
                                                                            }
                                                                            $236 = ((($2)) + 4|0);
                                                                            $237 = (_strcmp($236,13955)|0);
                                                                            $238 = ($237|0)!=(0);
                                                                            do {
                                                                             if ($238) {
                                                                              $239 = (_strcmp($8,13961)|0);
                                                                              $240 = ($239|0)!=(0);
                                                                              if (!($240)) {
                                                                               break;
                                                                              }
                                                                              $241 = ((($2)) + 4|0);
                                                                              $242 = (_strcmp($241,13985)|0);
                                                                              $243 = ($242|0)!=(0);
                                                                              do {
                                                                               if ($243) {
                                                                                $244 = (_strcmp($8,13991)|0);
                                                                                $245 = ($244|0)!=(0);
                                                                                if (!($245)) {
                                                                                 break;
                                                                                }
                                                                                (_strcat($5,14014)|0);
                                                                                break L6;
                                                                               }
                                                                              } while(0);
                                                                              (_strcat($5,13997)|0);
                                                                              break L6;
                                                                             }
                                                                            } while(0);
                                                                            (_strcat($5,13967)|0);
                                                                            break L6;
                                                                           }
                                                                          } while(0);
                                                                          (_strcat($5,13938)|0);
                                                                          break L6;
                                                                         }
                                                                        } while(0);
                                                                        (_strcat($5,13906)|0);
                                                                        break L6;
                                                                       }
                                                                      } while(0);
                                                                      (_strcat($5,13880)|0);
                                                                      break L6;
                                                                     }
                                                                    } while(0);
                                                                    (_strcat($5,13855)|0);
                                                                    break L6;
                                                                   }
                                                                  } while(0);
                                                                  (_strcat($5,13834)|0);
                                                                  break L6;
                                                                 }
                                                                } while(0);
                                                                (_strcat($5,13731)|0);
                                                                break L6;
                                                               }
                                                              } while(0);
                                                              (_strcat($5,13817)|0);
                                                              break L6;
                                                             }
                                                            } while(0);
                                                            (_strcat($5,13800)|0);
                                                            break L6;
                                                           }
                                                          } while(0);
                                                          (_strcat($5,13775)|0);
                                                          break L6;
                                                         }
                                                        } while(0);
                                                        (_strcat($5,13753)|0);
                                                        break L6;
                                                       }
                                                      } while(0);
                                                      (_strcat($5,13731)|0);
                                                      break L6;
                                                     }
                                                    } while(0);
                                                    (_strcat($5,13713)|0);
                                                    break L6;
                                                   }
                                                  } while(0);
                                                  (_strcat($5,13692)|0);
                                                  break L6;
                                                 }
                                                } while(0);
                                                _memcpy(($$byval_copy29|0),($2|0),304)|0;
                                                ;HEAP32[$$byval_copy30>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy30+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy30+8>>2]=HEAP32[$3+8>>2]|0;
                                                _SQLgetlex($15,$$byval_copy29,$$byval_copy30);
                                                _memcpy(($4|0),($15|0),320)|0;
                                                _memcpy(($2|0),($4|0),304)|0;
                                                $157 = ((($4)) + 304|0);
                                                ;HEAP32[$3>>2]=HEAP32[$157>>2]|0;HEAP32[$3+4>>2]=HEAP32[$157+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$157+8>>2]|0;
                                                $158 = ((($2)) + 4|0);
                                                (_strcpy($8,$158)|0);
                                                $159 = ((($2)) + 4|0);
                                                $160 = (_strcmp($159,13630)|0);
                                                $161 = ($160|0)!=(0);
                                                do {
                                                 if ($161) {
                                                  $162 = (_strcmp($8,13637)|0);
                                                  $163 = ($162|0)!=(0);
                                                  if (!($163)) {
                                                   break;
                                                  }
                                                  $164 = ((($2)) + 4|0);
                                                  $165 = (_strcmp($164,13654)|0);
                                                  $166 = ($165|0)!=(0);
                                                  if ($166) {
                                                   $167 = (_strcmp($8,13659)|0);
                                                   $168 = ($167|0)!=(0);
                                                   if ($168) {
                                                    break L6;
                                                   }
                                                  }
                                                  (_strcat($5,13664)|0);
                                                  break L6;
                                                 }
                                                } while(0);
                                                (_strcat($5,13644)|0);
                                                break L6;
                                               }
                                              } while(0);
                                              (_strcat($5,13610)|0);
                                              break L6;
                                             }
                                            } while(0);
                                            (_strcat($5,13589)|0);
                                            break L6;
                                           }
                                          } while(0);
                                          (_strcat($5,13571)|0);
                                          break L6;
                                         }
                                        } while(0);
                                        (_strcat($5,13544)|0);
                                        break L6;
                                       }
                                      } while(0);
                                      (_strcat($5,13528)|0);
                                      break L6;
                                     }
                                    } while(0);
                                    (_strcat($5,13499)|0);
                                    break L6;
                                   }
                                  } while(0);
                                  (_strcat($5,13475)|0);
                                  break L6;
                                 }
                                } while(0);
                                (_strcat($5,13453)|0);
                                break L6;
                               }
                              } while(0);
                              (_strcpy($6,13437)|0);
                              (_strcat($5,$6)|0);
                              break L6;
                             }
                            } while(0);
                            (_strcpy($6,13422)|0);
                            (_strcat($5,$6)|0);
                            break L6;
                           }
                          } while(0);
                          (_strcpy($6,13409)|0);
                          (_strcat($5,$6)|0);
                          break L6;
                         }
                        } while(0);
                        _memcpy(($$byval_copy27|0),($2|0),304)|0;
                        ;HEAP32[$$byval_copy28>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy28+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy28+8>>2]=HEAP32[$3+8>>2]|0;
                        _SQLgetlex($14,$$byval_copy27,$$byval_copy28);
                        _memcpy(($4|0),($14|0),320)|0;
                        _memcpy(($2|0),($4|0),304)|0;
                        $103 = ((($4)) + 304|0);
                        ;HEAP32[$3>>2]=HEAP32[$103>>2]|0;HEAP32[$3+4>>2]=HEAP32[$103+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$103+8>>2]|0;
                        $104 = ((($2)) + 4|0);
                        HEAP32[$vararg_buffer6>>2] = $104;
                        (_snprintf($6,64,13391,$vararg_buffer6)|0);
                        (_strcat($5,$6)|0);
                        break L6;
                       }
                      } while(0);
                      _memcpy(($$byval_copy25|0),($2|0),304)|0;
                      ;HEAP32[$$byval_copy26>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy26+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy26+8>>2]=HEAP32[$3+8>>2]|0;
                      _SQLgetlex($13,$$byval_copy25,$$byval_copy26);
                      _memcpy(($4|0),($13|0),320)|0;
                      _memcpy(($2|0),($4|0),304)|0;
                      $92 = ((($4)) + 304|0);
                      ;HEAP32[$3>>2]=HEAP32[$92>>2]|0;HEAP32[$3+4>>2]=HEAP32[$92+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$92+8>>2]|0;
                      $93 = ((($2)) + 4|0);
                      $94 = (_strcmp($93,13352)|0);
                      $95 = ($94|0)!=(0);
                      if ($95) {
                       $96 = ((($2)) + 4|0);
                       $97 = (_strcmp($96,13358)|0);
                       $98 = ($97|0)!=(0);
                       if ($98) {
                        break L6;
                       }
                      }
                      (_strcat($5,13364)|0);
                      break L6;
                     }
                    } while(0);
                    _memcpy(($$byval_copy23|0),($2|0),304)|0;
                    ;HEAP32[$$byval_copy24>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy24+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy24+8>>2]=HEAP32[$3+8>>2]|0;
                    _SQLgetlex($12,$$byval_copy23,$$byval_copy24);
                    _memcpy(($4|0),($12|0),320)|0;
                    _memcpy(($2|0),($4|0),304)|0;
                    $81 = ((($4)) + 304|0);
                    ;HEAP32[$3>>2]=HEAP32[$81>>2]|0;HEAP32[$3+4>>2]=HEAP32[$81+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$81+8>>2]|0;
                    $82 = ((($2)) + 4|0);
                    $83 = (_strcmp($82,13288)|0);
                    $84 = ($83|0)!=(0);
                    if ($84) {
                     $85 = ((($2)) + 4|0);
                     $86 = (_strcmp($85,13320)|0);
                     $87 = ($86|0)!=(0);
                     if ($87) {
                      break L6;
                     }
                    }
                    (_strcat($5,13326)|0);
                    break L6;
                   }
                  } while(0);
                  _memcpy(($$byval_copy21|0),($2|0),304)|0;
                  ;HEAP32[$$byval_copy22>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy22+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy22+8>>2]=HEAP32[$3+8>>2]|0;
                  _SQLgetlex($11,$$byval_copy21,$$byval_copy22);
                  _memcpy(($4|0),($11|0),320)|0;
                  _memcpy(($2|0),($4|0),304)|0;
                  $73 = ((($4)) + 304|0);
                  ;HEAP32[$3>>2]=HEAP32[$73>>2]|0;HEAP32[$3+4>>2]=HEAP32[$73+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$73+8>>2]|0;
                  $74 = ((($2)) + 4|0);
                  $75 = (_strcmp($74,13288)|0);
                  $76 = ($75|0)!=(0);
                  if ($76) {
                   break L6;
                  }
                  (_strcat($5,13294)|0);
                  break L6;
                 }
                } while(0);
                (_strcat($5,13264)|0);
                break L6;
               }
              } while(0);
              (_strcat($5,13244)|0);
              break L6;
             }
            }
            (_strcat($5,13218)|0);
            break L6;
           }
          }
          (_strcat($5,13188)|0);
          break L6;
         }
        }
        (_strcpy($6,13157)|0);
        (_strcat($5,$6)|0);
        break L6;
       }
      }
      (_strcpy($6,13132)|0);
      (_strcat($5,$6)|0);
      break L6;
     }
    }
    _memcpy(($$byval_copy19|0),($2|0),304)|0;
    ;HEAP32[$$byval_copy20>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy20+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy20+8>>2]=HEAP32[$3+8>>2]|0;
    _SQLgetlex($10,$$byval_copy19,$$byval_copy20);
    _memcpy(($4|0),($10|0),320)|0;
    _memcpy(($2|0),($4|0),304)|0;
    $37 = ((($4)) + 304|0);
    ;HEAP32[$3>>2]=HEAP32[$37>>2]|0;HEAP32[$3+4>>2]=HEAP32[$37+4>>2]|0;HEAP32[$3+8>>2]=HEAP32[$37+8>>2]|0;
    $38 = ((($2)) + 4|0);
    $39 = (_strcmp($38,13078)|0);
    $40 = ($39|0)!=(0);
    if ($40) {
     $41 = ((($2)) + 4|0);
     $42 = (_strcmp($41,13086)|0);
     $43 = ($42|0)!=(0);
     if ($43) {
      $44 = ((($2)) + 4|0);
      HEAP32[$vararg_buffer3>>2] = $44;
      (_snprintf($6,64,13111,$vararg_buffer3)|0);
      (_strcat($5,$6)|0);
      break L6;
     }
    }
    (_strcpy($6,13094)|0);
    (_strcat($5,$6)|0);
    break;
   }
   case 5:  {
    break;
   }
   default: {
    _memcpy(($$byval_copy35|0),($2|0),304)|0;
    ;HEAP32[$$byval_copy36>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy36+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy36+8>>2]=HEAP32[$3+8>>2]|0;
    _SQLError($$byval_copy35,$$byval_copy36,14405,$vararg_buffer12);
   }
   }
  } while(0);
  $303 = HEAP32[$2>>2]|0;
  $304 = ($303|0)!=(5);
  if (!($304)) {
   break;
  }
 }
 _memcpy(($$byval_copy37|0),($2|0),304)|0;
 ;HEAP32[$$byval_copy38>>2]=HEAP32[$3>>2]|0;HEAP32[$$byval_copy38+4>>2]=HEAP32[$3+4>>2]|0;HEAP32[$$byval_copy38+8>>2]=HEAP32[$3+8>>2]|0;
 (_SQLValLabel($$byval_copy37,$$byval_copy38,1358125,0,13)|0);
 $305 = ((($3)) + 8|0);
 $306 = HEAP32[$305>>2]|0;
 $307 = ($306|0)!=(0|0);
 if (!($307)) {
  $7 = $5;
  $310 = $7;
  STACKTOP = sp;return ($310|0);
 }
 $308 = ((($3)) + 8|0);
 $309 = HEAP32[$308>>2]|0;
 _free($309);
 $7 = $5;
 $310 = $7;
 STACKTOP = sp;return ($310|0);
}
function _SQLValLabel($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 352|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(352|0);
 $$byval_copy2 = sp + 336|0;
 $$byval_copy = sp + 32|0;
 $vararg_buffer = sp;
 $6 = $2;
 $7 = $3;
 $8 = $4;
 $9 = 0;
 $11 = $8;
 $12 = ($11|0)==(10);
 if ($12) {
  HEAP32[18458] = 0;
  $13 = $6;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = $6;
   $16 = $7;
   $17 = (_SQLMakeValLabelTree($15,$16)|0);
   HEAP32[18458] = $17;
  }
  $18 = HEAP32[18458]|0;
  $19 = ($18|0)==(0|0);
  if ($19) {
   $5 = 1;
   $87 = $5;
   STACKTOP = sp;return ($87|0);
  } else {
   $5 = 0;
   $87 = $5;
   STACKTOP = sp;return ($87|0);
  }
 }
 $20 = $8;
 $21 = ($20|0)==(12);
 $22 = $8;
 $23 = ($22|0)==(11);
 $or$cond = $21 | $23;
 if (!($or$cond)) {
  $84 = $8;
  $85 = ($84|0)==(13);
  if ($85) {
   $86 = HEAP32[18458]|0;
   _SQLDeleteValLabelTree($86);
   $5 = 0;
   $87 = $5;
   STACKTOP = sp;return ($87|0);
  } else {
   $5 = 1;
   $87 = $5;
   STACKTOP = sp;return ($87|0);
  }
 }
 $24 = HEAP32[18458]|0;
 $25 = $6;
 $26 = (_SQLSearchValLabelTree($24,$25)|0);
 $10 = $26;
 $27 = $10;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = $10;
  $30 = ((($29)) + 72|0);
  $31 = HEAP32[$30>>2]|0;
  $9 = $31;
  $32 = $8;
  $33 = ($32|0)==(12);
  if ($33) {
   $34 = $7;
   $9 = $34;
  }
  $35 = $10;
  $36 = ($35|0)!=(0|0);
  if ($36) {
   $37 = $10;
   _free($37);
  }
  $38 = $10;
  $39 = ((($38)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($40|0)!=(0|0);
  if ($41) {
   $42 = $10;
   $43 = ((($42)) + 4|0);
   $44 = HEAP32[$43>>2]|0;
   _free($44);
  }
  $45 = $10;
  $46 = HEAP32[$45>>2]|0;
  $47 = ($46|0)!=(0|0);
  if ($47) {
   $48 = $10;
   $49 = HEAP32[$48>>2]|0;
   _free($49);
  }
  $50 = $10;
  $51 = ((($50)) + 8|0);
  $52 = ($51|0)!=(0|0);
  if ($52) {
   $53 = $10;
   $54 = ((($53)) + 8|0);
   _free($54);
  }
  $55 = $9;
  $5 = $55;
  $87 = $5;
  STACKTOP = sp;return ($87|0);
 }
 $56 = $8;
 $57 = ($56|0)==(12);
 if ($57) {
  $58 = HEAP32[18458]|0;
  $59 = $6;
  $60 = $7;
  $61 = (_SQLMakeAddValLabelTree($58,$59,$60)|0);
  $62 = ($61|0)!=(0);
  if ($62) {
   _memcpy(($$byval_copy|0),($0|0),304)|0;
   ;HEAP32[$$byval_copy2>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[$1+8>>2]|0;
   _SQLError($$byval_copy,$$byval_copy2,14557,$vararg_buffer);
  }
 }
 $63 = $10;
 $64 = ($63|0)!=(0|0);
 if ($64) {
  $65 = $10;
  _free($65);
 }
 $66 = $10;
 $67 = ((($66)) + 4|0);
 $68 = HEAP32[$67>>2]|0;
 $69 = ($68|0)!=(0|0);
 if ($69) {
  $70 = $10;
  $71 = ((($70)) + 4|0);
  $72 = HEAP32[$71>>2]|0;
  _free($72);
 }
 $73 = $10;
 $74 = HEAP32[$73>>2]|0;
 $75 = ($74|0)!=(0|0);
 if ($75) {
  $76 = $10;
  $77 = HEAP32[$76>>2]|0;
  _free($77);
 }
 $78 = $10;
 $79 = ((($78)) + 8|0);
 $80 = ($79|0)!=(0|0);
 if ($80) {
  $81 = $10;
  $82 = ((($81)) + 8|0);
  _free($82);
 }
 $83 = $7;
 $5 = $83;
 $87 = $5;
 STACKTOP = sp;return ($87|0);
}
function _SQLError($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 688|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(688|0);
 $$byval_copy3 = sp + 664|0;
 $$byval_copy2 = sp + 360|0;
 $$byval_copy1 = sp + 344|0;
 $$byval_copy = sp + 40|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $4 = sp + 16|0;
 $3 = $2;
 $5 = HEAP32[35]|0;
 _memcpy(($$byval_copy|0),($0|0),304)|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$1+8>>2]|0;
 $6 = (_SQLLineCounter($$byval_copy,$$byval_copy1)|0);
 HEAP32[$vararg_buffer>>2] = $6;
 (_fprintf($5,14546,$vararg_buffer)|0);
 HEAP32[$4>>2] = $varargs;
 $7 = HEAP32[35]|0;
 $8 = $3;
 (_vfprintf($7,$8,$4)|0);
 $9 = HEAP32[35]|0;
 (_fprintf($9,28210,$vararg_buffer1)|0);
 _memcpy(($$byval_copy2|0),($0|0),304)|0;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$1>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$1+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$1+8>>2]|0;
 (_SQLValLabel($$byval_copy2,$$byval_copy3,1358125,0,13)|0);
 $10 = ((($1)) + 8|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ($11|0)!=(0|0);
 if (!($12)) {
  _BaikGarbageCollection();
  _exit(1);
  // unreachable;
 }
 $13 = ((($1)) + 8|0);
 $14 = HEAP32[$13>>2]|0;
 _free($14);
 _BaikGarbageCollection();
 _exit(1);
 // unreachable;
}
function _SQLgetlex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1920|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1920|0);
 $$byval_copy7 = sp + 1904|0;
 $$byval_copy6 = sp + 1600|0;
 $$byval_copy5 = sp + 1584|0;
 $$byval_copy4 = sp + 1280|0;
 $$byval_copy3 = sp + 1264|0;
 $$byval_copy2 = sp + 960|0;
 $$byval_copy1 = sp + 944|0;
 $$byval_copy = sp + 640|0;
 $3 = sp + 320|0;
 $5 = sp;
 $4 = 0;
 _memcpy(($3|0),($1|0),304)|0;
 $6 = ((($3)) + 304|0);
 ;HEAP32[$6>>2]=HEAP32[$2>>2]|0;HEAP32[$6+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$6+8>>2]=HEAP32[$2+8>>2]|0;
 $7 = $4;
 $8 = ((($3)) + 316|0);
 HEAP8[$8>>0] = $7;
 $9 = HEAP32[$1>>2]|0;
 $10 = ($9|0)==(5);
 if ($10) {
  $11 = ((($3)) + 304|0);
  $12 = ((($11)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($13|0)!=(0|0);
  if ($14) {
   $15 = ((($3)) + 304|0);
   $16 = ((($15)) + 8|0);
   $17 = HEAP32[$16>>2]|0;
   _free($17);
  }
  _memcpy(($0|0),($3|0),320)|0;
  STACKTOP = sp;return;
 }
 $18 = HEAP32[$2>>2]|0;
 $19 = ((($2)) + 4|0);
 HEAP32[$19>>2] = $18;
 _memcpy(($$byval_copy|0),($1|0),304)|0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$2+8>>2]|0;
 _SQLGetChar($5,$$byval_copy,$$byval_copy1);
 _memcpy(($3|0),($5|0),320)|0;
 $20 = ((($3)) + 304|0);
 ;HEAP32[$2>>2]=HEAP32[$20>>2]|0;HEAP32[$2+4>>2]=HEAP32[$20+4>>2]|0;HEAP32[$2+8>>2]=HEAP32[$20+8>>2]|0;
 $21 = ((($3)) + 316|0);
 $22 = HEAP8[$21>>0]|0;
 $4 = $22;
 _memset(($1|0),0,304)|0;
 $23 = $4;
 $24 = $23 << 24 >> 24;
 $25 = (_isalpha($24)|0);
 $26 = ($25|0)!=(0);
 if (!($26)) {
  $27 = $4;
  $28 = $27 << 24 >> 24;
  $29 = ($28|0)==(95);
  if (!($29)) {
   $30 = $4;
   $31 = $30 << 24 >> 24;
   $32 = (_isdigit($31)|0);
   $33 = ($32|0)!=(0);
   if ($33) {
    _memcpy(($$byval_copy4|0),($1|0),304)|0;
    ;HEAP32[$$byval_copy5>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$2+8>>2]|0;
    _SQLlex_ident($0,$$byval_copy4,$$byval_copy5);
    STACKTOP = sp;return;
   }
   $34 = $4;
   $35 = $34 << 24 >> 24;
   $36 = ($35|0)==(39);
   if ($36) {
    _memcpy(($$byval_copy6|0),($1|0),304)|0;
    ;HEAP32[$$byval_copy7>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy7+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy7+8>>2]=HEAP32[$2+8>>2]|0;
    _SQLlex_string($0,$$byval_copy6,$$byval_copy7);
    STACKTOP = sp;return;
   }
   $37 = $4;
   $38 = $37 << 24 >> 24;
   $39 = ($38|0)==(0);
   if ($39) {
    HEAP32[$1>>2] = 5;
    $40 = $4;
    $41 = ((($3)) + 316|0);
    HEAP8[$41>>0] = $40;
    $42 = ((($3)) + 304|0);
    ;HEAP32[$42>>2]=HEAP32[$2>>2]|0;HEAP32[$42+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$42+8>>2]=HEAP32[$2+8>>2]|0;
    _memcpy(($3|0),($1|0),304)|0;
    $43 = ((($3)) + 304|0);
    $44 = ((($43)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)!=(0|0);
    if ($46) {
     $47 = ((($3)) + 304|0);
     $48 = ((($47)) + 8|0);
     $49 = HEAP32[$48>>2]|0;
     _free($49);
    }
    _memcpy(($0|0),($3|0),320)|0;
    STACKTOP = sp;return;
   } else {
    HEAP32[$1>>2] = 9;
    $50 = $4;
    $51 = ((($1)) + 4|0);
    HEAP8[$51>>0] = $50;
    $52 = HEAP32[$2>>2]|0;
    $53 = (($52) + 1)|0;
    HEAP32[$2>>2] = $53;
    $54 = $4;
    $55 = ((($3)) + 316|0);
    HEAP8[$55>>0] = $54;
    $56 = ((($3)) + 304|0);
    ;HEAP32[$56>>2]=HEAP32[$2>>2]|0;HEAP32[$56+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$56+8>>2]=HEAP32[$2+8>>2]|0;
    _memcpy(($3|0),($1|0),304)|0;
    $57 = ((($3)) + 304|0);
    $58 = ((($57)) + 8|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)!=(0|0);
    if ($60) {
     $61 = ((($3)) + 304|0);
     $62 = ((($61)) + 8|0);
     $63 = HEAP32[$62>>2]|0;
     _free($63);
    }
    _memcpy(($0|0),($3|0),320)|0;
    STACKTOP = sp;return;
   }
  }
 }
 _memcpy(($$byval_copy2|0),($1|0),304)|0;
 ;HEAP32[$$byval_copy3>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$2+8>>2]|0;
 _SQLlex_ident($0,$$byval_copy2,$$byval_copy3);
 STACKTOP = sp;return;
}
function _SQLGetChar($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $3 = sp;
 while(1) {
  $5 = HEAP32[$2>>2]|0;
  $6 = (($5) + 1)|0;
  HEAP32[$2>>2] = $6;
  $7 = ((($2)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (($8) + ($5)|0);
  $10 = HEAP8[$9>>0]|0;
  $4 = $10;
  $11 = $4;
  $12 = $11 << 24 >> 24;
  $13 = ($12|0)==(35);
  L3: do {
   if ($13) {
    while(1) {
     $14 = HEAP32[$2>>2]|0;
     $15 = (($14) + 1)|0;
     HEAP32[$2>>2] = $15;
     $16 = ((($2)) + 8|0);
     $17 = HEAP32[$16>>2]|0;
     $18 = (($17) + ($14)|0);
     $19 = HEAP8[$18>>0]|0;
     $4 = $19;
     $20 = $4;
     $21 = $20 << 24 >> 24;
     $22 = ($21|0)!=(0);
     if (!($22)) {
      break L3;
     }
     $23 = $4;
     $24 = $23 << 24 >> 24;
     $25 = ($24|0)!=(10);
     if (!($25)) {
      break;
     }
    }
   }
  } while(0);
  $26 = $4;
  $27 = $26 << 24 >> 24;
  $28 = (_isspace($27)|0);
  $29 = ($28|0)!=(0);
  if (!($29)) {
   break;
  }
  $30 = $4;
  $31 = $30 << 24 >> 24;
  $32 = ($31|0)!=(0);
  if (!($32)) {
   break;
  }
 }
 $33 = HEAP32[$2>>2]|0;
 $34 = (($33) + -1)|0;
 HEAP32[$2>>2] = $34;
 $35 = $4;
 $36 = ((($3)) + 316|0);
 HEAP8[$36>>0] = $35;
 $37 = ((($3)) + 304|0);
 ;HEAP32[$37>>2]=HEAP32[$2>>2]|0;HEAP32[$37+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$2+8>>2]|0;
 _memcpy(($3|0),($1|0),304)|0;
 $38 = ((($3)) + 304|0);
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  _memcpy(($0|0),($3|0),320)|0;
  STACKTOP = sp;return;
 }
 $42 = ((($3)) + 304|0);
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 _free($44);
 _memcpy(($0|0),($3|0),320)|0;
 STACKTOP = sp;return;
}
function _SQLlex_ident($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(656|0);
 $$byval_copy1 = sp + 632|0;
 $$byval_copy = sp + 328|0;
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 $5 = 0;
 while(1) {
  $6 = HEAP32[$2>>2]|0;
  $7 = (($6) + 1)|0;
  HEAP32[$2>>2] = $7;
  $8 = ((($2)) + 8|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = (($9) + ($6)|0);
  $11 = HEAP8[$10>>0]|0;
  $4 = $11;
  $12 = $11 << 24 >> 24;
  $13 = (_isalnum($12)|0);
  $14 = ($13|0)!=(0);
  if ($14) {
   $45 = 1;
  } else {
   $15 = $4;
   $16 = $15 << 24 >> 24;
   $17 = ($16|0)==(95);
   $45 = $17;
  }
  $18 = $5;
  if (!($45)) {
   break;
  }
  $19 = ($18|0)>(63);
  if ($19) {
   HEAP32[$vararg_buffer>>2] = 64;
   _memcpy(($$byval_copy|0),($1|0),304)|0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[$2+8>>2]|0;
   _SQLError($$byval_copy,$$byval_copy1,14498,$vararg_buffer);
  }
  $20 = $4;
  $21 = $5;
  $22 = (($21) + 1)|0;
  $5 = $22;
  $23 = ((($1)) + 4|0);
  $24 = (($23) + ($21)|0);
  HEAP8[$24>>0] = $20;
 }
 $25 = ((($1)) + 4|0);
 $26 = (($25) + ($18)|0);
 HEAP8[$26>>0] = 0;
 $27 = HEAP32[$2>>2]|0;
 $28 = (($27) + -1)|0;
 HEAP32[$2>>2] = $28;
 HEAP32[$1>>2] = 7;
 $29 = ((($1)) + 4|0);
 $30 = (_strcmp($29,14536)|0);
 $31 = ($30|0)!=(0);
 if (!($31)) {
  HEAP32[$1>>2] = 1;
 }
 $32 = ((($1)) + 4|0);
 $33 = (_strcmp($32,14542)|0);
 $34 = ($33|0)!=(0);
 if (!($34)) {
  HEAP32[$1>>2] = 0;
 }
 $35 = $4;
 $36 = ((($3)) + 316|0);
 HEAP8[$36>>0] = $35;
 $37 = ((($3)) + 304|0);
 ;HEAP32[$37>>2]=HEAP32[$2>>2]|0;HEAP32[$37+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$37+8>>2]=HEAP32[$2+8>>2]|0;
 _memcpy(($3|0),($1|0),304)|0;
 $38 = ((($3)) + 304|0);
 $39 = ((($38)) + 8|0);
 $40 = HEAP32[$39>>2]|0;
 $41 = ($40|0)!=(0|0);
 if (!($41)) {
  _memcpy(($0|0),($3|0),320)|0;
  STACKTOP = sp;return;
 }
 $42 = ((($3)) + 304|0);
 $43 = ((($42)) + 8|0);
 $44 = HEAP32[$43>>2]|0;
 _free($44);
 _memcpy(($0|0),($3|0),320)|0;
 STACKTOP = sp;return;
}
function _SQLlex_string($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 976|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(976|0);
 $$byval_copy5 = sp + 960|0;
 $$byval_copy4 = sp + 656|0;
 $$byval_copy3 = sp + 640|0;
 $$byval_copy = sp + 336|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 16|0;
 $4 = 81;
 $5 = 0;
 $6 = HEAP32[$2>>2]|0;
 $7 = (($6) + 1)|0;
 HEAP32[$2>>2] = $7;
 while(1) {
  $8 = HEAP32[$2>>2]|0;
  $9 = (($8) + 1)|0;
  HEAP32[$2>>2] = $9;
  $10 = ((($2)) + 8|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($8)|0);
  $13 = HEAP8[$12>>0]|0;
  $4 = $13;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)!=(39);
  if (!($15)) {
   break;
  }
  $16 = $4;
  $17 = $16 << 24 >> 24;
  $18 = ($17|0)==(0);
  if ($18) {
   _memcpy(($$byval_copy|0),($1|0),304)|0;
   ;HEAP32[$$byval_copy3>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy3+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy3+8>>2]=HEAP32[$2+8>>2]|0;
   _SQLError($$byval_copy,$$byval_copy3,14437,$vararg_buffer);
  }
  $19 = $4;
  $20 = $19 << 24 >> 24;
  $21 = ($20|0)==(13);
  if ($21) {
   continue;
  }
  $22 = $4;
  $23 = $22 << 24 >> 24;
  $24 = ($23|0)==(10);
  if ($24) {
   continue;
  }
  $25 = $4;
  $26 = $25 << 24 >> 24;
  $27 = ($26|0)==(8);
  if ($27) {
   continue;
  }
  $28 = $4;
  $29 = $28 << 24 >> 24;
  $30 = ($29|0)==(12);
  if ($30) {
   continue;
  }
  $31 = $4;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)==(9);
  if ($33) {
   continue;
  }
  $34 = $4;
  $35 = $34 << 24 >> 24;
  $36 = ($35|0)==(92);
  L12: do {
   if ($36) {
    $37 = HEAP32[$2>>2]|0;
    $38 = (($37) + 1)|0;
    HEAP32[$2>>2] = $38;
    $39 = ((($2)) + 8|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = (($40) + ($37)|0);
    $42 = HEAP8[$41>>0]|0;
    $4 = $42;
    $43 = $4;
    $44 = $43 << 24 >> 24;
    switch ($44|0) {
    case 98:  {
     $4 = 8;
     break L12;
     break;
    }
    case 102:  {
     $4 = 12;
     break L12;
     break;
    }
    case 114:  {
     $4 = 13;
     break L12;
     break;
    }
    case 110:  {
     $4 = 10;
     break L12;
     break;
    }
    case 116:  {
     $4 = 9;
     break L12;
     break;
    }
    default: {
     break L12;
    }
    }
   }
  } while(0);
  $45 = $5;
  $46 = ($45|0)>(299);
  if ($46) {
   _memcpy(($$byval_copy4|0),($1|0),304)|0;
   ;HEAP32[$$byval_copy5>>2]=HEAP32[$2>>2]|0;HEAP32[$$byval_copy5+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$$byval_copy5+8>>2]=HEAP32[$2+8>>2]|0;
   _SQLError($$byval_copy4,$$byval_copy5,14467,$vararg_buffer1);
  }
  $47 = $4;
  $48 = $5;
  $49 = (($48) + 1)|0;
  $5 = $49;
  $50 = ((($1)) + 4|0);
  $51 = (($50) + ($48)|0);
  HEAP8[$51>>0] = $47;
 }
 $52 = $5;
 $53 = ((($1)) + 4|0);
 $54 = (($53) + ($52)|0);
 HEAP8[$54>>0] = 0;
 HEAP32[$1>>2] = 8;
 $55 = $4;
 $56 = ((($3)) + 316|0);
 HEAP8[$56>>0] = $55;
 $57 = ((($3)) + 304|0);
 ;HEAP32[$57>>2]=HEAP32[$2>>2]|0;HEAP32[$57+4>>2]=HEAP32[$2+4>>2]|0;HEAP32[$57+8>>2]=HEAP32[$2+8>>2]|0;
 _memcpy(($3|0),($1|0),304)|0;
 $58 = ((($3)) + 304|0);
 $59 = ((($58)) + 8|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)!=(0|0);
 if (!($61)) {
  _memcpy(($0|0),($3|0),320)|0;
  STACKTOP = sp;return;
 }
 $62 = ((($3)) + 304|0);
 $63 = ((($62)) + 8|0);
 $64 = HEAP32[$63>>2]|0;
 _free($64);
 _memcpy(($0|0),($3|0),320)|0;
 STACKTOP = sp;return;
}
function _SQLLineCounter($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = 0;
 $3 = 1;
 $4 = ((($1)) + 8|0);
 $5 = HEAP32[$4>>2]|0;
 $2 = $5;
 while(1) {
  $6 = $2;
  $7 = ((($1)) + 8|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = HEAP32[$1>>2]|0;
  $10 = (($8) + ($9)|0);
  $11 = ($6>>>0)<($10>>>0);
  if (!($11)) {
   break;
  }
  $12 = $2;
  $13 = HEAP8[$12>>0]|0;
  $14 = $13 << 24 >> 24;
  $15 = ($14|0)==(10);
  if ($15) {
   $16 = $3;
   $17 = (($16) + 1)|0;
   $3 = $17;
  }
  $18 = $2;
  $19 = ((($18)) + 1|0);
  $2 = $19;
 }
 $20 = $3;
 STACKTOP = sp;return ($20|0);
}
function _SQLMakeValLabelTree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $5 = 0;
 $6 = (_malloc(76)|0);
 $5 = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  $2 = 0;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 } else {
  $8 = $5;
  $9 = ((($8)) + 8|0);
  $10 = $3;
  (_strcpy($9,$10)|0);
  $11 = $4;
  $12 = $5;
  $13 = ((($12)) + 72|0);
  HEAP32[$13>>2] = $11;
  $14 = $5;
  HEAP32[$14>>2] = 0;
  $15 = $5;
  $16 = ((($15)) + 4|0);
  HEAP32[$16>>2] = 0;
  $17 = $5;
  $2 = $17;
  $18 = $2;
  STACKTOP = sp;return ($18|0);
 }
 return (0)|0;
}
function _SQLSearchValLabelTree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = $0;
 $4 = $1;
 $6 = $3;
 $7 = ((($6)) + 8|0);
 $8 = $4;
 $9 = (_strcmp($7,$8)|0);
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)==(0);
 do {
  if ($11) {
   $12 = $3;
   $2 = $12;
  } else {
   $13 = $5;
   $14 = ($13|0)>(0);
   if ($14) {
    $15 = $3;
    $16 = HEAP32[$15>>2]|0;
    $17 = ($16|0)!=(0|0);
    if ($17) {
     $18 = $3;
     $19 = HEAP32[$18>>2]|0;
     $20 = $4;
     $21 = (_SQLSearchValLabelTree($19,$20)|0);
     $2 = $21;
     break;
    }
   }
   $22 = $5;
   $23 = ($22|0)<(0);
   if ($23) {
    $24 = $3;
    $25 = ((($24)) + 4|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = ($26|0)!=(0|0);
    if ($27) {
     $28 = $3;
     $29 = ((($28)) + 4|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = $4;
     $32 = (_SQLSearchValLabelTree($30,$31)|0);
     $2 = $32;
     break;
    }
   }
   $2 = 0;
  }
 } while(0);
 $33 = $2;
 STACKTOP = sp;return ($33|0);
}
function _SQLMakeAddValLabelTree($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = 0;
 $8 = $5;
 $9 = $6;
 $10 = (_SQLMakeValLabelTree($8,$9)|0);
 $7 = $10;
 $11 = ($10|0)==(0|0);
 if ($11) {
  $3 = 1;
  $17 = $3;
  STACKTOP = sp;return ($17|0);
 }
 $12 = $4;
 $13 = $7;
 _SQLAddValLabelTree($12,$13);
 $14 = $7;
 $15 = ($14|0)!=(0|0);
 if ($15) {
  $16 = $7;
  _free($16);
 }
 $3 = 0;
 $17 = $3;
 STACKTOP = sp;return ($17|0);
}
function _SQLDeleteValLabelTree($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 $2 = $1;
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)!=(0|0);
 if ($4) {
  $5 = $1;
  $6 = HEAP32[$5>>2]|0;
  _SQLDeleteValLabelTree($6);
 }
 $7 = $1;
 $8 = ((($7)) + 4|0);
 $9 = HEAP32[$8>>2]|0;
 $10 = ($9|0)!=(0|0);
 if ($10) {
  $11 = $1;
  $12 = ((($11)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  _SQLDeleteValLabelTree($13);
 }
 $14 = $1;
 $15 = ($14|0)!=(0|0);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 $16 = $1;
 _free($16);
 STACKTOP = sp;return;
}
function _SQLAddValLabelTree($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 $5 = $2;
 $6 = ((($5)) + 8|0);
 $7 = $3;
 $8 = ((($7)) + 8|0);
 $9 = (_strcmp($6,$8)|0);
 $4 = $9;
 $10 = $4;
 $11 = ($10|0)>(0);
 do {
  if ($11) {
   $12 = $2;
   $13 = HEAP32[$12>>2]|0;
   $14 = ($13|0)!=(0|0);
   if ($14) {
    $15 = $2;
    $16 = HEAP32[$15>>2]|0;
    $17 = $3;
    _SQLAddValLabelTree($16,$17);
    break;
   } else {
    $18 = $3;
    $19 = $2;
    HEAP32[$19>>2] = $18;
    break;
   }
  }
 } while(0);
 $20 = $4;
 $21 = ($20|0)<(0);
 if (!($21)) {
  STACKTOP = sp;return;
 }
 $22 = $2;
 $23 = ((($22)) + 4|0);
 $24 = HEAP32[$23>>2]|0;
 $25 = ($24|0)!=(0|0);
 if ($25) {
  $26 = $2;
  $27 = ((($26)) + 4|0);
  $28 = HEAP32[$27>>2]|0;
  $29 = $3;
  _SQLAddValLabelTree($28,$29);
  STACKTOP = sp;return;
 } else {
  $30 = $3;
  $31 = $2;
  $32 = ((($31)) + 4|0);
  HEAP32[$32>>2] = $30;
  STACKTOP = sp;return;
 }
}
function _funcSQLTranslasi($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy40 = 0, $$byval_copy41 = 0, $$byval_copy42 = 0, $$byval_copy43 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0.0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer35 = 0;
 var $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_ptr13 = 0, $vararg_ptr34 = 0, $vararg_ptr9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 39632|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(39632|0);
 $$byval_copy43 = sp + 35496|0;
 $$byval_copy42 = sp + 32280|0;
 $$byval_copy41 = sp + 29064|0;
 $$byval_copy40 = sp + 25848|0;
 $$byval_copy = sp + 22632|0;
 $vararg_buffer38 = sp + 22624|0;
 $vararg_buffer35 = sp + 22616|0;
 $vararg_buffer31 = sp + 22608|0;
 $vararg_buffer29 = sp + 22600|0;
 $vararg_buffer26 = sp + 22592|0;
 $vararg_buffer23 = sp + 22584|0;
 $vararg_buffer21 = sp + 22576|0;
 $vararg_buffer19 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer14 = sp + 22552|0;
 $vararg_buffer10 = sp + 22544|0;
 $vararg_buffer6 = sp + 22536|0;
 $vararg_buffer4 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 19296|0;
 $2 = sp + 39024|0;
 $3 = sp + 16080|0;
 $4 = sp + 12864|0;
 $7 = sp + 38720|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 3216|0;
 $11 = sp;
 $5 = 0;
 $6 = 0.0;
 _memset(($1|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($2|0),0,600)|0;
 _memset(($7|0),0,300)|0;
 (_getlex()|0);
 $12 = HEAP32[7954]|0;
 $13 = ($12|0)==(223);
 do {
  if ($13) {
   _Error(14592,$vararg_buffer);
  } else {
   $14 = HEAP32[7954]|0;
   $15 = ($14|0)==(226);
   if ($15) {
    _Error(14592,$vararg_buffer2);
    break;
   }
   $16 = HEAP32[7954]|0;
   $17 = ($16|0)==(225);
   if ($17) {
    $18 = ((($1)) + 104|0);
    $19 = (_SQLInterpreter((31976))|0);
    HEAP32[$vararg_buffer4>>2] = $19;
    (_sprintf($18,19231,$vararg_buffer4)|0);
    $20 = ((($1)) + 84|0);
    HEAP32[$20>>2] = 3;
    break;
   }
   $21 = HEAP32[7954]|0;
   $22 = ($21|0)==(228);
   if (!($22)) {
    $86 = (_strlen(128380)|0);
    $87 = ($86>>>0)>(0);
    if ($87) {
     HEAP32[$vararg_buffer31>>2] = 128380;
     $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
     HEAP32[$vararg_ptr34>>2] = (31976);
     (_sprintf($7,15808,$vararg_buffer31)|0);
     $88 = HEAP32[8088]|0;
     _memcpy(($$byval_copy42|0),($1|0),3216)|0;
     _ValLabel($10,$7,$88,$$byval_copy42,232);
     _memcpy(($1|0),($10|0),3216)|0;
    } else {
     $89 = HEAP32[8088]|0;
     _memcpy(($$byval_copy43|0),($1|0),3216)|0;
     _ValLabel($11,(31976),$89,$$byval_copy43,232);
     _memcpy(($1|0),($11|0),3216)|0;
    }
    $90 = ((($1)) + 84|0);
    $91 = HEAP32[$90>>2]|0;
    $92 = ($91|0)==(3);
    if ($92) {
     $93 = ((($1)) + 104|0);
     $94 = ((($1)) + 104|0);
     $95 = (_SQLInterpreter($94)|0);
     HEAP32[$vararg_buffer35>>2] = $95;
     (_sprintf($93,19231,$vararg_buffer35)|0);
     $96 = ((($1)) + 84|0);
     HEAP32[$96>>2] = 3;
     break;
    } else {
     _Error(14592,$vararg_buffer38);
     break;
    }
   }
   $23 = (_strlen((31976))|0);
   $24 = ($23>>>0)>(0);
   if ($24) {
    $25 = ((($3)) + 420|0);
    (_strcpy($25,(31976))|0);
    $26 = ((($3)) + 720|0);
    _getArrayName((31976),$26);
    $27 = ((($3)) + 870|0);
    _getArrayIdx((31976),$27);
    $28 = (_strlen(128380)|0);
    $29 = ($28>>>0)>(0);
    if ($29) {
     $30 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer6>>2] = 128380;
     $vararg_ptr9 = ((($vararg_buffer6)) + 4|0);
     HEAP32[$vararg_ptr9>>2] = $30;
     (_sprintf($7,15808,$vararg_buffer6)|0);
     $31 = ((($3)) + 720|0);
     _memset(($31|0),0,150)|0;
     $32 = ((($3)) + 720|0);
     (_strcpy($32,$7)|0);
     $33 = ((($3)) + 870|0);
     $34 = HEAP8[$33>>0]|0;
     $35 = $34 << 24 >> 24;
     $36 = (_isdigit($35)|0);
     $37 = ($36|0)!=(0);
     if (!($37)) {
      _memset(($7|0),0,300)|0;
      $38 = ((($3)) + 870|0);
      HEAP32[$vararg_buffer10>>2] = 128380;
      $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
      HEAP32[$vararg_ptr13>>2] = $38;
      (_sprintf($7,15808,$vararg_buffer10)|0);
      $39 = ((($3)) + 870|0);
      _memset(($39|0),0,150)|0;
      $40 = ((($3)) + 870|0);
      (_strcpy($40,$7)|0);
     }
    }
    $41 = ((($3)) + 870|0);
    $42 = HEAP8[$41>>0]|0;
    $43 = $42 << 24 >> 24;
    $44 = (_isdigit($43)|0);
    $45 = ($44|0)!=(0);
    $46 = ((($3)) + 870|0);
    do {
     if ($45) {
      $47 = (_atoi($46)|0);
      $5 = $47;
     } else {
      $48 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($4|0),3216)|0;
      _ValLabel($8,$46,$48,$$byval_copy,232);
      _memcpy(($4|0),($8|0),3216)|0;
      $49 = ((($4)) + 84|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = ((($4)) + 88|0);
       $53 = HEAP32[$52>>2]|0;
       $5 = $53;
       break;
      } else {
       _Error(16065,$vararg_buffer14);
       break;
      }
     }
    } while(0);
    $54 = ((($3)) + 720|0);
    $55 = HEAP32[8088]|0;
    _memcpy(($$byval_copy40|0),($3|0),3216)|0;
    _ValLabel($9,$54,$55,$$byval_copy40,232);
    _memcpy(($3|0),($9|0),3216)|0;
    $56 = ((($3)) + 870|0);
    $57 = $5;
    HEAP32[$vararg_buffer16>>2] = $57;
    (_sprintf($56,16087,$vararg_buffer16)|0);
    $58 = $5;
    $59 = ($58|0)<(0);
    $60 = $5;
    $61 = ($60|0)>(99999000);
    $or$cond = $59 | $61;
    if ($or$cond) {
     _Error(16096,$vararg_buffer19);
    }
    $62 = ((($3)) + 84|0);
    $63 = HEAP32[$62>>2]|0;
    $64 = ($63|0)==(8);
    if ($64) {
     $65 = ((($3)) + 412|0);
     $66 = HEAP32[$65>>2]|0;
     $67 = ($66|0)!=(0);
     if ($67) {
      $68 = ((($3)) + 412|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0);
      if ($70) {
       _Error(14622,$vararg_buffer21);
      }
      _memset(($2|0),0,600)|0;
      $71 = $5;
      _memcpy(($$byval_copy41|0),($3|0),3216)|0;
      (_get_str_array($$byval_copy41,$71,$2)|0);
      $72 = ((($1)) + 104|0);
      $73 = (_SQLInterpreter($2)|0);
      HEAP32[$vararg_buffer23>>2] = $73;
      (_sprintf($72,19231,$vararg_buffer23)|0);
      $74 = ((($1)) + 84|0);
      HEAP32[$74>>2] = 3;
      break;
     }
    }
    $75 = ((($3)) + 84|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($76|0)==(10);
    if ($77) {
     $78 = ((($1)) + 104|0);
     $79 = $5;
     $80 = ((($3)) + 1024|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($81) + ($79<<2)|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (_SQLInterpreter($83)|0);
     HEAP32[$vararg_buffer26>>2] = $84;
     (_sprintf($78,19231,$vararg_buffer26)|0);
     $85 = ((($1)) + 84|0);
     HEAP32[$85>>2] = 3;
     break;
    } else {
     _Error(14592,$vararg_buffer29);
     break;
    }
   }
  }
 } while(0);
 $97 = ((($3)) + 3196|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)!=(0|0);
 if ($99) {
  $100 = ((($3)) + 3196|0);
  $101 = HEAP32[$100>>2]|0;
  _free($101);
 }
 $102 = ((($3)) + 3200|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)!=(0|0);
 if ($104) {
  $105 = ((($3)) + 3200|0);
  $106 = HEAP32[$105>>2]|0;
  _free($106);
 }
 $107 = ((($3)) + 1796|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)!=(0|0);
 if ($109) {
  $110 = ((($3)) + 1796|0);
  $111 = HEAP32[$110>>2]|0;
  _free($111);
 }
 $112 = ((($3)) + 1024|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0|0);
 if ($114) {
  $115 = ((($3)) + 1024|0);
  $116 = HEAP32[$115>>2]|0;
  _free($116);
 }
 $117 = ((($3)) + 4|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)!=(0|0);
 if ($119) {
  $120 = ((($3)) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  _free($121);
 }
 $122 = ((($3)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)!=(0|0);
 if ($124) {
  $125 = ((($3)) + 8|0);
  $126 = HEAP32[$125>>2]|0;
  _free($126);
 }
 $127 = HEAP32[$3>>2]|0;
 $128 = ($127|0)!=(0|0);
 if ($128) {
  $129 = HEAP32[$3>>2]|0;
  _free($129);
 }
 $130 = ((($4)) + 3196|0);
 $131 = HEAP32[$130>>2]|0;
 $132 = ($131|0)!=(0|0);
 if ($132) {
  $133 = ((($4)) + 3196|0);
  $134 = HEAP32[$133>>2]|0;
  _free($134);
 }
 $135 = ((($4)) + 3200|0);
 $136 = HEAP32[$135>>2]|0;
 $137 = ($136|0)!=(0|0);
 if ($137) {
  $138 = ((($4)) + 3200|0);
  $139 = HEAP32[$138>>2]|0;
  _free($139);
 }
 $140 = ((($4)) + 1796|0);
 $141 = HEAP32[$140>>2]|0;
 $142 = ($141|0)!=(0|0);
 if ($142) {
  $143 = ((($4)) + 1796|0);
  $144 = HEAP32[$143>>2]|0;
  _free($144);
 }
 $145 = ((($4)) + 1024|0);
 $146 = HEAP32[$145>>2]|0;
 $147 = ($146|0)!=(0|0);
 if ($147) {
  $148 = ((($4)) + 1024|0);
  $149 = HEAP32[$148>>2]|0;
  _free($149);
 }
 $150 = ((($4)) + 4|0);
 $151 = HEAP32[$150>>2]|0;
 $152 = ($151|0)!=(0|0);
 if ($152) {
  $153 = ((($4)) + 4|0);
  $154 = HEAP32[$153>>2]|0;
  _free($154);
 }
 $155 = ((($4)) + 8|0);
 $156 = HEAP32[$155>>2]|0;
 $157 = ($156|0)!=(0|0);
 if ($157) {
  $158 = ((($4)) + 8|0);
  $159 = HEAP32[$158>>2]|0;
  _free($159);
 }
 $160 = HEAP32[$4>>2]|0;
 $161 = ($160|0)!=(0|0);
 if (!($161)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $162 = HEAP32[$4>>2]|0;
 _free($162);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _FactorIdent($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $$byval_copy2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0.0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0;
 var $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0;
 var $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0;
 var $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0;
 var $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0;
 var $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 154992|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(154992|0);
 $$byval_copy2 = sp + 151160|0;
 $$byval_copy = sp + 147944|0;
 $vararg_buffer = sp + 147936|0;
 $3 = sp + 144720|0;
 $4 = sp + 154680|0;
 $5 = sp + 154380|0;
 $6 = sp + 141504|0;
 $7 = sp + 138288|0;
 $8 = sp + 135072|0;
 $9 = sp + 131856|0;
 $10 = sp + 128640|0;
 $11 = sp + 125424|0;
 $12 = sp + 122208|0;
 $13 = sp + 118992|0;
 $14 = sp + 115776|0;
 $15 = sp + 112560|0;
 $16 = sp + 109344|0;
 $17 = sp + 106128|0;
 $18 = sp + 102912|0;
 $19 = sp + 99696|0;
 $20 = sp + 96480|0;
 $21 = sp + 93264|0;
 $22 = sp + 90048|0;
 $23 = sp + 86832|0;
 $24 = sp + 83616|0;
 $25 = sp + 80400|0;
 $26 = sp + 77184|0;
 $27 = sp + 73968|0;
 $28 = sp + 70752|0;
 $29 = sp + 67536|0;
 $30 = sp + 64320|0;
 $31 = sp + 61104|0;
 $32 = sp + 57888|0;
 $33 = sp + 54672|0;
 $34 = sp + 51456|0;
 $35 = sp + 48240|0;
 $36 = sp + 45024|0;
 $37 = sp + 41808|0;
 $38 = sp + 38592|0;
 $39 = sp + 35376|0;
 $40 = sp + 32160|0;
 $41 = sp + 28944|0;
 $42 = sp + 25728|0;
 $43 = sp + 22512|0;
 $44 = sp + 19296|0;
 $45 = sp + 16080|0;
 $46 = sp + 12864|0;
 $47 = sp + 9648|0;
 $48 = sp + 6432|0;
 $49 = sp + 3216|0;
 $50 = sp;
 $2 = $1;
 _memset(($3|0),0,3216)|0;
 _memset(($5|0),0,300)|0;
 _memset(($4|0),0,300)|0;
 $51 = $2;
 $52 = (_strcmp($51,14666)|0);
 $53 = ($52|0)!=(0);
 L1: do {
  if ($53) {
   $54 = $2;
   $55 = (_strcmp($54,14680)|0);
   $56 = ($55|0)!=(0);
   if ($56) {
    $57 = $2;
    $58 = (_strcmp($57,14694)|0);
    $59 = ($58|0)!=(0);
    if ($59) {
     $60 = $2;
     $61 = (_strcmp($60,14699)|0);
     $62 = ($61|0)!=(0);
     if ($62) {
      $63 = $2;
      $64 = (_strcmp($63,14704)|0);
      $65 = ($64|0)!=(0);
      if ($65) {
       $66 = $2;
       $67 = (_strcmp($66,14712)|0);
       $68 = ($67|0)!=(0);
       if ($68) {
        $69 = $2;
        $70 = (_strcmp($69,14720)|0);
        $71 = ($70|0)!=(0);
        if ($71) {
         $72 = $2;
         $73 = (_strcmp($72,14724)|0);
         $74 = ($73|0)!=(0);
         if ($74) {
          $75 = $2;
          $76 = (_strcmp($75,14728)|0);
          $77 = ($76|0)!=(0);
          if ($77) {
           $78 = $2;
           $79 = (_strcmp($78,14734)|0);
           $80 = ($79|0)!=(0);
           if ($80) {
            $81 = $2;
            $82 = (_strcmp($81,14740)|0);
            $83 = ($82|0)!=(0);
            if ($83) {
             $84 = $2;
             $85 = (_strcmp($84,14744)|0);
             $86 = ($85|0)!=(0);
             if ($86) {
              $87 = $2;
              $88 = (_strcmp($87,14748)|0);
              $89 = ($88|0)!=(0);
              do {
               if ($89) {
                $90 = $2;
                $91 = (_strcmp($90,14756)|0);
                $92 = ($91|0)!=(0);
                if ($92) {
                 $93 = $2;
                 $94 = (_strcmp($93,14764)|0);
                 $95 = ($94|0)!=(0);
                 if ($95) {
                  $96 = $2;
                  $97 = (_strcmp($96,14768)|0);
                  $98 = ($97|0)!=(0);
                  if (!($98)) {
                   break;
                  }
                  $99 = $2;
                  $100 = (_strcmp($99,14772)|0);
                  $101 = ($100|0)!=(0);
                  do {
                   if ($101) {
                    $102 = $2;
                    $103 = (_strcmp($102,14782)|0);
                    $104 = ($103|0)!=(0);
                    if (!($104)) {
                     break;
                    }
                    $105 = $2;
                    $106 = (_strcmp($105,14792)|0);
                    $107 = ($106|0)!=(0);
                    do {
                     if ($107) {
                      $108 = $2;
                      $109 = (_strcmp($108,14802)|0);
                      $110 = ($109|0)!=(0);
                      if (!($110)) {
                       break;
                      }
                      $111 = $2;
                      $112 = (_strcmp($111,14812)|0);
                      $113 = ($112|0)!=(0);
                      do {
                       if ($113) {
                        $114 = $2;
                        $115 = (_strcmp($114,14822)|0);
                        $116 = ($115|0)!=(0);
                        if (!($116)) {
                         break;
                        }
                        $117 = $2;
                        $118 = (_strcmp($117,14832)|0);
                        $119 = ($118|0)!=(0);
                        do {
                         if ($119) {
                          $120 = $2;
                          $121 = (_strcmp($120,14836)|0);
                          $122 = ($121|0)!=(0);
                          if (!($122)) {
                           break;
                          }
                          $123 = $2;
                          $124 = (_strcmp($123,14840)|0);
                          $125 = ($124|0)!=(0);
                          if (!($125)) {
                           break;
                          }
                          $126 = $2;
                          $127 = (_strcmp($126,14856)|0);
                          $128 = ($127|0)!=(0);
                          if (!($128)) {
                           break;
                          }
                          $129 = $2;
                          $130 = (_strcmp($129,14872)|0);
                          $131 = ($130|0)!=(0);
                          do {
                           if ($131) {
                            $132 = $2;
                            $133 = (_strcmp($132,14887)|0);
                            $134 = ($133|0)!=(0);
                            if (!($134)) {
                             break;
                            }
                            $135 = $2;
                            $136 = (_strcmp($135,14902)|0);
                            $137 = ($136|0)!=(0);
                            do {
                             if ($137) {
                              $138 = $2;
                              $139 = (_strcmp($138,14919)|0);
                              $140 = ($139|0)!=(0);
                              if (!($140)) {
                               break;
                              }
                              $141 = $2;
                              $142 = (_strcmp($141,14936)|0);
                              $143 = ($142|0)!=(0);
                              do {
                               if ($143) {
                                $144 = $2;
                                $145 = (_strcmp($144,14951)|0);
                                $146 = ($145|0)!=(0);
                                if (!($146)) {
                                 break;
                                }
                                $147 = $2;
                                $148 = (_strcmp($147,14966)|0);
                                $149 = ($148|0)!=(0);
                                do {
                                 if ($149) {
                                  $150 = $2;
                                  $151 = (_strcmp($150,14986)|0);
                                  $152 = ($151|0)!=(0);
                                  if (!($152)) {
                                   break;
                                  }
                                  $153 = $2;
                                  $154 = (_strcmp($153,15006)|0);
                                  $155 = ($154|0)!=(0);
                                  do {
                                   if ($155) {
                                    $156 = $2;
                                    $157 = (_strcmp($156,15016)|0);
                                    $158 = ($157|0)!=(0);
                                    if (!($158)) {
                                     break;
                                    }
                                    $159 = $2;
                                    $160 = (_strcmp($159,15026)|0);
                                    $161 = ($160|0)!=(0);
                                    do {
                                     if ($161) {
                                      $162 = $2;
                                      $163 = (_strcmp($162,15036)|0);
                                      $164 = ($163|0)!=(0);
                                      if (!($164)) {
                                       break;
                                      }
                                      $165 = $2;
                                      $166 = (_strcmp($165,15046)|0);
                                      $167 = ($166|0)!=(0);
                                      do {
                                       if ($167) {
                                        $168 = $2;
                                        $169 = (_strcmp($168,15055)|0);
                                        $170 = ($169|0)!=(0);
                                        if (!($170)) {
                                         break;
                                        }
                                        $171 = $2;
                                        $172 = (_strcmp($171,14152)|0);
                                        $173 = ($172|0)!=(0);
                                        do {
                                         if ($173) {
                                          $174 = $2;
                                          $175 = (_strcmp($174,14143)|0);
                                          $176 = ($175|0)!=(0);
                                          if (!($176)) {
                                           break;
                                          }
                                          $177 = $2;
                                          $178 = (_strcmp($177,15064)|0);
                                          $179 = ($178|0)!=(0);
                                          do {
                                           if ($179) {
                                            $180 = $2;
                                            $181 = (_strcmp($180,15073)|0);
                                            $182 = ($181|0)!=(0);
                                            if (!($182)) {
                                             break;
                                            }
                                            $183 = $2;
                                            $184 = (_strcmp($183,15082)|0);
                                            $185 = ($184|0)!=(0);
                                            do {
                                             if ($185) {
                                              $186 = $2;
                                              $187 = (_strcmp($186,15090)|0);
                                              $188 = ($187|0)!=(0);
                                              if (!($188)) {
                                               break;
                                              }
                                              $189 = $2;
                                              $190 = (_strcmp($189,15098)|0);
                                              $191 = ($190|0)!=(0);
                                              if (!($191)) {
                                               break;
                                              }
                                              $192 = $2;
                                              $193 = (_strcmp($192,15106)|0);
                                              $194 = ($193|0)!=(0);
                                              do {
                                               if ($194) {
                                                $195 = $2;
                                                $196 = (_strcmp($195,15113)|0);
                                                $197 = ($196|0)!=(0);
                                                if (!($197)) {
                                                 break;
                                                }
                                                $198 = $2;
                                                $199 = (_strcmp($198,15120)|0);
                                                $200 = ($199|0)!=(0);
                                                if (!($200)) {
                                                 break;
                                                }
                                                $201 = $2;
                                                $202 = (_strcmp($201,15127)|0);
                                                $203 = ($202|0)!=(0);
                                                do {
                                                 if ($203) {
                                                  $204 = $2;
                                                  $205 = (_strcmp($204,15136)|0);
                                                  $206 = ($205|0)!=(0);
                                                  if (!($206)) {
                                                   break;
                                                  }
                                                  $207 = $2;
                                                  $208 = (_strcmp($207,15145)|0);
                                                  $209 = ($208|0)!=(0);
                                                  do {
                                                   if ($209) {
                                                    $210 = $2;
                                                    $211 = (_strcmp($210,15151)|0);
                                                    $212 = ($211|0)!=(0);
                                                    if (!($212)) {
                                                     break;
                                                    }
                                                    $216 = $2;
                                                    $217 = (_strcmp($216,15157)|0);
                                                    $218 = ($217|0)!=(0);
                                                    do {
                                                     if ($218) {
                                                      $219 = $2;
                                                      $220 = (_strcmp($219,15162)|0);
                                                      $221 = ($220|0)!=(0);
                                                      if (!($221)) {
                                                       break;
                                                      }
                                                      $225 = $2;
                                                      $226 = (_strcmp($225,15167)|0);
                                                      $227 = ($226|0)!=(0);
                                                      do {
                                                       if ($227) {
                                                        $228 = $2;
                                                        $229 = (_strcmp($228,15174)|0);
                                                        $230 = ($229|0)!=(0);
                                                        if (!($230)) {
                                                         break;
                                                        }
                                                        $231 = $2;
                                                        $232 = (_strcmp($231,15181)|0);
                                                        $233 = ($232|0)!=(0);
                                                        if (!($233)) {
                                                         break;
                                                        }
                                                        $234 = $2;
                                                        $235 = (_strcmp($234,15186)|0);
                                                        $236 = ($235|0)!=(0);
                                                        if (!($236)) {
                                                         break;
                                                        }
                                                        $240 = $2;
                                                        $241 = (_strcmp($240,15191)|0);
                                                        $242 = ($241|0)!=(0);
                                                        do {
                                                         if ($242) {
                                                          $243 = $2;
                                                          $244 = (_strcmp($243,15196)|0);
                                                          $245 = ($244|0)!=(0);
                                                          if (!($245)) {
                                                           break;
                                                          }
                                                          $246 = $2;
                                                          $247 = (_strcmp($246,15201)|0);
                                                          $248 = ($247|0)!=(0);
                                                          if (!($248)) {
                                                           break;
                                                          }
                                                          $249 = $2;
                                                          $250 = (_strcmp($249,15206)|0);
                                                          $251 = ($250|0)!=(0);
                                                          if (!($251)) {
                                                           break;
                                                          }
                                                          $252 = $2;
                                                          $253 = (_strcmp($252,15213)|0);
                                                          $254 = ($253|0)!=(0);
                                                          do {
                                                           if ($254) {
                                                            $255 = $2;
                                                            $256 = (_strcmp($255,15219)|0);
                                                            $257 = ($256|0)!=(0);
                                                            if (!($257)) {
                                                             break;
                                                            }
                                                            $261 = $2;
                                                            $262 = (_strcmp($261,15229)|0);
                                                            $263 = ($262|0)!=(0);
                                                            do {
                                                             if ($263) {
                                                              $264 = $2;
                                                              $265 = (_strcmp($264,15239)|0);
                                                              $266 = ($265|0)!=(0);
                                                              if (!($266)) {
                                                               break;
                                                              }
                                                              $270 = $2;
                                                              $271 = (_strcmp($270,15253)|0);
                                                              $272 = ($271|0)!=(0);
                                                              do {
                                                               if ($272) {
                                                                $273 = $2;
                                                                $274 = (_strcmp($273,15264)|0);
                                                                $275 = ($274|0)!=(0);
                                                                if (!($275)) {
                                                                 break;
                                                                }
                                                                $276 = $2;
                                                                $277 = (_strcmp($276,15275)|0);
                                                                $278 = ($277|0)!=(0);
                                                                do {
                                                                 if ($278) {
                                                                  $279 = $2;
                                                                  $280 = (_strcmp($279,15287)|0);
                                                                  $281 = ($280|0)!=(0);
                                                                  if (!($281)) {
                                                                   break;
                                                                  }
                                                                  $282 = $2;
                                                                  $283 = (_strcmp($282,15299)|0);
                                                                  $284 = ($283|0)!=(0);
                                                                  do {
                                                                   if ($284) {
                                                                    $285 = $2;
                                                                    $286 = (_strcmp($285,15310)|0);
                                                                    $287 = ($286|0)!=(0);
                                                                    if (!($287)) {
                                                                     break;
                                                                    }
                                                                    $288 = $2;
                                                                    $289 = (_strcmp($288,15321)|0);
                                                                    $290 = ($289|0)!=(0);
                                                                    do {
                                                                     if ($290) {
                                                                      $291 = $2;
                                                                      $292 = (_strcmp($291,15333)|0);
                                                                      $293 = ($292|0)!=(0);
                                                                      if (!($293)) {
                                                                       break;
                                                                      }
                                                                      $294 = $2;
                                                                      $295 = (_strcmp($294,15345)|0);
                                                                      $296 = ($295|0)!=(0);
                                                                      do {
                                                                       if ($296) {
                                                                        $297 = $2;
                                                                        $298 = (_strcmp($297,15357)|0);
                                                                        $299 = ($298|0)!=(0);
                                                                        if (!($299)) {
                                                                         break;
                                                                        }
                                                                        $300 = $2;
                                                                        $301 = (_strcmp($300,15369)|0);
                                                                        $302 = ($301|0)!=(0);
                                                                        do {
                                                                         if ($302) {
                                                                          $303 = $2;
                                                                          $304 = (_strcmp($303,15377)|0);
                                                                          $305 = ($304|0)!=(0);
                                                                          if (!($305)) {
                                                                           break;
                                                                          }
                                                                          $306 = $2;
                                                                          $307 = (_strncmp($306,15385,11)|0);
                                                                          $308 = ($307|0)==(0);
                                                                          do {
                                                                           if (!($308)) {
                                                                            $309 = $2;
                                                                            $310 = (_strncmp($309,15397,11)|0);
                                                                            $311 = ($310|0)==(0);
                                                                            if ($311) {
                                                                             break;
                                                                            }
                                                                            $312 = $2;
                                                                            $313 = (_strcmp($312,15409)|0);
                                                                            $314 = ($313|0)!=(0);
                                                                            do {
                                                                             if ($314) {
                                                                              $315 = $2;
                                                                              $316 = (_strcmp($315,15419)|0);
                                                                              $317 = ($316|0)!=(0);
                                                                              if (!($317)) {
                                                                               break;
                                                                              }
                                                                              $318 = $2;
                                                                              $319 = (_strcmp($318,15429)|0);
                                                                              $320 = ($319|0)!=(0);
                                                                              do {
                                                                               if ($320) {
                                                                                $321 = $2;
                                                                                $322 = (_strcmp($321,15438)|0);
                                                                                $323 = ($322|0)!=(0);
                                                                                if (!($323)) {
                                                                                 break;
                                                                                }
                                                                                $324 = $2;
                                                                                $325 = (_strcmp($324,15447)|0);
                                                                                $326 = ($325|0)!=(0);
                                                                                do {
                                                                                 if ($326) {
                                                                                  $327 = $2;
                                                                                  $328 = (_strcmp($327,15457)|0);
                                                                                  $329 = ($328|0)!=(0);
                                                                                  if (!($329)) {
                                                                                   break;
                                                                                  }
                                                                                  $330 = $2;
                                                                                  $331 = (_strcmp($330,15467)|0);
                                                                                  $332 = ($331|0)!=(0);
                                                                                  do {
                                                                                   if ($332) {
                                                                                    $333 = $2;
                                                                                    $334 = (_strcmp($333,15477)|0);
                                                                                    $335 = ($334|0)!=(0);
                                                                                    if (!($335)) {
                                                                                     break;
                                                                                    }
                                                                                    $336 = $2;
                                                                                    $337 = (_strcmp($336,15487)|0);
                                                                                    $338 = ($337|0)!=(0);
                                                                                    do {
                                                                                     if ($338) {
                                                                                      $339 = $2;
                                                                                      $340 = (_strcmp($339,15498)|0);
                                                                                      $341 = ($340|0)!=(0);
                                                                                      if (!($341)) {
                                                                                       break;
                                                                                      }
                                                                                      $342 = $2;
                                                                                      $343 = (_strcmp($342,15509)|0);
                                                                                      $344 = ($343|0)!=(0);
                                                                                      do {
                                                                                       if ($344) {
                                                                                        $345 = $2;
                                                                                        $346 = (_strcmp($345,15514)|0);
                                                                                        $347 = ($346|0)!=(0);
                                                                                        if (!($347)) {
                                                                                         break;
                                                                                        }
                                                                                        $348 = $2;
                                                                                        $349 = (_strcmp($348,15519)|0);
                                                                                        $350 = ($349|0)!=(0);
                                                                                        if (!($350)) {
                                                                                         break;
                                                                                        }
                                                                                        $351 = $2;
                                                                                        $352 = (_strcmp($351,15525)|0);
                                                                                        $353 = ($352|0)!=(0);
                                                                                        if (!($353)) {
                                                                                         break;
                                                                                        }
                                                                                        $354 = $2;
                                                                                        $355 = (_strcmp($354,15531)|0);
                                                                                        $356 = ($355|0)!=(0);
                                                                                        do {
                                                                                         if ($356) {
                                                                                          $357 = $2;
                                                                                          $358 = (_strcmp($357,15542)|0);
                                                                                          $359 = ($358|0)!=(0);
                                                                                          if (!($359)) {
                                                                                           break;
                                                                                          }
                                                                                          $360 = $2;
                                                                                          $361 = (_strcmp($360,15553)|0);
                                                                                          $362 = ($361|0)!=(0);
                                                                                          do {
                                                                                           if ($362) {
                                                                                            $363 = $2;
                                                                                            $364 = (_strcmp($363,15566)|0);
                                                                                            $365 = ($364|0)!=(0);
                                                                                            if (!($365)) {
                                                                                             break;
                                                                                            }
                                                                                            $366 = $2;
                                                                                            $367 = (_strcmp($366,15579)|0);
                                                                                            $368 = ($367|0)!=(0);
                                                                                            do {
                                                                                             if ($368) {
                                                                                              $369 = $2;
                                                                                              $370 = (_strcmp($369,15591)|0);
                                                                                              $371 = ($370|0)!=(0);
                                                                                              if (!($371)) {
                                                                                               break;
                                                                                              }
                                                                                              $372 = $2;
                                                                                              $373 = (_strcmp($372,15603)|0);
                                                                                              $374 = ($373|0)!=(0);
                                                                                              do {
                                                                                               if ($374) {
                                                                                                $375 = $2;
                                                                                                $376 = (_strcmp($375,15621)|0);
                                                                                                $377 = ($376|0)!=(0);
                                                                                                if (!($377)) {
                                                                                                 break;
                                                                                                }
                                                                                                $378 = $2;
                                                                                                $379 = (_strcmp($378,15639)|0);
                                                                                                $380 = ($379|0)!=(0);
                                                                                                do {
                                                                                                 if ($380) {
                                                                                                  $381 = $2;
                                                                                                  $382 = (_strcmp($381,15657)|0);
                                                                                                  $383 = ($382|0)!=(0);
                                                                                                  if (!($383)) {
                                                                                                   break;
                                                                                                  }
                                                                                                  $384 = $2;
                                                                                                  $385 = (_strcmp($384,15675)|0);
                                                                                                  $386 = ($385|0)!=(0);
                                                                                                  do {
                                                                                                   if ($386) {
                                                                                                    $387 = $2;
                                                                                                    $388 = (_strcmp($387,15685)|0);
                                                                                                    $389 = ($388|0)!=(0);
                                                                                                    if (!($389)) {
                                                                                                     break;
                                                                                                    }
                                                                                                    $390 = $2;
                                                                                                    $391 = (_strcmp($390,15695)|0);
                                                                                                    $392 = ($391|0)!=(0);
                                                                                                    if (!($392)) {
                                                                                                     break;
                                                                                                    }
                                                                                                    $393 = $2;
                                                                                                    $394 = (_strcmp($393,15705)|0);
                                                                                                    $395 = ($394|0)!=(0);
                                                                                                    if (!($395)) {
                                                                                                     break;
                                                                                                    }
                                                                                                    $396 = $2;
                                                                                                    $397 = (_strcmp($396,15715)|0);
                                                                                                    $398 = ($397|0)!=(0);
                                                                                                    do {
                                                                                                     if ($398) {
                                                                                                      $399 = $2;
                                                                                                      $400 = (_strcmp($399,15725)|0);
                                                                                                      $401 = ($400|0)!=(0);
                                                                                                      if (!($401)) {
                                                                                                       break;
                                                                                                      }
                                                                                                      $402 = $2;
                                                                                                      $403 = (_strcmp($402,15735)|0);
                                                                                                      $404 = ($403|0)!=(0);
                                                                                                      if (!($404)) {
                                                                                                       break;
                                                                                                      }
                                                                                                      $405 = $2;
                                                                                                      $406 = (_strcmp($405,12863)|0);
                                                                                                      $407 = ($406|0)!=(0);
                                                                                                      do {
                                                                                                       if ($407) {
                                                                                                        $408 = $2;
                                                                                                        $409 = (_strcmp($408,12871)|0);
                                                                                                        $410 = ($409|0)!=(0);
                                                                                                        if (!($410)) {
                                                                                                         break;
                                                                                                        }
                                                                                                        $411 = $2;
                                                                                                        $412 = (_strcmp($411,12879)|0);
                                                                                                        $413 = ($412|0)!=(0);
                                                                                                        if (!($413)) {
                                                                                                         break;
                                                                                                        }
                                                                                                        _memset(($5|0),0,300)|0;
                                                                                                        $414 = (_strlen(128380)|0);
                                                                                                        $415 = ($414>>>0)>(0);
                                                                                                        if ($415) {
                                                                                                         $416 = $2;
                                                                                                         HEAP32[$vararg_buffer>>2] = 128380;
                                                                                                         $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
                                                                                                         HEAP32[$vararg_ptr1>>2] = $416;
                                                                                                         (_snprintf($5,300,15808,$vararg_buffer)|0);
                                                                                                         $417 = ((($3)) + 12|0);
                                                                                                         (_strcpy($417,$5)|0);
                                                                                                         $418 = HEAP32[8091]|0;
                                                                                                         _memcpy(($$byval_copy|0),($3|0),3216)|0;
                                                                                                         _ValLabel($49,$5,$418,$$byval_copy,232);
                                                                                                         _memcpy(($3|0),($49|0),3216)|0;
                                                                                                        } else {
                                                                                                         $419 = ((($3)) + 12|0);
                                                                                                         $420 = $2;
                                                                                                         (_strcpy($419,$420)|0);
                                                                                                         $421 = $2;
                                                                                                         $422 = HEAP32[8088]|0;
                                                                                                         _memcpy(($$byval_copy2|0),($3|0),3216)|0;
                                                                                                         _ValLabel($50,$421,$422,$$byval_copy2,232);
                                                                                                         _memcpy(($3|0),($50|0),3216)|0;
                                                                                                        }
                                                                                                        $423 = ((($3)) + 84|0);
                                                                                                        $424 = HEAP32[$423>>2]|0;
                                                                                                        $425 = ($424|0)==(31);
                                                                                                        if (!($425)) {
                                                                                                         break L1;
                                                                                                        }
                                                                                                        $426 = ((($3)) + 3188|0);
                                                                                                        HEAP32[$426>>2] = 0;
                                                                                                        break L1;
                                                                                                       }
                                                                                                      } while(0);
                                                                                                      _funcOther($48);
                                                                                                      _memcpy(($3|0),($48|0),3216)|0;
                                                                                                      break L1;
                                                                                                     }
                                                                                                    } while(0);
                                                                                                    _funcBendaBaru($47);
                                                                                                    _memcpy(($3|0),($47|0),3216)|0;
                                                                                                    break L1;
                                                                                                   }
                                                                                                  } while(0);
                                                                                                  _funcSQLTranslasi($46);
                                                                                                  _memcpy(($3|0),($46|0),3216)|0;
                                                                                                  break L1;
                                                                                                 }
                                                                                                } while(0);
                                                                                                _funcWaktuRubahArsip($45);
                                                                                                _memcpy(($3|0),($45|0),3216)|0;
                                                                                                break L1;
                                                                                               }
                                                                                              } while(0);
                                                                                              _funcWaktuAksesArsip($44);
                                                                                              _memcpy(($3|0),($44|0),3216)|0;
                                                                                              break L1;
                                                                                             }
                                                                                            } while(0);
                                                                                            _funcBesarArsip($43);
                                                                                            _memcpy(($3|0),($43|0),3216)|0;
                                                                                            break L1;
                                                                                           }
                                                                                          } while(0);
                                                                                          _funcApakahArsip($42);
                                                                                          _memcpy(($3|0),($42|0),3216)|0;
                                                                                          break L1;
                                                                                         }
                                                                                        } while(0);
                                                                                        _funcBacaArsip($41);
                                                                                        _memcpy(($3|0),($41|0),3216)|0;
                                                                                        break L1;
                                                                                       }
                                                                                      } while(0);
                                                                                      _funcArsip($40);
                                                                                      _memcpy(($3|0),($40|0),3216)|0;
                                                                                      break L1;
                                                                                     }
                                                                                    } while(0);
                                                                                    _funcPOSISI_DIR($39);
                                                                                    _memcpy(($3|0),($39|0),3216)|0;
                                                                                    break L1;
                                                                                   }
                                                                                  } while(0);
                                                                                  _funcGANTI_DIR($38);
                                                                                  _memcpy(($3|0),($38|0),3216)|0;
                                                                                  break L1;
                                                                                 }
                                                                                } while(0);
                                                                                _funcHAPUS_DIR($37);
                                                                                _memcpy(($3|0),($37|0),3216)|0;
                                                                                break L1;
                                                                               }
                                                                              } while(0);
                                                                              _funcBUAT_DIR($36);
                                                                              _memcpy(($3|0),($36|0),3216)|0;
                                                                              break L1;
                                                                             }
                                                                            } while(0);
                                                                            _funcAMBIL_DIR($35);
                                                                            _memcpy(($3|0),($35|0),3216)|0;
                                                                            break L1;
                                                                           }
                                                                          } while(0);
                                                                          _funcKONFIGURASI($34);
                                                                          _memcpy(($3|0),($34|0),3216)|0;
                                                                          break L1;
                                                                         }
                                                                        } while(0);
                                                                        _funcLingkup($33);
                                                                        _memcpy(($3|0),($33|0),3216)|0;
                                                                        break L1;
                                                                       }
                                                                      } while(0);
                                                                      _funcKONEK_SOKET($32);
                                                                      _memcpy(($3|0),($32|0),3216)|0;
                                                                      break L1;
                                                                     }
                                                                    } while(0);
                                                                    _funcTULIS_SOKET($31);
                                                                    _memcpy(($3|0),($31|0),3216)|0;
                                                                    break L1;
                                                                   }
                                                                  } while(0);
                                                                  _funcBACA_SOKET($30);
                                                                  _memcpy(($3|0),($30|0),3216)|0;
                                                                  break L1;
                                                                 }
                                                                } while(0);
                                                                _funcTRIMA_SOKET($29);
                                                                _memcpy(($3|0),($29|0),3216)|0;
                                                                break L1;
                                                               }
                                                              } while(0);
                                                              _funcIKAT_SOKET($28);
                                                              _memcpy(($3|0),($28|0),3216)|0;
                                                              break L1;
                                                             }
                                                            } while(0);
                                                            $267 = (_ux_initSocket(15249)|0);
                                                            $268 = ((($3)) + 1804|0);
                                                            HEAP32[$268>>2] = $267;
                                                            $269 = ((($3)) + 84|0);
                                                            HEAP32[$269>>2] = 5;
                                                            break L1;
                                                           }
                                                          } while(0);
                                                          $258 = (_ux_initSocket(15225)|0);
                                                          $259 = ((($3)) + 1804|0);
                                                          HEAP32[$259>>2] = $258;
                                                          $260 = ((($3)) + 84|0);
                                                          HEAP32[$260>>2] = 4;
                                                          break L1;
                                                         }
                                                        } while(0);
                                                        _funcPing($27);
                                                        _memcpy(($3|0),($27|0),3216)|0;
                                                        break L1;
                                                       }
                                                      } while(0);
                                                      $237 = (+_hhrnd());
                                                      $238 = ((($3)) + 96|0);
                                                      HEAPF64[$238>>3] = $237;
                                                      $239 = ((($3)) + 84|0);
                                                      HEAP32[$239>>2] = 1;
                                                      break L1;
                                                     }
                                                    } while(0);
                                                    $222 = ((($3)) + 104|0);
                                                    $223 = (_getDay2()|0);
                                                    (_strcpy($222,$223)|0);
                                                    $224 = ((($3)) + 84|0);
                                                    HEAP32[$224>>2] = 3;
                                                    break L1;
                                                   }
                                                  } while(0);
                                                  $213 = ((($3)) + 104|0);
                                                  $214 = (_createTime2()|0);
                                                  (_strcpy($213,$214)|0);
                                                  $215 = ((($3)) + 84|0);
                                                  HEAP32[$215>>2] = 3;
                                                  break L1;
                                                 }
                                                } while(0);
                                                _funcEKSPRESI($26);
                                                _memcpy(($3|0),($26|0),3216)|0;
                                                break L1;
                                               }
                                              } while(0);
                                              _funcGabung($25);
                                              _memcpy(($3|0),($25|0),3216)|0;
                                              break L1;
                                             }
                                            } while(0);
                                            _funcSambung($24);
                                            _memcpy(($3|0),($24|0),3216)|0;
                                            break L1;
                                           }
                                          } while(0);
                                          _funcHURUF_NO($23);
                                          _memcpy(($3|0),($23|0),3216)|0;
                                          break L1;
                                         }
                                        } while(0);
                                        _funcKE_HURUF($22);
                                        _memcpy(($3|0),($22|0),3216)|0;
                                        break L1;
                                       }
                                      } while(0);
                                      _funcKE_ANGKA($21);
                                      _memcpy(($3|0),($21|0),3216)|0;
                                      break L1;
                                     }
                                    } while(0);
                                    _funcHURUF_KAH($20);
                                    _memcpy(($3|0),($20|0),3216)|0;
                                    break L1;
                                   }
                                  } while(0);
                                  _funcANGKA_KAH($19);
                                  _memcpy(($3|0),($19|0),3216)|0;
                                  break L1;
                                 }
                                } while(0);
                                _funcStdDevUntaian($18);
                                _memcpy(($3|0),($18|0),3216)|0;
                                break L1;
                               }
                              } while(0);
                              _funcVarUntaian($17);
                              _memcpy(($3|0),($17|0),3216)|0;
                              break L1;
                             }
                            } while(0);
                            _funcAveUntaian($16);
                            _memcpy(($3|0),($16|0),3216)|0;
                            break L1;
                           }
                          } while(0);
                          _funcJumUntaian($15);
                          _memcpy(($3|0),($15|0),3216)|0;
                          break L1;
                         }
                        } while(0);
                        _funcGcd($14);
                        _memcpy(($3|0),($14|0),3216)|0;
                        break L1;
                       }
                      } while(0);
                      _funcKombinasi($13);
                      _memcpy(($3|0),($13|0),3216)|0;
                      break L1;
                     }
                    } while(0);
                    _funcPermutasi($12);
                    _memcpy(($3|0),($12|0),3216)|0;
                    break L1;
                   }
                  } while(0);
                  _funcFaktorial($11);
                  _memcpy(($3|0),($11|0),3216)|0;
                  break L1;
                 }
                }
               }
              } while(0);
              _funcCosinus($10);
              _memcpy(($3|0),($10|0),3216)|0;
              break;
             }
            }
           }
          }
          _funcSinus($9);
          _memcpy(($3|0),($9|0),3216)|0;
          break;
         }
        }
       }
      }
      _funcAbs($8);
      _memcpy(($3|0),($8|0),3216)|0;
      break;
     }
    }
    _funcAkar($7);
    _memcpy(($3|0),($7|0),3216)|0;
   } else {
    label = 3;
   }
  } else {
   label = 3;
  }
 } while(0);
 if ((label|0) == 3) {
  _funcSaklarStatus($6);
  _memcpy(($3|0),($6|0),3216)|0;
 }
 _memcpy(($0|0),($3|0),3216)|0;
 STACKTOP = sp;return;
}
function _Factor($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0.0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0.0, $180 = 0, $181 = 0;
 var $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0.0, $196 = 0.0, $197 = 0.0, $198 = 0, $199 = 0, $2 = 0;
 var $20 = 0.0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0;
 var $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0.0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0;
 var $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, $vararg_ptr2 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 46720|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(46720|0);
 $$byval_copy26 = sp + 46040|0;
 $$byval_copy25 = sp + 41880|0;
 $$byval_copy24 = sp + 38664|0;
 $$byval_copy23 = sp + 35448|0;
 $$byval_copy22 = sp + 45728|0;
 $$byval_copy21 = sp + 32232|0;
 $$byval_copy20 = sp + 29016|0;
 $$byval_copy = sp + 25800|0;
 $vararg_buffer18 = sp + 25792|0;
 $vararg_buffer16 = sp + 25784|0;
 $vararg_buffer14 = sp + 25776|0;
 $vararg_buffer12 = sp + 25768|0;
 $vararg_buffer10 = sp + 25760|0;
 $vararg_buffer8 = sp + 25752|0;
 $vararg_buffer5 = sp + 25744|0;
 $vararg_buffer3 = sp + 25736|0;
 $vararg_buffer = sp + 25728|0;
 $1 = sp + 22512|0;
 $2 = sp + 19296|0;
 $3 = sp + 16080|0;
 $5 = sp + 46656|0;
 $6 = sp + 46352|0;
 $7 = sp + 12864|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 45408|0;
 $11 = sp + 3216|0;
 $12 = sp + 45096|0;
 $13 = sp;
 $4 = 0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($1|0),0,3216)|0;
 dest=$5; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($6|0),0,300)|0;
 _memset((128680|0),0,300)|0;
 (_getlex()|0);
 $14 = HEAP32[7954]|0;
 L1: do {
  switch ($14|0) {
  case 224:  {
   _FactorIdent($7,(31976));
   _memcpy(($1|0),($7|0),3216)|0;
   break;
  }
  case 223:  {
   _memset(($1|0),0,3216)|0;
   $15 = HEAP32[(31976)>>2]|0;
   $16 = ((($1)) + 88|0);
   HEAP32[$16>>2] = $15;
   $17 = ((($1)) + 84|0);
   HEAP32[$17>>2] = 0;
   break;
  }
  case 226:  {
   _memset(($1|0),0,3216)|0;
   $18 = +HEAPF64[(31976)>>3];
   $19 = $18 != 0.0;
   if ($19) {
    $20 = +HEAPF64[(31976)>>3];
    $21 = ((($1)) + 96|0);
    HEAPF64[$21>>3] = $20;
   } else {
    $22 = ((($1)) + 96|0);
    HEAPF64[$22>>3] = 0.0;
   }
   $23 = ((($1)) + 84|0);
   HEAP32[$23>>2] = 1;
   break;
  }
  case 225:  {
   _memset(($1|0),0,3216)|0;
   $24 = ((($1)) + 104|0);
   (_strcpy($24,(31976))|0);
   $25 = ((($1)) + 84|0);
   HEAP32[$25>>2] = 3;
   break;
  }
  case 228:  {
   $26 = ((($1)) + 420|0);
   (_strcpy($26,(31976))|0);
   $27 = ((($1)) + 720|0);
   _getArrayName((31976),$27);
   $28 = ((($1)) + 870|0);
   _getArrayIdx((31976),$28);
   $29 = (_strlen((31976))|0);
   $30 = ($29>>>0)>(0);
   if ($30) {
    $31 = ((($3)) + 420|0);
    (_strcpy($31,(31976))|0);
    $32 = ((($3)) + 720|0);
    _getArrayName((31976),$32);
    $33 = ((($3)) + 870|0);
    _getArrayIdx((31976),$33);
    $34 = (_strlen(128380)|0);
    $35 = ($34>>>0)>(0);
    if ($35) {
     $36 = ((($3)) + 720|0);
     HEAP32[$vararg_buffer>>2] = 128380;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = $36;
     (_sprintf($6,15808,$vararg_buffer)|0);
     $37 = ((($3)) + 720|0);
     _memset(($37|0),0,150)|0;
     $38 = ((($3)) + 720|0);
     (_strcpy($38,$6)|0);
    }
    $39 = ((($3)) + 870|0);
    $40 = HEAP8[$39>>0]|0;
    $41 = $40 << 24 >> 24;
    $42 = (_isdigit($41)|0);
    $43 = ($42|0)!=(0);
    do {
     if ($43) {
      $44 = ((($3)) + 870|0);
      $45 = (_atol($44)|0);
      $4 = $45;
     } else {
      _memset((128680|0),0,300)|0;
      (_strcpy(128680,17193)|0);
      $46 = ((($3)) + 870|0);
      (_strcat(128680,$46)|0);
      (_strcat(128680,17196)|0);
      $47 = HEAP32[18446]|0;
      $48 = HEAP32[(73788)>>2]|0;
      _interpretIndexParam($8,128680,$47,$48,128380);
      _memcpy(($2|0),($8|0),3216)|0;
      $49 = ((($2)) + 84|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(0);
      if ($51) {
       $52 = ((($2)) + 88|0);
       $53 = HEAP32[$52>>2]|0;
       $4 = $53;
       break;
      }
      $54 = ((($2)) + 84|0);
      $55 = HEAP32[$54>>2]|0;
      $56 = ($55|0)==(1);
      if ($56) {
       $57 = ((($2)) + 96|0);
       $58 = +HEAPF64[$57>>3];
       $59 = (~~(($58)));
       $60 = (Math_abs(($59|0))|0);
       $4 = $60;
       break;
      } else {
       _Error(16065,$vararg_buffer3);
       break;
      }
     }
    } while(0);
    $61 = ((($3)) + 720|0);
    $62 = HEAP32[8088]|0;
    _memcpy(($$byval_copy|0),($3|0),3216)|0;
    _ValLabel($9,$61,$62,$$byval_copy,232);
    _memcpy(($3|0),($9|0),3216)|0;
    $63 = ((($3)) + 870|0);
    $64 = $4;
    HEAP32[$vararg_buffer5>>2] = $64;
    (_sprintf($63,16087,$vararg_buffer5)|0);
    $65 = $4;
    $66 = ($65|0)<(0);
    $67 = $4;
    $68 = ($67|0)>(99999000);
    $or$cond = $66 | $68;
    if ($or$cond) {
     _Error(16096,$vararg_buffer8);
    }
    $69 = ((($3)) + 84|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = ($70|0)==(6);
    if ($71) {
     $72 = $4;
     _memcpy(($$byval_copy20|0),($3|0),3216)|0;
     $73 = (_get_int_array($$byval_copy20,$72)|0);
     $74 = ((($1)) + 88|0);
     HEAP32[$74>>2] = $73;
     $75 = ((($1)) + 84|0);
     HEAP32[$75>>2] = 0;
     break L1;
    }
    $76 = ((($3)) + 84|0);
    $77 = HEAP32[$76>>2]|0;
    $78 = ($77|0)==(7);
    if ($78) {
     $79 = $4;
     _memcpy(($$byval_copy21|0),($3|0),3216)|0;
     $80 = (+_get_dbl_array($$byval_copy21,$79));
     $81 = ((($1)) + 96|0);
     HEAPF64[$81>>3] = $80;
     $82 = ((($1)) + 84|0);
     HEAP32[$82>>2] = 1;
     break L1;
    }
    $83 = ((($3)) + 84|0);
    $84 = HEAP32[$83>>2]|0;
    $85 = ($84|0)==(8);
    if (!($85)) {
     $99 = ((($3)) + 84|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = ($100|0)==(10);
     if ($101) {
      $102 = ((($1)) + 104|0);
      $103 = $4;
      $104 = ((($3)) + 1024|0);
      $105 = HEAP32[$104>>2]|0;
      $106 = (($105) + ($103<<2)|0);
      $107 = HEAP32[$106>>2]|0;
      (_strcpy($102,$107)|0);
      $108 = ((($1)) + 84|0);
      HEAP32[$108>>2] = 3;
      break L1;
     } else {
      _memcpy(($1|0),($3|0),3216)|0;
      break L1;
     }
    }
    _memset(((72140)|0),0,256)|0;
    _memset(((71832)|0),0,300)|0;
    $86 = ((($3)) + 720|0);
    (_strcpy((72140),$86)|0);
    $87 = ((($3)) + 412|0);
    $88 = HEAP32[$87>>2]|0;
    HEAP32[8086] = $88;
    $89 = HEAP32[8086]|0;
    $90 = ($89|0)<(0);
    if ($90) {
     (_printf(16303,$vararg_buffer10)|0);
    } else {
     $91 = HEAP32[8086]|0;
     HEAP32[17956] = $91;
     $92 = $4;
     HEAP32[(71828)>>2] = $92;
     _memcpy(($$byval_copy22|0),(71824|0),312)|0;
     $93 = (_string_findData($$byval_copy22)|0);
     HEAP32[8074] = $93;
     $94 = HEAP32[8074]|0;
     $95 = ($94|0)<(0);
     if (!($95)) {
      $96 = HEAP32[8074]|0;
      _string_getElement($10,$96);
      _memcpy((71824|0),($10|0),312)|0;
      $97 = ((($1)) + 104|0);
      (_strcpy($97,(71832))|0);
     }
    }
    $98 = ((($1)) + 84|0);
    HEAP32[$98>>2] = 3;
   }
   break;
  }
  case 229:  {
   _checkInstanceValidation((31976));
   _memset(($3|0),0,3216)|0;
   $109 = ((($3)) + 84|0);
   HEAP32[$109>>2] = -1;
   $110 = ((($3)) + 88|0);
   HEAP32[$110>>2] = -1;
   $111 = HEAP32[8091]|0;
   _memcpy(($$byval_copy23|0),($3|0),3216)|0;
   _ValLabel($11,(31976),$111,$$byval_copy23,232);
   _memcpy(($3|0),($11|0),3216)|0;
   $112 = ((($1)) + 2574|0);
   $113 = ((($3)) + 2574|0);
   (_strcpy($112,$113)|0);
   $114 = ((($3)) + 3184|0);
   $115 = HEAP32[$114>>2]|0;
   $116 = ((($1)) + 3184|0);
   HEAP32[$116>>2] = $115;
   $117 = ((($3)) + 84|0);
   $118 = HEAP32[$117>>2]|0;
   $119 = ($118|0)==(0);
   if ($119) {
    $120 = ((($3)) + 88|0);
    $121 = HEAP32[$120>>2]|0;
    $122 = ((($1)) + 88|0);
    HEAP32[$122>>2] = $121;
    $123 = ((($1)) + 84|0);
    HEAP32[$123>>2] = 0;
    break L1;
   }
   $124 = ((($3)) + 84|0);
   $125 = HEAP32[$124>>2]|0;
   $126 = ($125|0)==(1);
   if ($126) {
    $127 = ((($3)) + 96|0);
    $128 = +HEAPF64[$127>>3];
    $129 = ((($1)) + 96|0);
    HEAPF64[$129>>3] = $128;
    $130 = ((($1)) + 84|0);
    HEAP32[$130>>2] = 1;
    break L1;
   }
   $131 = ((($3)) + 84|0);
   $132 = HEAP32[$131>>2]|0;
   $133 = ($132|0)==(3);
   if ($133) {
    $134 = ((($1)) + 104|0);
    $135 = ((($3)) + 104|0);
    (_strcpy($134,$135)|0);
    $136 = ((($1)) + 84|0);
    HEAP32[$136>>2] = 3;
    break L1;
   }
   $137 = ((($3)) + 84|0);
   $138 = HEAP32[$137>>2]|0;
   $139 = ($138|0)==(6);
   if ($139) {
    $140 = $4;
    _memcpy(($$byval_copy24|0),($3|0),3216)|0;
    $141 = (_get_int_array($$byval_copy24,$140)|0);
    $142 = ((($2)) + 88|0);
    HEAP32[$142>>2] = $141;
    $143 = ((($1)) + 84|0);
    HEAP32[$143>>2] = 0;
    break L1;
   }
   $144 = ((($3)) + 84|0);
   $145 = HEAP32[$144>>2]|0;
   $146 = ($145|0)==(7);
   if ($146) {
    $147 = $4;
    _memcpy(($$byval_copy25|0),($3|0),3216)|0;
    $148 = (+_get_dbl_array($$byval_copy25,$147));
    $149 = ((($2)) + 96|0);
    HEAPF64[$149>>3] = $148;
    $150 = ((($1)) + 84|0);
    HEAP32[$150>>2] = 1;
    break L1;
   }
   $151 = ((($3)) + 84|0);
   $152 = HEAP32[$151>>2]|0;
   $153 = ($152|0)==(8);
   if (!($153)) {
    $167 = ((($3)) + 84|0);
    $168 = HEAP32[$167>>2]|0;
    $169 = ($168|0)==(10);
    if ($169) {
     $170 = ((($1)) + 104|0);
     $171 = $4;
     $172 = ((($3)) + 1024|0);
     $173 = HEAP32[$172>>2]|0;
     $174 = (($173) + ($171<<2)|0);
     $175 = HEAP32[$174>>2]|0;
     (_strcpy($170,$175)|0);
     $176 = ((($1)) + 84|0);
     HEAP32[$176>>2] = 3;
     break L1;
    } else {
     _memcpy(($1|0),($3|0),3216)|0;
     break L1;
    }
   }
   _memset(((72140)|0),0,256)|0;
   _memset(((71832)|0),0,300)|0;
   $154 = ((($3)) + 720|0);
   (_strcpy((72140),$154)|0);
   $155 = ((($3)) + 412|0);
   $156 = HEAP32[$155>>2]|0;
   HEAP32[8086] = $156;
   $157 = HEAP32[8086]|0;
   $158 = ($157|0)<(0);
   if ($158) {
    (_printf(16303,$vararg_buffer12)|0);
   } else {
    $159 = HEAP32[8086]|0;
    HEAP32[17956] = $159;
    $160 = $4;
    HEAP32[(71828)>>2] = $160;
    _memcpy(($$byval_copy26|0),(71824|0),312)|0;
    $161 = (_string_findData($$byval_copy26)|0);
    HEAP32[8074] = $161;
    $162 = HEAP32[8074]|0;
    $163 = ($162|0)<(0);
    if (!($163)) {
     $164 = HEAP32[8074]|0;
     _string_getElement($12,$164);
     _memcpy((71824|0),($12|0),312)|0;
     $165 = ((($1)) + 104|0);
     (_strcpy($165,(71832))|0);
    }
   }
   $166 = ((($1)) + 84|0);
   HEAP32[$166>>2] = 3;
   break;
  }
  case 227:  {
   $177 = HEAP8[(31976)>>0]|0;
   $178 = $177 << 24 >> 24;
   $179 = ($178|0)==(40);
   if ($179) {
    _expression($13);
    _memcpy(($1|0),($13|0),3216)|0;
    (_getlex()|0);
    $180 = HEAP8[(31976)>>0]|0;
    $181 = $180 << 24 >> 24;
    $182 = ($181|0)!=(41);
    if (!($182)) {
     break L1;
    }
    _Error(15745,$vararg_buffer14);
    break L1;
   }
   $183 = HEAP8[(31976)>>0]|0;
   $184 = $183 << 24 >> 24;
   $185 = ($184|0)==(45);
   if ($185) {
    (_getlex()|0);
    $186 = HEAP32[7954]|0;
    $187 = ($186|0)==(223);
    if ($187) {
     $188 = HEAP32[(31976)>>2]|0;
     $189 = (0 - ($188))|0;
     HEAP32[(31976)>>2] = $189;
     $190 = HEAP32[(31976)>>2]|0;
     $191 = ((($2)) + 88|0);
     HEAP32[$191>>2] = $190;
     $192 = ((($2)) + 84|0);
     HEAP32[$192>>2] = 0;
     break L1;
    }
    $193 = HEAP32[7954]|0;
    $194 = ($193|0)==(226);
    if ($194) {
     $195 = +HEAPF64[(31976)>>3];
     $196 = 0.0 - $195;
     HEAPF64[(31976)>>3] = $196;
     $197 = +HEAPF64[(31976)>>3];
     $198 = ((($2)) + 96|0);
     HEAPF64[$198>>3] = $197;
     $199 = ((($2)) + 84|0);
     HEAP32[$199>>2] = 1;
     break L1;
    } else {
     _Error(17116,$vararg_buffer16);
     break L1;
    }
   }
   break;
  }
  default: {
   _Error(15773,$vararg_buffer18);
  }
  }
 } while(0);
 $200 = ((($3)) + 4|0);
 $201 = HEAP32[$200>>2]|0;
 $202 = ($201|0)!=(0|0);
 if ($202) {
  $203 = ((($3)) + 4|0);
  $204 = HEAP32[$203>>2]|0;
  _free($204);
 }
 $205 = ((($3)) + 8|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ($206|0)!=(0|0);
 if ($207) {
  $208 = ((($3)) + 8|0);
  $209 = HEAP32[$208>>2]|0;
  _free($209);
 }
 $210 = HEAP32[$3>>2]|0;
 $211 = ($210|0)!=(0|0);
 if ($211) {
  $212 = HEAP32[$3>>2]|0;
  _free($212);
 }
 $213 = ((($2)) + 4|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ($214|0)!=(0|0);
 if ($215) {
  $216 = ((($2)) + 4|0);
  $217 = HEAP32[$216>>2]|0;
  _free($217);
 }
 $218 = ((($2)) + 8|0);
 $219 = HEAP32[$218>>2]|0;
 $220 = ($219|0)!=(0|0);
 if ($220) {
  $221 = ((($2)) + 8|0);
  $222 = HEAP32[$221>>2]|0;
  _free($222);
 }
 $223 = HEAP32[$2>>2]|0;
 $224 = ($223|0)!=(0|0);
 if (!($224)) {
  _memcpy(($0|0),($1|0),3216)|0;
  STACKTOP = sp;return;
 }
 $225 = HEAP32[$2>>2]|0;
 _free($225);
 _memcpy(($0|0),($1|0),3216)|0;
 STACKTOP = sp;return;
}
function _keySAKLAR_HIDUP() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 14176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(14176|0);
 $$byval_copy = sp + 9664|0;
 $vararg_buffer2 = sp + 9656|0;
 $vararg_buffer = sp + 9648|0;
 $0 = sp + 14104|0;
 $1 = sp + 6432|0;
 $2 = sp + 12880|0;
 $3 = sp + 13800|0;
 $4 = sp + 3216|0;
 $5 = sp;
 _memset(($1|0),0,3216)|0;
 dest=$0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($2|0),0,920)|0;
 _memset(($3|0),0,300)|0;
 (_getlex()|0);
 $6 = HEAP32[7954]|0;
 switch ($6|0) {
 case 225:  {
  (_power_on((31976))|0);
  break;
 }
 case 229:  {
  _checkObjectValidation((31976));
  label = 4;
  break;
 }
 case 224:  {
  label = 4;
  break;
 }
 default: {
  _Error(15815,$vararg_buffer2);
 }
 }
 if ((label|0) == 4) {
  $7 = (_strlen(128380)|0);
  $8 = ($7>>>0)>(0);
  if ($8) {
   HEAP32[$vararg_buffer>>2] = 128380;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = (31976);
   (_sprintf($3,15808,$vararg_buffer)|0);
   $9 = HEAP32[8088]|0;
   _memcpy(($$byval_copy|0),($1|0),3216)|0;
   _ValLabel($4,$3,$9,$$byval_copy,232);
   _memcpy(($1|0),($4|0),3216)|0;
  } else {
   _ungetlex();
   _expression($5);
   _memcpy(($1|0),($5|0),3216)|0;
  }
  $10 = ((($1)) + 104|0);
  $11 = (_strlen($10)|0);
  $12 = ($11>>>0)>(0);
  if ($12) {
   $13 = ((($1)) + 104|0);
   (_power_on($13)|0);
  }
 }
 (_getlex()|0);
 $14 = HEAP32[64]|0;
 (_fflush($14)|0);
 _ungetlex();
 STACKTOP = sp;return;
}
function _power_on($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 176|0;
 $5 = sp + 48|0;
 $1 = $0;
 $2 = 0;
 $4 = 0;
 ;HEAP8[$3>>0]=0|0;HEAP8[$3+1>>0]=0|0;HEAP8[$3+2>>0]=0|0;HEAP8[$3+3>>0]=0|0;
 dest=$5; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = (_fopen(15848,15871)|0);
 $2 = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  (_printf(15874,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $8 = $2;
 _rewind($8);
 $9 = $1;
 (_strcpy($3,$9)|0);
 $10 = $2;
 (_fwrite($3,1,3,$10)|0);
 $11 = $2;
 (_fclose($11)|0);
 HEAP32[$vararg_buffer1>>2] = $3;
 (_sprintf($5,15905,$vararg_buffer1)|0);
 $12 = (_fopen($5,15938)|0);
 $2 = $12;
 $13 = ($12|0)==(0|0);
 if ($13) {
  (_printf(15942,$vararg_buffer3)|0);
  _exit(1);
  // unreachable;
 }
 $14 = $2;
 _rewind($14);
 (_strcpy($3,15971)|0);
 $15 = $2;
 (_fwrite($3,1,3,$15)|0);
 $16 = $2;
 (_fclose($16)|0);
 dest=$5; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $17 = $1;
 (_strcpy($3,$17)|0);
 HEAP32[$vararg_buffer5>>2] = $3;
 (_sprintf($5,15975,$vararg_buffer5)|0);
 $18 = (_fopen($5,15938)|0);
 $2 = $18;
 $19 = ($18|0)==(0|0);
 if ($19) {
  (_printf(16004,$vararg_buffer8)|0);
  _exit(1);
  // unreachable;
 } else {
  $20 = $2;
  _rewind($20);
  (_strcpy($3,16029)|0);
  $21 = $2;
  (_fwrite($3,1,1,$21)|0);
  $22 = $2;
  (_fclose($22)|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _keySAKLAR_MATI() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, dest = 0;
 var label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 14176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(14176|0);
 $$byval_copy = sp + 9664|0;
 $vararg_buffer2 = sp + 9656|0;
 $vararg_buffer = sp + 9648|0;
 $0 = sp + 14104|0;
 $1 = sp + 6432|0;
 $2 = sp + 12880|0;
 $3 = sp + 13800|0;
 $4 = sp + 3216|0;
 $5 = sp;
 _memset(($1|0),0,3216)|0;
 dest=$0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($2|0),0,920)|0;
 _memset(($3|0),0,300)|0;
 (_getlex()|0);
 $6 = HEAP32[7954]|0;
 switch ($6|0) {
 case 225:  {
  (_power_off((31976))|0);
  break;
 }
 case 229:  {
  _checkObjectValidation((31976));
  label = 4;
  break;
 }
 case 224:  {
  label = 4;
  break;
 }
 default: {
  _Error(16031,$vararg_buffer2);
 }
 }
 if ((label|0) == 4) {
  $7 = (_strlen(128380)|0);
  $8 = ($7>>>0)>(0);
  if ($8) {
   HEAP32[$vararg_buffer>>2] = 128380;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = (31976);
   (_sprintf($3,15808,$vararg_buffer)|0);
   $9 = HEAP32[8088]|0;
   _memcpy(($$byval_copy|0),($1|0),3216)|0;
   _ValLabel($4,$3,$9,$$byval_copy,232);
   _memcpy(($1|0),($4|0),3216)|0;
  } else {
   _ungetlex();
   _expression($5);
   _memcpy(($1|0),($5|0),3216)|0;
  }
  $10 = ((($1)) + 104|0);
  $11 = (_strlen($10)|0);
  $12 = ($11>>>0)>(0);
  if ($12) {
   $13 = ((($1)) + 104|0);
   (_power_off($13)|0);
  }
 }
 (_getlex()|0);
 $14 = HEAP32[64]|0;
 (_fflush($14)|0);
 _ungetlex();
 STACKTOP = sp;return;
}
function _power_off($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer5 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 176|0;
 $5 = sp + 48|0;
 $1 = $0;
 $2 = 0;
 $4 = 0;
 ;HEAP8[$3>>0]=0|0;HEAP8[$3+1>>0]=0|0;HEAP8[$3+2>>0]=0|0;HEAP8[$3+3>>0]=0|0;
 dest=$5; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $6 = (_fopen(15848,15871)|0);
 $2 = $6;
 $7 = ($6|0)==(0|0);
 if ($7) {
  (_printf(15874,$vararg_buffer)|0);
  _exit(1);
  // unreachable;
 }
 $8 = $2;
 _rewind($8);
 $9 = $1;
 (_strcpy($3,$9)|0);
 $10 = $2;
 (_fwrite($3,1,3,$10)|0);
 $11 = $2;
 (_fclose($11)|0);
 HEAP32[$vararg_buffer1>>2] = $3;
 (_sprintf($5,15905,$vararg_buffer1)|0);
 $12 = (_fopen($5,15938)|0);
 $2 = $12;
 $13 = ($12|0)==(0|0);
 if ($13) {
  (_printf(15942,$vararg_buffer3)|0);
  _exit(1);
  // unreachable;
 }
 $14 = $2;
 _rewind($14);
 (_strcpy($3,15971)|0);
 $15 = $2;
 (_fwrite($3,1,3,$15)|0);
 $16 = $2;
 (_fclose($16)|0);
 dest=$5; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $17 = $1;
 (_strcpy($3,$17)|0);
 HEAP32[$vararg_buffer5>>2] = $3;
 (_sprintf($5,15975,$vararg_buffer5)|0);
 $18 = (_fopen($5,15938)|0);
 $2 = $18;
 $19 = ($18|0)==(0|0);
 if ($19) {
  (_printf(16004,$vararg_buffer8)|0);
  _exit(1);
  // unreachable;
 } else {
  $20 = $2;
  _rewind($20);
  (_strcpy($3,16063)|0);
  $21 = $2;
  (_fwrite($3,1,1,$21)|0);
  $22 = $2;
  (_fclose($22)|0);
  STACKTOP = sp;return 0;
 }
 return (0)|0;
}
function _keyTulis() {
 var $$byval_copy = 0, $$byval_copy71 = 0, $$byval_copy72 = 0, $$byval_copy73 = 0, $$byval_copy74 = 0, $$byval_copy75 = 0, $$byval_copy76 = 0, $$byval_copy77 = 0, $$byval_copy78 = 0, $$byval_copy79 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0.0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0;
 var $vararg_ptr10 = 0, $vararg_ptr4 = 0, $vararg_ptr54 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 63216|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(63216|0);
 $$byval_copy79 = sp + 58104|0;
 $$byval_copy78 = sp + 54888|0;
 $$byval_copy77 = sp + 51672|0;
 $$byval_copy76 = sp + 48456|0;
 $$byval_copy75 = sp + 45240|0;
 $$byval_copy74 = sp + 42024|0;
 $$byval_copy73 = sp + 38808|0;
 $$byval_copy72 = sp + 35592|0;
 $$byval_copy71 = sp + 32376|0;
 $$byval_copy = sp + 29160|0;
 $vararg_buffer69 = sp + 29152|0;
 $vararg_buffer67 = sp + 29144|0;
 $vararg_buffer64 = sp + 29136|0;
 $vararg_buffer61 = sp + 29128|0;
 $vararg_buffer58 = sp + 29120|0;
 $vararg_buffer55 = sp + 29112|0;
 $vararg_buffer51 = sp + 29104|0;
 $vararg_buffer48 = sp + 29096|0;
 $vararg_buffer45 = sp + 29088|0;
 $vararg_buffer43 = sp + 29080|0;
 $vararg_buffer40 = sp + 29072|0;
 $vararg_buffer37 = sp + 29064|0;
 $vararg_buffer34 = sp + 29056|0;
 $vararg_buffer32 = sp + 29048|0;
 $vararg_buffer29 = sp + 29040|0;
 $vararg_buffer27 = sp + 29032|0;
 $vararg_buffer25 = sp + 29024|0;
 $vararg_buffer22 = sp + 29016|0;
 $vararg_buffer20 = sp + 29008|0;
 $vararg_buffer18 = sp + 29000|0;
 $vararg_buffer16 = sp + 28992|0;
 $vararg_buffer14 = sp + 28984|0;
 $vararg_buffer11 = sp + 28976|0;
 $vararg_buffer7 = sp + 28968|0;
 $vararg_buffer5 = sp + 28960|0;
 $vararg_buffer1 = sp + 28952|0;
 $vararg_buffer = sp + 28944|0;
 $0 = sp + 63152|0;
 $2 = sp + 62848|0;
 $3 = sp + 62548|0;
 $4 = sp + 25728|0;
 $5 = sp + 22512|0;
 $6 = sp + 19296|0;
 $8 = sp + 61320|0;
 $9 = sp + 62248|0;
 $10 = sp + 16080|0;
 $11 = sp + 12864|0;
 $12 = sp + 9648|0;
 $13 = sp + 6432|0;
 $14 = sp + 3216|0;
 $15 = sp;
 $1 = 0;
 $7 = 0;
 _memset(($6|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 dest=$0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($8|0),0,920)|0;
 _memset(($9|0),0,300)|0;
 while(1) {
  (_getlex()|0);
  $16 = HEAP32[7954]|0;
  L3: do {
   switch ($16|0) {
   case 225:  {
    $17 = (_strlen((31976))|0);
    $18 = ($17>>>0)>(0);
    if ($18) {
     HEAP32[$vararg_buffer>>2] = (31976);
     (_printf(19231,$vararg_buffer)|0);
    }
    break;
   }
   case 228:  {
    $19 = (_strlen((31976))|0);
    $20 = ($19>>>0)>(0);
    if ($20) {
     $21 = ((($4)) + 420|0);
     (_strcpy($21,(31976))|0);
     $22 = ((($4)) + 720|0);
     _getArrayName((31976),$22);
     $23 = ((($4)) + 870|0);
     _getArrayIdx((31976),$23);
     $24 = ((($4)) + 870|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25 << 24 >> 24;
     $27 = (_isdigit($26)|0);
     $28 = ($27|0)!=(0);
     do {
      if ($28) {
       $29 = ((($4)) + 870|0);
       $30 = (_atol($29)|0);
       $7 = $30;
      } else {
       $31 = (_strlen(128380)|0);
       $32 = ($31>>>0)>(0);
       if ($32) {
        $33 = ((($4)) + 870|0);
        HEAP32[$vararg_buffer1>>2] = 128380;
        $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
        HEAP32[$vararg_ptr4>>2] = $33;
        (_snprintf($9,300,15808,$vararg_buffer1)|0);
        $34 = HEAP32[8088]|0;
        _memcpy(($$byval_copy|0),($6|0),3216)|0;
        _ValLabel($10,$9,$34,$$byval_copy,232);
        _memcpy(($6|0),($10|0),3216)|0;
       } else {
        $35 = ((($4)) + 870|0);
        $36 = HEAP32[8088]|0;
        _memcpy(($$byval_copy71|0),($6|0),3216)|0;
        _ValLabel($11,$35,$36,$$byval_copy71,232);
        _memcpy(($6|0),($11|0),3216)|0;
       }
       $37 = ((($6)) + 84|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(0);
       if ($39) {
        $40 = ((($6)) + 88|0);
        $41 = HEAP32[$40>>2]|0;
        $7 = $41;
        break;
       } else {
        _Error(16065,$vararg_buffer5);
        break;
       }
      }
     } while(0);
     $42 = (_strlen(128380)|0);
     $43 = ($42>>>0)>(0);
     if ($43) {
      _memset(($9|0),0,300)|0;
      $44 = ((($4)) + 720|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $44;
      (_snprintf($9,300,15808,$vararg_buffer7)|0);
      $45 = HEAP32[8088]|0;
      _memcpy(($$byval_copy72|0),($4|0),3216)|0;
      _ValLabel($12,$9,$45,$$byval_copy72,232);
      _memcpy(($5|0),($12|0),3216)|0;
     } else {
      $46 = ((($4)) + 720|0);
      $47 = HEAP32[8088]|0;
      _memcpy(($$byval_copy73|0),($4|0),3216)|0;
      _ValLabel($13,$46,$47,$$byval_copy73,232);
      _memcpy(($5|0),($13|0),3216)|0;
     }
     $48 = ((($5)) + 870|0);
     $49 = $7;
     HEAP32[$vararg_buffer11>>2] = $49;
     (_sprintf($48,16087,$vararg_buffer11)|0);
     $50 = ((($5)) + 1020|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)<=(0);
     do {
      if ($52) {
       (_printf(16091,$vararg_buffer14)|0);
      } else {
       $53 = $7;
       $54 = ($53|0)<(0);
       if (!($54)) {
        $55 = $7;
        $56 = ((($5)) + 1020|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = (($57) - 1)|0;
        $59 = ($55|0)>($58|0);
        if (!($59)) {
         break;
        }
       }
       _Error(16096,$vararg_buffer16);
      }
     } while(0);
     $60 = ((($5)) + 84|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(6);
     if ($62) {
      $63 = ((($5)) + 404|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0);
      if ($65) {
       _Error(16134,$vararg_buffer18);
      }
      $66 = $7;
      _memcpy(($$byval_copy74|0),($5|0),3216)|0;
      $67 = (_get_int_array($$byval_copy74,$66)|0);
      $68 = ($67|0)==(13);
      if ($68) {
       (_printf(16172,$vararg_buffer20)|0);
       break L3;
      } else {
       $69 = $7;
       _memcpy(($$byval_copy75|0),($5|0),3216)|0;
       $70 = (_get_int_array($$byval_copy75,$69)|0);
       HEAP32[$vararg_buffer22>>2] = $70;
       (_printf(16176,$vararg_buffer22)|0);
       break L3;
      }
     }
     $71 = ((($5)) + 84|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)==(7);
     if ($73) {
      $74 = ((($5)) + 408|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ($75|0)==(0);
      if ($76) {
       _Error(16179,$vararg_buffer25);
      }
      $77 = $7;
      _memcpy(($$byval_copy76|0),($5|0),3216)|0;
      $78 = (+_get_dbl_array($$byval_copy76,$77));
      $79 = $78 == 13.0;
      if ($79) {
       (_printf(16172,$vararg_buffer27)|0);
       break L3;
      } else {
       $80 = $7;
       _memcpy(($$byval_copy77|0),($5|0),3216)|0;
       $81 = (+_get_dbl_array($$byval_copy77,$80));
       HEAPF64[$vararg_buffer29>>3] = $81;
       (_printf(16221,$vararg_buffer29)|0);
       break L3;
      }
     }
     $82 = ((($5)) + 84|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==(8);
     if (!($84)) {
      $91 = ((($5)) + 84|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)==(10);
      if (!($93)) {
       (_printf(1358125,$vararg_buffer43)|0);
       break L3;
      }
      $94 = ((($5)) + 1024|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($95|0)!=(0|0);
      if (!($96)) {
       break L3;
      }
      $97 = $7;
      $98 = ((($5)) + 1024|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (($99) + ($97<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      HEAP32[$vararg_buffer40>>2] = $101;
      (_printf(19231,$vararg_buffer40)|0);
      break L3;
     }
     $85 = ((($5)) + 412|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86|0)==(0);
     if ($87) {
      _Error(16224,$vararg_buffer32);
     }
     $88 = $7;
     _memcpy(($$byval_copy78|0),($5|0),3216)|0;
     $89 = (_get_str_array($$byval_copy78,$88,$3)|0);
     $90 = ($89|0)!=(0);
     if ($90) {
      HEAP32[$vararg_buffer37>>2] = $3;
      (_printf(19231,$vararg_buffer37)|0);
      break L3;
     } else {
      HEAP32[$vararg_buffer34>>2] = $3;
      (_printf(16263,$vararg_buffer34)|0);
      break L3;
     }
    }
    break;
   }
   case 223:  {
    $102 = HEAP32[(31976)>>2]|0;
    HEAP32[$vararg_buffer45>>2] = $102;
    (_printf(16087,$vararg_buffer45)|0);
    break;
   }
   case 226:  {
    $103 = +HEAPF64[(31976)>>3];
    HEAPF64[$vararg_buffer48>>3] = $103;
    (_printf(16221,$vararg_buffer48)|0);
    break;
   }
   case 229:  {
    _checkInstanceValidation((31976));
    label = 47;
    break;
   }
   case 224:  {
    label = 47;
    break;
   }
   default: {
    _Error(16277,$vararg_buffer69);
   }
   }
  } while(0);
  L65: do {
   if ((label|0) == 47) {
    label = 0;
    $104 = (_strlen(128380)|0);
    $105 = ($104>>>0)>(0);
    if ($105) {
     HEAP32[$vararg_buffer51>>2] = 128380;
     $vararg_ptr54 = ((($vararg_buffer51)) + 4|0);
     HEAP32[$vararg_ptr54>>2] = (31976);
     (_snprintf($9,300,15808,$vararg_buffer51)|0);
     $106 = HEAP32[8091]|0;
     _memcpy(($$byval_copy79|0),($6|0),3216)|0;
     _ValLabel($14,$9,$106,$$byval_copy79,232);
     _memcpy(($4|0),($14|0),3216)|0;
    } else {
     _ungetlex();
     _expression($15);
     _memcpy(($4|0),($15|0),3216)|0;
    }
    $107 = ((($4)) + 104|0);
    $108 = (_strlen($107)|0);
    $109 = ($108>>>0)>(0);
    if ($109) {
     $110 = ((($4)) + 84|0);
     $111 = HEAP32[$110>>2]|0;
     $112 = ($111|0)==(3);
     if ($112) {
      $1 = 0;
      while(1) {
       $113 = $1;
       $114 = ((($4)) + 104|0);
       $115 = (_strlen($114)|0);
       $116 = ($113|0)<($115|0);
       if (!($116)) {
        break L65;
       }
       $117 = $1;
       $118 = ((($4)) + 104|0);
       $119 = (($118) + ($117)|0);
       $120 = HEAP8[$119>>0]|0;
       $121 = $120 << 24 >> 24;
       HEAP32[$vararg_buffer55>>2] = $121;
       (_printf(16270,$vararg_buffer55)|0);
       $122 = $1;
       $123 = (($122) + 1)|0;
       $1 = $123;
      }
     }
    }
    $124 = ((($4)) + 84|0);
    $125 = HEAP32[$124>>2]|0;
    $126 = ($125|0)==(1);
    if ($126) {
     $127 = ((($4)) + 96|0);
     $128 = +HEAPF64[$127>>3];
     HEAPF64[$vararg_buffer58>>3] = $128;
     (_printf(16221,$vararg_buffer58)|0);
     break;
    }
    $129 = ((($4)) + 84|0);
    $130 = HEAP32[$129>>2]|0;
    $131 = ($130|0)==(0);
    if ($131) {
     $132 = ((($4)) + 88|0);
     $133 = HEAP32[$132>>2]|0;
     HEAP32[$vararg_buffer61>>2] = $133;
     (_printf(16087,$vararg_buffer61)|0);
     break;
    }
    $134 = ((($4)) + 84|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ($135|0)==(10);
    if (!($136)) {
     $157 = ((($4)) + 84|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)<(0);
     if (!($159)) {
      break;
     }
     (_printf(16091,$vararg_buffer67)|0);
     break;
    }
    $137 = ((($4)) + 1024|0);
    $138 = HEAP32[$137>>2]|0;
    $139 = ($138|0)!=(0|0);
    if ($139) {
     $1 = 0;
     while(1) {
      $140 = $1;
      $141 = ((($4)) + 1020|0);
      $142 = HEAP32[$141>>2]|0;
      $143 = ($140|0)<($142|0);
      if (!($143)) {
       break L65;
      }
      $144 = $1;
      $145 = ((($4)) + 1024|0);
      $146 = HEAP32[$145>>2]|0;
      $147 = (($146) + ($144<<2)|0);
      $148 = HEAP32[$147>>2]|0;
      $149 = ($148|0)!=(0|0);
      if ($149) {
       _memset(($2|0),0,300)|0;
       $150 = $1;
       $151 = ((($4)) + 1024|0);
       $152 = HEAP32[$151>>2]|0;
       $153 = (($152) + ($150<<2)|0);
       $154 = HEAP32[$153>>2]|0;
       (_strcpy($2,$154)|0);
       HEAP32[$vararg_buffer64>>2] = $2;
       (_printf(16273,$vararg_buffer64)|0);
      }
      $155 = $1;
      $156 = (($155) + 1)|0;
      $1 = $156;
     }
    }
   }
  } while(0);
  (_getlex()|0);
  $160 = HEAP32[7954]|0;
  $161 = ($160|0)==(227);
  if (!($161)) {
   break;
  }
  $162 = HEAP8[(31976)>>0]|0;
  $163 = $162 << 24 >> 24;
  $164 = ($163|0)==(44);
  if (!($164)) {
   break;
  }
 }
 $165 = HEAP32[64]|0;
 (_fflush($165)|0);
 _ungetlex();
 $166 = ((($8)) + 8|0);
 $167 = HEAP32[$166>>2]|0;
 $168 = ($167|0)!=(0|0);
 if ($168) {
  $169 = ((($8)) + 8|0);
  $170 = HEAP32[$169>>2]|0;
  _free($170);
 }
 $171 = ((($8)) + 916|0);
 $172 = HEAP32[$171>>2]|0;
 $173 = ($172|0)!=(0|0);
 if ($173) {
  $174 = ((($8)) + 916|0);
  $175 = HEAP32[$174>>2]|0;
  _free($175);
 }
 $176 = ((($4)) + 3196|0);
 $177 = HEAP32[$176>>2]|0;
 $178 = ($177|0)!=(0|0);
 if ($178) {
  $179 = ((($4)) + 3196|0);
  HEAP32[$179>>2] = 0;
 }
 $180 = ((($4)) + 3200|0);
 $181 = HEAP32[$180>>2]|0;
 $182 = ($181|0)!=(0|0);
 if ($182) {
  $183 = ((($4)) + 3200|0);
  HEAP32[$183>>2] = 0;
 }
 $184 = ((($4)) + 1796|0);
 $185 = HEAP32[$184>>2]|0;
 $186 = ($185|0)!=(0|0);
 if ($186) {
  $187 = ((($4)) + 1796|0);
  HEAP32[$187>>2] = 0;
 }
 $188 = ((($4)) + 1024|0);
 $189 = HEAP32[$188>>2]|0;
 $190 = ($189|0)!=(0|0);
 if ($190) {
  $191 = ((($4)) + 1024|0);
  HEAP32[$191>>2] = 0;
 }
 $192 = ((($4)) + 4|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ($193|0)!=(0|0);
 if ($194) {
  $195 = ((($4)) + 4|0);
  $196 = HEAP32[$195>>2]|0;
  _free($196);
 }
 $197 = ((($4)) + 8|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = ($198|0)!=(0|0);
 if ($199) {
  $200 = ((($4)) + 8|0);
  $201 = HEAP32[$200>>2]|0;
  _free($201);
 }
 $202 = HEAP32[$4>>2]|0;
 $203 = ($202|0)!=(0|0);
 if ($203) {
  $204 = HEAP32[$4>>2]|0;
  _free($204);
 }
 $205 = ((($6)) + 3196|0);
 $206 = HEAP32[$205>>2]|0;
 $207 = ($206|0)!=(0|0);
 if ($207) {
  $208 = ((($6)) + 3196|0);
  HEAP32[$208>>2] = 0;
 }
 $209 = ((($6)) + 3200|0);
 $210 = HEAP32[$209>>2]|0;
 $211 = ($210|0)!=(0|0);
 if ($211) {
  $212 = ((($6)) + 3200|0);
  HEAP32[$212>>2] = 0;
 }
 $213 = ((($6)) + 1796|0);
 $214 = HEAP32[$213>>2]|0;
 $215 = ($214|0)!=(0|0);
 if ($215) {
  $216 = ((($6)) + 1796|0);
  HEAP32[$216>>2] = 0;
 }
 $217 = ((($6)) + 1024|0);
 $218 = HEAP32[$217>>2]|0;
 $219 = ($218|0)!=(0|0);
 if ($219) {
  $220 = ((($6)) + 1024|0);
  HEAP32[$220>>2] = 0;
 }
 $221 = ((($6)) + 4|0);
 $222 = HEAP32[$221>>2]|0;
 $223 = ($222|0)!=(0|0);
 if ($223) {
  $224 = ((($6)) + 4|0);
  $225 = HEAP32[$224>>2]|0;
  _free($225);
 }
 $226 = ((($6)) + 8|0);
 $227 = HEAP32[$226>>2]|0;
 $228 = ($227|0)!=(0|0);
 if ($228) {
  $229 = ((($6)) + 8|0);
  $230 = HEAP32[$229>>2]|0;
  _free($230);
 }
 $231 = HEAP32[$6>>2]|0;
 $232 = ($231|0)!=(0|0);
 if ($232) {
  $233 = HEAP32[$6>>2]|0;
  _free($233);
 }
 $234 = ((($5)) + 3196|0);
 $235 = HEAP32[$234>>2]|0;
 $236 = ($235|0)!=(0|0);
 if ($236) {
  $237 = ((($5)) + 3196|0);
  HEAP32[$237>>2] = 0;
 }
 $238 = ((($5)) + 3200|0);
 $239 = HEAP32[$238>>2]|0;
 $240 = ($239|0)!=(0|0);
 if ($240) {
  $241 = ((($5)) + 3200|0);
  HEAP32[$241>>2] = 0;
 }
 $242 = ((($5)) + 1796|0);
 $243 = HEAP32[$242>>2]|0;
 $244 = ($243|0)!=(0|0);
 if ($244) {
  $245 = ((($5)) + 1796|0);
  HEAP32[$245>>2] = 0;
 }
 $246 = ((($5)) + 1024|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = ($247|0)!=(0|0);
 if ($248) {
  $249 = ((($5)) + 1024|0);
  HEAP32[$249>>2] = 0;
 }
 $250 = ((($5)) + 4|0);
 $251 = HEAP32[$250>>2]|0;
 $252 = ($251|0)!=(0|0);
 if ($252) {
  $253 = ((($5)) + 4|0);
  $254 = HEAP32[$253>>2]|0;
  _free($254);
 }
 $255 = ((($5)) + 8|0);
 $256 = HEAP32[$255>>2]|0;
 $257 = ($256|0)!=(0|0);
 if ($257) {
  $258 = ((($5)) + 8|0);
  $259 = HEAP32[$258>>2]|0;
  _free($259);
 }
 $260 = HEAP32[$5>>2]|0;
 $261 = ($260|0)!=(0|0);
 if (!($261)) {
  STACKTOP = sp;return;
 }
 $262 = HEAP32[$5>>2]|0;
 _free($262);
 STACKTOP = sp;return;
}
function _get_int_array($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(64|0);
 $$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $5 = sp + 8|0;
 $2 = $1;
 $3 = 0;
 $4 = 0;
 _memset(((72996)|0),0,256)|0;
 $6 = ((($0)) + 720|0);
 (_strcpy((72996),$6)|0);
 $7 = ((($0)) + 404|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $4;
 $10 = ($9|0)<(0);
 do {
  if ($10) {
   (_printf(16303,$vararg_buffer)|0);
  } else {
   $11 = $4;
   HEAP32[18244] = $11;
   $12 = $2;
   HEAP32[(72980)>>2] = $12;
   ;HEAP32[$$byval_copy>>2]=HEAP32[72976>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[72976+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[72976+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[72976+12>>2]|0;
   $13 = (_int_findData($$byval_copy)|0);
   HEAP32[8080] = $13;
   $14 = HEAP32[8080]|0;
   $15 = ($14|0)<(0);
   if ($15) {
    $3 = 13;
    break;
   } else {
    $16 = HEAP32[8080]|0;
    _int_getElement($5,$16);
    ;HEAP32[72976>>2]=HEAP32[$5>>2]|0;HEAP32[72976+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[72976+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[72976+12>>2]=HEAP32[$5+12>>2]|0;
    $17 = HEAP32[(72984)>>2]|0;
    $3 = $17;
    break;
   }
  }
 } while(0);
 $18 = ((($0)) + 84|0);
 HEAP32[$18>>2] = 6;
 _memset(($0|0),0,3216)|0;
 $19 = $3;
 STACKTOP = sp;return ($19|0);
}
function _get_dbl_array($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $$byval_copy = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $5 = sp;
 $2 = $1;
 $3 = 0.0;
 $4 = 0;
 _memset(((31556)|0),0,256)|0;
 $6 = ((($0)) + 720|0);
 (_strcpy((31556),$6)|0);
 $7 = ((($0)) + 408|0);
 $8 = HEAP32[$7>>2]|0;
 $4 = $8;
 $9 = $4;
 $10 = ($9|0)<(0);
 if ($10) {
  (_printf(16303,$vararg_buffer)|0);
  $18 = ((($0)) + 84|0);
  HEAP32[$18>>2] = 7;
  _memset(($0|0),0,3216)|0;
  $19 = $3;
  STACKTOP = sp;return (+$19);
 }
 $11 = $4;
 HEAP32[7882] = $11;
 $12 = $2;
 HEAP32[(31532)>>2] = $12;
 ;HEAP32[$$byval_copy>>2]=HEAP32[31528>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[31528+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[31528+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[31528+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[31528+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[31528+20>>2]|0;
 $13 = (_dbl_findData($$byval_copy)|0);
 HEAP32[8085] = $13;
 $14 = HEAP32[8085]|0;
 $15 = ($14|0)<(0);
 if ($15) {
  $3 = 13.0;
  $18 = ((($0)) + 84|0);
  HEAP32[$18>>2] = 7;
  _memset(($0|0),0,3216)|0;
  $19 = $3;
  STACKTOP = sp;return (+$19);
 } else {
  $16 = HEAP32[8085]|0;
  _dbl_getElement($5,$16);
  ;HEAP32[31528>>2]=HEAP32[$5>>2]|0;HEAP32[31528+4>>2]=HEAP32[$5+4>>2]|0;HEAP32[31528+8>>2]=HEAP32[$5+8>>2]|0;HEAP32[31528+12>>2]=HEAP32[$5+12>>2]|0;HEAP32[31528+16>>2]=HEAP32[$5+16>>2]|0;HEAP32[31528+20>>2]=HEAP32[$5+20>>2]|0;
  $17 = +HEAPF64[(31536)>>3];
  $3 = $17;
  $18 = ((($0)) + 84|0);
  HEAP32[$18>>2] = 7;
  _memset(($0|0),0,3216)|0;
  $19 = $3;
  STACKTOP = sp;return (+$19);
 }
 return +(0.0);
}
function _get_str_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 656|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(656|0);
 $$byval_copy = sp + 336|0;
 $vararg_buffer = sp;
 $7 = sp + 8|0;
 $3 = $1;
 $4 = $2;
 $5 = 0;
 $6 = 0;
 _memset(((72140)|0),0,256)|0;
 $8 = ((($0)) + 720|0);
 (_strcpy((72140),$8)|0);
 $9 = ((($0)) + 412|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $6;
 $12 = ($11|0)<(0);
 do {
  if ($12) {
   (_printf(16303,$vararg_buffer)|0);
  } else {
   $13 = $6;
   HEAP32[17956] = $13;
   $14 = $3;
   HEAP32[(71828)>>2] = $14;
   _memcpy(($$byval_copy|0),(71824|0),312)|0;
   $15 = (_string_findData($$byval_copy)|0);
   HEAP32[8074] = $15;
   $16 = HEAP32[8074]|0;
   $17 = ($16|0)<(0);
   if ($17) {
    $5 = 0;
    break;
   } else {
    $18 = HEAP32[8074]|0;
    _string_getElement($7,$18);
    _memcpy((71824|0),($7|0),312)|0;
    $19 = $4;
    (_strcpy($19,(71832))|0);
    $5 = 1;
    break;
   }
  }
 } while(0);
 $20 = ((($0)) + 84|0);
 HEAP32[$20>>2] = 8;
 _memset(($0|0),0,3216)|0;
 $21 = $5;
 STACKTOP = sp;return ($21|0);
}
function _keyTulisRinci() {
 var $$byval_copy = 0, $$byval_copy71 = 0, $$byval_copy72 = 0, $$byval_copy73 = 0, $$byval_copy74 = 0, $$byval_copy75 = 0, $$byval_copy76 = 0, $$byval_copy77 = 0, $$byval_copy78 = 0, $$byval_copy79 = 0, $$byval_copy80 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0.0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0.0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0;
 var $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0;
 var $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0;
 var $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0;
 var $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0;
 var $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0;
 var $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0;
 var $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0.0, $79 = 0, $8 = 0, $80 = 0, $81 = 0.0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer34 = 0;
 var $vararg_buffer37 = 0, $vararg_buffer40 = 0, $vararg_buffer43 = 0, $vararg_buffer45 = 0, $vararg_buffer48 = 0, $vararg_buffer5 = 0, $vararg_buffer51 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer64 = 0, $vararg_buffer67 = 0, $vararg_buffer69 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr4 = 0, $vararg_ptr54 = 0, dest = 0, label = 0, sp = 0;
 var stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 66432|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(66432|0);
 $$byval_copy80 = sp + 61320|0;
 $$byval_copy79 = sp + 58104|0;
 $$byval_copy78 = sp + 54888|0;
 $$byval_copy77 = sp + 51672|0;
 $$byval_copy76 = sp + 48456|0;
 $$byval_copy75 = sp + 45240|0;
 $$byval_copy74 = sp + 42024|0;
 $$byval_copy73 = sp + 38808|0;
 $$byval_copy72 = sp + 35592|0;
 $$byval_copy71 = sp + 32376|0;
 $$byval_copy = sp + 29160|0;
 $vararg_buffer69 = sp + 29152|0;
 $vararg_buffer67 = sp + 29144|0;
 $vararg_buffer64 = sp + 29136|0;
 $vararg_buffer61 = sp + 29128|0;
 $vararg_buffer58 = sp + 29120|0;
 $vararg_buffer55 = sp + 29112|0;
 $vararg_buffer51 = sp + 29104|0;
 $vararg_buffer48 = sp + 29096|0;
 $vararg_buffer45 = sp + 29088|0;
 $vararg_buffer43 = sp + 29080|0;
 $vararg_buffer40 = sp + 29072|0;
 $vararg_buffer37 = sp + 29064|0;
 $vararg_buffer34 = sp + 29056|0;
 $vararg_buffer32 = sp + 29048|0;
 $vararg_buffer29 = sp + 29040|0;
 $vararg_buffer27 = sp + 29032|0;
 $vararg_buffer25 = sp + 29024|0;
 $vararg_buffer22 = sp + 29016|0;
 $vararg_buffer20 = sp + 29008|0;
 $vararg_buffer18 = sp + 29000|0;
 $vararg_buffer16 = sp + 28992|0;
 $vararg_buffer14 = sp + 28984|0;
 $vararg_buffer11 = sp + 28976|0;
 $vararg_buffer7 = sp + 28968|0;
 $vararg_buffer5 = sp + 28960|0;
 $vararg_buffer1 = sp + 28952|0;
 $vararg_buffer = sp + 28944|0;
 $0 = sp + 66368|0;
 $2 = sp + 66064|0;
 $3 = sp + 65764|0;
 $4 = sp + 25728|0;
 $5 = sp + 22512|0;
 $6 = sp + 19296|0;
 $8 = sp + 64536|0;
 $9 = sp + 65464|0;
 $10 = sp + 16080|0;
 $11 = sp + 12864|0;
 $12 = sp + 9648|0;
 $13 = sp + 6432|0;
 $14 = sp + 3216|0;
 $15 = sp;
 $1 = 0;
 $7 = 0;
 _memset(($6|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($2|0),0,300)|0;
 _memset(($3|0),0,300)|0;
 dest=$0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($8|0),0,920)|0;
 _memset(($9|0),0,300)|0;
 while(1) {
  (_getlex()|0);
  $16 = HEAP32[7954]|0;
  L3: do {
   switch ($16|0) {
   case 225:  {
    $17 = (_strlen((31976))|0);
    $18 = ($17>>>0)>(0);
    if ($18) {
     HEAP32[$vararg_buffer>>2] = (31976);
     (_printf(19231,$vararg_buffer)|0);
    }
    break;
   }
   case 228:  {
    $19 = (_strlen((31976))|0);
    $20 = ($19>>>0)>(0);
    if ($20) {
     $21 = ((($4)) + 420|0);
     (_strcpy($21,(31976))|0);
     $22 = ((($4)) + 720|0);
     _getArrayName((31976),$22);
     $23 = ((($4)) + 870|0);
     _getArrayIdx((31976),$23);
     $24 = ((($4)) + 870|0);
     $25 = HEAP8[$24>>0]|0;
     $26 = $25 << 24 >> 24;
     $27 = (_isdigit($26)|0);
     $28 = ($27|0)!=(0);
     do {
      if ($28) {
       $29 = ((($4)) + 870|0);
       $30 = (_atol($29)|0);
       $7 = $30;
      } else {
       $31 = (_strlen(128380)|0);
       $32 = ($31>>>0)>(0);
       if ($32) {
        $33 = ((($4)) + 870|0);
        HEAP32[$vararg_buffer1>>2] = 128380;
        $vararg_ptr4 = ((($vararg_buffer1)) + 4|0);
        HEAP32[$vararg_ptr4>>2] = $33;
        (_snprintf($9,300,15808,$vararg_buffer1)|0);
        $34 = HEAP32[8088]|0;
        _memcpy(($$byval_copy|0),($6|0),3216)|0;
        _ValLabel($10,$9,$34,$$byval_copy,232);
        _memcpy(($6|0),($10|0),3216)|0;
       } else {
        $35 = ((($4)) + 870|0);
        $36 = HEAP32[8088]|0;
        _memcpy(($$byval_copy71|0),($6|0),3216)|0;
        _ValLabel($11,$35,$36,$$byval_copy71,232);
        _memcpy(($6|0),($11|0),3216)|0;
       }
       $37 = ((($6)) + 84|0);
       $38 = HEAP32[$37>>2]|0;
       $39 = ($38|0)==(0);
       if ($39) {
        $40 = ((($6)) + 88|0);
        $41 = HEAP32[$40>>2]|0;
        $7 = $41;
        break;
       } else {
        _Error(16065,$vararg_buffer5);
        break;
       }
      }
     } while(0);
     $42 = (_strlen(128380)|0);
     $43 = ($42>>>0)>(0);
     if ($43) {
      _memset(($9|0),0,300)|0;
      $44 = ((($4)) + 720|0);
      HEAP32[$vararg_buffer7>>2] = 128380;
      $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
      HEAP32[$vararg_ptr10>>2] = $44;
      (_snprintf($9,300,15808,$vararg_buffer7)|0);
      $45 = HEAP32[8088]|0;
      _memcpy(($$byval_copy72|0),($4|0),3216)|0;
      _ValLabel($12,$9,$45,$$byval_copy72,232);
      _memcpy(($5|0),($12|0),3216)|0;
     } else {
      $46 = ((($4)) + 720|0);
      $47 = HEAP32[8088]|0;
      _memcpy(($$byval_copy73|0),($4|0),3216)|0;
      _ValLabel($13,$46,$47,$$byval_copy73,232);
      _memcpy(($5|0),($13|0),3216)|0;
     }
     $48 = ((($5)) + 870|0);
     $49 = $7;
     HEAP32[$vararg_buffer11>>2] = $49;
     (_snprintf($48,150,16087,$vararg_buffer11)|0);
     $50 = ((($5)) + 1020|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)<=(0);
     do {
      if ($52) {
       (_printf(16091,$vararg_buffer14)|0);
      } else {
       $53 = $7;
       $54 = ($53|0)<(0);
       if (!($54)) {
        $55 = $7;
        $56 = ((($5)) + 1020|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = (($57) - 1)|0;
        $59 = ($55|0)>($58|0);
        if (!($59)) {
         break;
        }
       }
       _Error(16096,$vararg_buffer16);
      }
     } while(0);
     $60 = ((($5)) + 84|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(6);
     if ($62) {
      $63 = ((($5)) + 404|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(0);
      if ($65) {
       _Error(16134,$vararg_buffer18);
      }
      $66 = $7;
      _memcpy(($$byval_copy74|0),($5|0),3216)|0;
      $67 = (_get_int_array($$byval_copy74,$66)|0);
      $68 = ($67|0)==(13);
      if ($68) {
       (_printf(16172,$vararg_buffer20)|0);
       break L3;
      } else {
       $69 = $7;
       _memcpy(($$byval_copy75|0),($5|0),3216)|0;
       $70 = (_get_int_array($$byval_copy75,$69)|0);
       HEAP32[$vararg_buffer22>>2] = $70;
       (_printf(16176,$vararg_buffer22)|0);
       break L3;
      }
     }
     $71 = ((($5)) + 84|0);
     $72 = HEAP32[$71>>2]|0;
     $73 = ($72|0)==(7);
     if ($73) {
      $74 = ((($5)) + 408|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ($75|0)==(0);
      if ($76) {
       _Error(16179,$vararg_buffer25);
      }
      $77 = $7;
      _memcpy(($$byval_copy76|0),($5|0),3216)|0;
      $78 = (+_get_dbl_array($$byval_copy76,$77));
      $79 = $78 == 13.0;
      if ($79) {
       (_printf(16172,$vararg_buffer27)|0);
       break L3;
      } else {
       $80 = $7;
       _memcpy(($$byval_copy77|0),($5|0),3216)|0;
       $81 = (+_get_dbl_array($$byval_copy77,$80));
       HEAPF64[$vararg_buffer29>>3] = $81;
       (_printf(16337,$vararg_buffer29)|0);
       break L3;
      }
     }
     $82 = ((($5)) + 84|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = ($83|0)==(8);
     if (!($84)) {
      $91 = ((($5)) + 84|0);
      $92 = HEAP32[$91>>2]|0;
      $93 = ($92|0)==(10);
      if (!($93)) {
       (_printf(1358125,$vararg_buffer43)|0);
       break L3;
      }
      $94 = ((($5)) + 1024|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ($95|0)!=(0|0);
      if (!($96)) {
       break L3;
      }
      $97 = $7;
      $98 = ((($5)) + 1024|0);
      $99 = HEAP32[$98>>2]|0;
      $100 = (($99) + ($97<<2)|0);
      $101 = HEAP32[$100>>2]|0;
      HEAP32[$vararg_buffer40>>2] = $101;
      (_printf(19231,$vararg_buffer40)|0);
      break L3;
     }
     $85 = ((($5)) + 412|0);
     $86 = HEAP32[$85>>2]|0;
     $87 = ($86|0)==(0);
     if ($87) {
      _Error(16224,$vararg_buffer32);
     }
     $88 = $7;
     _memcpy(($$byval_copy78|0),($5|0),3216)|0;
     $89 = (_get_str_array($$byval_copy78,$88,$3)|0);
     $90 = ($89|0)!=(0);
     if ($90) {
      HEAP32[$vararg_buffer37>>2] = $3;
      (_printf(19231,$vararg_buffer37)|0);
      break L3;
     } else {
      HEAP32[$vararg_buffer34>>2] = $3;
      (_printf(16263,$vararg_buffer34)|0);
      break L3;
     }
    }
    break;
   }
   case 223:  {
    $102 = HEAP32[(31976)>>2]|0;
    HEAP32[$vararg_buffer45>>2] = $102;
    (_printf(16087,$vararg_buffer45)|0);
    break;
   }
   case 226:  {
    $103 = +HEAPF64[(31976)>>3];
    HEAPF64[$vararg_buffer48>>3] = $103;
    (_printf(16337,$vararg_buffer48)|0);
    break;
   }
   case 229:  {
    _checkInstanceValidation((31976));
    label = 47;
    break;
   }
   case 224:  {
    label = 47;
    break;
   }
   default: {
    _Error(16343,$vararg_buffer69);
   }
   }
  } while(0);
  L65: do {
   if ((label|0) == 47) {
    label = 0;
    $104 = (_strlen(128380)|0);
    $105 = ($104>>>0)>(0);
    if ($105) {
     HEAP32[$vararg_buffer51>>2] = 128380;
     $vararg_ptr54 = ((($vararg_buffer51)) + 4|0);
     HEAP32[$vararg_ptr54>>2] = (31976);
     (_snprintf($9,300,15808,$vararg_buffer51)|0);
     $106 = HEAP32[8091]|0;
     _memcpy(($$byval_copy79|0),($6|0),3216)|0;
     _ValLabel($14,$9,$106,$$byval_copy79,232);
     _memcpy(($4|0),($14|0),3216)|0;
    } else {
     $107 = HEAP32[8088]|0;
     _memcpy(($$byval_copy80|0),($6|0),3216)|0;
     _ValLabel($15,(31976),$107,$$byval_copy80,232);
     _memcpy(($4|0),($15|0),3216)|0;
    }
    $108 = ((($4)) + 104|0);
    $109 = (_strlen($108)|0);
    $110 = ($109>>>0)>(0);
    if ($110) {
     $111 = ((($4)) + 84|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==(3);
     if ($113) {
      $1 = 0;
      while(1) {
       $114 = $1;
       $115 = ((($4)) + 104|0);
       $116 = (_strlen($115)|0);
       $117 = ($114|0)<($116|0);
       if (!($117)) {
        break L65;
       }
       $118 = $1;
       $119 = ((($4)) + 104|0);
       $120 = (($119) + ($118)|0);
       $121 = HEAP8[$120>>0]|0;
       $122 = $121 << 24 >> 24;
       HEAP32[$vararg_buffer55>>2] = $122;
       (_printf(16270,$vararg_buffer55)|0);
       $123 = $1;
       $124 = (($123) + 1)|0;
       $1 = $124;
      }
     }
    }
    $125 = ((($4)) + 84|0);
    $126 = HEAP32[$125>>2]|0;
    $127 = ($126|0)==(1);
    if ($127) {
     $128 = ((($4)) + 96|0);
     $129 = +HEAPF64[$128>>3];
     HEAPF64[$vararg_buffer58>>3] = $129;
     (_printf(16337,$vararg_buffer58)|0);
     break;
    }
    $130 = ((($4)) + 84|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)==(0);
    if ($132) {
     $133 = ((($4)) + 88|0);
     $134 = HEAP32[$133>>2]|0;
     HEAP32[$vararg_buffer61>>2] = $134;
     (_printf(16087,$vararg_buffer61)|0);
     break;
    }
    $135 = ((($4)) + 84|0);
    $136 = HEAP32[$135>>2]|0;
    $137 = ($136|0)==(10);
    if (!($137)) {
     $158 = ((($4)) + 84|0);
     $159 = HEAP32[$158>>2]|0;
     $160 = ($159|0)<(0);
     if (!($160)) {
      break;
     }
     (_printf(16091,$vararg_buffer67)|0);
     break;
    }
    $138 = ((($4)) + 1024|0);
    $139 = HEAP32[$138>>2]|0;
    $140 = ($139|0)!=(0|0);
    if ($140) {
     $1 = 0;
     while(1) {
      $141 = $1;
      $142 = ((($4)) + 1020|0);
      $143 = HEAP32[$142>>2]|0;
      $144 = ($141|0)<($143|0);
      if (!($144)) {
       break L65;
      }
      $145 = $1;
      $146 = ((($4)) + 1024|0);
      $147 = HEAP32[$146>>2]|0;
      $148 = (($147) + ($145<<2)|0);
      $149 = HEAP32[$148>>2]|0;
      $150 = ($149|0)!=(0|0);
      if ($150) {
       _memset(($2|0),0,300)|0;
       $151 = $1;
       $152 = ((($4)) + 1024|0);
       $153 = HEAP32[$152>>2]|0;
       $154 = (($153) + ($151<<2)|0);
       $155 = HEAP32[$154>>2]|0;
       (_strcpy($2,$155)|0);
       HEAP32[$vararg_buffer64>>2] = $2;
       (_printf(16273,$vararg_buffer64)|0);
      }
      $156 = $1;
      $157 = (($156) + 1)|0;
      $1 = $157;
     }
    }
   }
  } while(0);
  (_getlex()|0);
  $161 = HEAP32[7954]|0;
  $162 = ($161|0)==(227);
  if (!($162)) {
   break;
  }
  $163 = HEAP8[(31976)>>0]|0;
  $164 = $163 << 24 >> 24;
  $165 = ($164|0)==(44);
  if (!($165)) {
   break;
  }
 }
 $166 = HEAP32[64]|0;
 (_fflush($166)|0);
 _ungetlex();
 $167 = ((($8)) + 8|0);
 $168 = HEAP32[$167>>2]|0;
 $169 = ($168|0)!=(0|0);
 if ($169) {
  $170 = ((($8)) + 8|0);
  $171 = HEAP32[$170>>2]|0;
  _free($171);
 }
 $172 = ((($8)) + 916|0);
 $173 = HEAP32[$172>>2]|0;
 $174 = ($173|0)!=(0|0);
 if ($174) {
  $175 = ((($8)) + 916|0);
  $176 = HEAP32[$175>>2]|0;
  _free($176);
 }
 $177 = ((($4)) + 3196|0);
 $178 = HEAP32[$177>>2]|0;
 $179 = ($178|0)!=(0|0);
 if ($179) {
  $180 = ((($4)) + 3196|0);
  $181 = HEAP32[$180>>2]|0;
  _free($181);
 }
 $182 = ((($4)) + 3200|0);
 $183 = HEAP32[$182>>2]|0;
 $184 = ($183|0)!=(0|0);
 if ($184) {
  $185 = ((($4)) + 3200|0);
  $186 = HEAP32[$185>>2]|0;
  _free($186);
 }
 $187 = ((($4)) + 1796|0);
 $188 = HEAP32[$187>>2]|0;
 $189 = ($188|0)!=(0|0);
 if ($189) {
  $190 = ((($4)) + 1796|0);
  $191 = HEAP32[$190>>2]|0;
  _free($191);
 }
 $192 = ((($4)) + 1024|0);
 $193 = HEAP32[$192>>2]|0;
 $194 = ($193|0)!=(0|0);
 if ($194) {
  $195 = ((($4)) + 1024|0);
  $196 = HEAP32[$195>>2]|0;
  _free($196);
 }
 $197 = ((($4)) + 4|0);
 $198 = HEAP32[$197>>2]|0;
 $199 = ($198|0)!=(0|0);
 if ($199) {
  $200 = ((($4)) + 4|0);
  $201 = HEAP32[$200>>2]|0;
  _free($201);
 }
 $202 = ((($4)) + 8|0);
 $203 = HEAP32[$202>>2]|0;
 $204 = ($203|0)!=(0|0);
 if ($204) {
  $205 = ((($4)) + 8|0);
  $206 = HEAP32[$205>>2]|0;
  _free($206);
 }
 $207 = HEAP32[$4>>2]|0;
 $208 = ($207|0)!=(0|0);
 if ($208) {
  $209 = HEAP32[$4>>2]|0;
  _free($209);
 }
 $210 = ((($6)) + 3196|0);
 $211 = HEAP32[$210>>2]|0;
 $212 = ($211|0)!=(0|0);
 if ($212) {
  $213 = ((($6)) + 3196|0);
  $214 = HEAP32[$213>>2]|0;
  _free($214);
 }
 $215 = ((($6)) + 3200|0);
 $216 = HEAP32[$215>>2]|0;
 $217 = ($216|0)!=(0|0);
 if ($217) {
  $218 = ((($6)) + 3200|0);
  $219 = HEAP32[$218>>2]|0;
  _free($219);
 }
 $220 = ((($6)) + 1796|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = ($221|0)!=(0|0);
 if ($222) {
  $223 = ((($6)) + 1796|0);
  $224 = HEAP32[$223>>2]|0;
  _free($224);
 }
 $225 = ((($6)) + 1024|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = ($226|0)!=(0|0);
 if ($227) {
  $228 = ((($6)) + 1024|0);
  $229 = HEAP32[$228>>2]|0;
  _free($229);
 }
 $230 = ((($6)) + 4|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = ($231|0)!=(0|0);
 if ($232) {
  $233 = ((($6)) + 4|0);
  $234 = HEAP32[$233>>2]|0;
  _free($234);
 }
 $235 = ((($6)) + 8|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = ($236|0)!=(0|0);
 if ($237) {
  $238 = ((($6)) + 8|0);
  $239 = HEAP32[$238>>2]|0;
  _free($239);
 }
 $240 = HEAP32[$6>>2]|0;
 $241 = ($240|0)!=(0|0);
 if ($241) {
  $242 = HEAP32[$6>>2]|0;
  _free($242);
 }
 $243 = ((($5)) + 3196|0);
 $244 = HEAP32[$243>>2]|0;
 $245 = ($244|0)!=(0|0);
 if ($245) {
  $246 = ((($5)) + 3196|0);
  $247 = HEAP32[$246>>2]|0;
  _free($247);
 }
 $248 = ((($5)) + 3200|0);
 $249 = HEAP32[$248>>2]|0;
 $250 = ($249|0)!=(0|0);
 if ($250) {
  $251 = ((($5)) + 3200|0);
  $252 = HEAP32[$251>>2]|0;
  _free($252);
 }
 $253 = ((($5)) + 1796|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ($254|0)!=(0|0);
 if ($255) {
  $256 = ((($5)) + 1796|0);
  $257 = HEAP32[$256>>2]|0;
  _free($257);
 }
 $258 = ((($5)) + 1024|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = ($259|0)!=(0|0);
 if ($260) {
  $261 = ((($5)) + 1024|0);
  $262 = HEAP32[$261>>2]|0;
  _free($262);
 }
 $263 = ((($5)) + 4|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = ($264|0)!=(0|0);
 if ($265) {
  $266 = ((($5)) + 4|0);
  $267 = HEAP32[$266>>2]|0;
  _free($267);
 }
 $268 = ((($5)) + 8|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = ($269|0)!=(0|0);
 if ($270) {
  $271 = ((($5)) + 8|0);
  $272 = HEAP32[$271>>2]|0;
  _free($272);
 }
 $273 = HEAP32[$5>>2]|0;
 $274 = ($273|0)!=(0|0);
 if (!($274)) {
  STACKTOP = sp;return;
 }
 $275 = HEAP32[$5>>2]|0;
 _free($275);
 STACKTOP = sp;return;
}
function _keyTulisLog() {
 var $$byval_copy = 0, $$byval_copy43 = 0, $$byval_copy44 = 0, $$byval_copy45 = 0, $$byval_copy46 = 0, $$byval_copy47 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0.0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer15 = 0;
 var $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer29 = 0, $vararg_buffer32 = 0, $vararg_buffer35 = 0, $vararg_buffer38 = 0, $vararg_buffer41 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr28 = 0, $vararg_ptr5 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48544|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48544|0);
 $$byval_copy47 = sp + 41936|0;
 $$byval_copy46 = sp + 38720|0;
 $$byval_copy45 = sp + 35504|0;
 $$byval_copy44 = sp + 32288|0;
 $$byval_copy43 = sp + 29072|0;
 $$byval_copy = sp + 25856|0;
 $vararg_buffer41 = sp + 25848|0;
 $vararg_buffer38 = sp + 25840|0;
 $vararg_buffer35 = sp + 25832|0;
 $vararg_buffer32 = sp + 25824|0;
 $vararg_buffer29 = sp + 25816|0;
 $vararg_buffer25 = sp + 25808|0;
 $vararg_buffer23 = sp + 25800|0;
 $vararg_buffer20 = sp + 25792|0;
 $vararg_buffer18 = sp + 25784|0;
 $vararg_buffer15 = sp + 25776|0;
 $vararg_buffer13 = sp + 25768|0;
 $vararg_buffer11 = sp + 25760|0;
 $vararg_buffer8 = sp + 25752|0;
 $vararg_buffer6 = sp + 25744|0;
 $vararg_buffer2 = sp + 25736|0;
 $vararg_buffer = sp + 25728|0;
 $0 = sp + 48480|0;
 $1 = sp + 47880|0;
 $2 = sp + 47280|0;
 $4 = sp + 46980|0;
 $5 = sp + 46680|0;
 $6 = sp + 22512|0;
 $7 = sp + 19296|0;
 $8 = sp + 16080|0;
 $9 = sp + 12864|0;
 $11 = sp + 46380|0;
 $12 = sp + 45152|0;
 $13 = sp + 46080|0;
 $14 = sp + 9648|0;
 $15 = sp + 6432|0;
 $16 = sp + 3216|0;
 $17 = sp;
 $3 = 0;
 $10 = 0;
 _memset(($8|0),0,3216)|0;
 _memset(($6|0),0,3216)|0;
 _memset(($7|0),0,3216)|0;
 _memset(($9|0),0,3216)|0;
 _memset(($11|0),0,300)|0;
 _memset(($4|0),0,300)|0;
 _memset(($5|0),0,300)|0;
 dest=$0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($2|0),0,600)|0;
 _memset(($1|0),0,600)|0;
 _memset(($12|0),0,920)|0;
 _memset(($13|0),0,300)|0;
 while(1) {
  (_getlex()|0);
  $18 = HEAP32[7954]|0;
  L3: do {
   switch ($18|0) {
   case 225:  {
    $19 = (_strlen((31976))|0);
    $20 = ($19>>>0)>(0);
    if ($20) {
     (_strcat($1,(31976))|0);
     break L3;
    } else {
     (_strcat($1,1358125)|0);
     break L3;
    }
    break;
   }
   case 228:  {
    $21 = (_strlen((31976))|0);
    $22 = ($21>>>0)>(0);
    do {
     if ($22) {
      $23 = ((($6)) + 420|0);
      (_strcpy($23,(31976))|0);
      $24 = ((($6)) + 720|0);
      _getArrayName((31976),$24);
      $25 = ((($6)) + 870|0);
      _getArrayIdx((31976),$25);
      $26 = (_strlen(128380)|0);
      $27 = ($26>>>0)>(0);
      if ($27) {
       $28 = ((($6)) + 720|0);
       HEAP32[$vararg_buffer>>2] = 128380;
       $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr1>>2] = $28;
       (_snprintf($13,300,15808,$vararg_buffer)|0);
       $29 = ((($6)) + 720|0);
       _memset(($29|0),0,150)|0;
       $30 = ((($6)) + 720|0);
       (_strcpy($30,$13)|0);
       $31 = ((($6)) + 870|0);
       $32 = HEAP8[$31>>0]|0;
       $33 = $32 << 24 >> 24;
       $34 = (_isdigit($33)|0);
       $35 = ($34|0)!=(0);
       if (!($35)) {
        _memset(($13|0),0,300)|0;
        $36 = ((($6)) + 870|0);
        HEAP32[$vararg_buffer2>>2] = 128380;
        $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
        HEAP32[$vararg_ptr5>>2] = $36;
        (_snprintf($13,300,15808,$vararg_buffer2)|0);
        $37 = ((($6)) + 870|0);
        _memset(($37|0),0,150)|0;
        $38 = ((($6)) + 870|0);
        (_strcpy($38,$13)|0);
       }
      }
      $39 = ((($6)) + 870|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = $40 << 24 >> 24;
      $42 = (_isdigit($41)|0);
      $43 = ($42|0)!=(0);
      $44 = ((($6)) + 870|0);
      do {
       if ($43) {
        $45 = (_atoi($44)|0);
        $10 = $45;
       } else {
        $46 = HEAP32[8088]|0;
        _memcpy(($$byval_copy|0),($8|0),3216)|0;
        _ValLabel($14,$44,$46,$$byval_copy,232);
        _memcpy(($8|0),($14|0),3216)|0;
        $47 = ((($8)) + 84|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($48|0)==(0);
        if ($49) {
         $50 = ((($8)) + 88|0);
         $51 = HEAP32[$50>>2]|0;
         $10 = $51;
         break;
        } else {
         _Error(16065,$vararg_buffer6);
         break;
        }
       }
      } while(0);
      $52 = ((($6)) + 720|0);
      $53 = HEAP32[8088]|0;
      _memcpy(($$byval_copy43|0),($6|0),3216)|0;
      _ValLabel($15,$52,$53,$$byval_copy43,232);
      _memcpy(($6|0),($15|0),3216)|0;
      $54 = ((($6)) + 870|0);
      $55 = $10;
      HEAP32[$vararg_buffer8>>2] = $55;
      (_snprintf($54,150,16176,$vararg_buffer8)|0);
      $56 = $10;
      $57 = ($56|0)<(0);
      if ($57) {
       label = 17;
      } else {
       $58 = $10;
       $59 = ((($6)) + 1020|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = (($60) - 1)|0;
       $62 = ($58|0)>($61|0);
       if ($62) {
        label = 17;
       }
      }
      if ((label|0) == 17) {
       label = 0;
       _Error(16096,$vararg_buffer11);
      }
      $63 = ((($6)) + 84|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = ($64|0)==(6);
      if ($65) {
       $66 = ((($6)) + 404|0);
       $67 = HEAP32[$66>>2]|0;
       $68 = ($67|0)!=(0);
       if ($68) {
        $69 = ((($6)) + 404|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = ($70|0)==(0);
        if ($71) {
         _Error(16375,$vararg_buffer13);
        }
        $72 = $10;
        _memcpy(($$byval_copy44|0),($6|0),3216)|0;
        $73 = (_get_int_array($$byval_copy44,$72)|0);
        HEAP32[$vararg_buffer15>>2] = $73;
        (_snprintf($2,600,16176,$vararg_buffer15)|0);
        break;
       }
      }
      $74 = ((($6)) + 84|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ($75|0)==(7);
      if ($76) {
       $77 = ((($6)) + 408|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ($78|0)!=(0);
       if ($79) {
        $80 = ((($6)) + 408|0);
        $81 = HEAP32[$80>>2]|0;
        $82 = ($81|0)==(0);
        if ($82) {
         _Error(16375,$vararg_buffer18);
        }
        $83 = $10;
        _memcpy(($$byval_copy45|0),($6|0),3216)|0;
        $84 = (+_get_dbl_array($$byval_copy45,$83));
        HEAPF64[$vararg_buffer20>>3] = $84;
        (_snprintf($2,600,16221,$vararg_buffer20)|0);
        break;
       }
      }
      $85 = ((($6)) + 84|0);
      $86 = HEAP32[$85>>2]|0;
      $87 = ($86|0)==(8);
      if ($87) {
       $88 = ((($6)) + 412|0);
       $89 = HEAP32[$88>>2]|0;
       $90 = ($89|0)!=(0);
       if ($90) {
        $91 = ((($6)) + 412|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = ($92|0)==(0);
        if ($93) {
         _Error(16375,$vararg_buffer23);
        }
        $94 = $10;
        _memcpy(($$byval_copy46|0),($6|0),3216)|0;
        (_get_str_array($$byval_copy46,$94,$2)|0);
        break;
       }
      }
      (_strcpy($2,16408)|0);
     }
    } while(0);
    (_strcat($1,$2)|0);
    break;
   }
   case 229:  {
    _checkInstanceValidation((31976));
    label = 36;
    break;
   }
   case 223: case 224:  {
    label = 36;
    break;
   }
   default: {
    _Error(16412,$vararg_buffer41);
   }
   }
  } while(0);
  if ((label|0) == 36) {
   label = 0;
   $95 = (_strlen(128380)|0);
   $96 = ($95>>>0)>(0);
   if ($96) {
    HEAP32[$vararg_buffer25>>2] = 128380;
    $vararg_ptr28 = ((($vararg_buffer25)) + 4|0);
    HEAP32[$vararg_ptr28>>2] = (31976);
    (_snprintf($13,300,15808,$vararg_buffer25)|0);
    $97 = HEAP32[8091]|0;
    _memcpy(($$byval_copy47|0),($8|0),3216)|0;
    _ValLabel($16,$13,$97,$$byval_copy47,232);
    _memcpy(($6|0),($16|0),3216)|0;
   } else {
    _ungetlex();
    _expression($17);
    _memcpy(($6|0),($17|0),3216)|0;
   }
   $98 = ((($6)) + 104|0);
   $99 = (_strlen($98)|0);
   $100 = ($99>>>0)>(0);
   if ($100) {
    $101 = ((($6)) + 84|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = ($102|0)==(3);
    if ($103) {
     $104 = ((($6)) + 3204|0);
     $105 = HEAP32[$104>>2]|0;
     $106 = ($105|0)!=(1);
     if ($106) {
      $107 = ((($6)) + 104|0);
      (_strcpy($2,$107)|0);
     } else {
      label = 43;
     }
    } else {
     label = 43;
    }
   } else {
    label = 43;
   }
   L61: do {
    if ((label|0) == 43) {
     label = 0;
     $108 = ((($6)) + 84|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==(1);
     if ($110) {
      $111 = ((($6)) + 96|0);
      $112 = +HEAPF64[$111>>3];
      HEAPF64[$vararg_buffer29>>3] = $112;
      (_snprintf($2,600,16221,$vararg_buffer29)|0);
      break;
     }
     $113 = ((($6)) + 84|0);
     $114 = HEAP32[$113>>2]|0;
     $115 = ($114|0)==(0);
     if ($115) {
      $116 = ((($6)) + 88|0);
      $117 = HEAP32[$116>>2]|0;
      HEAP32[$vararg_buffer32>>2] = $117;
      (_sprintf($2,16087,$vararg_buffer32)|0);
      $118 = ((($6)) + 88|0);
      $119 = HEAP32[$118>>2]|0;
      HEAP32[$vararg_buffer35>>2] = $119;
      (_snprintf($2,600,16087,$vararg_buffer35)|0);
      break;
     }
     $120 = ((($6)) + 84|0);
     $121 = HEAP32[$120>>2]|0;
     $122 = ($121|0)==(10);
     if (!($122)) {
      $143 = ((($6)) + 88|0);
      $144 = HEAP32[$143>>2]|0;
      HEAP32[$vararg_buffer38>>2] = $144;
      (_snprintf($2,600,16087,$vararg_buffer38)|0);
      break;
     }
     $123 = ((($6)) + 1024|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ($124|0)!=(0|0);
     if ($125) {
      $3 = 0;
      while(1) {
       $126 = $3;
       $127 = ((($6)) + 1020|0);
       $128 = HEAP32[$127>>2]|0;
       $129 = ($126|0)<($128|0);
       if (!($129)) {
        break L61;
       }
       $130 = $3;
       $131 = ((($6)) + 1024|0);
       $132 = HEAP32[$131>>2]|0;
       $133 = (($132) + ($130<<2)|0);
       $134 = HEAP32[$133>>2]|0;
       $135 = ($134|0)!=(0|0);
       if ($135) {
        _memset(($4|0),0,300)|0;
        $136 = $3;
        $137 = ((($6)) + 1024|0);
        $138 = HEAP32[$137>>2]|0;
        $139 = (($138) + ($136<<2)|0);
        $140 = HEAP32[$139>>2]|0;
        (_strcpy($4,$140)|0);
        (_strcpy($2,$4)|0);
       }
       $141 = $3;
       $142 = (($141) + 1)|0;
       $3 = $142;
      }
     }
    }
   } while(0);
   (_strcat($1,$2)|0);
  }
  (_getlex()|0);
  $145 = HEAP32[7954]|0;
  $146 = ($145|0)==(227);
  if (!($146)) {
   label = 59;
   break;
  }
  $147 = HEAP8[(31976)>>0]|0;
  $148 = $147 << 24 >> 24;
  $149 = ($148|0)==(44);
  if (!($149)) {
   label = 59;
   break;
  }
 }
 if ((label|0) == 59) {
  _writeLog($1);
  _ungetlex();
  STACKTOP = sp;return;
 }
}
function _keySurat() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer10 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 19024|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(19024|0);
 $vararg_buffer10 = sp + 9688|0;
 $vararg_buffer8 = sp + 9680|0;
 $vararg_buffer6 = sp + 9672|0;
 $vararg_buffer4 = sp + 9664|0;
 $vararg_buffer1 = sp + 9656|0;
 $vararg_buffer = sp + 9648|0;
 $0 = sp + 18960|0;
 $1 = sp + 18360|0;
 $2 = sp + 17760|0;
 $4 = sp + 17632|0;
 $5 = sp + 16608|0;
 $6 = sp + 16352|0;
 $7 = sp + 12256|0;
 $8 = sp + 11232|0;
 $9 = sp + 11224|0;
 $10 = sp + 10920|0;
 $11 = sp + 6432|0;
 $12 = sp + 3216|0;
 $13 = sp + 9696|0;
 $14 = sp + 10620|0;
 $15 = sp;
 $3 = 0;
 dest=$4; stop=dest+128|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($5|0),0,1024)|0;
 _memset(($6|0),0,256)|0;
 _memset(($7|0),0,4096)|0;
 _memset(($8|0),0,1024)|0;
 ;HEAP8[$9>>0]=0|0;HEAP8[$9+1>>0]=0|0;HEAP8[$9+2>>0]=0|0;HEAP8[$9+3>>0]=0|0;HEAP8[$9+4>>0]=0|0;HEAP8[$9+5>>0]=0|0;HEAP8[$9+6>>0]=0|0;HEAP8[$9+7>>0]=0|0;
 _memset(($12|0),0,3216)|0;
 _memset(($11|0),0,3216)|0;
 _memset(($10|0),0,300)|0;
 dest=$0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($2|0),0,600)|0;
 _memset(($1|0),0,600)|0;
 _memset(($13|0),0,920)|0;
 _memset(($14|0),0,300)|0;
 $3 = 0;
 while(1) {
  _memset(($2|0),0,600)|0;
  (_getlex()|0);
  $16 = HEAP32[7954]|0;
  L3: do {
   switch ($16|0) {
   case 225:  {
    $17 = $3;
    $18 = ($17|0)==(0);
    if ($18) {
     (_strcpy($4,(31976))|0);
     break L3;
    }
    $19 = $3;
    $20 = ($19|0)==(1);
    if ($20) {
     (_strcpy($5,(31976))|0);
     break L3;
    }
    $21 = $3;
    $22 = ($21|0)==(2);
    if ($22) {
     (_strcpy($6,(31976))|0);
     break L3;
    }
    $23 = $3;
    $24 = ($23|0)==(3);
    if ($24) {
     (_strcpy($7,(31976))|0);
     break L3;
    }
    $25 = $3;
    $26 = ($25|0)==(4);
    if ($26) {
     (_strcpy($8,(31976))|0);
    }
    break;
   }
   case 223: case 224:  {
    _ungetlex();
    _expression($15);
    _memcpy(($11|0),($15|0),3216)|0;
    $27 = ((($11)) + 104|0);
    $28 = (_strlen($27)|0);
    $29 = ($28>>>0)>(0);
    if ($29) {
     $30 = ((($11)) + 104|0);
     HEAP32[$vararg_buffer>>2] = $30;
     (_sprintf($2,19231,$vararg_buffer)|0);
    } else {
     $31 = ((($11)) + 88|0);
     $32 = HEAP32[$31>>2]|0;
     HEAP32[$vararg_buffer1>>2] = $32;
     (_sprintf($2,16087,$vararg_buffer1)|0);
    }
    $33 = $3;
    $34 = ($33|0)==(0);
    if ($34) {
     (_strcpy($4,$2)|0);
     break L3;
    }
    $35 = $3;
    $36 = ($35|0)==(1);
    if ($36) {
     (_strcpy($5,$2)|0);
     break L3;
    }
    $37 = $3;
    $38 = ($37|0)==(2);
    if ($38) {
     (_strcpy($6,$2)|0);
     break L3;
    }
    $39 = $3;
    $40 = ($39|0)==(3);
    if ($40) {
     (_strcpy($7,$2)|0);
     break L3;
    }
    $41 = $3;
    $42 = ($41|0)==(4);
    if ($42) {
     (_strcpy($8,$2)|0);
    }
    break;
   }
   default: {
    _Error(16441,$vararg_buffer4);
   }
   }
  } while(0);
  $43 = $3;
  $44 = (($43) + 1)|0;
  $3 = $44;
  (_getlex()|0);
  $45 = HEAP32[7954]|0;
  $46 = ($45|0)==(227);
  if (!($46)) {
   break;
  }
  $47 = HEAP8[(31976)>>0]|0;
  $48 = $47 << 24 >> 24;
  $49 = ($48|0)==(44);
  if (!($49)) {
   break;
  }
 }
 $50 = $3;
 $51 = ($50|0)!=(5);
 do {
  if ($51) {
   _Error(16469,$vararg_buffer6);
  } else {
   $52 = (_ux_sendMail($8,16489,$4,$5,$6,$7)|0);
   $53 = ($52|0)==(0);
   if ($53) {
    (_printf(16492,$vararg_buffer8)|0);
    break;
   } else {
    (_printf(16507,$vararg_buffer10)|0);
    break;
   }
  }
 } while(0);
 _ungetlex();
 $54 = ((($13)) + 8|0);
 $55 = HEAP32[$54>>2]|0;
 $56 = ($55|0)!=(0|0);
 if ($56) {
  $57 = ((($13)) + 8|0);
  $58 = HEAP32[$57>>2]|0;
  _free($58);
 }
 $59 = ((($13)) + 916|0);
 $60 = HEAP32[$59>>2]|0;
 $61 = ($60|0)!=(0|0);
 if ($61) {
  $62 = ((($13)) + 916|0);
  $63 = HEAP32[$62>>2]|0;
  _free($63);
 }
 $64 = ((($11)) + 3196|0);
 $65 = HEAP32[$64>>2]|0;
 $66 = ($65|0)!=(0|0);
 if ($66) {
  $67 = ((($11)) + 3196|0);
  $68 = HEAP32[$67>>2]|0;
  _free($68);
 }
 $69 = ((($11)) + 3200|0);
 $70 = HEAP32[$69>>2]|0;
 $71 = ($70|0)!=(0|0);
 if ($71) {
  $72 = ((($11)) + 3200|0);
  $73 = HEAP32[$72>>2]|0;
  _free($73);
 }
 $74 = ((($11)) + 1796|0);
 $75 = HEAP32[$74>>2]|0;
 $76 = ($75|0)!=(0|0);
 if ($76) {
  $77 = ((($11)) + 1796|0);
  $78 = HEAP32[$77>>2]|0;
  _free($78);
 }
 $79 = ((($11)) + 1024|0);
 $80 = HEAP32[$79>>2]|0;
 $81 = ($80|0)!=(0|0);
 if ($81) {
  $82 = ((($11)) + 1024|0);
  $83 = HEAP32[$82>>2]|0;
  _free($83);
 }
 $84 = ((($11)) + 4|0);
 $85 = HEAP32[$84>>2]|0;
 $86 = ($85|0)!=(0|0);
 if ($86) {
  $87 = ((($11)) + 4|0);
  $88 = HEAP32[$87>>2]|0;
  _free($88);
 }
 $89 = ((($11)) + 8|0);
 $90 = HEAP32[$89>>2]|0;
 $91 = ($90|0)!=(0|0);
 if ($91) {
  $92 = ((($11)) + 8|0);
  $93 = HEAP32[$92>>2]|0;
  _free($93);
 }
 $94 = HEAP32[$11>>2]|0;
 $95 = ($94|0)!=(0|0);
 if ($95) {
  $96 = HEAP32[$11>>2]|0;
  _free($96);
 }
 $97 = ((($12)) + 3196|0);
 $98 = HEAP32[$97>>2]|0;
 $99 = ($98|0)!=(0|0);
 if ($99) {
  $100 = ((($12)) + 3196|0);
  $101 = HEAP32[$100>>2]|0;
  _free($101);
 }
 $102 = ((($12)) + 3200|0);
 $103 = HEAP32[$102>>2]|0;
 $104 = ($103|0)!=(0|0);
 if ($104) {
  $105 = ((($12)) + 3200|0);
  $106 = HEAP32[$105>>2]|0;
  _free($106);
 }
 $107 = ((($12)) + 1796|0);
 $108 = HEAP32[$107>>2]|0;
 $109 = ($108|0)!=(0|0);
 if ($109) {
  $110 = ((($12)) + 1796|0);
  $111 = HEAP32[$110>>2]|0;
  _free($111);
 }
 $112 = ((($12)) + 1024|0);
 $113 = HEAP32[$112>>2]|0;
 $114 = ($113|0)!=(0|0);
 if ($114) {
  $115 = ((($12)) + 1024|0);
  $116 = HEAP32[$115>>2]|0;
  _free($116);
 }
 $117 = ((($12)) + 4|0);
 $118 = HEAP32[$117>>2]|0;
 $119 = ($118|0)!=(0|0);
 if ($119) {
  $120 = ((($12)) + 4|0);
  $121 = HEAP32[$120>>2]|0;
  _free($121);
 }
 $122 = ((($12)) + 8|0);
 $123 = HEAP32[$122>>2]|0;
 $124 = ($123|0)!=(0|0);
 if ($124) {
  $125 = ((($12)) + 8|0);
  $126 = HEAP32[$125>>2]|0;
  _free($126);
 }
 $127 = HEAP32[$12>>2]|0;
 $128 = ($127|0)!=(0|0);
 if (!($128)) {
  STACKTOP = sp;return;
 }
 $129 = HEAP32[$12>>2]|0;
 _free($129);
 STACKTOP = sp;return;
}
function _keySub($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy72 = 0, $$byval_copy73 = 0, $$byval_copy74 = 0, $$byval_copy75 = 0, $$byval_copy76 = 0, $$byval_copy77 = 0, $$byval_copy78 = 0, $$byval_copy79 = 0, $$byval_copy80 = 0, $$byval_copy81 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0;
 var $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0;
 var $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0;
 var $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0;
 var $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0;
 var $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0;
 var $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0.0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0;
 var $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0;
 var $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0;
 var $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0;
 var $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0;
 var $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0;
 var $305 = 0, $306 = 0, $307 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond6 = 0, $vararg_buffer = 0, $vararg_buffer14 = 0, $vararg_buffer18 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer59 = 0, $vararg_buffer62 = 0;
 var $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer70 = 0, $vararg_buffer8 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr17 = 0, $vararg_ptr21 = 0, $vararg_ptr32 = 0, $vararg_ptr38 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 84960|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(84960|0);
 $$byval_copy81 = sp + 74160|0;
 $$byval_copy80 = sp + 70944|0;
 $$byval_copy79 = sp + 67728|0;
 $$byval_copy78 = sp + 64512|0;
 $$byval_copy77 = sp + 61296|0;
 $$byval_copy76 = sp + 58080|0;
 $$byval_copy75 = sp + 54864|0;
 $$byval_copy74 = sp + 51648|0;
 $$byval_copy73 = sp + 48432|0;
 $$byval_copy72 = sp + 45216|0;
 $$byval_copy = sp + 79232|0;
 $vararg_buffer70 = sp + 45208|0;
 $vararg_buffer67 = sp + 45200|0;
 $vararg_buffer65 = sp + 45192|0;
 $vararg_buffer62 = sp + 45184|0;
 $vararg_buffer59 = sp + 45176|0;
 $vararg_buffer56 = sp + 45168|0;
 $vararg_buffer54 = sp + 45160|0;
 $vararg_buffer52 = sp + 45152|0;
 $vararg_buffer50 = sp + 45144|0;
 $vararg_buffer47 = sp + 45136|0;
 $vararg_buffer44 = sp + 45128|0;
 $vararg_buffer42 = sp + 45120|0;
 $vararg_buffer39 = sp + 45112|0;
 $vararg_buffer35 = sp + 45104|0;
 $vararg_buffer33 = sp + 45096|0;
 $vararg_buffer29 = sp + 45088|0;
 $vararg_buffer27 = sp + 45080|0;
 $vararg_buffer24 = sp + 45072|0;
 $vararg_buffer22 = sp + 45064|0;
 $vararg_buffer18 = sp + 45056|0;
 $vararg_buffer14 = sp + 45048|0;
 $vararg_buffer8 = sp + 45032|0;
 $vararg_buffer = sp + 45024|0;
 $3 = sp + 84652|0;
 $4 = sp + 84352|0;
 $5 = sp + 84052|0;
 $6 = sp + 83752|0;
 $7 = sp + 83452|0;
 $8 = sp + 83152|0;
 $9 = sp + 41808|0;
 $10 = sp + 38592|0;
 $11 = sp + 35376|0;
 $14 = sp + 82852|0;
 $15 = sp + 82552|0;
 $16 = sp + 81952|0;
 $17 = sp + 81652|0;
 $18 = sp + 81352|0;
 $19 = sp + 80752|0;
 $20 = sp + 80452|0;
 $21 = sp + 78296|0;
 $22 = sp + 80152|0;
 $23 = sp + 77376|0;
 $24 = sp + 32160|0;
 $25 = sp + 28944|0;
 $26 = sp + 25728|0;
 $27 = sp + 22512|0;
 $28 = sp + 19296|0;
 $29 = sp + 16080|0;
 $30 = sp + 12864|0;
 $31 = sp + 9648|0;
 $32 = sp + 6432|0;
 $33 = sp + 3216|0;
 $34 = sp;
 $1 = $0;
 $2 = 0;
 $12 = 0;
 $13 = 0;
 _memset(($11|0),0,3216)|0;
 _memset(($9|0),0,3216)|0;
 _memset(($10|0),0,3216)|0;
 _memset(($3|0),0,300)|0;
 _memset(($4|0),0,300)|0;
 _memset(($5|0),0,300)|0;
 _memset(($6|0),0,300)|0;
 _memset(($7|0),0,300)|0;
 _memset(($8|0),0,300)|0;
 _memset(($21|0),0,920)|0;
 _memset(($22|0),0,300)|0;
 _memset(($14|0),0,300)|0;
 _memset(($15|0),0,300)|0;
 _memset(($16|0),0,600)|0;
 _memset(($17|0),0,300)|0;
 _memset(($18|0),0,300)|0;
 _memset(($19|0),0,600)|0;
 _memset(($20|0),0,300)|0;
 (_getlex()|0);
 $35 = HEAP32[7954]|0;
 $36 = ($35|0)==(230);
 L1: do {
  if ($36) {
   $37 = (_getObjectName((31976))|0);
   (_strcpy($3,$37)|0);
   $38 = (_getObjectFunction((31976))|0);
   (_strcpy($4,$38)|0);
   $39 = (_getObjectFunctionParam((31976))|0);
   (_strcpy($5,$39)|0);
   _checkObjectFuncValidation((31976));
   $40 = (_strcmp($4,16525)|0);
   $41 = ($40|0)==(0);
   if ($41) {
    label = 4;
   } else {
    $42 = (_strcmp($4,16532)|0);
    $43 = ($42|0)==(0);
    if ($43) {
     label = 4;
    }
   }
   if ((label|0) == 4) {
    _class_params_init();
    $44 = ((($21)) + 12|0);
    $45 = ((($11)) + 2424|0);
    (_strcpy($44,$45)|0);
    _memcpy(($$byval_copy|0),($21|0),920)|0;
    _class_findParams($$byval_copy);
    $46 = HEAP32[(71808)>>2]|0;
    $47 = ($46|0)==(0);
    L7: do {
     if (!($47)) {
      $2 = 0;
      while(1) {
       $48 = $2;
       $49 = HEAP32[(71808)>>2]|0;
       $50 = ($48|0)<($49|0);
       if (!($50)) {
        break L7;
       }
       $51 = $2;
       _node_getElement($23,$51);
       _memcpy(($21|0),($23|0),920)|0;
       _memset(($20|0),0,300)|0;
       $52 = ((($21)) + 140|0);
       HEAP32[$vararg_buffer>>2] = $3;
       $vararg_ptr7 = ((($vararg_buffer)) + 4|0);
       HEAP32[$vararg_ptr7>>2] = $52;
       (_sprintf($20,15808,$vararg_buffer)|0);
       (_strcpy($6,$20)|0);
       $53 = ((($21)) + 268|0);
       $54 = (_strlen($53)|0);
       $55 = ($54>>>0)>(0);
       if ($55) {
        $56 = ((($21)) + 268|0);
        $57 = (_split($56,16539)|0);
        $12 = $57;
        $58 = ((($21)) + 912|0);
        $59 = HEAP32[$58>>2]|0;
        $60 = ((($9)) + 3192|0);
        HEAP32[$60>>2] = $59;
        $61 = HEAP32[8091]|0;
        _memcpy(($$byval_copy72|0),($9|0),3216)|0;
        _ValLabel($24,$6,$61,$$byval_copy72,233);
        _memset(($20|0),0,300)|0;
        $62 = $12;
        $63 = ((($62)) + 4|0);
        $64 = HEAP32[$63>>2]|0;
        $65 = HEAP8[$64>>0]|0;
        $66 = $65 << 24 >> 24;
        $67 = (_isalpha($66)|0);
        $68 = ($67|0)!=(0);
        if ($68) {
         $69 = $12;
         $70 = ((($69)) + 4|0);
         $71 = HEAP32[$70>>2]|0;
         $72 = HEAP8[$71>>0]|0;
         $73 = $72 << 24 >> 24;
         $74 = (_isspace($73)|0);
         $75 = ($74|0)!=(0);
         if ($75) {
          label = 11;
         } else {
          $76 = $12;
          $77 = HEAP32[$76>>2]|0;
          $78 = $12;
          $79 = ((($78)) + 4|0);
          $80 = HEAP32[$79>>2]|0;
          HEAP32[$vararg_buffer8>>2] = $3;
          $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
          HEAP32[$vararg_ptr11>>2] = $77;
          $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
          HEAP32[$vararg_ptr12>>2] = $3;
          $vararg_ptr13 = ((($vararg_buffer8)) + 12|0);
          HEAP32[$vararg_ptr13>>2] = $80;
          (_snprintf($20,300,16541,$vararg_buffer8)|0);
         }
        } else {
         label = 11;
        }
        if ((label|0) == 11) {
         label = 0;
         $81 = ((($21)) + 268|0);
         HEAP32[$vararg_buffer14>>2] = $3;
         $vararg_ptr17 = ((($vararg_buffer14)) + 4|0);
         HEAP32[$vararg_ptr17>>2] = $81;
         (_sprintf($20,15808,$vararg_buffer14)|0);
         $82 = ((($21)) + 268|0);
         HEAP32[$vararg_buffer18>>2] = $3;
         $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
         HEAP32[$vararg_ptr21>>2] = $82;
         (_snprintf($20,300,15808,$vararg_buffer18)|0);
        }
        $83 = $12;
        $84 = ($83|0)!=(0|0);
        if ($84) {
         $85 = $12;
         _split_free($85);
        }
        ;HEAP32[73856>>2]=0|0;
        $86 = HEAP32[18446]|0;
        HEAP32[18442] = $86;
        $87 = HEAP32[(73788)>>2]|0;
        HEAP32[18443] = $87;
        $88 = HEAP32[(73792)>>2]|0;
        HEAP32[18464] = $88;
        HEAP32[(73792)>>2] = $20;
        HEAP32[18446] = 0;
        HEAP32[(73788)>>2] = 0;
        (_getlex()|0);
        (_getlex()|0);
        (_getlex()|0);
        $89 = HEAP32[7954]|0;
        $90 = ($89|0)==(28);
        if ($90) {
         _Error(19234,$vararg_buffer22);
        }
        _ungetlex();
        _expression($25);
        _memcpy(($9|0),($25|0),3216)|0;
        $91 = HEAP32[8091]|0;
        _memcpy(($$byval_copy73|0),($9|0),3216)|0;
        _ValLabel($26,$6,$91,$$byval_copy73,233);
        $92 = HEAP32[18464]|0;
        HEAP32[(73792)>>2] = $92;
        $93 = HEAP32[18442]|0;
        HEAP32[18446] = $93;
        $94 = HEAP32[18443]|0;
        HEAP32[(73788)>>2] = $94;
       } else {
        $95 = ((($21)) + 912|0);
        $96 = HEAP32[$95>>2]|0;
        $97 = ((($9)) + 3192|0);
        HEAP32[$97>>2] = $96;
        $98 = ((($9)) + 84|0);
        HEAP32[$98>>2] = 0;
        $99 = HEAP32[8091]|0;
        _memcpy(($$byval_copy74|0),($9|0),3216)|0;
        _ValLabel($27,$20,$99,$$byval_copy74,233);
       }
       $100 = $2;
       $101 = (($100) + 1)|0;
       $2 = $101;
      }
     }
    } while(0);
    _memset(($9|0),0,3216)|0;
    $102 = HEAP32[8091]|0;
    _memcpy(($$byval_copy75|0),($9|0),3216)|0;
    _ValLabel($28,$3,$102,$$byval_copy75,232);
    _memcpy(($9|0),($28|0),3216)|0;
    $103 = ((($9)) + 3188|0);
    HEAP32[$103>>2] = 1;
    $104 = HEAP32[8091]|0;
    _memcpy(($$byval_copy76|0),($9|0),3216)|0;
    _ValLabel($29,$3,$104,$$byval_copy76,233);
   }
   _memset(($11|0),0,3216)|0;
   $105 = HEAP32[8091]|0;
   _memcpy(($$byval_copy77|0),($11|0),3216)|0;
   _ValLabel($30,$3,$105,$$byval_copy77,232);
   _memcpy(($11|0),($30|0),3216)|0;
   $106 = ((($11)) + 3188|0);
   $107 = HEAP32[$106>>2]|0;
   $108 = ($107|0)==(0);
   if ($108) {
    _memset(($7|0),0,300)|0;
    HEAP32[$vararg_buffer24>>2] = $3;
    (_snprintf($7,300,16555,$vararg_buffer24)|0);
    _Error($7,$vararg_buffer27);
   }
   $109 = ((($11)) + 2424|0);
   HEAP32[$vararg_buffer29>>2] = $109;
   $vararg_ptr32 = ((($vararg_buffer29)) + 4|0);
   HEAP32[$vararg_ptr32>>2] = $4;
   (_snprintf($8,300,15808,$vararg_buffer29)|0);
   _memset(($11|0),0,3216)|0;
   $110 = HEAP32[8091]|0;
   _memcpy(($$byval_copy78|0),($11|0),3216)|0;
   _ValLabel($31,$8,$110,$$byval_copy78,232);
   _memcpy(($11|0),($31|0),3216)|0;
   $111 = ((($11)) + 84|0);
   $112 = HEAP32[$111>>2]|0;
   $113 = ($112|0)!=(32);
   if ($113) {
    _Error(16583,$vararg_buffer33);
   }
   (_strcpy($17,$5)|0);
   $114 = ((($11)) + 1182|0);
   $115 = (_strlen($114)|0);
   $116 = ($115>>>0)>(0);
   if ($116) {
    $117 = ((($11)) + 1182|0);
    HEAP32[$vararg_buffer35>>2] = $3;
    $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
    HEAP32[$vararg_ptr38>>2] = $117;
    (_snprintf($18,300,15808,$vararg_buffer35)|0);
   }
   $118 = (_checkParamNum($17,$18)|0);
   $119 = ($118|0)!=(0);
   if ($119) {
    _memset(($7|0),0,300)|0;
    HEAP32[$vararg_buffer39>>2] = $3;
    (_snprintf($7,300,16624,$vararg_buffer39)|0);
    _Error($7,$vararg_buffer42);
   }
   _subtituteParam($16,$17,$18);
   $120 = (_strlen($16)|0);
   $121 = ($120>>>0)>(0);
   if ($121) {
    (_strcpy($19,$16)|0);
   } else {
    (_strcpy($19,1358125)|0);
   }
   $122 = HEAP32[18446]|0;
   $123 = HEAP32[8091]|0;
   $124 = (73256 + ($123<<2)|0);
   HEAP32[$124>>2] = $122;
   ;HEAP32[32880>>2]=0|0;
   $125 = HEAP32[(73792)>>2]|0;
   HEAP32[8221] = $125;
   HEAP32[(73792)>>2] = $19;
   HEAP32[18446] = 0;
   $126 = HEAP32[8091]|0;
   $127 = (73256 + ($126<<2)|0);
   $128 = HEAP32[$127>>2]|0;
   _InterpreterClassParam(2,$128,$3);
   $129 = HEAP32[8221]|0;
   HEAP32[(73792)>>2] = $129;
   $130 = HEAP32[8091]|0;
   $131 = (73256 + ($130<<2)|0);
   $132 = HEAP32[$131>>2]|0;
   HEAP32[18446] = $132;
   $133 = ((($11)) + 1784|0);
   $134 = HEAP32[$133>>2]|0;
   HEAP32[18446] = $134;
   $135 = ((($11)) + 1482|0);
   $136 = (_strlen($135)|0);
   $137 = ($136>>>0)>(0);
   do {
    if ($137) {
     ;HEAP32[32880>>2]=0|0;
     ;HEAP32[32884>>2]=0|0;
     $138 = HEAP32[(73792)>>2]|0;
     HEAP32[8221] = $138;
     $139 = ((($11)) + 1482|0);
     $140 = (_stat($139,73860)|0);
     $141 = ($140|0)!=(0);
     if ($141) {
      $142 = HEAP32[35]|0;
      $143 = ((($11)) + 1482|0);
      HEAP32[$vararg_buffer44>>2] = $143;
      (_fprintf($142,16673,$vararg_buffer44)|0);
      _exit(-1);
      // unreachable;
     }
     $144 = ((($11)) + 1482|0);
     $145 = (_fopen($144,16704)|0);
     HEAP32[18484] = $145;
     $146 = ($145|0)==(0|0);
     if ($146) {
      $147 = HEAP32[35]|0;
      $148 = ((($11)) + 1482|0);
      HEAP32[$vararg_buffer47>>2] = $148;
      (_fprintf($147,16706,$vararg_buffer47)|0);
      _exit(-1);
      // unreachable;
     }
     $149 = HEAP32[(73896)>>2]|0;
     $150 = (($149) + 9)|0;
     $151 = (_calloc($150,1)|0);
     HEAP32[8220] = $151;
     $152 = HEAP32[8220]|0;
     $153 = ($152|0)==(0|0);
     if ($153) {
      $154 = HEAP32[35]|0;
      (_fprintf($154,16736,$vararg_buffer50)|0);
      _exit(-1);
      // unreachable;
     } else {
      $155 = HEAP32[8220]|0;
      $156 = HEAP32[(73896)>>2]|0;
      $157 = HEAP32[18484]|0;
      (_fread($155,1,$156,$157)|0);
      $158 = HEAP32[18484]|0;
      (_fclose($158)|0);
      $159 = HEAP32[8220]|0;
      HEAP32[(73792)>>2] = $159;
      ;HEAP32[32880>>2]=0|0;
      HEAP32[8220] = 0;
      break;
     }
    }
   } while(0);
   (_getlex()|0);
   $160 = ((($11)) + 1788|0);
   $161 = HEAP32[$160>>2]|0;
   _InterpreterClassSub($161,$3);
   $162 = HEAP32[8091]|0;
   $163 = (73256 + ($162<<2)|0);
   $164 = HEAP32[$163>>2]|0;
   HEAP32[18446] = $164;
   $165 = ((($11)) + 1482|0);
   $166 = (_strlen($165)|0);
   $167 = ($166>>>0)>(0);
   if ($167) {
    $168 = HEAP32[8221]|0;
    HEAP32[(73792)>>2] = $168;
    ;HEAP32[32884>>2]=0|0;
    HEAP32[8221] = 0;
   }
   $169 = ((($9)) + 84|0);
   HEAP32[$169>>2] = 9;
   $170 = ((($9)) + 1032|0);
   (_strcpy($170,$14)|0);
   $171 = ((($9)) + 1182|0);
   (_strcpy($171,$15)|0);
   _memset(($11|0),0,3216)|0;
   _memcpy(($11|0),(28312|0),3216)|0;
   $172 = $1;
   $173 = (_strlen($172)|0);
   $174 = ($173>>>0)>(0);
   if ($174) {
    $175 = $1;
    $176 = HEAP32[8091]|0;
    _memcpy(($$byval_copy79|0),($11|0),3216)|0;
    _ValLabel($32,$175,$176,$$byval_copy79,233);
   }
  } else {
   $177 = HEAP32[7954]|0;
   $178 = ($177|0)==(224);
   if (!($178)) {
    $261 = $1;
    HEAP32[$vararg_buffer67>>2] = $261;
    (_printf(16828,$vararg_buffer67)|0);
    _Error(16832,$vararg_buffer70);
    break;
   }
   _memset(($14|0),0,300)|0;
   _memset(($15|0),0,300)|0;
   _memset(($16|0),0,600)|0;
   $179 = (_strlen((31976))|0);
   $180 = ($179>>>0)>(0);
   if ($180) {
    (_strcpy($14,(31976))|0);
   } else {
    (_strcpy($14,1358125)|0);
   }
   $181 = ((($9)) + 88|0);
   HEAP32[$181>>2] = -1;
   _memcpy(($$byval_copy80|0),($9|0),3216)|0;
   _ValLabel($33,$14,0,$$byval_copy80,232);
   _memcpy(($9|0),($33|0),3216)|0;
   $182 = ((($9)) + 88|0);
   $183 = HEAP32[$182>>2]|0;
   $13 = $183;
   $184 = $13;
   $185 = ($184|0)==(-1);
   if ($185) {
    _Error(16750,$vararg_buffer52);
   }
   $186 = ((($9)) + 88|0);
   HEAP32[$186>>2] = 0;
   (_getlex()|0);
   $187 = HEAP32[7954]|0;
   $188 = ($187|0)!=(227);
   if ($188) {
    label = 51;
   } else {
    $189 = (_strncmp((31976),16770,1)|0);
    $190 = ($189|0)!=(0);
    if ($190) {
     label = 51;
    }
   }
   if ((label|0) == 51) {
    _Error(16772,$vararg_buffer54);
   }
   (_strcpy($15,1358125)|0);
   while(1) {
    $191 = HEAP8[(31976)>>0]|0;
    $192 = $191 << 24 >> 24;
    $193 = ($192|0)!=(41);
    $194 = HEAP32[7954]|0;
    $195 = ($194|0)!=(28);
    $196 = $193 ? $195 : 0;
    if (!($196)) {
     break;
    }
    (_getlex()|0);
    $197 = HEAP8[(31976)>>0]|0;
    $198 = $197 << 24 >> 24;
    $199 = ($198|0)==(41);
    if ($199) {
     break;
    }
    $200 = HEAP32[7954]|0;
    $201 = ($200|0)==(223);
    if ($201) {
     $202 = HEAP32[(31976)>>2]|0;
     HEAP32[$vararg_buffer56>>2] = $202;
     (_snprintf($20,300,16087,$vararg_buffer56)|0);
     (_strcat($15,$20)|0);
     continue;
    }
    $203 = HEAP32[7954]|0;
    $204 = ($203|0)==(226);
    if ($204) {
     $205 = +HEAPF64[(31976)>>3];
     HEAPF64[$vararg_buffer59>>3] = $205;
     (_snprintf($20,300,16221,$vararg_buffer59)|0);
     (_strcat($15,$20)|0);
     continue;
    }
    $206 = (_strlen((31976))|0);
    $207 = ($206>>>0)>(0);
    if ($207) {
     (_strcat($15,(31976))|0);
     continue;
    }
    $208 = HEAP32[7954]|0;
    $209 = ($208|0)==(227);
    if (!($209)) {
     continue;
    }
    $210 = HEAP8[(31976)>>0]|0;
    $211 = $210 << 24 >> 24;
    HEAP32[$vararg_buffer62>>2] = $211;
    (_snprintf($20,300,16270,$vararg_buffer62)|0);
    (_strcat($15,$20)|0);
   }
   (_strcpy($17,$15)|0);
   $212 = ((($9)) + 1182|0);
   (_strcpy($18,$212)|0);
   $213 = (_checkParamNum($17,$18)|0);
   $214 = ($213|0)!=(0);
   if ($214) {
    _Error(16803,$vararg_buffer65);
   }
   $215 = HEAP32[18446]|0;
   $216 = HEAP32[8088]|0;
   $217 = (32368 + ($216<<2)|0);
   HEAP32[$217>>2] = $215;
   (_strcpy($17,$15)|0);
   $218 = ((($9)) + 1182|0);
   (_strcpy($18,$218)|0);
   _subtituteParam($16,$17,$18);
   $219 = (_strlen($16)|0);
   $220 = ($219>>>0)>(0);
   if ($220) {
    (_strcpy($19,$16)|0);
   } else {
    (_strcpy($19,1358125)|0);
   }
   $221 = HEAP32[18446]|0;
   $222 = HEAP32[8088]|0;
   $223 = (32368 + ($222<<2)|0);
   HEAP32[$223>>2] = $221;
   ;HEAP32[32880>>2]=0|0;
   $224 = HEAP32[(73792)>>2]|0;
   HEAP32[8220] = $224;
   HEAP32[(73792)>>2] = $19;
   HEAP32[18446] = 0;
   $225 = HEAP32[8088]|0;
   $226 = (32368 + ($225<<2)|0);
   $227 = HEAP32[$226>>2]|0;
   _InterpreterParam(2,$227,$14);
   $228 = HEAP32[8220]|0;
   HEAP32[(73792)>>2] = $228;
   $229 = HEAP32[8088]|0;
   $230 = (32368 + ($229<<2)|0);
   $231 = HEAP32[$230>>2]|0;
   HEAP32[18446] = $231;
   $232 = ((($9)) + 1784|0);
   $233 = HEAP32[$232>>2]|0;
   HEAP32[18446] = $233;
   (_getlex()|0);
   $234 = ((($9)) + 1788|0);
   $235 = HEAP32[$234>>2]|0;
   _InterpreterSub($235,$14);
   $236 = HEAP32[8088]|0;
   $237 = (32368 + ($236<<2)|0);
   $238 = HEAP32[$237>>2]|0;
   HEAP32[18446] = $238;
   $239 = ((($9)) + 84|0);
   HEAP32[$239>>2] = 9;
   $240 = ((($9)) + 1032|0);
   (_strcpy($240,$14)|0);
   $241 = ((($9)) + 1182|0);
   (_strcpy($241,$15)|0);
   _memset(($11|0),0,3216)|0;
   _memcpy(($11|0),(28312|0),3216)|0;
   $242 = $1;
   $243 = (_strlen($242)|0);
   $244 = ($243>>>0)>(0);
   if ($244) {
    $245 = $1;
    $246 = HEAP32[8088]|0;
    _memcpy(($$byval_copy81|0),($11|0),3216)|0;
    _ValLabel($34,$245,$246,$$byval_copy81,233);
   }
   $247 = HEAP32[8088]|0;
   $248 = ($247|0)>(0);
   $249 = HEAP32[8089]|0;
   $250 = ($249|0)>(0);
   $or$cond = $248 | $250;
   $251 = HEAP32[8090]|0;
   $252 = ($251|0)>(0);
   $or$cond3 = $or$cond | $252;
   if ($or$cond3) {
    while(1) {
     (_Interpreter()|0);
     $253 = HEAP32[18446]|0;
     $254 = ((($9)) + 1788|0);
     $255 = HEAP32[$254>>2]|0;
     $256 = ($253|0)<=($255|0);
     if (!($256)) {
      break L1;
     }
     $257 = (_strncmp((31976),19229,1)|0);
     $258 = ($257|0)!=(0);
     $259 = HEAP32[7954]|0;
     $260 = ($259|0)!=(28);
     $or$cond6 = $258 & $260;
     if (!($or$cond6)) {
      break;
     }
    }
   }
  }
 } while(0);
 $262 = $12;
 $263 = ($262|0)!=(0|0);
 if ($263) {
  $264 = $12;
  _free($264);
 }
 $265 = ((($21)) + 8|0);
 $266 = HEAP32[$265>>2]|0;
 $267 = ($266|0)!=(0|0);
 if ($267) {
  $268 = ((($21)) + 8|0);
  $269 = HEAP32[$268>>2]|0;
  _free($269);
 }
 $270 = ((($21)) + 916|0);
 $271 = HEAP32[$270>>2]|0;
 $272 = ($271|0)!=(0|0);
 if ($272) {
  $273 = ((($21)) + 916|0);
  $274 = HEAP32[$273>>2]|0;
  _free($274);
 }
 $275 = ((($10)) + 3196|0);
 $276 = HEAP32[$275>>2]|0;
 $277 = ($276|0)!=(0|0);
 if ($277) {
  $278 = ((($10)) + 3196|0);
  $279 = HEAP32[$278>>2]|0;
  _free($279);
 }
 $280 = ((($10)) + 3200|0);
 $281 = HEAP32[$280>>2]|0;
 $282 = ($281|0)!=(0|0);
 if ($282) {
  $283 = ((($10)) + 3200|0);
  $284 = HEAP32[$283>>2]|0;
  _free($284);
 }
 $285 = ((($10)) + 1796|0);
 $286 = HEAP32[$285>>2]|0;
 $287 = ($286|0)!=(0|0);
 if ($287) {
  $288 = ((($10)) + 1796|0);
  $289 = HEAP32[$288>>2]|0;
  _free($289);
 }
 $290 = ((($10)) + 1024|0);
 $291 = HEAP32[$290>>2]|0;
 $292 = ($291|0)!=(0|0);
 if ($292) {
  $293 = ((($10)) + 1024|0);
  $294 = HEAP32[$293>>2]|0;
  _free($294);
 }
 $295 = ((($10)) + 4|0);
 $296 = HEAP32[$295>>2]|0;
 $297 = ($296|0)!=(0|0);
 if ($297) {
  $298 = ((($10)) + 4|0);
  $299 = HEAP32[$298>>2]|0;
  _free($299);
 }
 $300 = ((($10)) + 8|0);
 $301 = HEAP32[$300>>2]|0;
 $302 = ($301|0)!=(0|0);
 if ($302) {
  $303 = ((($10)) + 8|0);
  $304 = HEAP32[$303>>2]|0;
  _free($304);
 }
 $305 = HEAP32[$10>>2]|0;
 $306 = ($305|0)!=(0|0);
 if (!($306)) {
  STACKTOP = sp;return;
 }
 $307 = HEAP32[$10>>2]|0;
 _free($307);
 STACKTOP = sp;return;
}
function _Interpreter() {
 var $$byval_copy = 0, $$byval_copy62 = 0, $$byval_copy63 = 0, $$byval_copy64 = 0, $$byval_copy65 = 0, $$byval_copy66 = 0, $$byval_copy67 = 0, $$byval_copy68 = 0, $$byval_copy69 = 0, $$byval_copy70 = 0, $$byval_copy71 = 0, $$byval_copy72 = 0, $$byval_copy73 = 0, $$byval_copy74 = 0, $$byval_copy75 = 0, $$byval_copy76 = 0, $$byval_copy77 = 0, $$byval_copy78 = 0, $$byval_copy79 = 0, $$old = 0;
 var $$old13 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0;
 var $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0;
 var $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0;
 var $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0;
 var $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0;
 var $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0.0, $199 = 0.0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0.0, $222 = 0.0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0.0, $235 = 0.0, $236 = 0.0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond17 = 0, $or$cond6 = 0, $or$cond8 = 0, $vararg_buffer = 0;
 var $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer25 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer39 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer49 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_ptr18 = 0, $vararg_ptr38 = 0;
 var $vararg_ptr46 = 0, $vararg_ptr61 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 130800|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(130800|0);
 $$byval_copy79 = sp + 125576|0;
 $$byval_copy78 = sp + 122360|0;
 $$byval_copy77 = sp + 119144|0;
 $$byval_copy76 = sp + 115928|0;
 $$byval_copy75 = sp + 112712|0;
 $$byval_copy74 = sp + 109496|0;
 $$byval_copy73 = sp + 106280|0;
 $$byval_copy72 = sp + 103064|0;
 $$byval_copy71 = sp + 99848|0;
 $$byval_copy70 = sp + 96632|0;
 $$byval_copy69 = sp + 93416|0;
 $$byval_copy68 = sp + 90200|0;
 $$byval_copy67 = sp + 86984|0;
 $$byval_copy66 = sp + 83768|0;
 $$byval_copy65 = sp + 80552|0;
 $$byval_copy64 = sp + 77336|0;
 $$byval_copy63 = sp + 74120|0;
 $$byval_copy62 = sp + 70904|0;
 $$byval_copy = sp + 67688|0;
 $vararg_buffer58 = sp + 67680|0;
 $vararg_buffer56 = sp + 67672|0;
 $vararg_buffer54 = sp + 67664|0;
 $vararg_buffer52 = sp + 67656|0;
 $vararg_buffer49 = sp + 67648|0;
 $vararg_buffer47 = sp + 67640|0;
 $vararg_buffer43 = sp + 67632|0;
 $vararg_buffer41 = sp + 67624|0;
 $vararg_buffer39 = sp + 67616|0;
 $vararg_buffer35 = sp + 67608|0;
 $vararg_buffer33 = sp + 67600|0;
 $vararg_buffer31 = sp + 67592|0;
 $vararg_buffer29 = sp + 67584|0;
 $vararg_buffer27 = sp + 67576|0;
 $vararg_buffer25 = sp + 67568|0;
 $vararg_buffer23 = sp + 67560|0;
 $vararg_buffer21 = sp + 67552|0;
 $vararg_buffer19 = sp + 67544|0;
 $vararg_buffer = sp + 67536|0;
 $1 = sp + 130736|0;
 $2 = sp + 64320|0;
 $3 = sp + 61104|0;
 $4 = sp + 57888|0;
 $6 = sp + 130432|0;
 $8 = sp + 130132|0;
 $9 = sp + 129832|0;
 $10 = sp + 54672|0;
 $11 = sp + 51456|0;
 $12 = sp + 48240|0;
 $14 = sp + 128808|0;
 $15 = sp + 45024|0;
 $16 = sp + 41808|0;
 $17 = sp + 38592|0;
 $18 = sp + 35376|0;
 $19 = sp + 32160|0;
 $20 = sp + 28944|0;
 $21 = sp + 25728|0;
 $22 = sp + 22512|0;
 $23 = sp + 19296|0;
 $24 = sp + 16080|0;
 $25 = sp + 12864|0;
 $26 = sp + 9648|0;
 $27 = sp + 6432|0;
 $28 = sp + 3216|0;
 $29 = sp;
 $5 = 0;
 $7 = 0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($6|0),0,300)|0;
 _memset(($8|0),0,300)|0;
 dest=$1; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($9|0),0,300)|0;
 (_getlex()|0);
 $30 = HEAP32[7954]|0;
 L1: do {
  switch ($30|0) {
  case 208:  {
   _memcpy(($$byval_copy|0),($2|0),3216)|0;
   _ValLabel($10,1358125,0,$$byval_copy,236);
   break;
  }
  case 6:  {
   (_getlex()|0);
   break;
  }
  case 0:  {
   _keyTulis();
   break;
  }
  case 12:  {
   _keyTulisLog();
   break;
  }
  case 68:  {
   _keyTulisRinci();
   break;
  }
  case 31:  {
   _keyTulisarsip();
   break;
  }
  case 17:  {
   _keySurat();
   break;
  }
  case 27:  {
   _keyTutup();
   break;
  }
  case 13:  {
   _keyPerintah();
   break;
  }
  case 66:  {
   (_getlex()|0);
   break;
  }
  case 14:  {
   _keyTunggu();
   break;
  }
  case 30:  {
   _keyHapus();
   break;
  }
  case 16:  {
   (_getlex()|0);
   _memset((28312|0),0,3216)|0;
   $31 = HEAP32[7954]|0;
   switch ($31|0) {
   case 225:  {
    $32 = (_strlen((31976))|0);
    $33 = ($32>>>0)>(0);
    if ($33) {
     (_strcpy((28416),(31976))|0);
    } else {
     (_strcpy((28416),1358125)|0);
    }
    HEAP32[(28396)>>2] = 3;
    break L1;
    break;
   }
   case 223:  {
    $34 = HEAP32[(31976)>>2]|0;
    HEAP32[(28400)>>2] = $34;
    HEAP32[(28396)>>2] = 0;
    break L1;
    break;
   }
   case 228: case 224:  {
    _memset(($2|0),0,3216)|0;
    $35 = (_strlen(128380)|0);
    $36 = ($35>>>0)>(0);
    if ($36) {
     HEAP32[$vararg_buffer>>2] = 128380;
     $vararg_ptr18 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr18>>2] = (31976);
     (_snprintf($9,300,15808,$vararg_buffer)|0);
     $37 = HEAP32[8091]|0;
     _memcpy(($$byval_copy62|0),($2|0),3216)|0;
     _ValLabel($11,$9,$37,$$byval_copy62,232);
     _memcpy(($2|0),($11|0),3216)|0;
    } else {
     $38 = HEAP32[8088]|0;
     _memcpy(($$byval_copy63|0),($2|0),3216)|0;
     _ValLabel($12,(31976),$38,$$byval_copy63,232);
     _memcpy(($2|0),($12|0),3216)|0;
    }
    $39 = ((($2)) + 84|0);
    $40 = HEAP32[$39>>2]|0;
    $41 = ($40|0)==(0);
    do {
     if ($41) {
      $42 = ((($2)) + 88|0);
      $43 = HEAP32[$42>>2]|0;
      HEAP32[(28400)>>2] = $43;
      HEAP32[(28396)>>2] = 0;
     } else {
      $44 = ((($2)) + 84|0);
      $45 = HEAP32[$44>>2]|0;
      $46 = ($45|0)==(3);
      if ($46) {
       $47 = ((($2)) + 104|0);
       (_strcpy((28416),$47)|0);
       HEAP32[(28396)>>2] = 3;
       break;
      } else {
       _memcpy((28312|0),($2|0),3216)|0;
       break;
      }
     }
    } while(0);
    $48 = HEAP32[8088]|0;
    $49 = ($48|0)>(0);
    $50 = HEAP32[7954]|0;
    $51 = ($50|0)!=(227);
    $or$cond14 = $49 & $51;
    if (!($or$cond14)) {
     break L1;
    }
    while(1) {
     $52 = HEAP8[(31976)>>0]|0;
     $53 = $52 << 24 >> 24;
     $54 = ($53|0)!=(125);
     if (!($54)) {
      break L1;
     }
     (_getlex()|0);
     $55 = HEAP32[7954]|0;
     $56 = ($55|0)==(28);
     if ($56) {
      _Error(16847,$vararg_buffer19);
     }
     $$old = HEAP32[7954]|0;
     $$old13 = ($$old|0)!=(227);
     if (!($$old13)) {
      break;
     }
    }
    break;
   }
   default: {
    _Error(16860,$vararg_buffer21);
    break L1;
   }
   }
   break;
  }
  case 1:  {
   (_getlex()|0);
   $57 = HEAP32[7954]|0;
   $58 = ($57|0)==(224);
   if ($58) {
    $59 = HEAP32[6]|0;
    (_fgets($14,1024,$59)|0);
    $60 = (_atoi($14)|0);
    $13 = $60;
    $61 = ((($2)) + 12|0);
    (_strcpy($61,(31976))|0);
    $62 = $13;
    $63 = ((($2)) + 88|0);
    HEAP32[$63>>2] = $62;
    $64 = HEAP32[8088]|0;
    _memcpy(($$byval_copy64|0),($2|0),3216)|0;
    _ValLabel($15,(31976),$64,$$byval_copy64,233);
    break L1;
   } else {
    _Error(16887,$vararg_buffer23);
    break L1;
   }
   break;
  }
  case 32:  {
   _keyPilih();
   break;
  }
  case 34:  {
   while(1) {
    (_getlex()|0);
    $65 = (_strncmp((31976),19229,1)|0);
    $66 = ($65|0)!=(0);
    $67 = HEAP32[7954]|0;
    $68 = ($67|0)!=(28);
    $69 = $66 ? $68 : 0;
    if (!($69)) {
     break;
    }
   }
   $70 = HEAP32[7954]|0;
   $71 = ($70|0)==(28);
   if ($71) {
    _Error(16907,$vararg_buffer25);
   }
   break;
  }
  case 2:  {
   _keyKalau();
   break;
  }
  case 38:  {
   $72 = HEAP32[18460]|0;
   $73 = (127192 + ($72<<2)|0);
   $74 = HEAP32[$73>>2]|0;
   $75 = ($74|0)==(0);
   if ($75) {
    _keyLainKalau();
    break L1;
   }
   while(1) {
    (_getlex()|0);
    $76 = HEAP32[7954]|0;
    $77 = ($76|0)!=(5);
    $78 = HEAP32[7954]|0;
    $79 = ($78|0)!=(28);
    $80 = $77 ? $79 : 0;
    if (!($80)) {
     break;
    }
   }
   $81 = HEAP32[7954]|0;
   $82 = ($81|0)==(28);
   if ($82) {
    _Error(16935,$vararg_buffer27);
   }
   break;
  }
  case 4:  {
   $83 = HEAP32[18460]|0;
   $84 = (127192 + ($83<<2)|0);
   $85 = HEAP32[$84>>2]|0;
   $86 = ($85|0)==(1);
   if ($86) {
    while(1) {
     (_getlex()|0);
     $87 = HEAP32[7954]|0;
     $88 = ($87|0)!=(5);
     $89 = HEAP32[7954]|0;
     $90 = ($89|0)!=(28);
     $91 = $88 ? $90 : 0;
     if (!($91)) {
      break;
     }
    }
    $92 = HEAP32[7954]|0;
    $93 = ($92|0)==(28);
    if ($93) {
     _Error(16935,$vararg_buffer29);
    }
   }
   break;
  }
  case 5:  {
   $94 = HEAP32[18460]|0;
   $95 = (($94) + -1)|0;
   HEAP32[18460] = $95;
   break;
  }
  case 21:  {
   _keyUntuk();
   break;
  }
  case 28: case 23: case 22:  {
   break;
  }
  case 36:  {
   $96 = HEAP32[18461]|0;
   $97 = (90328 + ($96<<2)|0);
   HEAP32[$97>>2] = 1;
   while(1) {
    (_getlex()|0);
    $98 = HEAP32[7954]|0;
    $99 = ($98|0)!=(23);
    $100 = HEAP32[7954]|0;
    $101 = ($100|0)!=(28);
    $102 = $99 ? $101 : 0;
    if (!($102)) {
     break;
    }
   }
   break;
  }
  case 37:  {
   while(1) {
    (_getlex()|0);
    $103 = HEAP32[7954]|0;
    $104 = ($103|0)!=(20);
    $105 = HEAP32[7954]|0;
    $106 = ($105|0)!=(23);
    $or$cond = $104 & $106;
    $107 = HEAP32[7954]|0;
    $108 = ($107|0)!=(28);
    $or$cond17 = $or$cond & $108;
    if (!($or$cond17)) {
     break;
    }
   }
   _ungetlex();
   break;
  }
  case 18:  {
   _keySelagi();
   break;
  }
  case 35:  {
   $109 = HEAP32[18462]|0;
   $110 = (123096 + ($109<<2)|0);
   HEAP32[$110>>2] = 0;
   while(1) {
    (_getlex()|0);
    $111 = HEAP32[7954]|0;
    $112 = ($111|0)!=(20);
    $113 = HEAP32[7954]|0;
    $114 = ($113|0)!=(28);
    $115 = $112 ? $114 : 0;
    if (!($115)) {
     break;
    }
   }
   break;
  }
  case 20:  {
   $116 = HEAP32[18462]|0;
   $117 = ($116|0)>(1);
   if ($117) {
    HEAP32[18463] = 1;
    while(1) {
     $118 = HEAP32[18463]|0;
     $119 = HEAP32[18462]|0;
     $120 = ($118|0)<($119|0);
     if (!($120)) {
      break L1;
     }
     while(1) {
      (_getlex()|0);
      $121 = HEAP32[7954]|0;
      $122 = ($121|0)!=(20);
      if (!($122)) {
       break;
      }
     }
     $123 = HEAP32[18463]|0;
     $124 = (($123) + 1)|0;
     HEAP32[18463] = $124;
    }
   }
   break;
  }
  case 221:  {
   _keySAKLAR_HIDUP();
   break;
  }
  case 222:  {
   _keySAKLAR_MATI();
   break;
  }
  case 202:  {
   while(1) {
    (_getlex()|0);
    dest=$1; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    (_strcpy($1,(31976))|0);
    $125 = HEAP32[7954]|0;
    $126 = ($125|0)==(224);
    do {
     if ($126) {
      _memset(($2|0),0,3216)|0;
      $127 = ((($2)) + 3192|0);
      HEAP32[$127>>2] = 2;
      $128 = HEAP32[8088]|0;
      _memcpy(($$byval_copy65|0),($2|0),3216)|0;
      _ValLabel($16,$1,$128,$$byval_copy65,233);
     } else {
      $129 = HEAP32[7954]|0;
      $130 = ($129|0)==(228);
      if ($130) {
       dest=$1; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
       _getArrayName((31976),$1);
       _memset(($2|0),0,3216)|0;
       $131 = ((($2)) + 3192|0);
       HEAP32[$131>>2] = 2;
       $132 = HEAP32[8088]|0;
       _memcpy(($$byval_copy66|0),($2|0),3216)|0;
       _ValLabel($17,$1,$132,$$byval_copy66,233);
       break;
      } else {
       _Error(16957,$vararg_buffer31);
       break;
      }
     }
    } while(0);
    (_getlex()|0);
    $133 = HEAP32[7954]|0;
    $134 = ($133|0)==(227);
    if (!($134)) {
     break;
    }
    $135 = HEAP8[(31976)>>0]|0;
    $136 = $135 << 24 >> 24;
    $137 = ($136|0)==(44);
    if (!($137)) {
     break;
    }
   }
   _ungetlex();
   break;
  }
  case 39:  {
   while(1) {
    (_getlex()|0);
    dest=$1; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
    (_strcpy($1,(31976))|0);
    $138 = HEAP32[7954]|0;
    $139 = ($138|0)==(224);
    if ($139) {
     _memset(($2|0),0,3216)|0;
     $140 = ((($2)) + 84|0);
     HEAP32[$140>>2] = 31;
     $141 = HEAP32[8088]|0;
     _memcpy(($$byval_copy67|0),($2|0),3216)|0;
     _ValLabel($18,$1,$141,$$byval_copy67,233);
    } else {
     _Error(16984,$vararg_buffer33);
    }
    (_getlex()|0);
    $142 = HEAP32[7954]|0;
    $143 = ($142|0)==(227);
    if (!($143)) {
     break;
    }
    $144 = HEAP8[(31976)>>0]|0;
    $145 = $144 << 24 >> 24;
    $146 = ($145|0)==(44);
    if (!($146)) {
     break;
    }
   }
   _ungetlex();
   break;
  }
  case 40:  {
   while(1) {
    (_getlex()|0);
    $147 = HEAP8[(31976)>>0]|0;
    $148 = $147 << 24 >> 24;
    $149 = ($148|0)!=(93);
    if (!($149)) {
     break;
    }
   }
   break;
  }
  case 229:  {
   (_strcpy($1,(31976))|0);
   _keyObject($1);
   break;
  }
  case 230:  {
   (_strcpy($1,(31976))|0);
   _keyObjectFunc($1);
   break;
  }
  case 8:  {
   HEAP32[7954] = 28;
   break;
  }
  case 227:  {
   $150 = HEAP32[7954]|0;
   $151 = ($150|0)==(227);
   if ($151) {
    $152 = HEAP8[(31976)>>0]|0;
    $153 = $152 << 24 >> 24;
    $154 = ($153|0)==(38);
    if ($154) {
     (_strcpy($1,1358125)|0);
     _keySub($1);
    }
   }
   break;
  }
  case 29:  {
   (_strcpy($1,1358125)|0);
   _keyUntaian($1);
   break;
  }
  case 228:  {
   (_strcpy($1,(31976))|0);
   _keyArray($1);
   break;
  }
  case 224:  {
   $155 = (_strlen(128380)|0);
   $156 = ($155>>>0)>(0);
   if ($156) {
    HEAP32[$vararg_buffer35>>2] = 128380;
    $vararg_ptr38 = ((($vararg_buffer35)) + 4|0);
    HEAP32[$vararg_ptr38>>2] = (31976);
    (_sprintf($1,15808,$vararg_buffer35)|0);
   } else {
    (_strcpy($1,(31976))|0);
   }
   (_getlex()|0);
   $157 = HEAP32[7954]|0;
   $158 = ($157|0)==(28);
   if ($158) {
    _Error(17010,$vararg_buffer39);
    $0 = 0;
    $290 = $0;
    STACKTOP = sp;return ($290|0);
   }
   $159 = HEAP8[(31976)>>0]|0;
   $160 = $159 << 24 >> 24;
   $161 = ($160|0)==(61);
   if ($161) {
    label = 98;
   } else {
    $162 = HEAP8[(31976)>>0]|0;
    $163 = $162 << 24 >> 24;
    $164 = ($163|0)==(43);
    if ($164) {
     label = 98;
    } else {
     $165 = HEAP8[(31976)>>0]|0;
     $166 = $165 << 24 >> 24;
     $167 = ($166|0)==(45);
     if ($167) {
      label = 98;
     } else {
      _Error(17045,$vararg_buffer41);
     }
    }
   }
   do {
    if ((label|0) == 98) {
     $168 = HEAP8[(31976)>>0]|0;
     $169 = $168 << 24 >> 24;
     $170 = ($169|0)==(43);
     if ($170) {
      $5 = 1;
      break;
     }
     $171 = HEAP8[(31976)>>0]|0;
     $172 = $171 << 24 >> 24;
     $173 = ($172|0)==(45);
     if ($173) {
      $5 = -1;
     }
    }
   } while(0);
   (_getlex()|0);
   $174 = HEAP8[(31976)>>0]|0;
   $175 = $174 << 24 >> 24;
   $176 = ($175|0)==(38);
   $177 = HEAP32[7954]|0;
   $178 = ($177|0)==(227);
   $or$cond6 = $176 & $178;
   if ($or$cond6) {
    _keySub($1);
    break L1;
   }
   $179 = HEAP8[(31976)>>0]|0;
   $180 = $179 << 24 >> 24;
   $181 = ($180|0)==(43);
   $182 = HEAP32[7954]|0;
   $183 = ($182|0)==(227);
   $or$cond8 = $181 & $183;
   if ($or$cond8) {
    $184 = $5;
    $185 = ($184|0)==(1);
    if (!($185)) {
     break L1;
    }
    $186 = HEAP32[8088]|0;
    _memcpy(($$byval_copy68|0),($2|0),3216)|0;
    _ValLabel($19,$1,$186,$$byval_copy68,232);
    _memcpy(($2|0),($19|0),3216)|0;
    $187 = ((($2)) + 84|0);
    $188 = HEAP32[$187>>2]|0;
    $189 = ($188|0)==(0);
    if ($189) {
     $190 = ((($2)) + 88|0);
     $191 = HEAP32[$190>>2]|0;
     $192 = (($191) + 1)|0;
     HEAP32[$190>>2] = $192;
     $193 = HEAP32[8088]|0;
     _memcpy(($$byval_copy69|0),($2|0),3216)|0;
     _ValLabel($20,$1,$193,$$byval_copy69,233);
     break L1;
    }
    $194 = ((($2)) + 84|0);
    $195 = HEAP32[$194>>2]|0;
    $196 = ($195|0)==(1);
    if (!($196)) {
     break L1;
    }
    $197 = ((($2)) + 96|0);
    $198 = +HEAPF64[$197>>3];
    $199 = $198 + 1.0;
    $200 = ((($2)) + 96|0);
    HEAPF64[$200>>3] = $199;
    $201 = HEAP32[8088]|0;
    _memcpy(($$byval_copy70|0),($2|0),3216)|0;
    _ValLabel($21,$1,$201,$$byval_copy70,233);
    break L1;
   }
   $202 = HEAP8[(31976)>>0]|0;
   $203 = $202 << 24 >> 24;
   $204 = ($203|0)==(45);
   $205 = HEAP32[7954]|0;
   $206 = ($205|0)==(227);
   $or$cond10 = $204 & $206;
   if (!($or$cond10)) {
    _memset(($2|0),0,3216)|0;
    $287 = ((($2)) + 12|0);
    (_strcpy($287,$1)|0);
    _ungetlex();
    _expression($28);
    _memcpy(($2|0),($28|0),3216)|0;
    $288 = HEAP32[8088]|0;
    _memcpy(($$byval_copy79|0),($2|0),3216)|0;
    _ValLabel($29,$1,$288,$$byval_copy79,233);
    break L1;
   }
   $207 = $5;
   $208 = ($207|0)==(-1);
   if ($208) {
    $209 = HEAP32[8088]|0;
    _memcpy(($$byval_copy71|0),($2|0),3216)|0;
    _ValLabel($22,$1,$209,$$byval_copy71,232);
    _memcpy(($2|0),($22|0),3216)|0;
    $210 = ((($2)) + 84|0);
    $211 = HEAP32[$210>>2]|0;
    $212 = ($211|0)==(0);
    if ($212) {
     $213 = ((($2)) + 88|0);
     $214 = HEAP32[$213>>2]|0;
     $215 = (($214) + -1)|0;
     HEAP32[$213>>2] = $215;
     $216 = HEAP32[8088]|0;
     _memcpy(($$byval_copy72|0),($2|0),3216)|0;
     _ValLabel($23,$1,$216,$$byval_copy72,233);
     break L1;
    }
    $217 = ((($2)) + 84|0);
    $218 = HEAP32[$217>>2]|0;
    $219 = ($218|0)==(1);
    if (!($219)) {
     break L1;
    }
    $220 = ((($2)) + 96|0);
    $221 = +HEAPF64[$220>>3];
    $222 = $221 + 1.0;
    $223 = ((($2)) + 96|0);
    HEAPF64[$223>>3] = $222;
    $224 = HEAP32[8088]|0;
    _memcpy(($$byval_copy73|0),($2|0),3216)|0;
    _ValLabel($24,$1,$224,$$byval_copy73,233);
    break L1;
   }
   (_getlex()|0);
   $225 = HEAP32[7954]|0;
   $226 = ($225|0)==(223);
   do {
    if ($226) {
     $227 = HEAP32[(31976)>>2]|0;
     $228 = (0 - ($227))|0;
     HEAP32[(31976)>>2] = $228;
     $229 = HEAP32[(31976)>>2]|0;
     $230 = ((($2)) + 88|0);
     HEAP32[$230>>2] = $229;
     $231 = ((($2)) + 84|0);
     HEAP32[$231>>2] = 0;
    } else {
     $232 = HEAP32[7954]|0;
     $233 = ($232|0)==(226);
     if ($233) {
      $234 = +HEAPF64[(31976)>>3];
      $235 = 0.0 - $234;
      HEAPF64[(31976)>>3] = $235;
      $236 = +HEAPF64[(31976)>>3];
      $237 = ((($2)) + 96|0);
      HEAPF64[$237>>3] = $236;
      $238 = ((($2)) + 84|0);
      HEAP32[$238>>2] = 1;
      break;
     }
     $239 = HEAP32[7954]|0;
     $240 = ($239|0)==(228);
     if (!($240)) {
      _Error(17116,$vararg_buffer56);
      break;
     }
     $241 = ((($3)) + 420|0);
     (_strcpy($241,(31976))|0);
     $242 = ((($3)) + 720|0);
     _getArrayName((31976),$242);
     $243 = ((($3)) + 870|0);
     _getArrayIdx((31976),$243);
     $244 = (_strlen(128380)|0);
     $245 = ($244>>>0)>(0);
     if ($245) {
      $246 = ((($3)) + 720|0);
      HEAP32[$vararg_buffer43>>2] = 128380;
      $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
      HEAP32[$vararg_ptr46>>2] = $246;
      (_snprintf($9,300,15808,$vararg_buffer43)|0);
      $247 = ((($3)) + 720|0);
      _memset(($247|0),0,150)|0;
      $248 = ((($3)) + 720|0);
      (_strcpy($248,$9)|0);
     }
     $249 = ((($3)) + 870|0);
     $250 = HEAP8[$249>>0]|0;
     $251 = $250 << 24 >> 24;
     $252 = (_isdigit($251)|0);
     $253 = ($252|0)!=(0);
     $254 = ((($3)) + 870|0);
     do {
      if ($253) {
       $255 = (_atoi($254)|0);
       $7 = $255;
      } else {
       $256 = HEAP32[8088]|0;
       _memcpy(($$byval_copy74|0),($4|0),3216)|0;
       _ValLabel($25,$254,$256,$$byval_copy74,232);
       _memcpy(($4|0),($25|0),3216)|0;
       $257 = ((($4)) + 84|0);
       $258 = HEAP32[$257>>2]|0;
       $259 = ($258|0)==(0);
       if ($259) {
        $260 = ((($4)) + 88|0);
        $261 = HEAP32[$260>>2]|0;
        $7 = $261;
        break;
       } else {
        _Error(16065,$vararg_buffer47);
        break;
       }
      }
     } while(0);
     $262 = ((($3)) + 720|0);
     $263 = HEAP32[8088]|0;
     _memcpy(($$byval_copy75|0),($3|0),3216)|0;
     _ValLabel($26,$262,$263,$$byval_copy75,232);
     _memcpy(($3|0),($26|0),3216)|0;
     $264 = ((($3)) + 870|0);
     $265 = $7;
     HEAP32[$vararg_buffer49>>2] = $265;
     (_snprintf($264,150,16176,$vararg_buffer49)|0);
     $266 = $7;
     $267 = ($266|0)<(0);
     $268 = $7;
     $269 = ($268|0)>(999999000);
     $or$cond12 = $267 | $269;
     if ($or$cond12) {
      _Error(16096,$vararg_buffer52);
     }
     $270 = ((($3)) + 84|0);
     $271 = HEAP32[$270>>2]|0;
     $272 = ($271|0)==(6);
     if ($272) {
      $273 = $7;
      _memcpy(($$byval_copy76|0),($3|0),3216)|0;
      $274 = (_get_int_array($$byval_copy76,$273)|0);
      $275 = (0 - ($274))|0;
      $276 = ((($2)) + 88|0);
      HEAP32[$276>>2] = $275;
      $277 = ((($2)) + 84|0);
      HEAP32[$277>>2] = 0;
      break;
     }
     $278 = ((($3)) + 84|0);
     $279 = HEAP32[$278>>2]|0;
     $280 = ($279|0)==(7);
     if ($280) {
      $281 = $7;
      _memcpy(($$byval_copy77|0),($3|0),3216)|0;
      $282 = (+_get_dbl_array($$byval_copy77,$281));
      $283 = 0.0 - $282;
      $284 = ((($2)) + 96|0);
      HEAPF64[$284>>3] = $283;
      $285 = ((($2)) + 84|0);
      HEAP32[$285>>2] = 1;
      break;
     } else {
      _Error(17116,$vararg_buffer54);
      break;
     }
    }
   } while(0);
   $286 = HEAP32[8088]|0;
   _memcpy(($$byval_copy78|0),($2|0),3216)|0;
   _ValLabel($27,$1,$286,$$byval_copy78,233);
   break;
  }
  default: {
   $289 = HEAP32[7954]|0;
   HEAP32[$vararg_buffer58>>2] = (31976);
   $vararg_ptr61 = ((($vararg_buffer58)) + 4|0);
   HEAP32[$vararg_ptr61>>2] = $289;
   _Error(17146,$vararg_buffer58);
  }
  }
 } while(0);
 $0 = 1;
 $290 = $0;
 STACKTOP = sp;return ($290|0);
}
function _keyTulisarsip() {
 var $$byval_copy = 0, $$byval_copy38 = 0, $$byval_copy39 = 0, $$byval_copy40 = 0, $$byval_copy41 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0.0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0.0, $23 = 0.0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0.0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer19 = 0, $vararg_buffer2 = 0, $vararg_buffer21 = 0, $vararg_buffer23 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer5 = 0, $vararg_buffer8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 41456|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(41456|0);
 $$byval_copy41 = sp + 35496|0;
 $$byval_copy40 = sp + 32280|0;
 $$byval_copy39 = sp + 29064|0;
 $$byval_copy38 = sp + 25848|0;
 $$byval_copy = sp + 22632|0;
 $vararg_buffer35 = sp + 22624|0;
 $vararg_buffer33 = sp + 22616|0;
 $vararg_buffer31 = sp + 22608|0;
 $vararg_buffer28 = sp + 22600|0;
 $vararg_buffer26 = sp + 22592|0;
 $vararg_buffer23 = sp + 22584|0;
 $vararg_buffer21 = sp + 22576|0;
 $vararg_buffer19 = sp + 22568|0;
 $vararg_buffer16 = sp + 22560|0;
 $vararg_buffer14 = sp + 22552|0;
 $vararg_buffer11 = sp + 22544|0;
 $vararg_buffer8 = sp + 22536|0;
 $vararg_buffer5 = sp + 22528|0;
 $vararg_buffer2 = sp + 22520|0;
 $vararg_buffer = sp + 22512|0;
 $1 = sp + 40848|0;
 $2 = sp + 40248|0;
 $3 = sp + 19296|0;
 $4 = sp + 16080|0;
 $5 = sp + 12864|0;
 $6 = sp + 9648|0;
 $10 = sp + 39948|0;
 $11 = sp + 38712|0;
 $12 = sp + 39648|0;
 $13 = sp + 6432|0;
 $14 = sp + 3216|0;
 $15 = sp;
 $0 = 0;
 $7 = 0;
 $8 = 0;
 $9 = 0;
 _memset(($5|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($6|0),0,3216)|0;
 _memset(($10|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 _memset(($1|0),0,600)|0;
 _memset(($11|0),0,920)|0;
 _memset(($12|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 _memset(($2|0),0,600)|0;
 _memset(($1|0),0,600)|0;
 (_strcpy($1,1358125)|0);
 $0 = 0;
 while(1) {
  _memset(($2|0),0,600)|0;
  (_getlex()|0);
  $16 = HEAP32[7954]|0;
  switch ($16|0) {
  case 223:  {
   $17 = $0;
   $18 = ($17|0)>=(1);
   if ($18) {
    $19 = HEAP32[(31976)>>2]|0;
    HEAP32[$vararg_buffer>>2] = $19;
    (_snprintf($2,600,16087,$vararg_buffer)|0);
    (_strcat($1,$2)|0);
   }
   break;
  }
  case 226:  {
   $20 = $0;
   $21 = ($20|0)>=(1);
   if ($21) {
    $22 = +HEAPF64[(31976)>>3];
    HEAPF64[$vararg_buffer2>>3] = $22;
    (_sprintf($2,16221,$vararg_buffer2)|0);
    $23 = +HEAPF64[(31976)>>3];
    HEAPF64[$vararg_buffer5>>3] = $23;
    (_snprintf($2,600,16221,$vararg_buffer5)|0);
    (_strcat($1,$2)|0);
   }
   break;
  }
  case 225:  {
   $24 = $0;
   $25 = ($24|0)>=(1);
   if ($25) {
    (_strcpy($2,(31976))|0);
    (_strcat($1,$2)|0);
   }
   break;
  }
  case 224:  {
   _ungetlex();
   _expression($13);
   _memcpy(($3|0),($13|0),3216)|0;
   $26 = ((($3)) + 84|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0);
   do {
    if ($28) {
     $29 = $0;
     $30 = ($29|0)>=(1);
     if ($30) {
      $31 = ((($3)) + 88|0);
      $32 = HEAP32[$31>>2]|0;
      HEAP32[$vararg_buffer8>>2] = $32;
      (_snprintf($2,600,16087,$vararg_buffer8)|0);
     }
    } else {
     $33 = ((($3)) + 84|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(1);
     if ($35) {
      $36 = $0;
      $37 = ($36|0)>=(1);
      if (!($37)) {
       break;
      }
      $38 = ((($3)) + 96|0);
      $39 = +HEAPF64[$38>>3];
      HEAPF64[$vararg_buffer11>>3] = $39;
      (_snprintf($2,600,16221,$vararg_buffer11)|0);
      break;
     }
     $40 = ((($3)) + 84|0);
     $41 = HEAP32[$40>>2]|0;
     $42 = ($41|0)==(2);
     if ($42) {
      $43 = $0;
      $44 = ($43|0)==(0);
      if (!($44)) {
       break;
      }
      $45 = ((($3)) + 1796|0);
      $46 = HEAP32[$45>>2]|0;
      $8 = $46;
      $47 = ((($3)) + 1800|0);
      $48 = HEAP32[$47>>2]|0;
      $9 = $48;
      break;
     } else {
      $49 = ((($3)) + 84|0);
      $50 = HEAP32[$49>>2]|0;
      $51 = ($50|0)==(3);
      $52 = $0;
      $53 = ($52|0)>=(1);
      $or$cond = $51 & $53;
      if (!($or$cond)) {
       break;
      }
      $54 = ((($3)) + 104|0);
      (_strcpy($2,$54)|0);
      break;
     }
    }
   } while(0);
   (_strcat($1,$2)|0);
   break;
  }
  case 228:  {
   $55 = (_strlen((31976))|0);
   $56 = ($55>>>0)>(0);
   if ($56) {
    $57 = ((($3)) + 420|0);
    (_strcpy($57,(31976))|0);
    $58 = ((($3)) + 720|0);
    _getArrayName((31976),$58);
    $59 = ((($3)) + 870|0);
    _getArrayIdx((31976),$59);
    $60 = ((($3)) + 870|0);
    $61 = HEAP8[$60>>0]|0;
    $62 = $61 << 24 >> 24;
    $63 = (_isdigit($62)|0);
    $64 = ($63|0)!=(0);
    $65 = ((($3)) + 870|0);
    do {
     if ($64) {
      $66 = (_atoi($65)|0);
      $7 = $66;
     } else {
      $67 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($5|0),3216)|0;
      _ValLabel($14,$65,$67,$$byval_copy,232);
      _memcpy(($5|0),($14|0),3216)|0;
      $68 = ((($5)) + 84|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0);
      if ($70) {
       $71 = ((($5)) + 88|0);
       $72 = HEAP32[$71>>2]|0;
       $7 = $72;
       break;
      } else {
       _Error(16065,$vararg_buffer14);
       break;
      }
     }
    } while(0);
    $73 = ((($3)) + 720|0);
    $74 = HEAP32[8088]|0;
    _memcpy(($$byval_copy38|0),($3|0),3216)|0;
    _ValLabel($15,$73,$74,$$byval_copy38,232);
    _memcpy(($3|0),($15|0),3216)|0;
    $75 = ((($3)) + 870|0);
    $76 = $7;
    HEAP32[$vararg_buffer16>>2] = $76;
    (_snprintf($75,150,16087,$vararg_buffer16)|0);
    $77 = $7;
    $78 = ($77|0)<(0);
    if ($78) {
     label = 29;
    } else {
     $79 = $7;
     $80 = ((($3)) + 1020|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = (($81) - 1)|0;
     $83 = ($79|0)>($82|0);
     if ($83) {
      label = 29;
     }
    }
    if ((label|0) == 29) {
     label = 0;
     _Error(16096,$vararg_buffer19);
    }
    $84 = $0;
    $85 = ($84|0)>=(1);
    if ($85) {
     $86 = ((($3)) + 84|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = ($87|0)==(6);
     if ($88) {
      $89 = ((($3)) + 404|0);
      $90 = HEAP32[$89>>2]|0;
      $91 = ($90|0)!=(0);
      if ($91) {
       $92 = ((($3)) + 404|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($93|0)==(0);
       if ($94) {
        _Error(16375,$vararg_buffer21);
       }
       $95 = $7;
       _memcpy(($$byval_copy39|0),($3|0),3216)|0;
       $96 = (_get_int_array($$byval_copy39,$95)|0);
       HEAP32[$vararg_buffer23>>2] = $96;
       (_snprintf($2,600,16176,$vararg_buffer23)|0);
      } else {
       label = 36;
      }
     } else {
      label = 36;
     }
     do {
      if ((label|0) == 36) {
       label = 0;
       $97 = ((($3)) + 84|0);
       $98 = HEAP32[$97>>2]|0;
       $99 = ($98|0)==(7);
       if ($99) {
        $100 = ((($3)) + 408|0);
        $101 = HEAP32[$100>>2]|0;
        $102 = ($101|0)!=(0);
        if ($102) {
         $103 = ((($3)) + 408|0);
         $104 = HEAP32[$103>>2]|0;
         $105 = ($104|0)==(0);
         if ($105) {
          _Error(16375,$vararg_buffer26);
         }
         $106 = $7;
         _memcpy(($$byval_copy40|0),($3|0),3216)|0;
         $107 = (+_get_dbl_array($$byval_copy40,$106));
         HEAPF64[$vararg_buffer28>>3] = $107;
         (_snprintf($2,600,16221,$vararg_buffer28)|0);
         break;
        }
       }
       $108 = ((($3)) + 84|0);
       $109 = HEAP32[$108>>2]|0;
       $110 = ($109|0)==(8);
       if ($110) {
        $111 = ((($3)) + 412|0);
        $112 = HEAP32[$111>>2]|0;
        $113 = ($112|0)!=(0);
        if ($113) {
         $114 = ((($3)) + 412|0);
         $115 = HEAP32[$114>>2]|0;
         $116 = ($115|0)==(0);
         if ($116) {
          _Error(16375,$vararg_buffer31);
         }
         $117 = $7;
         _memcpy(($$byval_copy41|0),($3|0),3216)|0;
         (_get_str_array($$byval_copy41,$117,$2)|0);
         break;
        }
       }
       $118 = ((($3)) + 84|0);
       $119 = HEAP32[$118>>2]|0;
       $120 = ($119|0)==(10);
       if ($120) {
        $121 = $7;
        $122 = ((($3)) + 1024|0);
        $123 = HEAP32[$122>>2]|0;
        $124 = (($123) + ($121<<2)|0);
        $125 = HEAP32[$124>>2]|0;
        (_strcpy($2,$125)|0);
        break;
       } else {
        (_strcpy($2,16408)|0);
        break;
       }
      }
     } while(0);
     (_strcat($1,$2)|0);
    }
   }
   break;
  }
  default: {
   _Error(18616,$vararg_buffer33);
  }
  }
  $126 = $0;
  $127 = (($126) + 1)|0;
  $0 = $127;
  (_getlex()|0);
  $128 = HEAP32[7954]|0;
  $129 = ($128|0)==(227);
  if (!($129)) {
   break;
  }
  $130 = HEAP8[(31976)>>0]|0;
  $131 = $130 << 24 >> 24;
  $132 = ($131|0)==(44);
  if (!($132)) {
   break;
  }
 }
 $133 = $9;
 $134 = ($133|0)==(1);
 if (!($134)) {
  _ungetlex();
  STACKTOP = sp;return;
 }
 $135 = $8;
 HEAP32[$vararg_buffer35>>2] = $1;
 (_fprintf($135,19231,$vararg_buffer35)|0);
 $136 = $8;
 (_fflush($136)|0);
 _ungetlex();
 STACKTOP = sp;return;
}
function _keyTutup() {
 var $$byval_copy = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cond = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 30256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(30256|0);
 $$byval_copy7 = sp + 25752|0;
 $$byval_copy6 = sp + 22536|0;
 $$byval_copy = sp + 19320|0;
 $vararg_buffer4 = sp + 19312|0;
 $vararg_buffer2 = sp + 19304|0;
 $vararg_buffer = sp + 19296|0;
 $0 = sp + 30192|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $4 = sp + 28968|0;
 $5 = sp + 29892|0;
 $6 = sp + 9648|0;
 $7 = sp + 6432|0;
 $8 = sp + 3216|0;
 $9 = sp;
 $1 = 0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 dest=$0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($4|0),0,920)|0;
 _memset(($5|0),0,300)|0;
 (_getlex()|0);
 $10 = HEAP32[7954]|0;
 $cond = ($10|0)==(224);
 do {
  if ($cond) {
   $11 = (_strlen(128380)|0);
   $12 = ($11>>>0)>(0);
   if ($12) {
    HEAP32[$vararg_buffer>>2] = 128380;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = (31976);
    (_sprintf($5,15808,$vararg_buffer)|0);
    $13 = HEAP32[8091]|0;
    _memcpy(($$byval_copy|0),($3|0),3216)|0;
    _ValLabel($6,$5,$13,$$byval_copy,232);
    _memcpy(($2|0),($6|0),3216)|0;
   } else {
    _ungetlex();
    _expression($7);
    _memcpy(($2|0),($7|0),3216)|0;
   }
   $14 = ((($2)) + 84|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)==(4);
   if (!($16)) {
    $17 = ((($2)) + 84|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(5);
    if (!($19)) {
     $24 = ((($2)) + 84|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(2);
     if (!($26)) {
      _Error(18545,$vararg_buffer2);
      break;
     }
     $27 = ((($2)) + 1800|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==(1);
     if (!($29)) {
      break;
     }
     $30 = ((($2)) + 1796|0);
     $31 = HEAP32[$30>>2]|0;
     (_fclose($31)|0);
     $32 = ((($2)) + 1800|0);
     HEAP32[$32>>2] = 0;
     $33 = ((($2)) + 12|0);
     $34 = HEAP32[8088]|0;
     _memcpy(($$byval_copy7|0),($2|0),3216)|0;
     _ValLabel($9,$33,$34,$$byval_copy7,233);
     break;
    }
   }
   $20 = ((($2)) + 1804|0);
   $21 = HEAP32[$20>>2]|0;
   (_close($21)|0);
   $22 = ((($2)) + 12|0);
   $23 = HEAP32[8088]|0;
   _memcpy(($$byval_copy6|0),($2|0),3216)|0;
   _ValLabel($8,$22,$23,$$byval_copy6,233);
  } else {
   _Error(18590,$vararg_buffer4);
  }
 } while(0);
 $35 = ((($3)) + 4|0);
 $36 = HEAP32[$35>>2]|0;
 $37 = ($36|0)!=(0|0);
 if ($37) {
  $38 = ((($3)) + 4|0);
  $39 = HEAP32[$38>>2]|0;
  _free($39);
 }
 $40 = ((($3)) + 8|0);
 $41 = HEAP32[$40>>2]|0;
 $42 = ($41|0)!=(0|0);
 if ($42) {
  $43 = ((($3)) + 8|0);
  $44 = HEAP32[$43>>2]|0;
  _free($44);
 }
 $45 = HEAP32[$3>>2]|0;
 $46 = ($45|0)!=(0|0);
 if (!($46)) {
  STACKTOP = sp;return;
 }
 $47 = HEAP32[$3>>2]|0;
 _free($47);
 STACKTOP = sp;return;
}
function _keyPerintah() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer2 = 0, $vararg_ptr1 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 14176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(14176|0);
 $$byval_copy = sp + 9664|0;
 $vararg_buffer2 = sp + 9656|0;
 $vararg_buffer = sp + 9648|0;
 $0 = sp + 14104|0;
 $1 = sp + 6432|0;
 $2 = sp + 12880|0;
 $3 = sp + 13800|0;
 $4 = sp + 3216|0;
 $5 = sp;
 _memset(($1|0),0,3216)|0;
 dest=$0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($2|0),0,920)|0;
 _memset(($3|0),0,300)|0;
 (_getlex()|0);
 $6 = HEAP32[7954]|0;
 switch ($6|0) {
 case 229:  {
  _checkObjectValidation((31976));
  break;
 }
 case 223: case 224:  {
  break;
 }
 case 225:  {
  (_getlex()|0);
  $10 = HEAP32[64]|0;
  (_fflush($10)|0);
  _ungetlex();
  STACKTOP = sp;return;
  break;
 }
 default: {
  _Error(18516,$vararg_buffer2);
  (_getlex()|0);
  $10 = HEAP32[64]|0;
  (_fflush($10)|0);
  _ungetlex();
  STACKTOP = sp;return;
 }
 }
 $7 = (_strlen(128380)|0);
 $8 = ($7>>>0)>(0);
 if ($8) {
  HEAP32[$vararg_buffer>>2] = 128380;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = (31976);
  (_sprintf($3,15808,$vararg_buffer)|0);
  $9 = HEAP32[8088]|0;
  _memcpy(($$byval_copy|0),($1|0),3216)|0;
  _ValLabel($4,$3,$9,$$byval_copy,232);
  _memcpy(($1|0),($4|0),3216)|0;
 } else {
  _ungetlex();
  _expression($5);
  _memcpy(($1|0),($5|0),3216)|0;
 }
 (_getlex()|0);
 $10 = HEAP32[64]|0;
 (_fflush($10)|0);
 _ungetlex();
 STACKTOP = sp;return;
}
function _keyTunggu() {
 var $$byval_copy = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 9664|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(9664|0);
 $$byval_copy = sp + 6448|0;
 $vararg_buffer1 = sp + 6440|0;
 $vararg_buffer = sp + 6432|0;
 $0 = sp + 3216|0;
 $1 = sp;
 _memset(($0|0),0,3216)|0;
 (_getlex()|0);
 $2 = HEAP32[7954]|0;
 L1: do {
  switch ($2|0) {
  case 223:  {
   $3 = HEAP32[(31976)>>2]|0;
   (_sleep($3)|0);
   break;
  }
  case 224:  {
   _ungetlex();
   $4 = HEAP32[8088]|0;
   _memcpy(($$byval_copy|0),($0|0),3216)|0;
   _ValLabel($1,(31976),$4,$$byval_copy,232);
   _memcpy(($0|0),($1|0),3216)|0;
   $5 = ((($0)) + 84|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = ($6|0)==(0);
   if ($7) {
    $8 = ((($0)) + 88|0);
    $9 = HEAP32[$8>>2]|0;
    (_sleep($9)|0);
    break L1;
   } else {
    _Error(18450,$vararg_buffer);
    break L1;
   }
   break;
  }
  default: {
   _Error(18489,$vararg_buffer1);
  }
  }
 } while(0);
 (_getlex()|0);
 $10 = HEAP32[64]|0;
 (_fflush($10)|0);
 _ungetlex();
 $11 = ((($0)) + 3196|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($12|0)!=(0|0);
 if ($13) {
  $14 = ((($0)) + 3196|0);
  $15 = HEAP32[$14>>2]|0;
  _free($15);
 }
 $16 = ((($0)) + 3200|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = ($17|0)!=(0|0);
 if ($18) {
  $19 = ((($0)) + 3200|0);
  $20 = HEAP32[$19>>2]|0;
  _free($20);
 }
 $21 = ((($0)) + 1796|0);
 $22 = HEAP32[$21>>2]|0;
 $23 = ($22|0)!=(0|0);
 if ($23) {
  $24 = ((($0)) + 1796|0);
  $25 = HEAP32[$24>>2]|0;
  _free($25);
 }
 $26 = ((($0)) + 1024|0);
 $27 = HEAP32[$26>>2]|0;
 $28 = ($27|0)!=(0|0);
 if ($28) {
  $29 = ((($0)) + 1024|0);
  $30 = HEAP32[$29>>2]|0;
  _free($30);
 }
 $31 = ((($0)) + 4|0);
 $32 = HEAP32[$31>>2]|0;
 $33 = ($32|0)!=(0|0);
 if ($33) {
  $34 = ((($0)) + 4|0);
  $35 = HEAP32[$34>>2]|0;
  _free($35);
 }
 $36 = ((($0)) + 8|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ($37|0)!=(0|0);
 if ($38) {
  $39 = ((($0)) + 8|0);
  $40 = HEAP32[$39>>2]|0;
  _free($40);
 }
 $41 = HEAP32[$0>>2]|0;
 $42 = ($41|0)!=(0|0);
 if (!($42)) {
  STACKTOP = sp;return;
 }
 $43 = HEAP32[$0>>2]|0;
 _free($43);
 STACKTOP = sp;return;
}
function _keyHapus() {
 var $$byval_copy = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy33 = 0, $$byval_copy34 = 0, $$byval_copy35 = 0, $$byval_copy36 = 0, $$byval_copy37 = 0, $$byval_copy38 = 0, $$byval_copy39 = 0, $$byval_copy40 = 0, $$byval_copy41 = 0, $0 = 0;
 var $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $154 = 0, $155 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer17 = 0, $vararg_buffer20 = 0;
 var $vararg_buffer22 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 110832|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(110832|0);
 $$byval_copy41 = sp + 102976|0;
 $$byval_copy40 = sp + 99760|0;
 $$byval_copy39 = sp + 96544|0;
 $$byval_copy38 = sp + 93328|0;
 $$byval_copy37 = sp + 90112|0;
 $$byval_copy36 = sp + 86896|0;
 $$byval_copy35 = sp + 83680|0;
 $$byval_copy34 = sp + 80464|0;
 $$byval_copy33 = sp + 77248|0;
 $$byval_copy32 = sp + 74032|0;
 $$byval_copy31 = sp + 70816|0;
 $$byval_copy30 = sp + 67600|0;
 $$byval_copy29 = sp + 108048|0;
 $$byval_copy28 = sp + 64384|0;
 $$byval_copy27 = sp + 61168|0;
 $$byval_copy26 = sp + 57952|0;
 $$byval_copy25 = sp + 54736|0;
 $$byval_copy24 = sp + 51520|0;
 $$byval_copy = sp + 48304|0;
 $vararg_buffer22 = sp + 48296|0;
 $vararg_buffer20 = sp + 48288|0;
 $vararg_buffer17 = sp + 48280|0;
 $vararg_buffer13 = sp + 48272|0;
 $vararg_buffer11 = sp + 48264|0;
 $vararg_buffer7 = sp + 48256|0;
 $vararg_buffer3 = sp + 48248|0;
 $vararg_buffer = sp + 48240|0;
 $0 = sp + 110768|0;
 $1 = sp + 110168|0;
 $2 = sp + 109568|0;
 $5 = sp + 109268|0;
 $6 = sp + 45024|0;
 $7 = sp + 41808|0;
 $8 = sp + 38592|0;
 $10 = sp + 107112|0;
 $11 = sp + 108968|0;
 $12 = sp + 35376|0;
 $13 = sp + 32160|0;
 $14 = sp + 28944|0;
 $15 = sp + 106192|0;
 $16 = sp + 25728|0;
 $17 = sp + 22512|0;
 $18 = sp + 19296|0;
 $19 = sp + 16080|0;
 $20 = sp + 12864|0;
 $21 = sp + 9648|0;
 $22 = sp + 6432|0;
 $23 = sp + 3216|0;
 $24 = sp;
 $3 = 0;
 $4 = 0;
 $9 = 0;
 _memset(($6|0),0,3216)|0;
 _memset(($7|0),0,3216)|0;
 _memset(($8|0),0,3216)|0;
 dest=$0; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($2|0),0,600)|0;
 _memset(($1|0),0,600)|0;
 _memset(($10|0),0,920)|0;
 _memset(($11|0),0,300)|0;
 _memset(($2|0),0,600)|0;
 _memset(($5|0),0,300)|0;
 while(1) {
  (_getlex()|0);
  (_strcpy($2,(31976))|0);
  $25 = HEAP32[7954]|0;
  L3: do {
   switch ($25|0) {
   case 224:  {
    $26 = (_strlen(128380)|0);
    $27 = ($26>>>0)>(0);
    if ($27) {
     HEAP32[$vararg_buffer>>2] = 128380;
     $vararg_ptr2 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr2>>2] = (31976);
     (_sprintf($11,15808,$vararg_buffer)|0);
     $28 = HEAP32[8091]|0;
     _memcpy(($$byval_copy|0),($8|0),3216)|0;
     _ValLabel($12,$11,$28,$$byval_copy,232);
     _memcpy(($6|0),($12|0),3216)|0;
    } else {
     $29 = HEAP32[8088]|0;
     _memcpy(($$byval_copy24|0),($8|0),3216)|0;
     _ValLabel($13,(31976),$29,$$byval_copy24,232);
     _memcpy(($6|0),($13|0),3216)|0;
    }
    $30 = ((($6)) + 84|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = ($31|0)>=(0);
    if ($32) {
     $33 = ((($6)) + 84|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)<=(8);
     if ($35) {
      $36 = ((($6)) + 84|0);
      $37 = HEAP32[$36>>2]|0;
      $38 = ($37|0)==(6);
      L13: do {
       if ($38) {
        $4 = 0;
        while(1) {
         $39 = $4;
         $40 = ((($6)) + 1020|0);
         $41 = HEAP32[$40>>2]|0;
         $42 = ($39|0)<($41|0);
         if (!($42)) {
          break L13;
         }
         $43 = $4;
         _memcpy(($$byval_copy25|0),($6|0),3216)|0;
         _del_int_array($$byval_copy25,$43);
         $44 = $4;
         $45 = (($44) + 1)|0;
         $4 = $45;
        }
       }
      } while(0);
      $46 = ((($6)) + 84|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = ($47|0)==(7);
      L19: do {
       if ($48) {
        $4 = 0;
        while(1) {
         $49 = $4;
         $50 = ((($6)) + 1020|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = ($49|0)<($51|0);
         if (!($52)) {
          break L19;
         }
         $53 = $4;
         _memcpy(($$byval_copy26|0),($6|0),3216)|0;
         _del_dbl_array($$byval_copy26,$53);
         $54 = $4;
         $55 = (($54) + 1)|0;
         $4 = $55;
        }
       }
      } while(0);
      $56 = ((($6)) + 84|0);
      $57 = HEAP32[$56>>2]|0;
      $58 = ($57|0)==(8);
      L25: do {
       if ($58) {
        $4 = 0;
        while(1) {
         $59 = $4;
         $60 = ((($6)) + 1020|0);
         $61 = HEAP32[$60>>2]|0;
         $62 = ($59|0)<($61|0);
         if (!($62)) {
          break L25;
         }
         $63 = $4;
         _memcpy(($$byval_copy27|0),($6|0),3216)|0;
         _del_str_array($$byval_copy27,$63);
         $64 = $4;
         $65 = (($64) + 1)|0;
         $4 = $65;
        }
       }
      } while(0);
      _memset(($8|0),0,3216)|0;
      $66 = HEAP32[8088]|0;
      _memcpy(($$byval_copy28|0),($8|0),3216)|0;
      _ValLabel($14,(31976),$66,$$byval_copy28,233);
      break L3;
     }
    }
    $67 = ((($6)) + 84|0);
    $68 = HEAP32[$67>>2]|0;
    $69 = ($68|0)==(31);
    if (!($69)) {
     $88 = ((($6)) + 12|0);
     (_strcpy($0,$88)|0);
     _memset(($8|0),0,3216)|0;
     $89 = ((($6)) + 84|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ((($8)) + 84|0);
     HEAP32[$91>>2] = $90;
     $92 = HEAP32[8088]|0;
     _memcpy(($$byval_copy32|0),($8|0),3216)|0;
     _ValLabel($18,$0,$92,$$byval_copy32,234);
     break L3;
    }
    _class_params_init();
    $70 = ((($10)) + 12|0);
    $71 = ((($6)) + 2424|0);
    (_strcpy($70,$71)|0);
    _memcpy(($$byval_copy29|0),($10|0),920)|0;
    _class_findParams($$byval_copy29);
    $72 = HEAP32[(71808)>>2]|0;
    $73 = ($72|0)==(0);
    L35: do {
     if (!($73)) {
      $4 = 0;
      while(1) {
       $74 = $4;
       $75 = HEAP32[(71808)>>2]|0;
       $76 = ($74|0)<($75|0);
       if (!($76)) {
        break L35;
       }
       $77 = $4;
       _node_getElement($15,$77);
       _memcpy(($10|0),($15|0),920)|0;
       _memset(($5|0),0,300)|0;
       $78 = ((($10)) + 140|0);
       HEAP32[$vararg_buffer3>>2] = (31976);
       $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
       HEAP32[$vararg_ptr6>>2] = $78;
       (_sprintf($5,15808,$vararg_buffer3)|0);
       $79 = ((($10)) + 140|0);
       $80 = (_strlen($79)|0);
       $81 = ($80>>>0)>=(0);
       if ($81) {
        _memset(($8|0),0,3216)|0;
        $82 = ((($8)) + 84|0);
        HEAP32[$82>>2] = -1;
        $83 = HEAP32[8088]|0;
        _memcpy(($$byval_copy30|0),($8|0),3216)|0;
        _ValLabel($16,$5,$83,$$byval_copy30,233);
       }
       $84 = $4;
       $85 = (($84) + 1)|0;
       $4 = $85;
      }
     }
    } while(0);
    _memset(($8|0),0,3216)|0;
    $86 = ((($8)) + 84|0);
    HEAP32[$86>>2] = -1;
    $87 = HEAP32[8088]|0;
    _memcpy(($$byval_copy31|0),($8|0),3216)|0;
    _ValLabel($17,(31976),$87,$$byval_copy31,233);
    break;
   }
   case 228:  {
    $93 = (_strlen((31976))|0);
    $94 = ($93>>>0)>(0);
    if ($94) {
     $95 = ((($6)) + 420|0);
     (_strcpy($95,(31976))|0);
     $96 = ((($6)) + 720|0);
     _getArrayName((31976),$96);
     $97 = ((($6)) + 870|0);
     _getArrayIdx((31976),$97);
     $98 = ((($6)) + 870|0);
     $99 = HEAP8[$98>>0]|0;
     $100 = $99 << 24 >> 24;
     $101 = (_isdigit($100)|0);
     $102 = ($101|0)!=(0);
     do {
      if ($102) {
       $103 = ((($6)) + 870|0);
       $104 = (_atol($103)|0);
       $9 = $104;
      } else {
       $105 = (_strlen(128380)|0);
       $106 = ($105>>>0)>(0);
       if ($106) {
        $107 = ((($6)) + 870|0);
        HEAP32[$vararg_buffer7>>2] = 128380;
        $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
        HEAP32[$vararg_ptr10>>2] = $107;
        (_sprintf($11,15808,$vararg_buffer7)|0);
        $108 = HEAP32[8088]|0;
        _memcpy(($$byval_copy33|0),($8|0),3216)|0;
        _ValLabel($19,$11,$108,$$byval_copy33,232);
        _memcpy(($8|0),($19|0),3216)|0;
       } else {
        $109 = ((($6)) + 870|0);
        $110 = HEAP32[8088]|0;
        _memcpy(($$byval_copy34|0),($8|0),3216)|0;
        _ValLabel($20,$109,$110,$$byval_copy34,232);
        _memcpy(($8|0),($20|0),3216)|0;
       }
       $111 = ((($8)) + 84|0);
       $112 = HEAP32[$111>>2]|0;
       $113 = ($112|0)==(0);
       if ($113) {
        $114 = ((($8)) + 88|0);
        $115 = HEAP32[$114>>2]|0;
        $9 = $115;
        break;
       } else {
        _Error(16065,$vararg_buffer11);
        break;
       }
      }
     } while(0);
     $116 = (_strlen(128380)|0);
     $117 = ($116>>>0)>(0);
     if ($117) {
      _memset(($11|0),0,300)|0;
      $118 = ((($6)) + 720|0);
      HEAP32[$vararg_buffer13>>2] = 128380;
      $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
      HEAP32[$vararg_ptr16>>2] = $118;
      (_sprintf($11,15808,$vararg_buffer13)|0);
      $119 = HEAP32[8088]|0;
      _memcpy(($$byval_copy35|0),($6|0),3216)|0;
      _ValLabel($21,$11,$119,$$byval_copy35,232);
      _memcpy(($7|0),($21|0),3216)|0;
     } else {
      $120 = ((($6)) + 720|0);
      $121 = HEAP32[8088]|0;
      _memcpy(($$byval_copy36|0),($6|0),3216)|0;
      _ValLabel($22,$120,$121,$$byval_copy36,232);
      _memcpy(($7|0),($22|0),3216)|0;
     }
     $122 = ((($7)) + 870|0);
     $123 = $9;
     HEAP32[$vararg_buffer17>>2] = $123;
     (_sprintf($122,16087,$vararg_buffer17)|0);
     $124 = $9;
     $125 = ($124|0)<(0);
     if ($125) {
      label = 44;
     } else {
      $126 = $9;
      $127 = ((($7)) + 1020|0);
      $128 = HEAP32[$127>>2]|0;
      $129 = (($128) - 1)|0;
      $130 = ($126|0)>($129|0);
      if ($130) {
       label = 44;
      }
     }
     if ((label|0) == 44) {
      label = 0;
      _Error(16096,$vararg_buffer20);
     }
     $131 = ((($7)) + 84|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)==(6);
     if ($133) {
      $134 = $9;
      _memcpy(($$byval_copy37|0),($7|0),3216)|0;
      _del_int_array($$byval_copy37,$134);
      break L3;
     }
     $135 = ((($7)) + 84|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = ($136|0)==(7);
     if ($137) {
      $138 = $9;
      _memcpy(($$byval_copy38|0),($7|0),3216)|0;
      _del_dbl_array($$byval_copy38,$138);
      break L3;
     }
     $139 = ((($7)) + 84|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==(8);
     if ($141) {
      $142 = $9;
      _memcpy(($$byval_copy39|0),($7|0),3216)|0;
      _del_str_array($$byval_copy39,$142);
      break L3;
     }
     $143 = (_strlen(128380)|0);
     $144 = ($143>>>0)>(0);
     if ($144) {
      $145 = HEAP32[8088]|0;
      _memcpy(($$byval_copy40|0),($6|0),3216)|0;
      _ValLabel($23,$11,$145,$$byval_copy40,234);
      break L3;
     } else {
      $146 = ((($6)) + 720|0);
      $147 = HEAP32[8088]|0;
      _memcpy(($$byval_copy41|0),($6|0),3216)|0;
      _ValLabel($24,$146,$147,$$byval_copy41,234);
      break L3;
     }
    }
    break;
   }
   default: {
    _Error(18424,$vararg_buffer22);
   }
   }
  } while(0);
  (_getlex()|0);
  $148 = HEAP32[7954]|0;
  $149 = ($148|0)==(227);
  if (!($149)) {
   label = 58;
   break;
  }
  $150 = HEAP8[(31976)>>0]|0;
  $151 = $150 << 24 >> 24;
  $152 = ($151|0)==(44);
  if (!($152)) {
   label = 58;
   break;
  }
  $153 = HEAP8[(31976)>>0]|0;
  $154 = $153 << 24 >> 24;
  $155 = ($154|0)!=(10);
  if (!($155)) {
   label = 58;
   break;
  }
 }
 if ((label|0) == 58) {
  _ungetlex();
  STACKTOP = sp;return;
 }
}
function _keyPilih() {
 var $$byval_copy = 0, $$byval_copy100 = 0, $$byval_copy101 = 0, $$byval_copy102 = 0, $$byval_copy103 = 0, $$byval_copy104 = 0, $$byval_copy105 = 0, $$byval_copy106 = 0, $$byval_copy107 = 0, $$byval_copy108 = 0, $$byval_copy109 = 0, $$byval_copy110 = 0, $$byval_copy111 = 0, $$byval_copy112 = 0, $$byval_copy113 = 0, $$byval_copy114 = 0, $$byval_copy115 = 0, $$byval_copy116 = 0, $$byval_copy89 = 0, $$byval_copy90 = 0;
 var $$byval_copy91 = 0, $$byval_copy92 = 0, $$byval_copy93 = 0, $$byval_copy94 = 0, $$byval_copy95 = 0, $$byval_copy96 = 0, $$byval_copy97 = 0, $$byval_copy98 = 0, $$byval_copy99 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0.0, $112 = 0, $113 = 0.0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0;
 var $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0.0, $195 = 0, $196 = 0.0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0.0, $285 = 0.0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0.0, $343 = 0, $344 = 0.0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0.0, $422 = 0, $423 = 0.0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0.0, $64 = 0.0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer14 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer2 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer33 = 0, $vararg_buffer35 = 0, $vararg_buffer37 = 0, $vararg_buffer4 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer47 = 0, $vararg_buffer50 = 0, $vararg_buffer52 = 0, $vararg_buffer54 = 0, $vararg_buffer56 = 0, $vararg_buffer58 = 0, $vararg_buffer6 = 0;
 var $vararg_buffer60 = 0, $vararg_buffer62 = 0, $vararg_buffer66 = 0, $vararg_buffer68 = 0, $vararg_buffer70 = 0, $vararg_buffer74 = 0, $vararg_buffer76 = 0, $vararg_buffer8 = 0, $vararg_buffer80 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_buffer87 = 0, $vararg_ptr1 = 0, $vararg_ptr13 = 0, $vararg_ptr21 = 0, $vararg_ptr27 = 0, $vararg_ptr40 = 0, $vararg_ptr46 = 0, $vararg_ptr65 = 0, $vararg_ptr73 = 0;
 var $vararg_ptr79 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 163536|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(163536|0);
 $$byval_copy116 = sp + 157864|0;
 $$byval_copy115 = sp + 154648|0;
 $$byval_copy114 = sp + 151432|0;
 $$byval_copy113 = sp + 148216|0;
 $$byval_copy112 = sp + 145000|0;
 $$byval_copy111 = sp + 141784|0;
 $$byval_copy110 = sp + 138568|0;
 $$byval_copy109 = sp + 135352|0;
 $$byval_copy108 = sp + 132136|0;
 $$byval_copy107 = sp + 128920|0;
 $$byval_copy106 = sp + 125704|0;
 $$byval_copy105 = sp + 122488|0;
 $$byval_copy104 = sp + 162320|0;
 $$byval_copy103 = sp + 119272|0;
 $$byval_copy102 = sp + 116056|0;
 $$byval_copy101 = sp + 112840|0;
 $$byval_copy100 = sp + 109624|0;
 $$byval_copy99 = sp + 106408|0;
 $$byval_copy98 = sp + 103192|0;
 $$byval_copy97 = sp + 99976|0;
 $$byval_copy96 = sp + 96760|0;
 $$byval_copy95 = sp + 93544|0;
 $$byval_copy94 = sp + 90328|0;
 $$byval_copy93 = sp + 87112|0;
 $$byval_copy92 = sp + 83896|0;
 $$byval_copy91 = sp + 80680|0;
 $$byval_copy90 = sp + 77464|0;
 $$byval_copy89 = sp + 74248|0;
 $$byval_copy = sp + 71032|0;
 $vararg_buffer87 = sp + 71024|0;
 $vararg_buffer85 = sp + 71016|0;
 $vararg_buffer83 = sp + 71008|0;
 $vararg_buffer80 = sp + 71000|0;
 $vararg_buffer76 = sp + 70992|0;
 $vararg_buffer74 = sp + 70984|0;
 $vararg_buffer70 = sp + 70976|0;
 $vararg_buffer68 = sp + 70968|0;
 $vararg_buffer66 = sp + 70960|0;
 $vararg_buffer62 = sp + 70952|0;
 $vararg_buffer60 = sp + 70944|0;
 $vararg_buffer58 = sp + 70936|0;
 $vararg_buffer56 = sp + 70928|0;
 $vararg_buffer54 = sp + 70920|0;
 $vararg_buffer52 = sp + 70912|0;
 $vararg_buffer50 = sp + 70904|0;
 $vararg_buffer47 = sp + 70896|0;
 $vararg_buffer43 = sp + 70888|0;
 $vararg_buffer41 = sp + 70880|0;
 $vararg_buffer37 = sp + 70872|0;
 $vararg_buffer35 = sp + 70864|0;
 $vararg_buffer33 = sp + 70856|0;
 $vararg_buffer31 = sp + 70848|0;
 $vararg_buffer28 = sp + 70840|0;
 $vararg_buffer24 = sp + 70832|0;
 $vararg_buffer22 = sp + 70824|0;
 $vararg_buffer18 = sp + 70816|0;
 $vararg_buffer16 = sp + 70808|0;
 $vararg_buffer14 = sp + 70800|0;
 $vararg_buffer10 = sp + 70792|0;
 $vararg_buffer8 = sp + 70784|0;
 $vararg_buffer6 = sp + 70776|0;
 $vararg_buffer4 = sp + 70768|0;
 $vararg_buffer2 = sp + 70760|0;
 $vararg_buffer = sp + 70752|0;
 $0 = sp + 163232|0;
 $1 = sp + 162932|0;
 $2 = sp + 67536|0;
 $3 = sp + 64320|0;
 $4 = sp + 61104|0;
 $5 = sp + 57888|0;
 $8 = sp + 161392|0;
 $9 = sp + 162632|0;
 $10 = sp + 54672|0;
 $11 = sp + 51456|0;
 $12 = sp + 48240|0;
 $13 = sp + 45024|0;
 $14 = sp + 41808|0;
 $15 = sp + 38592|0;
 $16 = sp + 35376|0;
 $17 = sp + 32160|0;
 $18 = sp + 28944|0;
 $19 = sp + 25728|0;
 $20 = sp + 22512|0;
 $21 = sp + 19296|0;
 $22 = sp + 161080|0;
 $23 = sp + 16080|0;
 $24 = sp + 12864|0;
 $25 = sp + 9648|0;
 $26 = sp + 6432|0;
 $27 = sp + 3216|0;
 $28 = sp;
 $6 = 0;
 $7 = 0;
 _memset(($4|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($0|0),0,300)|0;
 _memset(($1|0),0,300)|0;
 _memset(($8|0),0,920)|0;
 _memset(($9|0),0,300)|0;
 (_getlex()|0);
 $29 = HEAP32[7954]|0;
 $30 = ($29|0)==(224);
 if ($30) {
  (_strcpy($0,(31976))|0);
  _memset(($2|0),0,3216)|0;
  $31 = (_strlen(128380)|0);
  $32 = ($31>>>0)>(0);
  if ($32) {
   HEAP32[$vararg_buffer>>2] = 128380;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $0;
   (_snprintf($9,300,15808,$vararg_buffer)|0);
   $33 = HEAP32[8091]|0;
   _memcpy(($$byval_copy|0),($2|0),3216)|0;
   _ValLabel($10,$9,$33,$$byval_copy,232);
   _memcpy(($2|0),($10|0),3216)|0;
  } else {
   $34 = HEAP32[8088]|0;
   _memcpy(($$byval_copy89|0),($2|0),3216)|0;
   _ValLabel($11,$0,$34,$$byval_copy89,232);
   _memcpy(($2|0),($11|0),3216)|0;
  }
  (_getlex()|0);
  $35 = HEAP32[7954]|0;
  $36 = ($35|0)!=(227);
  if ($36) {
   label = 7;
  } else {
   $37 = (_strncmp((31976),17467,1)|0);
   $38 = ($37|0)!=(0);
   if ($38) {
    label = 7;
   }
  }
  if ((label|0) == 7) {
   _Error(18184,$vararg_buffer2);
  }
  L11: while(1) {
   (_getlex()|0);
   $39 = HEAP32[7954]|0;
   $40 = ($39|0)==(33);
   do {
    if ($40) {
     (_getlex()|0);
     $41 = HEAP32[7954]|0;
     $42 = ($41|0)==(223);
     if ($42) {
      $43 = ((($2)) + 84|0);
      $44 = HEAP32[$43>>2]|0;
      $45 = ($44|0)==(0);
      if (!($45)) {
       break;
      }
      $46 = ((($2)) + 88|0);
      $47 = HEAP32[$46>>2]|0;
      $48 = HEAP32[(31976)>>2]|0;
      $49 = ($47|0)==($48|0);
      if ($49) {
       break L11;
      }
      while(1) {
       (_getlex()|0);
       $50 = HEAP32[7954]|0;
       $51 = ($50|0)!=(34);
       $52 = HEAP32[7954]|0;
       $53 = ($52|0)!=(28);
       $54 = $51 ? $53 : 0;
       if (!($54)) {
        break;
       }
      }
      $55 = HEAP32[7954]|0;
      $56 = ($55|0)==(28);
      if (!($56)) {
       break;
      }
      _Error(18225,$vararg_buffer4);
      break;
     }
     $57 = HEAP32[7954]|0;
     $58 = ($57|0)==(226);
     if ($58) {
      $59 = ((($2)) + 84|0);
      $60 = HEAP32[$59>>2]|0;
      $61 = ($60|0)==(1);
      if (!($61)) {
       break;
      }
      $62 = ((($2)) + 96|0);
      $63 = +HEAPF64[$62>>3];
      $64 = +HEAPF64[(31976)>>3];
      $65 = $63 == $64;
      if ($65) {
       break L11;
      }
      while(1) {
       (_getlex()|0);
       $66 = HEAP32[7954]|0;
       $67 = ($66|0)!=(34);
       $68 = HEAP32[7954]|0;
       $69 = ($68|0)!=(28);
       $70 = $67 ? $69 : 0;
       if (!($70)) {
        break;
       }
      }
      $71 = HEAP32[7954]|0;
      $72 = ($71|0)==(28);
      if (!($72)) {
       break;
      }
      _Error(18225,$vararg_buffer6);
      break;
     }
     $73 = HEAP32[7954]|0;
     $74 = ($73|0)==(225);
     if ($74) {
      $75 = ((($2)) + 84|0);
      $76 = HEAP32[$75>>2]|0;
      $77 = ($76|0)==(3);
      if (!($77)) {
       break;
      }
      $78 = ((($2)) + 104|0);
      $79 = (_strcmp((31976),$78)|0);
      $80 = ($79|0)!=(0);
      if (!($80)) {
       break L11;
      }
      while(1) {
       (_getlex()|0);
       $81 = HEAP32[7954]|0;
       $82 = ($81|0)!=(34);
       $83 = HEAP32[7954]|0;
       $84 = ($83|0)!=(28);
       $85 = $82 ? $84 : 0;
       if (!($85)) {
        break;
       }
      }
      $86 = HEAP32[7954]|0;
      $87 = ($86|0)==(28);
      if (!($87)) {
       break;
      }
      _Error(18225,$vararg_buffer8);
      break;
     }
     $88 = HEAP32[7954]|0;
     $89 = ($88|0)==(224);
     if ($89) {
      _memset(($3|0),0,3216)|0;
      _memset(($0|0),0,300)|0;
      (_strcpy($0,(31976))|0);
      $90 = (_strlen(128380)|0);
      $91 = ($90>>>0)>(0);
      if ($91) {
       HEAP32[$vararg_buffer10>>2] = 128380;
       $vararg_ptr13 = ((($vararg_buffer10)) + 4|0);
       HEAP32[$vararg_ptr13>>2] = $0;
       (_snprintf($9,300,15808,$vararg_buffer10)|0);
       $92 = HEAP32[8091]|0;
       _memcpy(($$byval_copy90|0),($3|0),3216)|0;
       _ValLabel($12,$9,$92,$$byval_copy90,232);
       _memcpy(($3|0),($12|0),3216)|0;
      } else {
       $93 = HEAP32[8088]|0;
       _memcpy(($$byval_copy91|0),($3|0),3216)|0;
       _ValLabel($13,$0,$93,$$byval_copy91,232);
       _memcpy(($3|0),($13|0),3216)|0;
      }
      $94 = ((($2)) + 84|0);
      $95 = HEAP32[$94>>2]|0;
      $96 = ((($3)) + 84|0);
      $97 = HEAP32[$96>>2]|0;
      $98 = ($95|0)==($97|0);
      if (!($98)) {
       while(1) {
        (_getlex()|0);
        $129 = HEAP32[7954]|0;
        $130 = ($129|0)!=(34);
        $131 = HEAP32[7954]|0;
        $132 = ($131|0)!=(28);
        $133 = $130 ? $132 : 0;
        if (!($133)) {
         break;
        }
       }
       $134 = HEAP32[7954]|0;
       $135 = ($134|0)==(28);
       if (!($135)) {
        break;
       }
       _Error(18225,$vararg_buffer16);
       break;
      }
      $99 = ((($2)) + 84|0);
      $100 = HEAP32[$99>>2]|0;
      $101 = ($100|0)==(0);
      if ($101) {
       $102 = ((($2)) + 88|0);
       $103 = HEAP32[$102>>2]|0;
       $104 = ((($3)) + 88|0);
       $105 = HEAP32[$104>>2]|0;
       $106 = ($103|0)==($105|0);
       if ($106) {
        break L11;
       }
      }
      $107 = ((($2)) + 84|0);
      $108 = HEAP32[$107>>2]|0;
      $109 = ($108|0)==(1);
      if ($109) {
       $110 = ((($2)) + 96|0);
       $111 = +HEAPF64[$110>>3];
       $112 = ((($3)) + 96|0);
       $113 = +HEAPF64[$112>>3];
       $114 = $111 == $113;
       if ($114) {
        break L11;
       }
      }
      $115 = ((($2)) + 84|0);
      $116 = HEAP32[$115>>2]|0;
      $117 = ($116|0)==(3);
      if ($117) {
       $118 = ((($2)) + 104|0);
       $119 = ((($3)) + 104|0);
       $120 = (_strcmp($118,$119)|0);
       $121 = ($120|0)!=(0);
       if (!($121)) {
        break L11;
       }
      }
      while(1) {
       (_getlex()|0);
       $122 = HEAP32[7954]|0;
       $123 = ($122|0)!=(34);
       $124 = HEAP32[7954]|0;
       $125 = ($124|0)!=(28);
       $126 = $123 ? $125 : 0;
       if (!($126)) {
        break;
       }
      }
      $127 = HEAP32[7954]|0;
      $128 = ($127|0)==(28);
      if (!($128)) {
       break;
      }
      _Error(18225,$vararg_buffer14);
      break;
     }
     $136 = HEAP32[7954]|0;
     $137 = ($136|0)==(228);
     if ($137) {
      $138 = (_strlen((31976))|0);
      $139 = ($138>>>0)>(0);
      if ($139) {
       $140 = ((($5)) + 420|0);
       (_strcpy($140,(31976))|0);
       $141 = ((($5)) + 720|0);
       _getArrayName((31976),$141);
       $142 = ((($5)) + 870|0);
       _getArrayIdx((31976),$142);
       $143 = ((($5)) + 870|0);
       $144 = HEAP8[$143>>0]|0;
       $145 = $144 << 24 >> 24;
       $146 = (_isdigit($145)|0);
       $147 = ($146|0)!=(0);
       do {
        if ($147) {
         $148 = ((($5)) + 870|0);
         $149 = (_atol($148)|0);
         $6 = $149;
        } else {
         $150 = (_strlen(128380)|0);
         $151 = ($150>>>0)>(0);
         if ($151) {
          $152 = ((($5)) + 870|0);
          HEAP32[$vararg_buffer18>>2] = 128380;
          $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
          HEAP32[$vararg_ptr21>>2] = $152;
          (_snprintf($9,300,15808,$vararg_buffer18)|0);
          $153 = HEAP32[8091]|0;
          _memcpy(($$byval_copy92|0),($4|0),3216)|0;
          _ValLabel($14,$9,$153,$$byval_copy92,232);
          _memcpy(($4|0),($14|0),3216)|0;
         } else {
          $154 = ((($5)) + 870|0);
          $155 = HEAP32[8088]|0;
          _memcpy(($$byval_copy93|0),($4|0),3216)|0;
          _ValLabel($15,$154,$155,$$byval_copy93,232);
          _memcpy(($4|0),($15|0),3216)|0;
         }
         $156 = ((($4)) + 84|0);
         $157 = HEAP32[$156>>2]|0;
         $158 = ($157|0)==(0);
         if ($158) {
          $159 = ((($4)) + 88|0);
          $160 = HEAP32[$159>>2]|0;
          $6 = $160;
          break;
         } else {
          _Error(18248,$vararg_buffer22);
          break;
         }
        }
       } while(0);
       $161 = (_strlen(128380)|0);
       $162 = ($161>>>0)>(0);
       if ($162) {
        _memset(($9|0),0,300)|0;
        $163 = ((($5)) + 720|0);
        HEAP32[$vararg_buffer24>>2] = 128380;
        $vararg_ptr27 = ((($vararg_buffer24)) + 4|0);
        HEAP32[$vararg_ptr27>>2] = $163;
        (_snprintf($9,300,15808,$vararg_buffer24)|0);
        $164 = HEAP32[8088]|0;
        _memcpy(($$byval_copy94|0),($5|0),3216)|0;
        _ValLabel($16,$9,$164,$$byval_copy94,232);
        _memcpy(($3|0),($16|0),3216)|0;
       } else {
        $165 = ((($5)) + 720|0);
        $166 = HEAP32[8088]|0;
        _memcpy(($$byval_copy95|0),($5|0),3216)|0;
        _ValLabel($17,$165,$166,$$byval_copy95,232);
        _memcpy(($3|0),($17|0),3216)|0;
       }
       $167 = ((($3)) + 870|0);
       $168 = $6;
       HEAP32[$vararg_buffer28>>2] = $168;
       (_snprintf($167,150,16087,$vararg_buffer28)|0);
       $169 = $6;
       $170 = ($169|0)<(0);
       if ($170) {
        label = 59;
       } else {
        $171 = $6;
        $172 = ((($3)) + 1020|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = (($173) - 1)|0;
        $175 = ($171|0)>($174|0);
        if ($175) {
         label = 59;
        }
       }
       if ((label|0) == 59) {
        label = 0;
        _Error(18273,$vararg_buffer31);
       }
       $176 = ((($2)) + 84|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0);
       if ($178) {
        $179 = ((($3)) + 84|0);
        $180 = HEAP32[$179>>2]|0;
        $181 = ($180|0)==(6);
        if ($181) {
         $182 = ((($2)) + 88|0);
         $183 = HEAP32[$182>>2]|0;
         $184 = $6;
         _memcpy(($$byval_copy96|0),($3|0),3216)|0;
         $185 = (_get_int_array($$byval_copy96,$184)|0);
         $186 = ($183|0)==($185|0);
         if ($186) {
          break L11;
         }
        }
       }
       $187 = ((($2)) + 84|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(1);
       if ($189) {
        $190 = ((($3)) + 84|0);
        $191 = HEAP32[$190>>2]|0;
        $192 = ($191|0)==(7);
        if ($192) {
         $193 = ((($2)) + 96|0);
         $194 = +HEAPF64[$193>>3];
         $195 = $6;
         _memcpy(($$byval_copy97|0),($3|0),3216)|0;
         $196 = (+_get_dbl_array($$byval_copy97,$195));
         $197 = $194 == $196;
         if ($197) {
          break L11;
         }
        }
       }
       $198 = ((($2)) + 84|0);
       $199 = HEAP32[$198>>2]|0;
       $200 = ($199|0)==(3);
       if ($200) {
        $201 = ((($3)) + 84|0);
        $202 = HEAP32[$201>>2]|0;
        $203 = ($202|0)==(8);
        if ($203) {
         break L11;
        }
       }
       while(1) {
        (_getlex()|0);
        $204 = HEAP32[7954]|0;
        $205 = ($204|0)!=(34);
        $206 = HEAP32[7954]|0;
        $207 = ($206|0)!=(28);
        $208 = $205 ? $207 : 0;
        if (!($208)) {
         break;
        }
       }
       $209 = HEAP32[7954]|0;
       $210 = ($209|0)==(28);
       if ($210) {
        _Error(18225,$vararg_buffer33);
       }
      }
     }
    }
   } while(0);
   $211 = (_strncmp((31976),19229,1)|0);
   $212 = ($211|0)!=(0);
   $213 = HEAP32[7954]|0;
   $214 = ($213|0)!=(28);
   $215 = $212 ? $214 : 0;
   if (!($215)) {
    break;
   }
  }
  $216 = HEAP32[7954]|0;
  $217 = ($216|0)==(28);
  if ($217) {
   _Error(16907,$vararg_buffer35);
  }
 } else {
  $218 = HEAP32[7954]|0;
  $219 = ($218|0)==(228);
  if ($219) {
   (_strcpy($0,(31976))|0);
   _memset(($2|0),0,3216)|0;
   $220 = ((($5)) + 420|0);
   (_strcpy($220,(31976))|0);
   $221 = ((($5)) + 720|0);
   _getArrayName((31976),$221);
   $222 = ((($5)) + 870|0);
   _getArrayIdx((31976),$222);
   $223 = ((($5)) + 870|0);
   $224 = HEAP8[$223>>0]|0;
   $225 = $224 << 24 >> 24;
   $226 = (_isdigit($225)|0);
   $227 = ($226|0)!=(0);
   do {
    if ($227) {
     $228 = ((($5)) + 870|0);
     $229 = (_atol($228)|0);
     $6 = $229;
    } else {
     $230 = (_strlen(128380)|0);
     $231 = ($230>>>0)>(0);
     if ($231) {
      $232 = ((($5)) + 870|0);
      HEAP32[$vararg_buffer37>>2] = 128380;
      $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
      HEAP32[$vararg_ptr40>>2] = $232;
      (_snprintf($9,300,15808,$vararg_buffer37)|0);
      $233 = HEAP32[8091]|0;
      _memcpy(($$byval_copy98|0),($4|0),3216)|0;
      _ValLabel($18,$9,$233,$$byval_copy98,232);
      _memcpy(($4|0),($18|0),3216)|0;
     } else {
      $234 = ((($5)) + 870|0);
      $235 = HEAP32[8088]|0;
      _memcpy(($$byval_copy99|0),($4|0),3216)|0;
      _ValLabel($19,$234,$235,$$byval_copy99,232);
      _memcpy(($4|0),($19|0),3216)|0;
     }
     $236 = ((($4)) + 84|0);
     $237 = HEAP32[$236>>2]|0;
     $238 = ($237|0)==(0);
     if ($238) {
      $239 = ((($4)) + 88|0);
      $240 = HEAP32[$239>>2]|0;
      $6 = $240;
      break;
     } else {
      _Error(16065,$vararg_buffer41);
      break;
     }
    }
   } while(0);
   $241 = (_strlen(128380)|0);
   $242 = ($241>>>0)>(0);
   if ($242) {
    $243 = ((($5)) + 720|0);
    HEAP32[$vararg_buffer43>>2] = 128380;
    $vararg_ptr46 = ((($vararg_buffer43)) + 4|0);
    HEAP32[$vararg_ptr46>>2] = $243;
    (_snprintf($9,300,15808,$vararg_buffer43)|0);
    $244 = HEAP32[8091]|0;
    _memcpy(($$byval_copy100|0),($5|0),3216)|0;
    _ValLabel($20,$9,$244,$$byval_copy100,232);
    _memcpy(($2|0),($20|0),3216)|0;
   } else {
    $245 = ((($5)) + 720|0);
    $246 = HEAP32[8088]|0;
    _memcpy(($$byval_copy101|0),($5|0),3216)|0;
    _ValLabel($21,$245,$246,$$byval_copy101,232);
    _memcpy(($2|0),($21|0),3216)|0;
   }
   $247 = ((($2)) + 870|0);
   $248 = $6;
   HEAP32[$vararg_buffer47>>2] = $248;
   (_snprintf($247,150,16087,$vararg_buffer47)|0);
   $249 = $6;
   $250 = ($249|0)<(0);
   if ($250) {
    label = 88;
   } else {
    $251 = $6;
    $252 = ((($2)) + 1020|0);
    $253 = HEAP32[$252>>2]|0;
    $254 = (($253) - 1)|0;
    $255 = ($251|0)>($254|0);
    if ($255) {
     label = 88;
    }
   }
   if ((label|0) == 88) {
    _Error(18314,$vararg_buffer50);
   }
   (_getlex()|0);
   $256 = HEAP32[7954]|0;
   $257 = ($256|0)!=(227);
   if ($257) {
    label = 91;
   } else {
    $258 = (_strncmp((31976),17467,1)|0);
    $259 = ($258|0)!=(0);
    if ($259) {
     label = 91;
    }
   }
   if ((label|0) == 91) {
    _Error(18184,$vararg_buffer52);
   }
   L129: while(1) {
    (_getlex()|0);
    $260 = HEAP32[7954]|0;
    $261 = ($260|0)==(33);
    do {
     if ($261) {
      (_getlex()|0);
      $262 = HEAP32[7954]|0;
      $263 = ($262|0)==(223);
      if ($263) {
       $264 = ((($2)) + 84|0);
       $265 = HEAP32[$264>>2]|0;
       $266 = ($265|0)==(6);
       if (!($266)) {
        break;
       }
       $267 = $6;
       _memcpy(($$byval_copy102|0),($2|0),3216)|0;
       $268 = (_get_int_array($$byval_copy102,$267)|0);
       $269 = HEAP32[(31976)>>2]|0;
       $270 = ($268|0)==($269|0);
       if ($270) {
        break L129;
       }
       while(1) {
        (_getlex()|0);
        $271 = HEAP32[7954]|0;
        $272 = ($271|0)!=(34);
        $273 = HEAP32[7954]|0;
        $274 = ($273|0)!=(28);
        $275 = $272 ? $274 : 0;
        if (!($275)) {
         break;
        }
       }
       $276 = HEAP32[7954]|0;
       $277 = ($276|0)==(28);
       if (!($277)) {
        break;
       }
       _Error(18225,$vararg_buffer54);
       break;
      }
      $278 = HEAP32[7954]|0;
      $279 = ($278|0)==(226);
      if ($279) {
       $280 = ((($2)) + 84|0);
       $281 = HEAP32[$280>>2]|0;
       $282 = ($281|0)==(7);
       if (!($282)) {
        break;
       }
       $283 = $6;
       _memcpy(($$byval_copy103|0),($2|0),3216)|0;
       $284 = (+_get_dbl_array($$byval_copy103,$283));
       $285 = +HEAPF64[(31976)>>3];
       $286 = $284 == $285;
       if ($286) {
        break L129;
       }
       while(1) {
        (_getlex()|0);
        $287 = HEAP32[7954]|0;
        $288 = ($287|0)!=(34);
        $289 = HEAP32[7954]|0;
        $290 = ($289|0)!=(28);
        $291 = $288 ? $290 : 0;
        if (!($291)) {
         break;
        }
       }
       $292 = HEAP32[7954]|0;
       $293 = ($292|0)==(28);
       if (!($293)) {
        break;
       }
       _Error(18225,$vararg_buffer56);
       break;
      }
      $294 = HEAP32[7954]|0;
      $295 = ($294|0)==(225);
      if ($295) {
       $296 = ((($2)) + 84|0);
       $297 = HEAP32[$296>>2]|0;
       $298 = ($297|0)==(8);
       if (!($298)) {
        break;
       }
       _memset(((72140)|0),0,256)|0;
       _memset(((71832)|0),0,300)|0;
       $299 = ((($2)) + 720|0);
       (_strcpy((72140),$299)|0);
       $300 = ((($2)) + 412|0);
       $301 = HEAP32[$300>>2]|0;
       HEAP32[8086] = $301;
       $302 = HEAP32[8086]|0;
       $303 = ($302|0)<(0);
       if ($303) {
        (_printf(16303,$vararg_buffer58)|0);
       } else {
        $304 = HEAP32[8086]|0;
        HEAP32[17956] = $304;
        $305 = $6;
        HEAP32[(71828)>>2] = $305;
        _memcpy(($$byval_copy104|0),(71824|0),312)|0;
        $306 = (_string_findData($$byval_copy104)|0);
        HEAP32[8074] = $306;
        $307 = HEAP32[8074]|0;
        $308 = ($307|0)<(0);
        if (!($308)) {
         $309 = HEAP32[8074]|0;
         _string_getElement($22,$309);
         _memcpy((71824|0),($22|0),312)|0;
        }
       }
       $310 = (_strcmp((31976),(71832))|0);
       $311 = ($310|0)!=(0);
       if (!($311)) {
        break L129;
       }
       while(1) {
        (_getlex()|0);
        $312 = HEAP32[7954]|0;
        $313 = ($312|0)!=(34);
        $314 = HEAP32[7954]|0;
        $315 = ($314|0)!=(28);
        $316 = $313 ? $315 : 0;
        if (!($316)) {
         break;
        }
       }
       $317 = HEAP32[7954]|0;
       $318 = ($317|0)==(28);
       if (!($318)) {
        break;
       }
       _Error(18225,$vararg_buffer60);
       break;
      }
      $319 = HEAP32[7954]|0;
      $320 = ($319|0)==(224);
      if ($320) {
       _memset(($3|0),0,3216)|0;
       _memset(($0|0),0,300)|0;
       (_strcpy($0,(31976))|0);
       $321 = (_strlen(128380)|0);
       $322 = ($321>>>0)>(0);
       if ($322) {
        HEAP32[$vararg_buffer62>>2] = 128380;
        $vararg_ptr65 = ((($vararg_buffer62)) + 4|0);
        HEAP32[$vararg_ptr65>>2] = $0;
        (_sprintf($9,15808,$vararg_buffer62)|0);
        $323 = HEAP32[8088]|0;
        _memcpy(($$byval_copy105|0),($3|0),3216)|0;
        _ValLabel($23,$9,$323,$$byval_copy105,232);
        _memcpy(($3|0),($23|0),3216)|0;
       } else {
        $324 = HEAP32[8088]|0;
        _memcpy(($$byval_copy106|0),($3|0),3216)|0;
        _ValLabel($24,$0,$324,$$byval_copy106,232);
        _memcpy(($3|0),($24|0),3216)|0;
       }
       $325 = ((($2)) + 84|0);
       $326 = HEAP32[$325>>2]|0;
       $327 = ((($3)) + 84|0);
       $328 = HEAP32[$327>>2]|0;
       $329 = ($326|0)==($328|0);
       if (!($329)) {
        while(1) {
         (_getlex()|0);
         $356 = HEAP32[7954]|0;
         $357 = ($356|0)!=(34);
         $358 = HEAP32[7954]|0;
         $359 = ($358|0)!=(28);
         $360 = $357 ? $359 : 0;
         if (!($360)) {
          break;
         }
        }
        $361 = HEAP32[7954]|0;
        $362 = ($361|0)==(28);
        if (!($362)) {
         break;
        }
        _Error(18225,$vararg_buffer68);
        break;
       }
       $330 = ((($2)) + 84|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = ($331|0)==(6);
       if ($332) {
        $333 = $6;
        _memcpy(($$byval_copy107|0),($2|0),3216)|0;
        $334 = (_get_int_array($$byval_copy107,$333)|0);
        $335 = ((($3)) + 88|0);
        $336 = HEAP32[$335>>2]|0;
        $337 = ($334|0)==($336|0);
        if ($337) {
         break L129;
        }
       }
       $338 = ((($2)) + 84|0);
       $339 = HEAP32[$338>>2]|0;
       $340 = ($339|0)==(7);
       if ($340) {
        $341 = $6;
        _memcpy(($$byval_copy108|0),($2|0),3216)|0;
        $342 = (+_get_dbl_array($$byval_copy108,$341));
        $343 = ((($3)) + 96|0);
        $344 = +HEAPF64[$343>>3];
        $345 = $342 == $344;
        if ($345) {
         break L129;
        }
       }
       $346 = ((($2)) + 84|0);
       $347 = HEAP32[$346>>2]|0;
       $348 = ($347|0)==(8);
       if ($348) {
        break L129;
       }
       while(1) {
        (_getlex()|0);
        $349 = HEAP32[7954]|0;
        $350 = ($349|0)!=(34);
        $351 = HEAP32[7954]|0;
        $352 = ($351|0)!=(28);
        $353 = $350 ? $352 : 0;
        if (!($353)) {
         break;
        }
       }
       $354 = HEAP32[7954]|0;
       $355 = ($354|0)==(28);
       if (!($355)) {
        break;
       }
       _Error(18225,$vararg_buffer66);
       break;
      }
      $363 = HEAP32[7954]|0;
      $364 = ($363|0)==(228);
      if ($364) {
       $365 = (_strlen((31976))|0);
       $366 = ($365>>>0)>(0);
       if ($366) {
        $367 = ((($5)) + 420|0);
        (_strcpy($367,(31976))|0);
        $368 = ((($5)) + 720|0);
        _getArrayName((31976),$368);
        $369 = ((($5)) + 870|0);
        _getArrayIdx((31976),$369);
        $370 = ((($5)) + 870|0);
        $371 = HEAP8[$370>>0]|0;
        $372 = $371 << 24 >> 24;
        $373 = (_isdigit($372)|0);
        $374 = ($373|0)!=(0);
        do {
         if ($374) {
          $375 = ((($5)) + 870|0);
          $376 = (_atol($375)|0);
          $7 = $376;
         } else {
          $377 = (_strlen(128380)|0);
          $378 = ($377>>>0)>(0);
          if ($378) {
           $379 = ((($5)) + 870|0);
           HEAP32[$vararg_buffer70>>2] = 128380;
           $vararg_ptr73 = ((($vararg_buffer70)) + 4|0);
           HEAP32[$vararg_ptr73>>2] = $379;
           (_sprintf($9,15808,$vararg_buffer70)|0);
           $380 = HEAP32[8088]|0;
           _memcpy(($$byval_copy109|0),($4|0),3216)|0;
           _ValLabel($25,$9,$380,$$byval_copy109,232);
           _memcpy(($4|0),($25|0),3216)|0;
          } else {
           $381 = ((($5)) + 870|0);
           $382 = HEAP32[8088]|0;
           _memcpy(($$byval_copy110|0),($4|0),3216)|0;
           _ValLabel($26,$381,$382,$$byval_copy110,232);
           _memcpy(($4|0),($26|0),3216)|0;
          }
          $383 = ((($4)) + 84|0);
          $384 = HEAP32[$383>>2]|0;
          $385 = ($384|0)==(0);
          if ($385) {
           $386 = ((($4)) + 88|0);
           $387 = HEAP32[$386>>2]|0;
           $7 = $387;
           break;
          } else {
           _Error(18358,$vararg_buffer74);
           break;
          }
         }
        } while(0);
        $388 = (_strlen(128380)|0);
        $389 = ($388>>>0)>(0);
        if ($389) {
         _memset(($9|0),0,300)|0;
         $390 = ((($5)) + 720|0);
         HEAP32[$vararg_buffer76>>2] = 128380;
         $vararg_ptr79 = ((($vararg_buffer76)) + 4|0);
         HEAP32[$vararg_ptr79>>2] = $390;
         (_sprintf($9,15808,$vararg_buffer76)|0);
         $391 = HEAP32[8088]|0;
         _memcpy(($$byval_copy111|0),($5|0),3216)|0;
         _ValLabel($27,$9,$391,$$byval_copy111,232);
         _memcpy(($3|0),($27|0),3216)|0;
        } else {
         $392 = ((($5)) + 720|0);
         $393 = HEAP32[8088]|0;
         _memcpy(($$byval_copy112|0),($5|0),3216)|0;
         _ValLabel($28,$392,$393,$$byval_copy112,232);
         _memcpy(($3|0),($28|0),3216)|0;
        }
        $394 = ((($3)) + 870|0);
        $395 = $7;
        HEAP32[$vararg_buffer80>>2] = $395;
        (_sprintf($394,16087,$vararg_buffer80)|0);
        $396 = $7;
        $397 = ($396|0)<(0);
        if ($397) {
         label = 146;
        } else {
         $398 = $7;
         $399 = ((($3)) + 1020|0);
         $400 = HEAP32[$399>>2]|0;
         $401 = (($400) - 1)|0;
         $402 = ($398|0)>($401|0);
         if ($402) {
          label = 146;
         }
        }
        if ((label|0) == 146) {
         label = 0;
         _Error(18383,$vararg_buffer83);
        }
        $403 = ((($2)) + 84|0);
        $404 = HEAP32[$403>>2]|0;
        $405 = ($404|0)==(6);
        do {
         if ($405) {
          $406 = ((($3)) + 84|0);
          $407 = HEAP32[$406>>2]|0;
          $408 = ($407|0)==(6);
          if (!($408)) {
           break;
          }
          $409 = $6;
          _memcpy(($$byval_copy113|0),($2|0),3216)|0;
          $410 = (_get_int_array($$byval_copy113,$409)|0);
          $411 = $7;
          _memcpy(($$byval_copy114|0),($3|0),3216)|0;
          $412 = (_get_int_array($$byval_copy114,$411)|0);
          $413 = ($410|0)==($412|0);
          if ($413) {
           break L129;
          }
         }
        } while(0);
        $414 = ((($2)) + 84|0);
        $415 = HEAP32[$414>>2]|0;
        $416 = ($415|0)==(7);
        do {
         if ($416) {
          $417 = ((($3)) + 84|0);
          $418 = HEAP32[$417>>2]|0;
          $419 = ($418|0)==(7);
          if (!($419)) {
           break;
          }
          $420 = $6;
          _memcpy(($$byval_copy115|0),($2|0),3216)|0;
          $421 = (+_get_dbl_array($$byval_copy115,$420));
          $422 = $7;
          _memcpy(($$byval_copy116|0),($3|0),3216)|0;
          $423 = (+_get_dbl_array($$byval_copy116,$422));
          $424 = $421 == $423;
          if ($424) {
           break L129;
          }
         }
        } while(0);
        $425 = ((($2)) + 84|0);
        $426 = HEAP32[$425>>2]|0;
        $427 = ($426|0)==(8);
        if ($427) {
         break L129;
        }
        while(1) {
         (_getlex()|0);
         $428 = HEAP32[7954]|0;
         $429 = ($428|0)!=(34);
         $430 = HEAP32[7954]|0;
         $431 = ($430|0)!=(28);
         $432 = $429 ? $431 : 0;
         if (!($432)) {
          break;
         }
        }
        $433 = HEAP32[7954]|0;
        $434 = ($433|0)==(28);
        if (!($434)) {
         break;
        }
        _Error(18225,$vararg_buffer85);
       }
      }
     }
    } while(0);
    $435 = (_strncmp((31976),19229,1)|0);
    $436 = ($435|0)!=(0);
    $437 = HEAP32[7954]|0;
    $438 = ($437|0)!=(28);
    $439 = $436 ? $438 : 0;
    if (!($439)) {
     break;
    }
   }
   $440 = HEAP32[7954]|0;
   $441 = ($440|0)==(28);
   if ($441) {
    _Error(16907,$vararg_buffer87);
   }
  }
 }
 _memset(($4|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 $442 = ((($2)) + 3196|0);
 $443 = HEAP32[$442>>2]|0;
 $444 = ($443|0)!=(0|0);
 if ($444) {
  $445 = ((($2)) + 3196|0);
  $446 = HEAP32[$445>>2]|0;
  _free($446);
 }
 $447 = ((($2)) + 3200|0);
 $448 = HEAP32[$447>>2]|0;
 $449 = ($448|0)!=(0|0);
 if ($449) {
  $450 = ((($2)) + 3200|0);
  $451 = HEAP32[$450>>2]|0;
  _free($451);
 }
 $452 = ((($2)) + 1796|0);
 $453 = HEAP32[$452>>2]|0;
 $454 = ($453|0)!=(0|0);
 if ($454) {
  $455 = ((($2)) + 1796|0);
  $456 = HEAP32[$455>>2]|0;
  _free($456);
 }
 $457 = ((($2)) + 1024|0);
 $458 = HEAP32[$457>>2]|0;
 $459 = ($458|0)!=(0|0);
 if ($459) {
  $460 = ((($2)) + 1024|0);
  $461 = HEAP32[$460>>2]|0;
  _free($461);
 }
 $462 = ((($2)) + 4|0);
 $463 = HEAP32[$462>>2]|0;
 $464 = ($463|0)!=(0|0);
 if ($464) {
  $465 = ((($2)) + 4|0);
  $466 = HEAP32[$465>>2]|0;
  _free($466);
 }
 $467 = ((($2)) + 8|0);
 $468 = HEAP32[$467>>2]|0;
 $469 = ($468|0)!=(0|0);
 if ($469) {
  $470 = ((($2)) + 8|0);
  $471 = HEAP32[$470>>2]|0;
  _free($471);
 }
 $472 = HEAP32[$2>>2]|0;
 $473 = ($472|0)!=(0|0);
 if ($473) {
  $474 = HEAP32[$2>>2]|0;
  _free($474);
 }
 $475 = ((($4)) + 3196|0);
 $476 = HEAP32[$475>>2]|0;
 $477 = ($476|0)!=(0|0);
 if ($477) {
  $478 = ((($4)) + 3196|0);
  $479 = HEAP32[$478>>2]|0;
  _free($479);
 }
 $480 = ((($4)) + 3200|0);
 $481 = HEAP32[$480>>2]|0;
 $482 = ($481|0)!=(0|0);
 if ($482) {
  $483 = ((($4)) + 3200|0);
  $484 = HEAP32[$483>>2]|0;
  _free($484);
 }
 $485 = ((($4)) + 1796|0);
 $486 = HEAP32[$485>>2]|0;
 $487 = ($486|0)!=(0|0);
 if ($487) {
  $488 = ((($4)) + 1796|0);
  $489 = HEAP32[$488>>2]|0;
  _free($489);
 }
 $490 = ((($4)) + 1024|0);
 $491 = HEAP32[$490>>2]|0;
 $492 = ($491|0)!=(0|0);
 if ($492) {
  $493 = ((($4)) + 1024|0);
  $494 = HEAP32[$493>>2]|0;
  _free($494);
 }
 $495 = ((($4)) + 4|0);
 $496 = HEAP32[$495>>2]|0;
 $497 = ($496|0)!=(0|0);
 if ($497) {
  $498 = ((($4)) + 4|0);
  $499 = HEAP32[$498>>2]|0;
  _free($499);
 }
 $500 = ((($4)) + 8|0);
 $501 = HEAP32[$500>>2]|0;
 $502 = ($501|0)!=(0|0);
 if ($502) {
  $503 = ((($4)) + 8|0);
  $504 = HEAP32[$503>>2]|0;
  _free($504);
 }
 $505 = HEAP32[$4>>2]|0;
 $506 = ($505|0)!=(0|0);
 if (!($506)) {
  STACKTOP = sp;return;
 }
 $507 = HEAP32[$4>>2]|0;
 _free($507);
 STACKTOP = sp;return;
}
function _keyKalau() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer16 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 6464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(6464|0);
 $vararg_buffer16 = sp + 6440|0;
 $vararg_buffer = sp + 6432|0;
 $0 = sp + 3216|0;
 $3 = sp;
 $1 = 0;
 $2 = 0;
 _memset(($0|0),0,3216)|0;
 $4 = HEAP32[18460]|0;
 $5 = (($4) + 1)|0;
 HEAP32[18460] = $5;
 _expression($3);
 _memcpy(($0|0),($3|0),3216)|0;
 $6 = ((($0)) + 88|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = ($7|0)!=(0);
 $9 = HEAP32[18460]|0;
 $10 = (127192 + ($9<<2)|0);
 if ($8) {
  HEAP32[$10>>2] = 1;
  while(1) {
   (_getlex()|0);
   $11 = HEAP32[7954]|0;
   $12 = ($11|0)!=(3);
   $13 = HEAP32[7954]|0;
   $14 = ($13|0)!=(28);
   $15 = $12 ? $14 : 0;
   if (!($15)) {
    break;
   }
  }
  $16 = HEAP32[7954]|0;
  $17 = ($16|0)==(28);
  if ($17) {
   _Error(18167,$vararg_buffer);
  }
 } else {
  HEAP32[$10>>2] = 0;
  while(1) {
   (_getlex()|0);
   $18 = HEAP32[7954]|0;
   $19 = ($18|0)==(2);
   if ($19) {
    $20 = $1;
    $21 = (($20) + 1)|0;
    $1 = $21;
    $22 = HEAP32[18460]|0;
    $23 = (($22) + 1)|0;
    HEAP32[18460] = $23;
   }
   $24 = HEAP32[7954]|0;
   $25 = ($24|0)==(5);
   if ($25) {
    $26 = $2;
    $27 = (($26) + -1)|0;
    $2 = $27;
    $28 = HEAP32[18460]|0;
    $29 = (($28) + -1)|0;
    HEAP32[18460] = $29;
   }
   $30 = $1;
   $31 = $2;
   $32 = ($30|0)!=($31|0);
   $33 = $1;
   $34 = ($33|0)>=(0);
   $or$cond = $32 & $34;
   $35 = $2;
   $36 = ($35|0)>=(0);
   $or$cond3 = $or$cond & $36;
   if ($or$cond3) {
    while(1) {
     (_getlex()|0);
     $37 = HEAP32[7954]|0;
     $38 = ($37|0)!=(5);
     $39 = HEAP32[7954]|0;
     $40 = ($39|0)!=(28);
     $41 = $38 ? $40 : 0;
     if (!($41)) {
      break;
     }
    }
    _ungetlex();
   }
   $42 = HEAP32[7954]|0;
   $43 = ($42|0)!=(5);
   $44 = HEAP32[7954]|0;
   $45 = ($44|0)!=(35);
   $or$cond5 = $43 & $45;
   $46 = HEAP32[7954]|0;
   $47 = ($46|0)!=(36);
   $or$cond7 = $or$cond5 & $47;
   $48 = HEAP32[7954]|0;
   $49 = ($48|0)!=(37);
   $or$cond9 = $or$cond7 & $49;
   $50 = HEAP32[7954]|0;
   $51 = ($50|0)!=(4);
   $or$cond11 = $or$cond9 & $51;
   $52 = HEAP32[7954]|0;
   $53 = ($52|0)!=(38);
   $or$cond13 = $or$cond11 & $53;
   $54 = HEAP32[7954]|0;
   $55 = ($54|0)!=(28);
   $or$cond15 = $or$cond13 & $55;
   if (!($or$cond15)) {
    break;
   }
  }
  $56 = HEAP32[7954]|0;
  $57 = ($56|0)==(28);
  if ($57) {
   _Error(16935,$vararg_buffer16);
  }
 }
 $58 = HEAP32[7954]|0;
 $59 = ($58|0)==(38);
 if (!($59)) {
  STACKTOP = sp;return;
 }
 _ungetlex();
 STACKTOP = sp;return;
}
function _keyLainKalau() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0, $or$cond17 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer18 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 6464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(6464|0);
 $vararg_buffer18 = sp + 6440|0;
 $vararg_buffer = sp + 6432|0;
 $0 = sp + 3216|0;
 $3 = sp;
 $1 = 0;
 $2 = 0;
 _memset(($0|0),0,3216)|0;
 _expression($3);
 _memcpy(($0|0),($3|0),3216)|0;
 $4 = ((($0)) + 88|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)!=(0);
 $7 = HEAP32[18460]|0;
 $8 = (127192 + ($7<<2)|0);
 if ($6) {
  HEAP32[$8>>2] = 1;
  while(1) {
   (_getlex()|0);
   $9 = HEAP32[7954]|0;
   $10 = ($9|0)!=(3);
   $11 = HEAP32[7954]|0;
   $12 = ($11|0)!=(28);
   $13 = $10 ? $12 : 0;
   if (!($13)) {
    break;
   }
  }
  $14 = HEAP32[7954]|0;
  $15 = ($14|0)==(28);
  if ($15) {
   _Error(18146,$vararg_buffer);
  }
 } else {
  HEAP32[$8>>2] = 0;
  while(1) {
   (_getlex()|0);
   $16 = HEAP32[7954]|0;
   $17 = ($16|0)==(2);
   if ($17) {
    $18 = $1;
    $19 = (($18) + 1)|0;
    $1 = $19;
    $20 = HEAP32[18460]|0;
    $21 = (($20) + 1)|0;
    HEAP32[18460] = $21;
   }
   $22 = HEAP32[7954]|0;
   $23 = ($22|0)==(5);
   if ($23) {
    $24 = $2;
    $25 = (($24) + -1)|0;
    $2 = $25;
    $26 = HEAP32[18460]|0;
    $27 = (($26) + -1)|0;
    HEAP32[18460] = $27;
   }
   $28 = $1;
   $29 = $2;
   $30 = ($28|0)!=($29|0);
   $31 = $1;
   $32 = ($31|0)>=(0);
   $or$cond = $30 & $32;
   $33 = $2;
   $34 = ($33|0)>=(0);
   $or$cond3 = $or$cond & $34;
   if ($or$cond3) {
    while(1) {
     (_getlex()|0);
     $35 = HEAP32[7954]|0;
     $36 = ($35|0)!=(5);
     $37 = HEAP32[7954]|0;
     $38 = ($37|0)!=(28);
     $39 = $36 ? $38 : 0;
     if (!($39)) {
      break;
     }
    }
    _ungetlex();
   }
   $40 = HEAP32[7954]|0;
   $41 = ($40|0)!=(5);
   $42 = HEAP32[7954]|0;
   $43 = ($42|0)!=(35);
   $or$cond5 = $41 & $43;
   $44 = HEAP32[7954]|0;
   $45 = ($44|0)!=(36);
   $or$cond7 = $or$cond5 & $45;
   $46 = HEAP32[7954]|0;
   $47 = ($46|0)!=(37);
   $or$cond9 = $or$cond7 & $47;
   $48 = HEAP32[7954]|0;
   $49 = ($48|0)!=(4);
   $or$cond11 = $or$cond9 & $49;
   $50 = HEAP32[7954]|0;
   $51 = ($50|0)!=(38);
   $or$cond13 = $or$cond11 & $51;
   $52 = HEAP32[7954]|0;
   $53 = ($52|0)!=(28);
   $or$cond17 = $or$cond13 & $53;
   if (!($or$cond17)) {
    break;
   }
  }
  $54 = HEAP32[7954]|0;
  $55 = ($54|0)==(28);
  if ($55) {
   _Error(16935,$vararg_buffer18);
  }
 }
 $56 = HEAP32[7954]|0;
 $57 = ($56|0)==(4);
 $58 = HEAP32[7954]|0;
 $59 = ($58|0)==(38);
 $or$cond15 = $57 | $59;
 if (!($or$cond15)) {
  STACKTOP = sp;return;
 }
 _ungetlex();
 STACKTOP = sp;return;
}
function _keyUntuk() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer11 = 0, $vararg_buffer13 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0;
 var $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3280|0);
 $vararg_buffer13 = sp + 3272|0;
 $vararg_buffer11 = sp + 3264|0;
 $vararg_buffer9 = sp + 3256|0;
 $vararg_buffer7 = sp + 3248|0;
 $vararg_buffer5 = sp + 3240|0;
 $vararg_buffer3 = sp + 3232|0;
 $vararg_buffer1 = sp + 3224|0;
 $vararg_buffer = sp + 3216|0;
 $1 = sp;
 $0 = 0;
 _memset(($1|0),0,3216)|0;
 $2 = HEAP32[18461]|0;
 $3 = (($2) + 1)|0;
 HEAP32[18461] = $3;
 $4 = HEAP32[18461]|0;
 $5 = ($4|0)>(1024);
 if ($5) {
  _Error(17823,$vararg_buffer);
 }
 $0 = 0;
 (_getlex()|0);
 $6 = HEAP32[7954]|0;
 $7 = ($6|0)!=(227);
 if ($7) {
  label = 5;
 } else {
  $8 = (_strncmp((31976),16770,1)|0);
  $9 = ($8|0)!=(0);
  if ($9) {
   label = 5;
  }
 }
 if ((label|0) == 5) {
  _Error(17856,$vararg_buffer1);
 }
 $0 = 0;
 $10 = $0;
 $11 = HEAP32[18461]|0;
 $12 = (129325 + (($11*300)|0)|0);
 $13 = (($12) + ($10)|0);
 HEAP8[$13>>0] = 40;
 $14 = $0;
 $15 = (($14) + 1)|0;
 $0 = $15;
 while(1) {
  $16 = HEAP32[18446]|0;
  $17 = HEAP32[(73792)>>2]|0;
  $18 = (($17) + ($16)|0);
  $19 = HEAP8[$18>>0]|0;
  $20 = $0;
  $21 = HEAP32[18461]|0;
  $22 = (129325 + (($21*300)|0)|0);
  $23 = (($22) + ($20)|0);
  HEAP8[$23>>0] = $19;
  $24 = $0;
  $25 = (($24) + 1)|0;
  $0 = $25;
  $26 = HEAP32[18446]|0;
  $27 = (($26) + 1)|0;
  HEAP32[18446] = $27;
  $28 = HEAP32[18446]|0;
  $29 = HEAP32[(73792)>>2]|0;
  $30 = (($29) + ($28)|0);
  $31 = HEAP8[$30>>0]|0;
  $32 = $31 << 24 >> 24;
  $33 = ($32|0)!=(59);
  if (!($33)) {
   break;
  }
 }
 $34 = $0;
 $35 = HEAP32[18461]|0;
 $36 = (129325 + (($35*300)|0)|0);
 $37 = (($36) + ($34)|0);
 HEAP8[$37>>0] = 41;
 $38 = HEAP32[18446]|0;
 $39 = HEAP32[18461]|0;
 $40 = (73944 + ($39<<2)|0);
 HEAP32[$40>>2] = $38;
 $41 = HEAP32[(73788)>>2]|0;
 $42 = HEAP32[18461]|0;
 $43 = (78040 + ($42<<2)|0);
 HEAP32[$43>>2] = $41;
 ;HEAP32[32888>>2]=0|0;
 $44 = HEAP32[(73792)>>2]|0;
 HEAP32[8222] = $44;
 $45 = HEAP32[18461]|0;
 $46 = (129325 + (($45*300)|0)|0);
 HEAP32[(73792)>>2] = $46;
 HEAP32[18446] = 0;
 _InterpreterForInitIncr();
 $47 = HEAP32[8222]|0;
 HEAP32[(73792)>>2] = $47;
 $48 = HEAP32[18461]|0;
 $49 = (73944 + ($48<<2)|0);
 $50 = HEAP32[$49>>2]|0;
 HEAP32[18446] = $50;
 $51 = HEAP32[18461]|0;
 $52 = (78040 + ($51<<2)|0);
 $53 = HEAP32[$52>>2]|0;
 HEAP32[(73788)>>2] = $53;
 (_getlex()|0);
 $54 = HEAP32[7954]|0;
 $55 = ($54|0)!=(227);
 if ($55) {
  label = 10;
 } else {
  $56 = (_strncmp((31976),17821,1)|0);
  $57 = ($56|0)!=(0);
  if ($57) {
   label = 10;
  }
 }
 if ((label|0) == 10) {
  _Error(17884,$vararg_buffer3);
 }
 $0 = 0;
 $58 = $0;
 $59 = HEAP32[18461]|0;
 $60 = (436525 + (($59*300)|0)|0);
 $61 = (($60) + ($58)|0);
 HEAP8[$61>>0] = 0;
 $62 = $0;
 $63 = HEAP32[18461]|0;
 $64 = (436525 + (($63*300)|0)|0);
 $65 = (($64) + ($62)|0);
 HEAP8[$65>>0] = 40;
 $66 = $0;
 $67 = (($66) + 1)|0;
 $0 = $67;
 while(1) {
  $68 = HEAP32[18446]|0;
  $69 = HEAP32[(73792)>>2]|0;
  $70 = (($69) + ($68)|0);
  $71 = HEAP8[$70>>0]|0;
  $72 = $71 << 24 >> 24;
  $73 = ($72|0)!=(32);
  if ($73) {
   $74 = HEAP32[18446]|0;
   $75 = HEAP32[(73792)>>2]|0;
   $76 = (($75) + ($74)|0);
   $77 = HEAP8[$76>>0]|0;
   $78 = $0;
   $79 = HEAP32[18461]|0;
   $80 = (436525 + (($79*300)|0)|0);
   $81 = (($80) + ($78)|0);
   HEAP8[$81>>0] = $77;
   $82 = $0;
   $83 = (($82) + 1)|0;
   $0 = $83;
  }
  $84 = HEAP32[18446]|0;
  $85 = (($84) + 1)|0;
  HEAP32[18446] = $85;
  $86 = HEAP32[18446]|0;
  $87 = HEAP32[(73792)>>2]|0;
  $88 = (($87) + ($86)|0);
  $89 = HEAP8[$88>>0]|0;
  $90 = $89 << 24 >> 24;
  $91 = ($90|0)!=(59);
  if (!($91)) {
   break;
  }
 }
 $92 = $0;
 $93 = HEAP32[18461]|0;
 $94 = (436525 + (($93*300)|0)|0);
 $95 = (($94) + ($92)|0);
 HEAP8[$95>>0] = 41;
 $96 = $0;
 $97 = (($96) + 1)|0;
 $98 = HEAP32[18461]|0;
 $99 = (436525 + (($98*300)|0)|0);
 $100 = (($99) + ($97)|0);
 HEAP8[$100>>0] = 0;
 while(1) {
  (_getlex()|0);
  $101 = (_strncmp((31976),17821,1)|0);
  $102 = ($101|0)!=(0);
  $103 = HEAP32[7954]|0;
  $104 = ($103|0)!=(28);
  $105 = $102 ? $104 : 0;
  if (!($105)) {
   break;
  }
 }
 $106 = HEAP32[7954]|0;
 $107 = ($106|0)==(28);
 if ($107) {
  _Error(17942,$vararg_buffer5);
 }
 $108 = HEAP32[7954]|0;
 $109 = ($108|0)!=(227);
 if ($109) {
  label = 21;
 } else {
  $110 = (_strncmp((31976),17821,1)|0);
  $111 = ($110|0)!=(0);
  if ($111) {
   label = 21;
  }
 }
 if ((label|0) == 21) {
  _Error(17970,$vararg_buffer7);
 }
 $0 = 0;
 $112 = $0;
 $113 = HEAP32[18461]|0;
 $114 = (743725 + (($113*300)|0)|0);
 $115 = (($114) + ($112)|0);
 HEAP8[$115>>0] = 40;
 $116 = $0;
 $117 = (($116) + 1)|0;
 $0 = $117;
 while(1) {
  $118 = HEAP32[18446]|0;
  $119 = HEAP32[(73792)>>2]|0;
  $120 = (($119) + ($118)|0);
  $121 = HEAP8[$120>>0]|0;
  $122 = $0;
  $123 = HEAP32[18461]|0;
  $124 = (743725 + (($123*300)|0)|0);
  $125 = (($124) + ($122)|0);
  HEAP8[$125>>0] = $121;
  $126 = $0;
  $127 = (($126) + 1)|0;
  $0 = $127;
  $128 = HEAP32[18446]|0;
  $129 = (($128) + 1)|0;
  HEAP32[18446] = $129;
  $130 = HEAP32[18446]|0;
  $131 = HEAP32[(73792)>>2]|0;
  $132 = (($131) + ($130)|0);
  $133 = HEAP8[$132>>0]|0;
  $134 = $133 << 24 >> 24;
  $135 = ($134|0)!=(41);
  if (!($135)) {
   break;
  }
 }
 $136 = $0;
 $137 = HEAP32[18461]|0;
 $138 = (743725 + (($137*300)|0)|0);
 $139 = (($138) + ($136)|0);
 HEAP8[$139>>0] = 41;
 while(1) {
  (_getlex()|0);
  $140 = (_strncmp((31976),17819,1)|0);
  $141 = ($140|0)!=(0);
  $142 = HEAP32[7954]|0;
  $143 = ($142|0)!=(28);
  $144 = $141 ? $143 : 0;
  if (!($144)) {
   break;
  }
 }
 $145 = HEAP32[7954]|0;
 $146 = ($145|0)==(28);
 if ($146) {
  _Error(18023,$vararg_buffer9);
 }
 while(1) {
  (_getlex()|0);
  $147 = HEAP32[7954]|0;
  $148 = ($147|0)!=(22);
  $149 = HEAP32[7954]|0;
  $150 = ($149|0)!=(28);
  $151 = $148 ? $150 : 0;
  if (!($151)) {
   break;
  }
 }
 $152 = HEAP32[7954]|0;
 $153 = ($152|0)==(28);
 if ($153) {
  _Error(18051,$vararg_buffer11);
 }
 $154 = HEAP32[18446]|0;
 $155 = HEAP32[18461]|0;
 $156 = (82136 + ($155<<2)|0);
 HEAP32[$156>>2] = $154;
 $157 = HEAP32[(73788)>>2]|0;
 $158 = HEAP32[18461]|0;
 $159 = (86232 + ($158<<2)|0);
 HEAP32[$159>>2] = $157;
 while(1) {
  (_getlex()|0);
  $160 = HEAP32[7954]|0;
  $161 = ($160|0)!=(23);
  $162 = HEAP32[7954]|0;
  $163 = ($162|0)!=(28);
  $164 = $161 ? $163 : 0;
  if (!($164)) {
   break;
  }
 }
 $165 = HEAP32[7954]|0;
 $166 = ($165|0)==(28);
 if ($166) {
  _Error(18069,$vararg_buffer13);
 }
 $167 = HEAP32[18446]|0;
 $168 = HEAP32[18461]|0;
 $169 = (73944 + ($168<<2)|0);
 HEAP32[$169>>2] = $167;
 $170 = HEAP32[(73788)>>2]|0;
 $171 = HEAP32[18461]|0;
 $172 = (78040 + ($171<<2)|0);
 HEAP32[$172>>2] = $170;
 $173 = HEAP32[18461]|0;
 $174 = (90328 + ($173<<2)|0);
 HEAP32[$174>>2] = 0;
 while(1) {
  $175 = HEAP32[18461]|0;
  $176 = (436525 + (($175*300)|0)|0);
  $177 = HEAP32[18461]|0;
  $178 = (82136 + ($177<<2)|0);
  $179 = HEAP32[$178>>2]|0;
  $180 = HEAP32[18461]|0;
  $181 = (86232 + ($180<<2)|0);
  $182 = HEAP32[$181>>2]|0;
  $183 = (_interpretForCondition($176,$179,$182)|0);
  $184 = ($183|0)!=(0);
  if ($184) {
   $185 = HEAP32[18461]|0;
   $186 = (90328 + ($185<<2)|0);
   $187 = HEAP32[$186>>2]|0;
   $188 = ($187|0)!=(0);
   $189 = $188 ^ 1;
   $253 = $189;
  } else {
   $253 = 0;
  }
  $190 = HEAP32[18461]|0;
  if (!($253)) {
   break;
  }
  $191 = (82136 + ($190<<2)|0);
  $192 = HEAP32[$191>>2]|0;
  HEAP32[18446] = $192;
  $193 = HEAP32[18461]|0;
  $194 = (86232 + ($193<<2)|0);
  $195 = HEAP32[$194>>2]|0;
  HEAP32[(73788)>>2] = $195;
  $196 = HEAP32[18461]|0;
  $197 = (73944 + ($196<<2)|0);
  $198 = HEAP32[$197>>2]|0;
  _InterpreterForIncr($198);
  ;HEAP32[32888>>2]=0|0;
  $199 = HEAP32[(73792)>>2]|0;
  HEAP32[8222] = $199;
  $200 = HEAP32[18461]|0;
  $201 = (743725 + (($200*300)|0)|0);
  HEAP32[(73792)>>2] = $201;
  HEAP32[18446] = 0;
  _InterpreterForInitIncr();
  $202 = HEAP32[8222]|0;
  HEAP32[(73792)>>2] = $202;
  $203 = HEAP32[18461]|0;
  $204 = (73944 + ($203<<2)|0);
  $205 = HEAP32[$204>>2]|0;
  HEAP32[18446] = $205;
  $206 = HEAP32[18461]|0;
  $207 = (78040 + ($206<<2)|0);
  $208 = HEAP32[$207>>2]|0;
  HEAP32[(73788)>>2] = $208;
 }
 $209 = (73944 + ($190<<2)|0);
 $210 = HEAP32[$209>>2]|0;
 HEAP32[18446] = $210;
 $211 = HEAP32[18461]|0;
 $212 = (78040 + ($211<<2)|0);
 $213 = HEAP32[$212>>2]|0;
 HEAP32[(73788)>>2] = $213;
 $214 = HEAP32[18461]|0;
 $215 = (90328 + ($214<<2)|0);
 HEAP32[$215>>2] = 1;
 $216 = HEAP32[18461]|0;
 $217 = ($216|0)>(0);
 if ($217) {
  $218 = HEAP32[18461]|0;
  $219 = (($218) + -1)|0;
  HEAP32[18461] = $219;
 }
 $220 = ((($1)) + 3196|0);
 $221 = HEAP32[$220>>2]|0;
 $222 = ($221|0)!=(0|0);
 if ($222) {
  $223 = ((($1)) + 3196|0);
  $224 = HEAP32[$223>>2]|0;
  _free($224);
 }
 $225 = ((($1)) + 3200|0);
 $226 = HEAP32[$225>>2]|0;
 $227 = ($226|0)!=(0|0);
 if ($227) {
  $228 = ((($1)) + 3200|0);
  $229 = HEAP32[$228>>2]|0;
  _free($229);
 }
 $230 = ((($1)) + 1796|0);
 $231 = HEAP32[$230>>2]|0;
 $232 = ($231|0)!=(0|0);
 if ($232) {
  $233 = ((($1)) + 1796|0);
  $234 = HEAP32[$233>>2]|0;
  _free($234);
 }
 $235 = ((($1)) + 1024|0);
 $236 = HEAP32[$235>>2]|0;
 $237 = ($236|0)!=(0|0);
 if ($237) {
  $238 = ((($1)) + 1024|0);
  $239 = HEAP32[$238>>2]|0;
  _free($239);
 }
 $240 = ((($1)) + 4|0);
 $241 = HEAP32[$240>>2]|0;
 $242 = ($241|0)!=(0|0);
 if ($242) {
  $243 = ((($1)) + 4|0);
  $244 = HEAP32[$243>>2]|0;
  _free($244);
 }
 $245 = ((($1)) + 8|0);
 $246 = HEAP32[$245>>2]|0;
 $247 = ($246|0)!=(0|0);
 if ($247) {
  $248 = ((($1)) + 8|0);
  $249 = HEAP32[$248>>2]|0;
  _free($249);
 }
 $250 = HEAP32[$1>>2]|0;
 $251 = ($250|0)!=(0|0);
 if (!($251)) {
  STACKTOP = sp;return;
 }
 $252 = HEAP32[$1>>2]|0;
 _free($252);
 STACKTOP = sp;return;
}
function _keySelagi() {
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, $vararg_buffer5 = 0, $vararg_buffer7 = 0, $vararg_buffer9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 3296|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(3296|0);
 $vararg_buffer9 = sp + 3256|0;
 $vararg_buffer7 = sp + 3248|0;
 $vararg_buffer5 = sp + 3240|0;
 $vararg_buffer3 = sp + 3232|0;
 $vararg_buffer1 = sp + 3224|0;
 $vararg_buffer = sp + 3216|0;
 $6 = sp;
 $0 = 0;
 $1 = 0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $5 = 0;
 _memset(($6|0),0,3216)|0;
 $7 = HEAP32[18462]|0;
 $8 = (($7) + 1)|0;
 HEAP32[18462] = $8;
 $9 = HEAP32[18462]|0;
 $10 = ($9|0)>(1024);
 if ($10) {
  _Error(17741,$vararg_buffer);
 }
 $11 = HEAP32[18446]|0;
 $12 = HEAP32[18462]|0;
 $13 = (94424 + ($12<<2)|0);
 HEAP32[$13>>2] = $11;
 $14 = HEAP32[(73788)>>2]|0;
 $15 = HEAP32[18462]|0;
 $16 = (98520 + ($15<<2)|0);
 HEAP32[$16>>2] = $14;
 $0 = 0;
 while(1) {
  (_getlex()|0);
  $17 = $0;
  $18 = (($17) + 1)|0;
  $0 = $18;
  $19 = HEAP32[7954]|0;
  $20 = ($19|0)!=(19);
  if (!($20)) {
   break;
  }
 }
 $21 = HEAP32[18446]|0;
 $22 = (($21) - 1)|0;
 $23 = HEAP32[18462]|0;
 $24 = (102616 + ($23<<2)|0);
 HEAP32[$24>>2] = $22;
 $25 = HEAP32[18462]|0;
 $26 = (94424 + ($25<<2)|0);
 $27 = HEAP32[$26>>2]|0;
 HEAP32[18446] = $27;
 $28 = HEAP32[18462]|0;
 $29 = (98520 + ($28<<2)|0);
 $30 = HEAP32[$29>>2]|0;
 HEAP32[(73788)>>2] = $30;
 $0 = 0;
 $31 = HEAP32[18446]|0;
 $32 = (($31) + 1)|0;
 HEAP32[18446] = $32;
 while(1) {
  $33 = HEAP32[18446]|0;
  $34 = (($33) + 1)|0;
  HEAP32[18446] = $34;
  $35 = HEAP32[(73792)>>2]|0;
  $36 = (($35) + ($33)|0);
  $37 = HEAP8[$36>>0]|0;
  $38 = $0;
  $39 = HEAP32[18462]|0;
  $40 = (1050925 + (($39*300)|0)|0);
  $41 = (($40) + ($38)|0);
  HEAP8[$41>>0] = $37;
  $42 = $0;
  $43 = (($42) + 1)|0;
  $0 = $43;
  $44 = HEAP32[18446]|0;
  $45 = HEAP32[18462]|0;
  $46 = (102616 + ($45<<2)|0);
  $47 = HEAP32[$46>>2]|0;
  $48 = ($44|0)!=($47|0);
  if (!($48)) {
   break;
  }
 }
 $49 = $0;
 $50 = (($49) - 6)|0;
 $51 = HEAP32[18462]|0;
 $52 = (1050925 + (($51*300)|0)|0);
 $53 = (($52) + ($50)|0);
 HEAP8[$53>>0] = 0;
 $54 = HEAP32[18462]|0;
 $55 = (94424 + ($54<<2)|0);
 $56 = HEAP32[$55>>2]|0;
 HEAP32[18446] = $56;
 $57 = HEAP32[18462]|0;
 $58 = (98520 + ($57<<2)|0);
 $59 = HEAP32[$58>>2]|0;
 HEAP32[(73788)>>2] = $59;
 while(1) {
  (_getlex()|0);
  $60 = HEAP32[7954]|0;
  $61 = ($60|0)!=(19);
  $62 = HEAP32[7954]|0;
  $63 = ($62|0)!=(28);
  $64 = $61 ? $63 : 0;
  if (!($64)) {
   break;
  }
 }
 $65 = HEAP32[7954]|0;
 $66 = ($65|0)==(28);
 if ($66) {
  _Error(17775,$vararg_buffer1);
 }
 $67 = HEAP32[18446]|0;
 $68 = HEAP32[18462]|0;
 $69 = (106712 + ($68<<2)|0);
 HEAP32[$69>>2] = $67;
 $70 = HEAP32[(73788)>>2]|0;
 $71 = HEAP32[18462]|0;
 $72 = (110808 + ($71<<2)|0);
 HEAP32[$72>>2] = $70;
 while(1) {
  (_getlex()|0);
  $73 = HEAP32[7954]|0;
  $74 = ($73|0)==(18);
  if ($74) {
   $75 = $3;
   $76 = (($75) + 1)|0;
   $3 = $76;
  }
  $77 = HEAP32[7954]|0;
  $78 = ($77|0)!=(20);
  $79 = HEAP32[7954]|0;
  $80 = ($79|0)!=(28);
  $81 = $78 ? $80 : 0;
  if (!($81)) {
   break;
  }
 }
 $82 = HEAP32[7954]|0;
 $83 = ($82|0)==(28);
 if ($83) {
  _Error(17796,$vararg_buffer3);
 }
 $84 = $3;
 $85 = ($84|0)>(0);
 L25: do {
  if ($85) {
   $1 = 0;
   while(1) {
    $86 = $1;
    $87 = $3;
    $88 = ($86|0)<($87|0);
    if (!($88)) {
     break L25;
    }
    while(1) {
     (_getlex()|0);
     $89 = HEAP32[7954]|0;
     $90 = ($89|0)==(18);
     if ($90) {
      $91 = $4;
      $92 = (($91) + 1)|0;
      $4 = $92;
     }
     $93 = HEAP32[7954]|0;
     $94 = ($93|0)!=(20);
     $95 = HEAP32[7954]|0;
     $96 = ($95|0)!=(28);
     $97 = $94 ? $96 : 0;
     if (!($97)) {
      break;
     }
    }
    $98 = HEAP32[7954]|0;
    $99 = ($98|0)==(28);
    if ($99) {
     _Error(17796,$vararg_buffer5);
    }
    $100 = $4;
    $101 = ($100|0)>(0);
    L38: do {
     if ($101) {
      $2 = 0;
      while(1) {
       $102 = $2;
       $103 = $4;
       $104 = ($102|0)<($103|0);
       if (!($104)) {
        break L38;
       }
       while(1) {
        (_getlex()|0);
        $105 = HEAP32[7954]|0;
        $106 = ($105|0)==(18);
        if ($106) {
         $107 = $5;
         $108 = (($107) + 1)|0;
         $5 = $108;
        }
        $109 = HEAP32[7954]|0;
        $110 = ($109|0)!=(20);
        $111 = HEAP32[7954]|0;
        $112 = ($111|0)!=(28);
        $113 = $110 ? $112 : 0;
        if (!($113)) {
         break;
        }
       }
       $114 = HEAP32[7954]|0;
       $115 = ($114|0)==(28);
       if ($115) {
        _Error(17796,$vararg_buffer7);
       }
       $116 = $5;
       $117 = ($116|0)>(0);
       L51: do {
        if ($117) {
         $2 = 0;
         while(1) {
          $118 = $2;
          $119 = $4;
          $120 = ($118|0)<($119|0);
          if (!($120)) {
           break L51;
          }
          while(1) {
           (_getlex()|0);
           $121 = HEAP32[7954]|0;
           $122 = ($121|0)!=(20);
           $123 = HEAP32[7954]|0;
           $124 = ($123|0)!=(28);
           $125 = $122 ? $124 : 0;
           if (!($125)) {
            break;
           }
          }
          $126 = HEAP32[7954]|0;
          $127 = ($126|0)==(28);
          if ($127) {
           _Error(17796,$vararg_buffer9);
          }
          $128 = $2;
          $129 = (($128) + 1)|0;
          $2 = $129;
         }
        }
       } while(0);
       $130 = $2;
       $131 = (($130) + 1)|0;
       $2 = $131;
      }
     }
    } while(0);
    $132 = $1;
    $133 = (($132) + 1)|0;
    $1 = $133;
   }
  }
 } while(0);
 $134 = HEAP32[18446]|0;
 $135 = HEAP32[18462]|0;
 $136 = (114904 + ($135<<2)|0);
 HEAP32[$136>>2] = $134;
 $137 = HEAP32[(73788)>>2]|0;
 $138 = HEAP32[18462]|0;
 $139 = (119000 + ($138<<2)|0);
 HEAP32[$139>>2] = $137;
 $140 = HEAP32[18462]|0;
 $141 = (123096 + ($140<<2)|0);
 HEAP32[$141>>2] = 1;
 while(1) {
  $142 = HEAP32[18462]|0;
  $143 = (1050925 + (($142*300)|0)|0);
  $144 = HEAP32[18462]|0;
  $145 = (94424 + ($144<<2)|0);
  $146 = HEAP32[$145>>2]|0;
  $147 = HEAP32[18462]|0;
  $148 = (98520 + ($147<<2)|0);
  $149 = HEAP32[$148>>2]|0;
  $150 = (_interpretWhileCondition($143,$146,$149)|0);
  $151 = ($150|0)!=(0);
  if ($151) {
   $152 = HEAP32[18462]|0;
   $153 = (123096 + ($152<<2)|0);
   $154 = HEAP32[$153>>2]|0;
   $155 = ($154|0)!=(0);
   $180 = $155;
  } else {
   $180 = 0;
  }
  $156 = HEAP32[18462]|0;
  if (!($180)) {
   break;
  }
  $157 = (106712 + ($156<<2)|0);
  $158 = HEAP32[$157>>2]|0;
  HEAP32[18446] = $158;
  $159 = HEAP32[18462]|0;
  $160 = (110808 + ($159<<2)|0);
  $161 = HEAP32[$160>>2]|0;
  HEAP32[(73788)>>2] = $161;
  $162 = HEAP32[18462]|0;
  $163 = (114904 + ($162<<2)|0);
  $164 = HEAP32[$163>>2]|0;
  _InterpreterWhileIncr($164);
  $165 = HEAP32[18462]|0;
  $166 = (114904 + ($165<<2)|0);
  $167 = HEAP32[$166>>2]|0;
  HEAP32[18446] = $167;
  $168 = HEAP32[18462]|0;
  $169 = (119000 + ($168<<2)|0);
  $170 = HEAP32[$169>>2]|0;
  HEAP32[(73788)>>2] = $170;
 }
 $171 = (114904 + ($156<<2)|0);
 $172 = HEAP32[$171>>2]|0;
 HEAP32[18446] = $172;
 $173 = HEAP32[18462]|0;
 $174 = (119000 + ($173<<2)|0);
 $175 = HEAP32[$174>>2]|0;
 HEAP32[(73788)>>2] = $175;
 $176 = HEAP32[18462]|0;
 $177 = (123096 + ($176<<2)|0);
 HEAP32[$177>>2] = 0;
 $178 = HEAP32[18462]|0;
 $179 = (($178) + -1)|0;
 HEAP32[18462] = $179;
 STACKTOP = sp;return;
}
function _keyObject($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 21456|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(21456|0);
 $$byval_copy = sp + 16104|0;
 $vararg_buffer3 = sp + 16096|0;
 $vararg_buffer1 = sp + 16088|0;
 $vararg_buffer = sp + 16080|0;
 $4 = sp + 21152|0;
 $5 = sp + 20852|0;
 $6 = sp + 20552|0;
 $7 = sp + 12864|0;
 $8 = sp + 9648|0;
 $9 = sp + 6432|0;
 $10 = sp + 19320|0;
 $11 = sp + 20252|0;
 $12 = sp + 3216|0;
 $13 = sp;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 _memset(($9|0),0,3216)|0;
 _memset(($7|0),0,3216)|0;
 _memset(($8|0),0,3216)|0;
 _memset(($4|0),0,300)|0;
 _memset(($5|0),0,300)|0;
 _memset(($6|0),0,300)|0;
 _memset(($10|0),0,920)|0;
 _memset(($11|0),0,300)|0;
 $14 = $1;
 (_strcpy($4,$14)|0);
 $15 = $1;
 $16 = (_getObjectName($15)|0);
 (_strcpy($5,$16)|0);
 $17 = $1;
 $18 = (_getObjectParam($17)|0);
 (_strcpy($6,$18)|0);
 $19 = $1;
 _checkObjectValidation($19);
 (_getlex()|0);
 $20 = HEAP32[7954]|0;
 $21 = ($20|0)==(28);
 if ($21) {
  _Error(19234,$vararg_buffer);
 }
 $22 = HEAP8[(31976)>>0]|0;
 $23 = $22 << 24 >> 24;
 $24 = ($23|0)!=(61);
 if ($24) {
  _Error(17721,$vararg_buffer1);
 }
 (_getlex()|0);
 $25 = HEAP32[7954]|0;
 $26 = ($25|0)==(28);
 if ($26) {
  _Error(19234,$vararg_buffer3);
 }
 _ungetlex();
 _expression($12);
 _memcpy(($7|0),($12|0),3216)|0;
 $27 = ((($7)) + 12|0);
 (_strcpy($27,$4)|0);
 $28 = ((($7)) + 2424|0);
 (_strcpy($28,$5)|0);
 $29 = ((($7)) + 2574|0);
 (_strcpy($29,$6)|0);
 $30 = ((($7)) + 3184|0);
 HEAP32[$30>>2] = 1;
 $31 = HEAP32[8091]|0;
 _memcpy(($$byval_copy|0),($7|0),3216)|0;
 _ValLabel($13,$4,$31,$$byval_copy,233);
 STACKTOP = sp;return;
}
function _keyObjectFunc($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy41 = 0, $$byval_copy42 = 0, $$byval_copy43 = 0, $$byval_copy44 = 0, $$byval_copy45 = 0, $$byval_copy46 = 0, $$byval_copy47 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0;
 var $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0;
 var $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0;
 var $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0;
 var $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond7 = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer36 = 0, $vararg_buffer39 = 0, $vararg_buffer9 = 0;
 var $vararg_ptr12 = 0, $vararg_ptr13 = 0, $vararg_ptr14 = 0, $vararg_ptr18 = 0, $vararg_ptr29 = 0, $vararg_ptr35 = 0, $vararg_ptr8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 65584|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(65584|0);
 $$byval_copy47 = sp + 54768|0;
 $$byval_copy46 = sp + 51552|0;
 $$byval_copy45 = sp + 48336|0;
 $$byval_copy44 = sp + 45120|0;
 $$byval_copy43 = sp + 41904|0;
 $$byval_copy42 = sp + 38688|0;
 $$byval_copy41 = sp + 35472|0;
 $$byval_copy = sp + 59848|0;
 $vararg_buffer39 = sp + 35464|0;
 $vararg_buffer36 = sp + 35456|0;
 $vararg_buffer32 = sp + 35448|0;
 $vararg_buffer30 = sp + 35440|0;
 $vararg_buffer26 = sp + 35432|0;
 $vararg_buffer24 = sp + 35424|0;
 $vararg_buffer21 = sp + 35416|0;
 $vararg_buffer19 = sp + 35408|0;
 $vararg_buffer15 = sp + 35400|0;
 $vararg_buffer9 = sp + 35384|0;
 $vararg_buffer = sp + 35376|0;
 $4 = sp + 65272|0;
 $5 = sp + 64972|0;
 $6 = sp + 64672|0;
 $7 = sp + 64372|0;
 $8 = sp + 64072|0;
 $9 = sp + 63772|0;
 $10 = sp + 63472|0;
 $11 = sp + 63172|0;
 $12 = sp + 32160|0;
 $13 = sp + 28944|0;
 $14 = sp + 25728|0;
 $15 = sp + 58912|0;
 $16 = sp + 62872|0;
 $18 = sp + 62272|0;
 $19 = sp + 61972|0;
 $20 = sp + 61672|0;
 $21 = sp + 61072|0;
 $22 = sp + 60768|0;
 $23 = sp + 57984|0;
 $24 = sp + 22512|0;
 $25 = sp + 19296|0;
 $26 = sp + 16080|0;
 $27 = sp + 12864|0;
 $28 = sp + 9648|0;
 $29 = sp + 6432|0;
 $30 = sp + 3216|0;
 $31 = sp;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 _memset(($14|0),0,3216)|0;
 _memset(($12|0),0,3216)|0;
 _memset(($13|0),0,3216)|0;
 _memset(($4|0),0,300)|0;
 _memset(($5|0),0,300)|0;
 _memset(($6|0),0,300)|0;
 _memset(($7|0),0,300)|0;
 _memset(($8|0),0,300)|0;
 _memset(($9|0),0,300)|0;
 _memset(($10|0),0,300)|0;
 _memset(($11|0),0,300)|0;
 _memset(($15|0),0,920)|0;
 _memset(($18|0),0,600)|0;
 _memset(($19|0),0,300)|0;
 _memset(($20|0),0,300)|0;
 _memset(($21|0),0,600)|0;
 _memset(($22|0),0,300)|0;
 _memset(($16|0),0,300)|0;
 $17 = 0;
 $32 = $1;
 (_strcpy($4,$32)|0);
 $33 = $1;
 $34 = (_getObjectName($33)|0);
 (_strcpy($5,$34)|0);
 _memset((128380|0),0,300)|0;
 (_strcpy(128380,$5)|0);
 $35 = $1;
 $36 = (_getObjectFunction($35)|0);
 (_strcpy($6,$36)|0);
 $37 = $1;
 $38 = (_getObjectFunctionParam($37)|0);
 (_strcpy($7,$38)|0);
 $39 = $1;
 _checkObjectFuncValidation($39);
 $40 = (_strcmp($6,16525)|0);
 $41 = ($40|0)==(0);
 if ($41) {
  label = 3;
 } else {
  $42 = (_strcmp($6,16532)|0);
  $43 = ($42|0)==(0);
  if ($43) {
   label = 3;
  }
 }
 if ((label|0) == 3) {
  _class_params_init();
  $44 = ((($15)) + 12|0);
  $45 = ((($14)) + 2424|0);
  (_strcpy($44,$45)|0);
  _memcpy(($$byval_copy|0),($15|0),920)|0;
  _class_findParams($$byval_copy);
  $46 = HEAP32[(71808)>>2]|0;
  $47 = ($46|0)==(0);
  L5: do {
   if (!($47)) {
    $3 = 0;
    while(1) {
     $48 = $3;
     $49 = HEAP32[(71808)>>2]|0;
     $50 = ($48|0)<($49|0);
     if (!($50)) {
      break L5;
     }
     $51 = $3;
     _node_getElement($23,$51);
     _memcpy(($15|0),($23|0),920)|0;
     _memset(($9|0),0,300)|0;
     $52 = ((($15)) + 140|0);
     HEAP32[$vararg_buffer>>2] = $5;
     $vararg_ptr8 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr8>>2] = $52;
     (_sprintf($9,15808,$vararg_buffer)|0);
     (_strcpy($8,$9)|0);
     $53 = ((($15)) + 268|0);
     $54 = (_strlen($53)|0);
     $55 = ($54>>>0)>(0);
     if ($55) {
      $56 = ((($15)) + 268|0);
      $57 = (_split($56,16539)|0);
      $17 = $57;
      $58 = ((($15)) + 912|0);
      $59 = HEAP32[$58>>2]|0;
      $60 = ((($12)) + 3192|0);
      HEAP32[$60>>2] = $59;
      $61 = HEAP32[8088]|0;
      _memcpy(($$byval_copy41|0),($12|0),3216)|0;
      _ValLabel($24,$8,$61,$$byval_copy41,233);
      _memset(($9|0),0,300)|0;
      $62 = $17;
      $63 = ((($62)) + 4|0);
      $64 = HEAP32[$63>>2]|0;
      $65 = HEAP8[$64>>0]|0;
      $66 = $65 << 24 >> 24;
      $67 = (_isalpha($66)|0);
      $68 = ($67|0)!=(0);
      if ($68) {
       $69 = $17;
       $70 = ((($69)) + 4|0);
       $71 = HEAP32[$70>>2]|0;
       $72 = HEAP8[$71>>0]|0;
       $73 = $72 << 24 >> 24;
       $74 = (_isspace($73)|0);
       $75 = ($74|0)!=(0);
       if ($75) {
        label = 10;
       } else {
        $76 = $17;
        $77 = HEAP32[$76>>2]|0;
        $78 = $17;
        $79 = ((($78)) + 4|0);
        $80 = HEAP32[$79>>2]|0;
        HEAP32[$vararg_buffer9>>2] = $5;
        $vararg_ptr12 = ((($vararg_buffer9)) + 4|0);
        HEAP32[$vararg_ptr12>>2] = $77;
        $vararg_ptr13 = ((($vararg_buffer9)) + 8|0);
        HEAP32[$vararg_ptr13>>2] = $5;
        $vararg_ptr14 = ((($vararg_buffer9)) + 12|0);
        HEAP32[$vararg_ptr14>>2] = $80;
        (_sprintf($9,16541,$vararg_buffer9)|0);
       }
      } else {
       label = 10;
      }
      if ((label|0) == 10) {
       label = 0;
       $81 = ((($15)) + 268|0);
       HEAP32[$vararg_buffer15>>2] = $5;
       $vararg_ptr18 = ((($vararg_buffer15)) + 4|0);
       HEAP32[$vararg_ptr18>>2] = $81;
       (_sprintf($9,15808,$vararg_buffer15)|0);
      }
      $82 = $17;
      _split_free($82);
      ;HEAP32[32884>>2]=0|0;
      $83 = HEAP32[18446]|0;
      HEAP32[18442] = $83;
      $84 = HEAP32[(73788)>>2]|0;
      HEAP32[18443] = $84;
      $85 = HEAP32[(73792)>>2]|0;
      HEAP32[8221] = $85;
      HEAP32[(73792)>>2] = $9;
      HEAP32[18446] = 0;
      HEAP32[(73788)>>2] = 0;
      (_getlex()|0);
      (_getlex()|0);
      (_getlex()|0);
      $86 = HEAP32[7954]|0;
      $87 = ($86|0)==(28);
      if ($87) {
       _Error(19234,$vararg_buffer19);
      }
      _ungetlex();
      _expression($25);
      _memcpy(($12|0),($25|0),3216)|0;
      $88 = HEAP32[8088]|0;
      _memcpy(($$byval_copy42|0),($12|0),3216)|0;
      _ValLabel($26,$8,$88,$$byval_copy42,233);
      $89 = HEAP32[8221]|0;
      HEAP32[(73792)>>2] = $89;
      $90 = HEAP32[18442]|0;
      HEAP32[18446] = $90;
      $91 = HEAP32[18443]|0;
      HEAP32[(73788)>>2] = $91;
     } else {
      $92 = ((($15)) + 912|0);
      $93 = HEAP32[$92>>2]|0;
      $94 = ((($12)) + 3192|0);
      HEAP32[$94>>2] = $93;
      $95 = ((($12)) + 84|0);
      HEAP32[$95>>2] = 0;
      $96 = HEAP32[8088]|0;
      _memcpy(($$byval_copy43|0),($12|0),3216)|0;
      _ValLabel($27,$9,$96,$$byval_copy43,233);
     }
     $97 = $3;
     $98 = (($97) + 1)|0;
     $3 = $98;
    }
   }
  } while(0);
  _memset(($12|0),0,3216)|0;
  $99 = HEAP32[8091]|0;
  _memcpy(($$byval_copy44|0),($12|0),3216)|0;
  _ValLabel($28,$5,$99,$$byval_copy44,232);
  _memcpy(($12|0),($28|0),3216)|0;
  $100 = ((($12)) + 3188|0);
  HEAP32[$100>>2] = 1;
  $101 = HEAP32[8091]|0;
  _memcpy(($$byval_copy45|0),($12|0),3216)|0;
  _ValLabel($29,$5,$101,$$byval_copy45,233);
 }
 $102 = HEAP32[8091]|0;
 _memcpy(($$byval_copy46|0),($14|0),3216)|0;
 _ValLabel($30,$5,$102,$$byval_copy46,232);
 _memcpy(($14|0),($30|0),3216)|0;
 $103 = ((($14)) + 3188|0);
 $104 = HEAP32[$103>>2]|0;
 $105 = ($104|0)==(0);
 if ($105) {
  _memset(($11|0),0,300)|0;
  HEAP32[$vararg_buffer21>>2] = $5;
  (_sprintf($11,16555,$vararg_buffer21)|0);
  _Error($11,$vararg_buffer24);
 }
 $106 = ((($14)) + 2424|0);
 HEAP32[$vararg_buffer26>>2] = $106;
 $vararg_ptr29 = ((($vararg_buffer26)) + 4|0);
 HEAP32[$vararg_ptr29>>2] = $6;
 (_sprintf($10,15808,$vararg_buffer26)|0);
 $107 = HEAP32[8091]|0;
 _memcpy(($$byval_copy47|0),($14|0),3216)|0;
 _ValLabel($31,$10,$107,$$byval_copy47,232);
 _memcpy(($14|0),($31|0),3216)|0;
 $108 = ((($14)) + 84|0);
 $109 = HEAP32[$108>>2]|0;
 $110 = ($109|0)!=(32);
 if ($110) {
  _Error(16583,$vararg_buffer30);
 }
 (_strcpy($19,$7)|0);
 (_strcpy($20,1358125)|0);
 $111 = ((($14)) + 1182|0);
 $112 = (_strlen($111)|0);
 $113 = ($112>>>0)>(0);
 if ($113) {
  $114 = ((($14)) + 1182|0);
  $115 = (_split($114,17719)|0);
  $17 = $115;
  $2 = 0;
  while(1) {
   $116 = $2;
   $117 = $17;
   $118 = (($117) + ($116<<2)|0);
   $119 = HEAP32[$118>>2]|0;
   $120 = ($119|0)!=(0|0);
   if (!($120)) {
    break;
   }
   $121 = $2;
   $122 = $17;
   $123 = (($122) + ($121<<2)|0);
   $124 = HEAP32[$123>>2]|0;
   $125 = (_strlen($124)|0);
   $126 = ($125>>>0)>(0);
   if (!($126)) {
    break;
   }
   $127 = $2;
   $128 = (($127) + 1)|0;
   $2 = $128;
  }
  $3 = 0;
  while(1) {
   $129 = $3;
   $130 = $2;
   $131 = ($129|0)<($130|0);
   if (!($131)) {
    break;
   }
   _memset(($22|0),0,300)|0;
   $132 = $3;
   $133 = $17;
   $134 = (($133) + ($132<<2)|0);
   $135 = HEAP32[$134>>2]|0;
   HEAP32[$vararg_buffer32>>2] = $5;
   $vararg_ptr35 = ((($vararg_buffer32)) + 4|0);
   HEAP32[$vararg_ptr35>>2] = $135;
   (_sprintf($22,15808,$vararg_buffer32)|0);
   (_strcat($20,$22)|0);
   $136 = $3;
   $137 = $2;
   $138 = (($137) - 1)|0;
   $139 = ($136|0)!=($138|0);
   if ($139) {
    (_strcat($20,17719)|0);
   }
   $140 = $3;
   $141 = (($140) + 1)|0;
   $3 = $141;
  }
  $142 = $17;
  _split_free($142);
 }
 $143 = (_checkParamNum($19,$20)|0);
 $144 = ($143|0)!=(0);
 if ($144) {
  _memset(($11|0),0,300)|0;
  HEAP32[$vararg_buffer36>>2] = $5;
  (_sprintf($11,16624,$vararg_buffer36)|0);
  _Error($11,$vararg_buffer39);
 }
 _subtituteParam($18,$19,$20);
 $145 = (_strlen($18)|0);
 $146 = ($145>>>0)>(0);
 if ($146) {
  (_strcpy($21,$18)|0);
 } else {
  (_strcpy($21,1358125)|0);
 }
 $147 = HEAP32[18446]|0;
 $148 = HEAP32[8091]|0;
 $149 = (73256 + ($148<<2)|0);
 HEAP32[$149>>2] = $147;
 ;HEAP32[32880>>2]=0|0;
 $150 = HEAP32[(73792)>>2]|0;
 HEAP32[8221] = $150;
 HEAP32[(73792)>>2] = $21;
 HEAP32[18446] = 0;
 $151 = HEAP32[8091]|0;
 $152 = (73256 + ($151<<2)|0);
 $153 = HEAP32[$152>>2]|0;
 _InterpreterClassParam(2,$153,$5);
 $154 = HEAP32[8221]|0;
 HEAP32[(73792)>>2] = $154;
 $155 = HEAP32[8091]|0;
 $156 = (73256 + ($155<<2)|0);
 $157 = HEAP32[$156>>2]|0;
 HEAP32[18446] = $157;
 $158 = ((($14)) + 1784|0);
 $159 = HEAP32[$158>>2]|0;
 HEAP32[18446] = $159;
 (_getlex()|0);
 $160 = ((($14)) + 1788|0);
 $161 = HEAP32[$160>>2]|0;
 _InterpreterClassSub($161,$5);
 $162 = HEAP32[8091]|0;
 $163 = (73256 + ($162<<2)|0);
 $164 = HEAP32[$163>>2]|0;
 HEAP32[18446] = $164;
 $165 = HEAP32[8088]|0;
 $166 = ($165|0)>(0);
 $167 = HEAP32[8089]|0;
 $168 = ($167|0)>(0);
 $or$cond = $166 | $168;
 $169 = HEAP32[8090]|0;
 $170 = ($169|0)>(0);
 $or$cond3 = $or$cond | $170;
 if (!($or$cond3)) {
  STACKTOP = sp;return;
 }
 while(1) {
  (_Interpreter()|0);
  $171 = HEAP32[18446]|0;
  $172 = ((($12)) + 1788|0);
  $173 = HEAP32[$172>>2]|0;
  $174 = ($171|0)<=($173|0);
  if (!($174)) {
   label = 40;
   break;
  }
  $175 = (_strncmp((31976),19229,1)|0);
  $176 = ($175|0)!=(0);
  $177 = HEAP32[7954]|0;
  $178 = ($177|0)!=(28);
  $or$cond7 = $176 & $178;
  if (!($or$cond7)) {
   label = 40;
   break;
  }
 }
 if ((label|0) == 40) {
  STACKTOP = sp;return;
 }
}
function _keyUntaian($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0.0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0.0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0, $vararg_buffer16 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 30912|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(30912|0);
 $$byval_copy25 = sp + 25800|0;
 $$byval_copy24 = sp + 30344|0;
 $$byval_copy23 = sp + 30080|0;
 $$byval_copy22 = sp + 29816|0;
 $$byval_copy21 = sp + 29552|0;
 $$byval_copy20 = sp + 29288|0;
 $$byval_copy19 = sp + 29024|0;
 $$byval_copy18 = sp + 22584|0;
 $$byval_copy = sp + 19368|0;
 $vararg_buffer16 = sp + 19360|0;
 $vararg_buffer14 = sp + 19352|0;
 $vararg_buffer12 = sp + 19344|0;
 $vararg_buffer10 = sp + 19336|0;
 $vararg_buffer8 = sp + 19328|0;
 $vararg_buffer6 = sp + 19320|0;
 $vararg_buffer4 = sp + 19312|0;
 $vararg_buffer2 = sp + 19304|0;
 $vararg_buffer = sp + 19296|0;
 $2 = sp + 16080|0;
 $3 = sp + 12864|0;
 $4 = sp + 9648|0;
 $5 = sp + 30608|0;
 $6 = sp + 6432|0;
 $7 = sp + 3216|0;
 $8 = sp;
 $1 = $0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,300)|0;
 (_getlex()|0);
 $9 = HEAP32[7954]|0;
 switch ($9|0) {
 case 228: case 223: case 224: case 225:  {
  $10 = ((($2)) + 88|0);
  HEAP32[$10>>2] = -1;
  $11 = ((($2)) + 404|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($2)) + 408|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($2)) + 84|0);
  HEAP32[$13>>2] = -1;
  $14 = ((($2)) + 104|0);
  _memset(($14|0),0,300)|0;
  $15 = ((($2)) + 420|0);
  _memset(($15|0),0,300)|0;
  $16 = ((($2)) + 720|0);
  _memset(($16|0),0,150)|0;
  $17 = (_strlen((31976))|0);
  $18 = ($17>>>0)>(0);
  do {
   if ($18) {
    $19 = ((($2)) + 420|0);
    (_strcpy($19,(31976))|0);
    $20 = ((($2)) + 720|0);
    _getArrayName((31976),$20);
    $21 = ((($2)) + 870|0);
    _getArrayIdx((31976),$21);
    $22 = (_strlen(128380)|0);
    $23 = ($22>>>0)>(0);
    if ($23) {
     $24 = ((($2)) + 720|0);
     HEAP32[$vararg_buffer>>2] = 128380;
     $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr1>>2] = $24;
     (_sprintf($5,15808,$vararg_buffer)|0);
     $25 = ((($2)) + 720|0);
     _memset(($25|0),0,150)|0;
     $26 = ((($2)) + 720|0);
     (_strcpy($26,$5)|0);
    }
    $27 = ((($2)) + 720|0);
    $28 = HEAP32[8088]|0;
    _memcpy(($$byval_copy|0),($2|0),3216)|0;
    _ValLabel($6,$27,$28,$$byval_copy,232);
    _memcpy(($3|0),($6|0),3216)|0;
    $29 = ((($3)) + 84|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = ($30|0)>=(0);
    if ($31) {
     $32 = ((($3)) + 3192|0);
     $33 = HEAP32[$32>>2]|0;
     $34 = ($33|0)!=(2);
     if ($34) {
      _Error(17601,$vararg_buffer2);
     }
    }
    $35 = ((($3)) + 3192|0);
    $36 = HEAP32[$35>>2]|0;
    $37 = ((($2)) + 3192|0);
    HEAP32[$37>>2] = $36;
    $38 = ((($2)) + 870|0);
    $39 = HEAP8[$38>>0]|0;
    $40 = $39 << 24 >> 24;
    $41 = (_isdigit($40)|0);
    $42 = ($41|0)!=(0);
    do {
     if ($42) {
      label = 10;
     } else {
      $43 = ((($2)) + 870|0);
      $44 = HEAP8[$43>>0]|0;
      $45 = $44 << 24 >> 24;
      $46 = ($45|0)==(45);
      if ($46) {
       label = 10;
      } else {
       $50 = ((($2)) + 870|0);
       $51 = HEAP32[8088]|0;
       _memcpy(($$byval_copy18|0),($4|0),3216)|0;
       _ValLabel($7,$50,$51,$$byval_copy18,232);
       _memcpy(($4|0),($7|0),3216)|0;
       $52 = ((($4)) + 84|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = ($53|0)==(0);
       if ($54) {
        $55 = ((($4)) + 88|0);
        $56 = HEAP32[$55>>2]|0;
        $57 = ((($2)) + 1020|0);
        HEAP32[$57>>2] = $56;
        break;
       } else {
        _Error(16065,$vararg_buffer4);
        break;
       }
      }
     }
    } while(0);
    if ((label|0) == 10) {
     $47 = ((($2)) + 870|0);
     $48 = (_atoi($47)|0);
     $49 = ((($2)) + 1020|0);
     HEAP32[$49>>2] = $48;
    }
    $58 = ((($2)) + 1020|0);
    $59 = HEAP32[$58>>2]|0;
    $60 = ($59|0)<(0);
    if ($60) {
     label = 16;
    } else {
     $61 = ((($2)) + 1020|0);
     $62 = HEAP32[$61>>2]|0;
     $63 = ($62|0)>(999999000);
     if ($63) {
      label = 16;
     }
    }
    if ((label|0) == 16) {
     _Error(16096,$vararg_buffer6);
    }
    $64 = HEAP32[8086]|0;
    $65 = ($64|0)!=(0);
    if ($65) {
     $66 = HEAP32[8086]|0;
     $67 = (($66) + 1)|0;
     HEAP32[8086] = $67;
    } else {
     HEAP32[8086] = 0;
    }
    $68 = HEAP32[8086]|0;
    $69 = ($68|0)>(999);
    if ($69) {
     HEAP32[8086] = 0;
    }
    _memset((72976|0),0,280)|0;
    _memset(((72996)|0),0,256)|0;
    $70 = ((($2)) + 720|0);
    (_strcpy((72996),$70)|0);
    $71 = HEAP32[8086]|0;
    $72 = (_createRenban($71)|0);
    HEAP32[(72992)>>2] = $72;
    $73 = HEAP32[(72992)>>2]|0;
    $74 = ((($2)) + 404|0);
    HEAP32[$74>>2] = $73;
    _memcpy(($$byval_copy19|0),((72992)|0),264)|0;
    $75 = (_stackInt_getID($$byval_copy19)|0);
    $76 = (+($75|0));
    $77 = $76 >= 0.0;
    if ($77) {
     (_printf(17625,$vararg_buffer8)|0);
    } else {
     _memcpy(($$byval_copy20|0),((72992)|0),264)|0;
     _stackInt_addFirst($$byval_copy20);
    }
    _memset((31528|0),0,288)|0;
    _memset(((31556)|0),0,256)|0;
    $78 = ((($2)) + 720|0);
    (_strcpy((31556),$78)|0);
    $79 = HEAP32[8086]|0;
    $80 = (_createRenban($79)|0);
    HEAP32[(31552)>>2] = $80;
    $81 = HEAP32[(31552)>>2]|0;
    $82 = ((($2)) + 408|0);
    HEAP32[$82>>2] = $81;
    _memcpy(($$byval_copy21|0),((31552)|0),264)|0;
    $83 = (_stackDbl_getID($$byval_copy21)|0);
    $84 = (+($83|0));
    $85 = $84 >= 0.0;
    if ($85) {
     (_printf(17625,$vararg_buffer10)|0);
    } else {
     _memcpy(($$byval_copy22|0),((31552)|0),264)|0;
     _stackDbl_addFirst($$byval_copy22);
    }
    _memset((71824|0),0,576)|0;
    _memset(((72140)|0),0,256)|0;
    $86 = ((($2)) + 720|0);
    (_strcpy((72140),$86)|0);
    $87 = HEAP32[8086]|0;
    $88 = (_createRenban($87)|0);
    HEAP32[(72136)>>2] = $88;
    $89 = HEAP32[(72136)>>2]|0;
    $90 = ((($2)) + 412|0);
    HEAP32[$90>>2] = $89;
    _memcpy(($$byval_copy23|0),((72136)|0),264)|0;
    $91 = (_stackStr_getID($$byval_copy23)|0);
    $92 = (+($91|0));
    $93 = $92 >= 0.0;
    if ($93) {
     (_printf(17625,$vararg_buffer12)|0);
     break;
    } else {
     _memcpy(($$byval_copy24|0),((72136)|0),264)|0;
     _stackStr_addFirst($$byval_copy24);
     break;
    }
   } else {
    _Error(17657,$vararg_buffer14);
   }
  } while(0);
  $94 = ((($2)) + 720|0);
  $95 = HEAP32[8088]|0;
  _memcpy(($$byval_copy25|0),($2|0),3216)|0;
  _ValLabel($8,$94,$95,$$byval_copy25,233);
  _memset(($2|0),0,3216)|0;
  _memset(($3|0),0,3216)|0;
  _memset(($4|0),0,3216)|0;
  break;
 }
 default: {
  _Error(17691,$vararg_buffer16);
 }
 }
 $96 = ((($2)) + 3196|0);
 $97 = HEAP32[$96>>2]|0;
 $98 = ($97|0)!=(0|0);
 if ($98) {
  $99 = ((($2)) + 3196|0);
  $100 = HEAP32[$99>>2]|0;
  _free($100);
 }
 $101 = ((($2)) + 3200|0);
 $102 = HEAP32[$101>>2]|0;
 $103 = ($102|0)!=(0|0);
 if ($103) {
  $104 = ((($2)) + 3200|0);
  $105 = HEAP32[$104>>2]|0;
  _free($105);
 }
 $106 = ((($2)) + 1796|0);
 $107 = HEAP32[$106>>2]|0;
 $108 = ($107|0)!=(0|0);
 if ($108) {
  $109 = ((($2)) + 1796|0);
  $110 = HEAP32[$109>>2]|0;
  _free($110);
 }
 $111 = ((($2)) + 1024|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = ($112|0)!=(0|0);
 if ($113) {
  $114 = ((($2)) + 1024|0);
  $115 = HEAP32[$114>>2]|0;
  _free($115);
 }
 $116 = ((($2)) + 4|0);
 $117 = HEAP32[$116>>2]|0;
 $118 = ($117|0)!=(0|0);
 if ($118) {
  $119 = ((($2)) + 4|0);
  $120 = HEAP32[$119>>2]|0;
  _free($120);
 }
 $121 = ((($2)) + 8|0);
 $122 = HEAP32[$121>>2]|0;
 $123 = ($122|0)!=(0|0);
 if ($123) {
  $124 = ((($2)) + 8|0);
  $125 = HEAP32[$124>>2]|0;
  _free($125);
 }
 $126 = HEAP32[$2>>2]|0;
 $127 = ($126|0)!=(0|0);
 if ($127) {
  $128 = HEAP32[$2>>2]|0;
  _free($128);
 }
 $129 = ((($4)) + 3196|0);
 $130 = HEAP32[$129>>2]|0;
 $131 = ($130|0)!=(0|0);
 if ($131) {
  $132 = ((($4)) + 3196|0);
  $133 = HEAP32[$132>>2]|0;
  _free($133);
 }
 $134 = ((($4)) + 3200|0);
 $135 = HEAP32[$134>>2]|0;
 $136 = ($135|0)!=(0|0);
 if ($136) {
  $137 = ((($4)) + 3200|0);
  $138 = HEAP32[$137>>2]|0;
  _free($138);
 }
 $139 = ((($4)) + 1796|0);
 $140 = HEAP32[$139>>2]|0;
 $141 = ($140|0)!=(0|0);
 if ($141) {
  $142 = ((($4)) + 1796|0);
  $143 = HEAP32[$142>>2]|0;
  _free($143);
 }
 $144 = ((($4)) + 1024|0);
 $145 = HEAP32[$144>>2]|0;
 $146 = ($145|0)!=(0|0);
 if ($146) {
  $147 = ((($4)) + 1024|0);
  $148 = HEAP32[$147>>2]|0;
  _free($148);
 }
 $149 = ((($4)) + 4|0);
 $150 = HEAP32[$149>>2]|0;
 $151 = ($150|0)!=(0|0);
 if ($151) {
  $152 = ((($4)) + 4|0);
  $153 = HEAP32[$152>>2]|0;
  _free($153);
 }
 $154 = ((($4)) + 8|0);
 $155 = HEAP32[$154>>2]|0;
 $156 = ($155|0)!=(0|0);
 if ($156) {
  $157 = ((($4)) + 8|0);
  $158 = HEAP32[$157>>2]|0;
  _free($158);
 }
 $159 = HEAP32[$4>>2]|0;
 $160 = ($159|0)!=(0|0);
 if (!($160)) {
  STACKTOP = sp;return;
 }
 $161 = HEAP32[$4>>2]|0;
 _free($161);
 STACKTOP = sp;return;
}
function _keyArray($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy100 = 0, $$byval_copy101 = 0, $$byval_copy102 = 0, $$byval_copy103 = 0, $$byval_copy104 = 0, $$byval_copy105 = 0, $$byval_copy106 = 0, $$byval_copy107 = 0, $$byval_copy108 = 0, $$byval_copy109 = 0, $$byval_copy110 = 0, $$byval_copy111 = 0, $$byval_copy112 = 0, $$byval_copy113 = 0, $$byval_copy114 = 0, $$byval_copy115 = 0, $$byval_copy116 = 0, $$byval_copy117 = 0, $$byval_copy118 = 0;
 var $$byval_copy119 = 0, $$byval_copy120 = 0, $$byval_copy121 = 0, $$byval_copy122 = 0, $$byval_copy123 = 0, $$byval_copy124 = 0, $$byval_copy125 = 0, $$byval_copy126 = 0, $$byval_copy127 = 0, $$byval_copy128 = 0, $$byval_copy129 = 0, $$byval_copy130 = 0, $$byval_copy131 = 0, $$byval_copy132 = 0, $$byval_copy133 = 0, $$byval_copy134 = 0, $$byval_copy135 = 0, $$byval_copy136 = 0, $$byval_copy88 = 0, $$byval_copy89 = 0;
 var $$byval_copy90 = 0, $$byval_copy91 = 0, $$byval_copy92 = 0, $$byval_copy93 = 0, $$byval_copy94 = 0, $$byval_copy95 = 0, $$byval_copy96 = 0, $$byval_copy97 = 0, $$byval_copy98 = 0, $$byval_copy99 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0;
 var $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0;
 var $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0.0, $140 = 0, $141 = 0, $142 = 0, $143 = 0.0;
 var $144 = 0, $145 = 0.0, $146 = 0.0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0;
 var $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0.0, $173 = 0, $174 = 0.0, $175 = 0.0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0;
 var $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0.0, $191 = 0.0, $192 = 0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0;
 var $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0;
 var $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0;
 var $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0.0, $24 = 0, $240 = 0.0, $241 = 0, $242 = 0.0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0;
 var $252 = 0, $253 = 0, $254 = 0.0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0;
 var $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0;
 var $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0;
 var $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0;
 var $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0;
 var $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0.0, $36 = 0;
 var $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0;
 var $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0.0, $385 = 0, $386 = 0.0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0;
 var $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0;
 var $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0;
 var $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0;
 var $450 = 0.0, $451 = 0.0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0;
 var $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0;
 var $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0;
 var $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0.0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, $vararg_buffer17 = 0, $vararg_buffer19 = 0, $vararg_buffer21 = 0, $vararg_buffer24 = 0;
 var $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer37 = 0, $vararg_buffer41 = 0, $vararg_buffer43 = 0, $vararg_buffer46 = 0, $vararg_buffer48 = 0, $vararg_buffer50 = 0, $vararg_buffer53 = 0, $vararg_buffer55 = 0, $vararg_buffer58 = 0, $vararg_buffer61 = 0, $vararg_buffer63 = 0, $vararg_buffer65 = 0, $vararg_buffer67 = 0, $vararg_buffer70 = 0, $vararg_buffer73 = 0, $vararg_buffer76 = 0;
 var $vararg_buffer79 = 0, $vararg_buffer81 = 0, $vararg_buffer83 = 0, $vararg_buffer85 = 0, $vararg_ptr14 = 0, $vararg_ptr40 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 246192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(246192|0);
 $$byval_copy136 = sp + 241448|0;
 $$byval_copy135 = sp + 238232|0;
 $$byval_copy134 = sp + 235016|0;
 $$byval_copy133 = sp + 231800|0;
 $$byval_copy132 = sp + 228584|0;
 $$byval_copy131 = sp + 225368|0;
 $$byval_copy130 = sp + 222152|0;
 $$byval_copy129 = sp + 218936|0;
 $$byval_copy128 = sp + 215720|0;
 $$byval_copy127 = sp + 212504|0;
 $$byval_copy126 = sp + 209288|0;
 $$byval_copy125 = sp + 206072|0;
 $$byval_copy124 = sp + 202856|0;
 $$byval_copy123 = sp + 199640|0;
 $$byval_copy122 = sp + 196424|0;
 $$byval_copy121 = sp + 193208|0;
 $$byval_copy120 = sp + 189992|0;
 $$byval_copy119 = sp + 186776|0;
 $$byval_copy118 = sp + 183560|0;
 $$byval_copy117 = sp + 180344|0;
 $$byval_copy116 = sp + 177128|0;
 $$byval_copy115 = sp + 173912|0;
 $$byval_copy114 = sp + 170696|0;
 $$byval_copy113 = sp + 167480|0;
 $$byval_copy112 = sp + 164264|0;
 $$byval_copy111 = sp + 161048|0;
 $$byval_copy110 = sp + 157832|0;
 $$byval_copy109 = sp + 154616|0;
 $$byval_copy108 = sp + 151400|0;
 $$byval_copy107 = sp + 148184|0;
 $$byval_copy106 = sp + 144968|0;
 $$byval_copy105 = sp + 141752|0;
 $$byval_copy104 = sp + 138536|0;
 $$byval_copy103 = sp + 135320|0;
 $$byval_copy102 = sp + 132104|0;
 $$byval_copy101 = sp + 128888|0;
 $$byval_copy100 = sp + 125672|0;
 $$byval_copy99 = sp + 122456|0;
 $$byval_copy98 = sp + 119240|0;
 $$byval_copy97 = sp + 116024|0;
 $$byval_copy96 = sp + 112808|0;
 $$byval_copy95 = sp + 109592|0;
 $$byval_copy94 = sp + 106376|0;
 $$byval_copy93 = sp + 103160|0;
 $$byval_copy92 = sp + 99944|0;
 $$byval_copy91 = sp + 96728|0;
 $$byval_copy90 = sp + 93512|0;
 $$byval_copy89 = sp + 90296|0;
 $$byval_copy88 = sp + 87080|0;
 $$byval_copy = sp + 83864|0;
 $vararg_buffer85 = sp + 83856|0;
 $vararg_buffer83 = sp + 83848|0;
 $vararg_buffer81 = sp + 83840|0;
 $vararg_buffer79 = sp + 83832|0;
 $vararg_buffer76 = sp + 83824|0;
 $vararg_buffer73 = sp + 83816|0;
 $vararg_buffer70 = sp + 83808|0;
 $vararg_buffer67 = sp + 83800|0;
 $vararg_buffer65 = sp + 83792|0;
 $vararg_buffer63 = sp + 83784|0;
 $vararg_buffer61 = sp + 83776|0;
 $vararg_buffer58 = sp + 83768|0;
 $vararg_buffer55 = sp + 83760|0;
 $vararg_buffer53 = sp + 83752|0;
 $vararg_buffer50 = sp + 83744|0;
 $vararg_buffer48 = sp + 83736|0;
 $vararg_buffer46 = sp + 83728|0;
 $vararg_buffer43 = sp + 83720|0;
 $vararg_buffer41 = sp + 83712|0;
 $vararg_buffer37 = sp + 83704|0;
 $vararg_buffer34 = sp + 83696|0;
 $vararg_buffer31 = sp + 83688|0;
 $vararg_buffer28 = sp + 83680|0;
 $vararg_buffer26 = sp + 83672|0;
 $vararg_buffer24 = sp + 83664|0;
 $vararg_buffer21 = sp + 83656|0;
 $vararg_buffer19 = sp + 83648|0;
 $vararg_buffer17 = sp + 83640|0;
 $vararg_buffer15 = sp + 83632|0;
 $vararg_buffer = sp + 83624|0;
 $2 = sp + 245884|0;
 $3 = sp + 245584|0;
 $4 = sp + 245284|0;
 $5 = sp + 80408|0;
 $6 = sp + 77192|0;
 $7 = sp + 73976|0;
 $8 = sp + 70760|0;
 $9 = sp + 67544|0;
 $15 = sp + 244984|0;
 $16 = sp + 244684|0;
 $17 = sp + 64320|0;
 $18 = sp + 61104|0;
 $19 = sp + 57888|0;
 $20 = sp + 54672|0;
 $21 = sp + 51456|0;
 $22 = sp + 48240|0;
 $23 = sp + 45024|0;
 $24 = sp + 41808|0;
 $25 = sp + 38592|0;
 $26 = sp + 35376|0;
 $27 = sp + 32160|0;
 $28 = sp + 28944|0;
 $29 = sp + 25728|0;
 $30 = sp + 22512|0;
 $31 = sp + 19296|0;
 $32 = sp + 16080|0;
 $33 = sp + 12864|0;
 $34 = sp + 9648|0;
 $35 = sp + 6432|0;
 $36 = sp + 3216|0;
 $37 = sp;
 $1 = $0;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $13 = 0;
 $14 = 0.0;
 _memset(($7|0),0,3216)|0;
 _memset(($5|0),0,3216)|0;
 _memset(($6|0),0,3216)|0;
 _memset(($8|0),0,3216)|0;
 _memset(($9|0),0,3216)|0;
 _memset(($3|0),0,300)|0;
 _memset(($4|0),0,300)|0;
 _memset(($15|0),0,300)|0;
 _memset(($16|0),0,300)|0;
 _memset(($2|0),0,300)|0;
 $38 = HEAP32[8086]|0;
 $39 = ($38|0)!=(0);
 if ($39) {
  $40 = HEAP32[8086]|0;
  $41 = (($40) + 1)|0;
  HEAP32[8086] = $41;
 } else {
  HEAP32[8086] = 0;
 }
 $42 = HEAP32[8086]|0;
 $43 = ($42|0)>(999);
 if ($43) {
  HEAP32[8086] = 0;
 }
 $44 = $1;
 $45 = (_checkDummyArray($44)|0);
 $46 = ($45|0)==(1);
 do {
  if ($46) {
   $47 = $1;
   _keyArrayDummy($47);
  } else {
   _memset(($5|0),0,3216)|0;
   $48 = ((($5)) + 84|0);
   HEAP32[$48>>2] = 6;
   HEAP32[18459] = 1;
   $49 = $1;
   $50 = (_strlen($49)|0);
   $51 = ($50>>>0)>(0);
   if ($51) {
    $52 = $1;
    $53 = ((($5)) + 420|0);
    _getArrayName($52,$53);
    $54 = $1;
    $55 = ((($5)) + 720|0);
    _getArrayName($54,$55);
    $56 = $1;
    $57 = ((($5)) + 870|0);
    _getArrayIdx($56,$57);
    $58 = (_strlen(128380)|0);
    $59 = ($58>>>0)>(0);
    if ($59) {
     $60 = ((($5)) + 720|0);
     HEAP32[$vararg_buffer>>2] = 128380;
     $vararg_ptr14 = ((($vararg_buffer)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = $60;
     (_snprintf($16,300,15808,$vararg_buffer)|0);
     $61 = ((($5)) + 720|0);
     _memset(($61|0),0,150)|0;
     $62 = ((($5)) + 720|0);
     (_strcpy($62,$16)|0);
    }
    $63 = ((($5)) + 870|0);
    $64 = HEAP8[$63>>0]|0;
    $65 = $64 << 24 >> 24;
    $66 = (_isdigit($65)|0);
    $67 = ($66|0)!=(0);
    do {
     if ($67) {
      $68 = ((($5)) + 870|0);
      $69 = (_atoi($68)|0);
      $10 = $69;
     } else {
      (_getlex()|0);
      $70 = HEAP8[(31976)>>0]|0;
      $71 = $70 << 24 >> 24;
      $72 = ($71|0)==(93);
      _ungetlex();
      if ($72) {
       $73 = ((($5)) + 870|0);
       $74 = HEAP32[8088]|0;
       _memcpy(($$byval_copy|0),($8|0),3216)|0;
       _ValLabel($17,$73,$74,$$byval_copy,232);
       _memcpy(($7|0),($17|0),3216)|0;
      } else {
       _memset(($2|0),0,300)|0;
       (_strcpy($2,17193)|0);
       $75 = ((($5)) + 870|0);
       (_strcat($2,$75)|0);
       (_strcat($2,17196)|0);
       $76 = HEAP32[18446]|0;
       $77 = HEAP32[(73788)>>2]|0;
       _interpretIndexParam($18,$2,$76,$77,128380);
       _memcpy(($7|0),($18|0),3216)|0;
      }
      $78 = ((($7)) + 84|0);
      $79 = HEAP32[$78>>2]|0;
      $80 = ($79|0)==(0);
      if ($80) {
       $81 = ((($7)) + 88|0);
       $82 = HEAP32[$81>>2]|0;
       $10 = $82;
       break;
      }
      $83 = ((($7)) + 84|0);
      $84 = HEAP32[$83>>2]|0;
      $85 = ($84|0)==(1);
      if ($85) {
       $86 = ((($7)) + 96|0);
       $87 = +HEAPF64[$86>>3];
       $88 = (~~(($87)));
       $89 = (Math_abs(($88|0))|0);
       $10 = $89;
       break;
      } else {
       _Error(16065,$vararg_buffer15);
       break;
      }
     }
    } while(0);
    $90 = $10;
    HEAP32[5] = $90;
    $91 = ((($5)) + 720|0);
    (_strcpy(129025,$91)|0);
    $92 = $10;
    $93 = ($92|0)<(0);
    $94 = $10;
    $95 = ($94|0)>(999999000);
    $or$cond = $93 | $95;
    if ($or$cond) {
     _Error(16096,$vararg_buffer17);
    }
   }
   (_getlex()|0);
   $96 = HEAP32[7954]|0;
   $97 = ($96|0)==(28);
   if ($97) {
    _Error(19234,$vararg_buffer19);
   }
   $98 = HEAP32[7954]|0;
   $99 = ($98|0)==(227);
   do {
    if ($99) {
     $100 = HEAP8[(31976)>>0]|0;
     $101 = $100 << 24 >> 24;
     $102 = ($101|0)==(61);
     if (!($102)) {
      $103 = HEAP8[(31976)>>0]|0;
      $104 = $103 << 24 >> 24;
      $105 = ($104|0)==(43);
      if (!($105)) {
       $106 = HEAP8[(31976)>>0]|0;
       $107 = $106 << 24 >> 24;
       $108 = ($107|0)==(45);
       if (!($108)) {
        label = 33;
        break;
       }
      }
     }
     $109 = HEAP8[(31976)>>0]|0;
     $110 = $109 << 24 >> 24;
     $111 = ($110|0)==(43);
     if ($111) {
      $12 = 1;
      break;
     }
     $112 = HEAP8[(31976)>>0]|0;
     $113 = $112 << 24 >> 24;
     $114 = ($113|0)==(45);
     if ($114) {
      $12 = -1;
     }
    } else {
     label = 33;
    }
   } while(0);
   if ((label|0) == 33) {
    $115 = HEAP8[(31976)>>0]|0;
    $116 = $115 << 24 >> 24;
    HEAP32[$vararg_buffer21>>2] = $116;
    (_printf(17199,$vararg_buffer21)|0);
    _Error(17211,$vararg_buffer24);
   }
   (_getlex()|0);
   $117 = HEAP32[7954]|0;
   $118 = ($117|0)==(28);
   if ($118) {
    _Error(19234,$vararg_buffer26);
   }
   $119 = HEAP8[(31976)>>0]|0;
   $120 = $119 << 24 >> 24;
   $121 = ($120|0)==(43);
   $122 = HEAP32[7954]|0;
   $123 = ($122|0)==(227);
   $or$cond3 = $121 & $123;
   if ($or$cond3) {
    $124 = $12;
    $125 = ($124|0)==(1);
    if (!($125)) {
     break;
    }
    $126 = ((($5)) + 720|0);
    $127 = HEAP32[8088]|0;
    _memcpy(($$byval_copy88|0),($5|0),3216)|0;
    _ValLabel($19,$126,$127,$$byval_copy88,232);
    _memcpy(($5|0),($19|0),3216)|0;
    $128 = ((($5)) + 870|0);
    $129 = $10;
    HEAP32[$vararg_buffer28>>2] = $129;
    (_snprintf($128,150,16087,$vararg_buffer28)|0);
    $130 = ((($5)) + 84|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($131|0)==(6);
    if ($132) {
     $133 = $10;
     _memcpy(($$byval_copy89|0),($5|0),3216)|0;
     $134 = (_get_int_array($$byval_copy89,$133)|0);
     $13 = $134;
     $135 = $10;
     $136 = $13;
     $137 = (($136) + 1)|0;
     _memcpy(($$byval_copy90|0),($5|0),3216)|0;
     _save_int_array($$byval_copy90,$135,$137);
     $138 = ((($5)) + 84|0);
     HEAP32[$138>>2] = 6;
     break;
    }
    $139 = ((($5)) + 84|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ($140|0)==(7);
    if (!($141)) {
     break;
    }
    $142 = $10;
    _memcpy(($$byval_copy91|0),($5|0),3216)|0;
    $143 = (+_get_dbl_array($$byval_copy91,$142));
    $14 = $143;
    $144 = $10;
    $145 = $14;
    $146 = $145 + 1.0;
    _memcpy(($$byval_copy92|0),($5|0),3216)|0;
    _save_dbl_array($$byval_copy92,$144,$146);
    $147 = ((($5)) + 84|0);
    HEAP32[$147>>2] = 7;
    break;
   }
   $148 = HEAP8[(31976)>>0]|0;
   $149 = $148 << 24 >> 24;
   $150 = ($149|0)==(45);
   $151 = HEAP32[7954]|0;
   $152 = ($151|0)==(227);
   $or$cond5 = $150 & $152;
   if ($or$cond5) {
    $153 = $12;
    $154 = ($153|0)==(-1);
    if ($154) {
     $155 = ((($5)) + 720|0);
     $156 = HEAP32[8088]|0;
     _memcpy(($$byval_copy93|0),($5|0),3216)|0;
     _ValLabel($20,$155,$156,$$byval_copy93,232);
     _memcpy(($5|0),($20|0),3216)|0;
     $157 = ((($5)) + 870|0);
     $158 = $10;
     HEAP32[$vararg_buffer31>>2] = $158;
     (_snprintf($157,150,16087,$vararg_buffer31)|0);
     $159 = ((($5)) + 84|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==(6);
     if ($161) {
      $162 = $10;
      _memcpy(($$byval_copy94|0),($5|0),3216)|0;
      $163 = (_get_int_array($$byval_copy94,$162)|0);
      $13 = $163;
      $164 = $10;
      $165 = $13;
      $166 = (($165) - 1)|0;
      _memcpy(($$byval_copy95|0),($5|0),3216)|0;
      _save_int_array($$byval_copy95,$164,$166);
      $167 = ((($5)) + 84|0);
      HEAP32[$167>>2] = 6;
      break;
     }
     $168 = ((($5)) + 84|0);
     $169 = HEAP32[$168>>2]|0;
     $170 = ($169|0)==(7);
     if (!($170)) {
      break;
     }
     $171 = $10;
     _memcpy(($$byval_copy96|0),($5|0),3216)|0;
     $172 = (+_get_dbl_array($$byval_copy96,$171));
     $14 = $172;
     $173 = $10;
     $174 = $14;
     $175 = $174 - 1.0;
     _memcpy(($$byval_copy97|0),($5|0),3216)|0;
     _save_dbl_array($$byval_copy97,$173,$175);
     $176 = ((($5)) + 84|0);
     HEAP32[$176>>2] = 7;
     break;
    }
    (_getlex()|0);
    $177 = ((($5)) + 720|0);
    $178 = HEAP32[8088]|0;
    _memcpy(($$byval_copy98|0),($5|0),3216)|0;
    _ValLabel($21,$177,$178,$$byval_copy98,232);
    _memcpy(($5|0),($21|0),3216)|0;
    $179 = ((($5)) + 870|0);
    $180 = $10;
    HEAP32[$vararg_buffer34>>2] = $180;
    (_snprintf($179,150,16087,$vararg_buffer34)|0);
    $181 = HEAP32[7954]|0;
    $182 = ($181|0)==(223);
    if ($182) {
     $183 = HEAP32[(31976)>>2]|0;
     $184 = (0 - ($183))|0;
     HEAP32[(31976)>>2] = $184;
     $185 = $10;
     $186 = HEAP32[(31976)>>2]|0;
     _memcpy(($$byval_copy99|0),($5|0),3216)|0;
     _save_int_array($$byval_copy99,$185,$186);
     $187 = ((($5)) + 84|0);
     HEAP32[$187>>2] = 6;
     break;
    }
    $188 = HEAP32[7954]|0;
    $189 = ($188|0)==(226);
    if ($189) {
     $190 = +HEAPF64[(31976)>>3];
     $191 = 0.0 - $190;
     HEAPF64[(31976)>>3] = $191;
     $192 = $10;
     $193 = +HEAPF64[(31976)>>3];
     _memcpy(($$byval_copy100|0),($5|0),3216)|0;
     _save_dbl_array($$byval_copy100,$192,$193);
     $194 = ((($5)) + 84|0);
     HEAP32[$194>>2] = 7;
     break;
    }
    $195 = HEAP32[7954]|0;
    $196 = ($195|0)==(228);
    if (!($196)) {
     break;
    }
    $197 = ((($9)) + 420|0);
    (_strcpy($197,(31976))|0);
    $198 = ((($9)) + 720|0);
    _getArrayName((31976),$198);
    $199 = ((($9)) + 870|0);
    _getArrayIdx((31976),$199);
    $200 = (_strlen(128380)|0);
    $201 = ($200>>>0)>(0);
    if ($201) {
     $202 = ((($9)) + 720|0);
     HEAP32[$vararg_buffer37>>2] = 128380;
     $vararg_ptr40 = ((($vararg_buffer37)) + 4|0);
     HEAP32[$vararg_ptr40>>2] = $202;
     (_snprintf($16,300,15808,$vararg_buffer37)|0);
     $203 = ((($9)) + 720|0);
     _memset(($203|0),0,150)|0;
     $204 = ((($9)) + 720|0);
     (_strcpy($204,$16)|0);
    }
    $205 = ((($9)) + 870|0);
    $206 = HEAP8[$205>>0]|0;
    $207 = $206 << 24 >> 24;
    $208 = (_isdigit($207)|0);
    $209 = ($208|0)!=(0);
    $210 = ((($9)) + 870|0);
    do {
     if ($209) {
      $211 = (_atol($210)|0);
      $11 = $211;
     } else {
      $212 = HEAP32[8088]|0;
      _memcpy(($$byval_copy101|0),($9|0),3216)|0;
      _ValLabel($22,$210,$212,$$byval_copy101,232);
      _memcpy(($8|0),($22|0),3216)|0;
      $213 = ((($8)) + 84|0);
      $214 = HEAP32[$213>>2]|0;
      $215 = ($214|0)==(0);
      if ($215) {
       $216 = ((($8)) + 88|0);
       $217 = HEAP32[$216>>2]|0;
       $11 = $217;
       break;
      } else {
       _Error(16065,$vararg_buffer41);
       break;
      }
     }
    } while(0);
    $218 = ((($9)) + 720|0);
    $219 = HEAP32[8088]|0;
    _memcpy(($$byval_copy102|0),($9|0),3216)|0;
    _ValLabel($23,$218,$219,$$byval_copy102,232);
    _memcpy(($9|0),($23|0),3216)|0;
    $220 = ((($9)) + 870|0);
    $221 = $11;
    HEAP32[$vararg_buffer43>>2] = $221;
    (_snprintf($220,150,16087,$vararg_buffer43)|0);
    $222 = $11;
    $223 = ($222|0)<(0);
    $224 = $11;
    $225 = ($224|0)>(999999000);
    $or$cond7 = $223 | $225;
    if ($or$cond7) {
     _Error(16096,$vararg_buffer46);
    }
    $226 = ((($9)) + 84|0);
    $227 = HEAP32[$226>>2]|0;
    $228 = ($227|0)==(6);
    if ($228) {
     $229 = $11;
     _memcpy(($$byval_copy103|0),($9|0),3216)|0;
     $230 = (_get_int_array($$byval_copy103,$229)|0);
     $231 = (0 - ($230))|0;
     $13 = $231;
     $232 = $10;
     $233 = $13;
     _memcpy(($$byval_copy104|0),($5|0),3216)|0;
     _save_int_array($$byval_copy104,$232,$233);
     $234 = ((($5)) + 84|0);
     HEAP32[$234>>2] = 6;
     break;
    }
    $235 = ((($9)) + 84|0);
    $236 = HEAP32[$235>>2]|0;
    $237 = ($236|0)==(7);
    if ($237) {
     $238 = $11;
     _memcpy(($$byval_copy105|0),($9|0),3216)|0;
     $239 = (+_get_dbl_array($$byval_copy105,$238));
     $240 = 0.0 - $239;
     $14 = $240;
     $241 = $10;
     $242 = $14;
     _memcpy(($$byval_copy106|0),($5|0),3216)|0;
     _save_dbl_array($$byval_copy106,$241,$242);
     $243 = ((($5)) + 84|0);
     HEAP32[$243>>2] = 7;
     break;
    } else {
     _Error(17116,$vararg_buffer48);
     break;
    }
   }
   $244 = HEAP32[7954]|0;
   $245 = ($244|0)!=(225);
   $246 = ((($5)) + 720|0);
   $247 = HEAP32[8088]|0;
   if (!($245)) {
    _memcpy(($$byval_copy134|0),($5|0),3216)|0;
    _ValLabel($36,$246,$247,$$byval_copy134,232);
    _memcpy(($5|0),($36|0),3216)|0;
    $455 = $10;
    $456 = ($455|0)==(0);
    do {
     if ($456) {
      $457 = ((($5)) + 84|0);
      HEAP32[$457>>2] = 8;
     } else {
      $458 = ((($5)) + 412|0);
      $459 = HEAP32[$458>>2]|0;
      $460 = ($459|0)==(0);
      if ($460) {
       _Error(17363,$vararg_buffer83);
       break;
      } else {
       $461 = ((($5)) + 84|0);
       HEAP32[$461>>2] = 8;
       break;
      }
     }
    } while(0);
    $462 = ((($5)) + 870|0);
    $463 = $10;
    HEAP32[$vararg_buffer85>>2] = $463;
    (_snprintf($462,150,16087,$vararg_buffer85)|0);
    (_strcpy($15,(31976))|0);
    $464 = $10;
    _memcpy(($$byval_copy135|0),($5|0),3216)|0;
    _save_str_array($$byval_copy135,$464,$15);
    $465 = ((($5)) + 720|0);
    $466 = HEAP32[8088]|0;
    _memcpy(($$byval_copy136|0),($5|0),3216)|0;
    _ValLabel($37,$465,$466,$$byval_copy136,233);
    break;
   }
   _memcpy(($$byval_copy107|0),($5|0),3216)|0;
   _ValLabel($24,$246,$247,$$byval_copy107,232);
   _memcpy(($5|0),($24|0),3216)|0;
   $248 = ((($5)) + 870|0);
   $249 = $10;
   HEAP32[$vararg_buffer50>>2] = $249;
   (_snprintf($248,150,16087,$vararg_buffer50)|0);
   $250 = HEAP32[7954]|0;
   $251 = ($250|0)==(226);
   L105: do {
    if ($251) {
     $252 = ((($5)) + 84|0);
     HEAP32[$252>>2] = 7;
     $253 = $10;
     $254 = +HEAPF64[(31976)>>3];
     _memcpy(($$byval_copy108|0),($5|0),3216)|0;
     _save_dbl_array($$byval_copy108,$253,$254);
    } else {
     $255 = HEAP32[7954]|0;
     $256 = ($255|0)==(223);
     if ($256) {
      $257 = ((($7)) + 84|0);
      $258 = HEAP32[$257>>2]|0;
      $259 = ($258|0)==(0);
      if (!($259)) {
       break;
      }
      $260 = ((($5)) + 84|0);
      HEAP32[$260>>2] = 6;
      $261 = $10;
      $262 = HEAP32[(31976)>>2]|0;
      _memcpy(($$byval_copy109|0),($5|0),3216)|0;
      _save_int_array($$byval_copy109,$261,$262);
      break;
     }
     $263 = HEAP32[7954]|0;
     $264 = ($263|0)==(228);
     if ($264) {
      $265 = (_strlen((31976))|0);
      $266 = ($265>>>0)>(0);
      if (!($266)) {
       break;
      }
      $267 = ((($6)) + 420|0);
      (_strcpy($267,(31976))|0);
      $268 = ((($6)) + 720|0);
      _getArrayName((31976),$268);
      $269 = ((($6)) + 870|0);
      _getArrayIdx((31976),$269);
      $270 = ((($6)) + 870|0);
      $271 = HEAP8[$270>>0]|0;
      $272 = $271 << 24 >> 24;
      $273 = (_isdigit($272)|0);
      $274 = ($273|0)!=(0);
      $275 = ((($6)) + 870|0);
      do {
       if ($274) {
        $276 = (_atol($275)|0);
        $11 = $276;
       } else {
        $277 = HEAP32[8088]|0;
        _memcpy(($$byval_copy110|0),($7|0),3216)|0;
        _ValLabel($25,$275,$277,$$byval_copy110,232);
        _memcpy(($7|0),($25|0),3216)|0;
        $278 = ((($7)) + 84|0);
        $279 = HEAP32[$278>>2]|0;
        $280 = ($279|0)==(0);
        if ($280) {
         $281 = ((($7)) + 88|0);
         $282 = HEAP32[$281>>2]|0;
         $11 = $282;
         break;
        } else {
         _Error(17264,$vararg_buffer53);
         break;
        }
       }
      } while(0);
      $283 = ((($5)) + 84|0);
      $284 = HEAP32[$283>>2]|0;
      $285 = ($284|0)==(8);
      if ($285) {
       $286 = ((($5)) + 720|0);
       $287 = HEAP32[8088]|0;
       _memcpy(($$byval_copy111|0),($6|0),3216)|0;
       _ValLabel($26,$286,$287,$$byval_copy111,232);
       _memcpy(($6|0),($26|0),3216)|0;
       $288 = ((($6)) + 870|0);
       $289 = $11;
       HEAP32[$vararg_buffer55>>2] = $289;
       (_snprintf($288,150,16087,$vararg_buffer55)|0);
      } else {
       _ungetlex();
       _expression($27);
       _memcpy(($6|0),($27|0),3216)|0;
       $290 = ((($6)) + 870|0);
       $291 = $11;
       HEAP32[$vararg_buffer58>>2] = $291;
       (_snprintf($290,150,16087,$vararg_buffer58)|0);
      }
      $292 = $10;
      $293 = ($292|0)<(0);
      $294 = $10;
      $295 = ($294|0)>(999999000);
      $or$cond9 = $293 | $295;
      if ($or$cond9) {
       _Error(16096,$vararg_buffer61);
      }
      $296 = $11;
      $297 = ($296|0)<(0);
      $298 = $11;
      $299 = ($298|0)>(999999000);
      $or$cond11 = $297 | $299;
      if ($or$cond11) {
       _Error(16096,$vararg_buffer63);
      }
      $300 = ((($6)) + 84|0);
      $301 = HEAP32[$300>>2]|0;
      $302 = ($301|0)==(0);
      if ($302) {
       $303 = $10;
       $304 = ((($6)) + 88|0);
       $305 = HEAP32[$304>>2]|0;
       _memcpy(($$byval_copy112|0),($5|0),3216)|0;
       _save_int_array($$byval_copy112,$303,$305);
       $306 = ((($5)) + 84|0);
       HEAP32[$306>>2] = 6;
       break;
      }
      $307 = ((($6)) + 84|0);
      $308 = HEAP32[$307>>2]|0;
      $309 = ($308|0)==(1);
      if ($309) {
       $310 = $10;
       $311 = ((($6)) + 96|0);
       $312 = +HEAPF64[$311>>3];
       _memcpy(($$byval_copy113|0),($5|0),3216)|0;
       _save_dbl_array($$byval_copy113,$310,$312);
       $313 = ((($5)) + 84|0);
       HEAP32[$313>>2] = 7;
       break;
      }
      $314 = ((($6)) + 84|0);
      $315 = HEAP32[$314>>2]|0;
      $316 = ($315|0)==(3);
      if ($316) {
       $317 = $10;
       $318 = ((($6)) + 104|0);
       _memcpy(($$byval_copy114|0),($5|0),3216)|0;
       _save_str_array($$byval_copy114,$317,$318);
       $319 = ((($5)) + 84|0);
       HEAP32[$319>>2] = 8;
       break;
      }
      $320 = ((($6)) + 84|0);
      $321 = HEAP32[$320>>2]|0;
      $322 = ($321|0)==(6);
      if ($322) {
       $323 = ((($6)) + 404|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ((($5)) + 404|0);
       HEAP32[$325>>2] = $324;
       $326 = ((($5)) + 84|0);
       HEAP32[$326>>2] = 6;
       break;
      }
      $327 = ((($6)) + 84|0);
      $328 = HEAP32[$327>>2]|0;
      $329 = ($328|0)==(7);
      if ($329) {
       $330 = ((($6)) + 408|0);
       $331 = HEAP32[$330>>2]|0;
       $332 = ((($5)) + 408|0);
       HEAP32[$332>>2] = $331;
       $333 = ((($5)) + 84|0);
       HEAP32[$333>>2] = 7;
       break;
      }
      $334 = ((($6)) + 84|0);
      $335 = HEAP32[$334>>2]|0;
      $336 = ($335|0)==(8);
      if ($336) {
       $337 = $11;
       _memcpy(($$byval_copy115|0),($6|0),3216)|0;
       (_get_str_array($$byval_copy115,$337,$15)|0);
       $338 = $10;
       _memcpy(($$byval_copy116|0),($5|0),3216)|0;
       _save_str_array($$byval_copy116,$338,$15);
       $339 = ((($5)) + 84|0);
       HEAP32[$339>>2] = 8;
       break;
      } else {
       _Error(17290,$vararg_buffer65);
       break;
      }
     }
     $340 = HEAP32[7954]|0;
     $341 = ($340|0)==(224);
     if (!($341)) {
      $415 = HEAP32[7954]|0;
      $416 = ($415|0)==(227);
      if (!($416)) {
       break;
      }
      (_getlex()|0);
      $417 = HEAP8[(31976)>>0]|0;
      $418 = $417 << 24 >> 24;
      $419 = ($418|0)==(45);
      $420 = HEAP32[7954]|0;
      $421 = ($420|0)==(227);
      $or$cond13 = $419 & $421;
      if (!($or$cond13)) {
       _ungetlex();
       _expression($34);
       _memcpy(($7|0),($34|0),3216)|0;
       $437 = ((($7)) + 84|0);
       $438 = HEAP32[$437>>2]|0;
       $439 = ($438|0)==(0);
       if ($439) {
        $440 = $10;
        $441 = ((($7)) + 88|0);
        $442 = HEAP32[$441>>2]|0;
        $443 = (0 - ($442))|0;
        _memcpy(($$byval_copy131|0),($5|0),3216)|0;
        _save_int_array($$byval_copy131,$440,$443);
        $444 = ((($5)) + 84|0);
        HEAP32[$444>>2] = 6;
        break;
       }
       $445 = ((($7)) + 84|0);
       $446 = HEAP32[$445>>2]|0;
       $447 = ($446|0)==(1);
       if (!($447)) {
        break;
       }
       $448 = $10;
       $449 = ((($7)) + 96|0);
       $450 = +HEAPF64[$449>>3];
       $451 = 0.0 - $450;
       _memcpy(($$byval_copy132|0),($5|0),3216)|0;
       _save_dbl_array($$byval_copy132,$448,$451);
       $452 = ((($5)) + 84|0);
       HEAP32[$452>>2] = 7;
       break;
      }
      $422 = ((($5)) + 720|0);
      $423 = HEAP32[8088]|0;
      _memcpy(($$byval_copy129|0),($5|0),3216)|0;
      _ValLabel($32,$422,$423,$$byval_copy129,232);
      _memcpy(($5|0),($32|0),3216)|0;
      $424 = ((($5)) + 870|0);
      $425 = HEAP8[$424>>0]|0;
      $426 = $425 << 24 >> 24;
      $427 = (_isdigit($426)|0);
      $428 = ($427|0)!=(0);
      $429 = ((($5)) + 870|0);
      if ($428) {
       $430 = (_atoi($429)|0);
       $10 = $430;
       break;
      }
      $431 = HEAP32[8088]|0;
      _memcpy(($$byval_copy130|0),($5|0),3216)|0;
      _ValLabel($33,$429,$431,$$byval_copy130,232);
      _memcpy(($8|0),($33|0),3216)|0;
      $432 = ((($8)) + 84|0);
      $433 = HEAP32[$432>>2]|0;
      $434 = ($433|0)==(0);
      if ($434) {
       $435 = ((($8)) + 88|0);
       $436 = HEAP32[$435>>2]|0;
       $10 = $436;
       break;
      } else {
       _Error(16065,$vararg_buffer81);
       break;
      }
     }
     $342 = ((($5)) + 720|0);
     $343 = HEAP32[8088]|0;
     _memcpy(($$byval_copy117|0),($5|0),3216)|0;
     _ValLabel($28,$342,$343,$$byval_copy117,232);
     _memcpy(($5|0),($28|0),3216)|0;
     $344 = ((($5)) + 870|0);
     $345 = $10;
     HEAP32[$vararg_buffer67>>2] = $345;
     (_snprintf($344,150,16087,$vararg_buffer67)|0);
     _ungetlex();
     _expression($29);
     _memcpy(($7|0),($29|0),3216)|0;
     $346 = ((($7)) + 84|0);
     $347 = HEAP32[$346>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $349 = ((($5)) + 84|0);
      HEAP32[$349>>2] = 6;
      $350 = $10;
      $351 = ((($7)) + 88|0);
      $352 = HEAP32[$351>>2]|0;
      _memcpy(($$byval_copy118|0),($5|0),3216)|0;
      _save_int_array($$byval_copy118,$350,$352);
      break;
     }
     $353 = ((($7)) + 84|0);
     $354 = HEAP32[$353>>2]|0;
     $355 = ($354|0)==(1);
     if ($355) {
      $356 = ((($5)) + 84|0);
      HEAP32[$356>>2] = 7;
      $357 = $10;
      $358 = ((($7)) + 96|0);
      $359 = +HEAPF64[$358>>3];
      _memcpy(($$byval_copy119|0),($5|0),3216)|0;
      _save_dbl_array($$byval_copy119,$357,$359);
      break;
     }
     $360 = ((($7)) + 84|0);
     $361 = HEAP32[$360>>2]|0;
     $362 = ($361|0)==(6);
     if ($362) {
      $363 = ((($5)) + 720|0);
      $364 = HEAP32[8088]|0;
      _memcpy(($$byval_copy120|0),($5|0),3216)|0;
      _ValLabel($30,$363,$364,$$byval_copy120,232);
      _memcpy(($5|0),($30|0),3216)|0;
      $365 = ((($5)) + 870|0);
      $366 = $10;
      HEAP32[$vararg_buffer70>>2] = $366;
      (_snprintf($365,150,16087,$vararg_buffer70)|0);
      $367 = ((($7)) + 870|0);
      $368 = (_atol($367)|0);
      $11 = $368;
      $369 = $11;
      _memcpy(($$byval_copy121|0),($7|0),3216)|0;
      $370 = (_get_int_array($$byval_copy121,$369)|0);
      $13 = $370;
      $371 = $10;
      $372 = $13;
      _memcpy(($$byval_copy122|0),($5|0),3216)|0;
      _save_int_array($$byval_copy122,$371,$372);
      $373 = ((($5)) + 84|0);
      HEAP32[$373>>2] = 6;
      break;
     }
     $374 = ((($7)) + 84|0);
     $375 = HEAP32[$374>>2]|0;
     $376 = ($375|0)==(7);
     if ($376) {
      $377 = ((($5)) + 720|0);
      $378 = HEAP32[8088]|0;
      _memcpy(($$byval_copy123|0),($5|0),3216)|0;
      _ValLabel($31,$377,$378,$$byval_copy123,232);
      _memcpy(($5|0),($31|0),3216)|0;
      $379 = ((($5)) + 870|0);
      $380 = $10;
      HEAP32[$vararg_buffer73>>2] = $380;
      (_snprintf($379,150,16087,$vararg_buffer73)|0);
      $381 = ((($7)) + 870|0);
      $382 = (_atol($381)|0);
      $11 = $382;
      $383 = $11;
      _memcpy(($$byval_copy124|0),($7|0),3216)|0;
      $384 = (+_get_dbl_array($$byval_copy124,$383));
      $14 = $384;
      $385 = $10;
      $386 = $14;
      _memcpy(($$byval_copy125|0),($5|0),3216)|0;
      _save_dbl_array($$byval_copy125,$385,$386);
      $387 = ((($5)) + 84|0);
      HEAP32[$387>>2] = 7;
      break;
     }
     $388 = ((($7)) + 84|0);
     $389 = HEAP32[$388>>2]|0;
     $390 = ($389|0)==(3);
     if ($390) {
      $391 = ((($5)) + 84|0);
      HEAP32[$391>>2] = 8;
      $392 = $10;
      $393 = ((($7)) + 104|0);
      _memcpy(($$byval_copy126|0),($5|0),3216)|0;
      _save_str_array($$byval_copy126,$392,$393);
      break;
     }
     $394 = ((($7)) + 84|0);
     $395 = HEAP32[$394>>2]|0;
     $396 = ($395|0)==(8);
     if ($396) {
      $397 = ((($5)) + 870|0);
      $398 = $10;
      HEAP32[$vararg_buffer76>>2] = $398;
      (_snprintf($397,150,16087,$vararg_buffer76)|0);
      $399 = ((($7)) + 870|0);
      $400 = (_atol($399)|0);
      $11 = $400;
      $401 = $11;
      _memcpy(($$byval_copy127|0),($7|0),3216)|0;
      (_get_str_array($$byval_copy127,$401,$15)|0);
      $402 = $10;
      _memcpy(($$byval_copy128|0),($5|0),3216)|0;
      _save_str_array($$byval_copy128,$402,$15);
      $403 = ((($5)) + 84|0);
      HEAP32[$403>>2] = 8;
      break;
     }
     $404 = ((($7)) + 84|0);
     $405 = HEAP32[$404>>2]|0;
     $406 = ($405|0)==(31);
     do {
      if ($406) {
       $407 = ((($7)) + 2424|0);
       $408 = (_strlen($407)|0);
       $409 = ($408>>>0)>(0);
       if (!($409)) {
        break;
       }
       $410 = ((($5)) + 12|0);
       $411 = ((($7)) + 12|0);
       (_strcpy($410,$411)|0);
       $412 = ((($5)) + 2424|0);
       $413 = ((($7)) + 2424|0);
       (_strcpy($412,$413)|0);
       $414 = ((($5)) + 84|0);
       HEAP32[$414>>2] = 33;
       break L105;
      }
     } while(0);
     _Error(17326,$vararg_buffer79);
    }
   } while(0);
   $453 = ((($5)) + 720|0);
   $454 = HEAP32[8088]|0;
   _memcpy(($$byval_copy133|0),($5|0),3216)|0;
   _ValLabel($35,$453,$454,$$byval_copy133,233);
   _memset(($5|0),0,3216)|0;
   _memset(($6|0),0,3216)|0;
   _memset(($7|0),0,3216)|0;
  }
 } while(0);
 $467 = ((($5)) + 1796|0);
 $468 = HEAP32[$467>>2]|0;
 $469 = ($468|0)!=(0|0);
 if ($469) {
  $470 = ((($5)) + 1796|0);
  $471 = HEAP32[$470>>2]|0;
  _free($471);
 }
 $472 = ((($5)) + 1024|0);
 $473 = HEAP32[$472>>2]|0;
 $474 = ($473|0)!=(0|0);
 if ($474) {
  $475 = ((($5)) + 1024|0);
  $476 = HEAP32[$475>>2]|0;
  _free($476);
 }
 $477 = ((($5)) + 4|0);
 $478 = HEAP32[$477>>2]|0;
 $479 = ($478|0)!=(0|0);
 if ($479) {
  $480 = ((($5)) + 4|0);
  $481 = HEAP32[$480>>2]|0;
  _free($481);
 }
 $482 = ((($5)) + 8|0);
 $483 = HEAP32[$482>>2]|0;
 $484 = ($483|0)!=(0|0);
 if ($484) {
  $485 = ((($5)) + 8|0);
  $486 = HEAP32[$485>>2]|0;
  _free($486);
 }
 $487 = HEAP32[$5>>2]|0;
 $488 = ($487|0)!=(0|0);
 if ($488) {
  $489 = HEAP32[$5>>2]|0;
  _free($489);
 }
 $490 = ((($7)) + 3200|0);
 $491 = HEAP32[$490>>2]|0;
 $492 = ($491|0)!=(0|0);
 if ($492) {
  $493 = ((($7)) + 3200|0);
  $494 = HEAP32[$493>>2]|0;
  _free($494);
 }
 $495 = ((($7)) + 1796|0);
 $496 = HEAP32[$495>>2]|0;
 $497 = ($496|0)!=(0|0);
 if ($497) {
  $498 = ((($7)) + 1796|0);
  $499 = HEAP32[$498>>2]|0;
  _free($499);
 }
 $500 = ((($7)) + 1024|0);
 $501 = HEAP32[$500>>2]|0;
 $502 = ($501|0)!=(0|0);
 if ($502) {
  $503 = ((($7)) + 1024|0);
  $504 = HEAP32[$503>>2]|0;
  _free($504);
 }
 $505 = ((($7)) + 4|0);
 $506 = HEAP32[$505>>2]|0;
 $507 = ($506|0)!=(0|0);
 if ($507) {
  $508 = ((($7)) + 4|0);
  $509 = HEAP32[$508>>2]|0;
  _free($509);
 }
 $510 = ((($7)) + 8|0);
 $511 = HEAP32[$510>>2]|0;
 $512 = ($511|0)!=(0|0);
 if ($512) {
  $513 = ((($7)) + 8|0);
  $514 = HEAP32[$513>>2]|0;
  _free($514);
 }
 $515 = HEAP32[$7>>2]|0;
 $516 = ($515|0)!=(0|0);
 if (!($516)) {
  STACKTOP = sp;return;
 }
 $517 = HEAP32[$7>>2]|0;
 _free($517);
 STACKTOP = sp;return;
}
function _keyArrayDummy($0) {
 $0 = $0|0;
 var $$ = 0, $$byval_copy = 0, $$byval_copy34 = 0, $$byval_copy35 = 0, $$byval_copy36 = 0, $$byval_copy37 = 0, $$byval_copy38 = 0, $$byval_copy39 = 0, $$byval_copy40 = 0, $$byval_copy41 = 0, $$byval_copy42 = 0, $$byval_copy43 = 0, $$byval_copy44 = 0, $$byval_copy45 = 0, $$byval_copy46 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0.0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0.0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond6 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer22 = 0, $vararg_buffer24 = 0, $vararg_buffer26 = 0, $vararg_buffer28 = 0, $vararg_buffer30 = 0, $vararg_buffer32 = 0, $vararg_buffer8 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 78528|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(78528|0);
 $$byval_copy46 = sp + 74080|0;
 $$byval_copy45 = sp + 70864|0;
 $$byval_copy44 = sp + 67648|0;
 $$byval_copy43 = sp + 64432|0;
 $$byval_copy42 = sp + 61216|0;
 $$byval_copy41 = sp + 58000|0;
 $$byval_copy40 = sp + 54784|0;
 $$byval_copy39 = sp + 51568|0;
 $$byval_copy38 = sp + 48352|0;
 $$byval_copy37 = sp + 45136|0;
 $$byval_copy36 = sp + 41920|0;
 $$byval_copy35 = sp + 38704|0;
 $$byval_copy34 = sp + 35488|0;
 $$byval_copy = sp + 32272|0;
 $vararg_buffer32 = sp + 32264|0;
 $vararg_buffer30 = sp + 32256|0;
 $vararg_buffer28 = sp + 32248|0;
 $vararg_buffer26 = sp + 32240|0;
 $vararg_buffer24 = sp + 32232|0;
 $vararg_buffer22 = sp + 32224|0;
 $vararg_buffer20 = sp + 32216|0;
 $vararg_buffer18 = sp + 32208|0;
 $vararg_buffer16 = sp + 32200|0;
 $vararg_buffer14 = sp + 32192|0;
 $vararg_buffer12 = sp + 32184|0;
 $vararg_buffer10 = sp + 32176|0;
 $vararg_buffer8 = sp + 32168|0;
 $vararg_buffer = sp + 32160|0;
 $5 = sp + 78216|0;
 $6 = sp + 77916|0;
 $7 = sp + 28944|0;
 $8 = sp + 25728|0;
 $9 = sp + 22512|0;
 $10 = sp + 19296|0;
 $12 = sp + 77616|0;
 $13 = sp + 77316|0;
 $14 = sp + 16080|0;
 $15 = sp + 12864|0;
 $16 = sp + 9648|0;
 $17 = sp + 6432|0;
 $18 = sp + 3216|0;
 $19 = sp;
 $1 = $0;
 $2 = 0;
 $3 = 0;
 $4 = 0;
 $11 = 0;
 _memset(($9|0),0,3216)|0;
 _memset(($7|0),0,3216)|0;
 _memset(($8|0),0,3216)|0;
 _memset(($10|0),0,3216)|0;
 _memset(($5|0),0,300)|0;
 _memset(($6|0),0,300)|0;
 _memset(($12|0),0,300)|0;
 _memset(($13|0),0,300)|0;
 $20 = $1;
 $21 = ((($7)) + 420|0);
 _getArrayName($20,$21);
 $22 = $1;
 $23 = ((($7)) + 720|0);
 _getArrayName($22,$23);
 $24 = ((($7)) + 870|0);
 (_strcpy($24,16063)|0);
 $25 = (_strlen(128380)|0);
 $26 = ($25>>>0)>(0);
 if ($26) {
  $27 = ((($7)) + 720|0);
  HEAP32[$vararg_buffer>>2] = 128380;
  $vararg_ptr7 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr7>>2] = $27;
  (_sprintf($13,15808,$vararg_buffer)|0);
  $28 = ((($7)) + 720|0);
  _memset(($28|0),0,150)|0;
  $29 = ((($7)) + 720|0);
  (_strcpy($29,$13)|0);
 }
 $30 = ((($7)) + 420|0);
 (_strcat($30,17397)|0);
 (_getlex()|0);
 $31 = HEAP32[7954]|0;
 $32 = ($31|0)==(28);
 if ($32) {
  _Error(19234,$vararg_buffer8);
 }
 $33 = HEAP8[(31976)>>0]|0;
 $34 = $33 << 24 >> 24;
 $35 = ($34|0)!=(61);
 if ($35) {
  _Error(17403,$vararg_buffer10);
 }
 (_getlex()|0);
 $36 = HEAP32[7954]|0;
 $37 = ($36|0)==(28);
 if ($37) {
  _Error(19234,$vararg_buffer12);
 }
 $38 = (_strcmp((31976),17429)|0);
 $39 = ($38|0)!=(0);
 do {
  if ($39) {
   $40 = (_strcmp((31976),17435)|0);
   $41 = ($40|0)!=(0);
   if ($41) {
    $109 = (_strncmp((31976),17467,1)|0);
    $110 = ($109|0)==(0);
    if (!($110)) {
     $209 = (_strcmp((31976),17554)|0);
     $210 = ($209|0)!=(0);
     if ($210) {
      $211 = (_strcmp((31976),17563)|0);
      $212 = ($211|0)!=(0);
      if ($212) {
       break;
      }
     }
     _memset(($5|0),0,300)|0;
     _memset(($6|0),0,300)|0;
     $2 = 0;
     $3 = 0;
     (_getlex()|0);
     $213 = HEAP32[7954]|0;
     $214 = ($213|0)==(28);
     if ($214) {
      _Error(19234,$vararg_buffer28);
     }
     $215 = HEAP32[7954]|0;
     $216 = ($215|0)==(223);
     $217 = HEAP32[7954]|0;
     $218 = ($217|0)==(226);
     $or$cond6 = $216 | $218;
     do {
      if ($or$cond6) {
       _Error(17572,$vararg_buffer30);
      } else {
       $219 = HEAP32[7954]|0;
       $220 = ($219|0)==(225);
       if ($220) {
        (_strcpy($5,(31976))|0);
        break;
       }
       $221 = HEAP32[7954]|0;
       $222 = ($221|0)==(228);
       if ($222) {
        _Error(17572,$vararg_buffer32);
        break;
       }
       $223 = HEAP32[8088]|0;
       _memcpy(($$byval_copy44|0),($9|0),3216)|0;
       _ValLabel($18,(31976),$223,$$byval_copy44,232);
       _memcpy(($9|0),($18|0),3216)|0;
       $224 = ((($9)) + 84|0);
       $225 = HEAP32[$224>>2]|0;
       $226 = ($225|0)==(3);
       if ($226) {
        $227 = ((($9)) + 104|0);
        (_strcpy($5,$227)|0);
       }
      }
     } while(0);
     $11 = 0;
     $4 = 0;
     while(1) {
      $228 = $4;
      $229 = $11;
      $230 = (($229) + ($228<<2)|0);
      $231 = HEAP32[$230>>2]|0;
      $232 = ($231|0)!=(0|0);
      $233 = $4;
      if (!($232)) {
       break;
      }
      $234 = ($233|0)==(0);
      if ($234) {
       $235 = HEAP32[8086]|0;
       $236 = (_createRenban($235)|0);
       $237 = ((($7)) + 412|0);
       HEAP32[$237>>2] = $236;
       $238 = ((($7)) + 84|0);
       HEAP32[$238>>2] = 8;
      }
      _memset(($12|0),0,300)|0;
      $239 = $4;
      $240 = $11;
      $241 = (($240) + ($239<<2)|0);
      $242 = HEAP32[$241>>2]|0;
      (_strcpy($12,$242)|0);
      $243 = $4;
      _memcpy(($$byval_copy45|0),($7|0),3216)|0;
      _save_str_array($$byval_copy45,$243,$12);
      $244 = $4;
      $245 = (($244) + 1)|0;
      $4 = $245;
     }
     $246 = ((($7)) + 1020|0);
     HEAP32[$246>>2] = $233;
     $247 = $11;
     _split_free($247);
     $248 = ((($7)) + 720|0);
     $249 = HEAP32[8088]|0;
     _memcpy(($$byval_copy46|0),($7|0),3216)|0;
     _ValLabel($19,$248,$249,$$byval_copy46,233);
     _memset(($7|0),0,3216)|0;
     $250 = HEAP32[18485]|0;
     $251 = ($250|0)!=(0|0);
     if (!($251)) {
      break;
     }
     $252 = HEAP32[18485]|0;
     (_closedir($252)|0);
     break;
    }
    $111 = HEAP32[8086]|0;
    $112 = (($111) + 1)|0;
    HEAP32[8086] = $112;
    $113 = HEAP32[8086]|0;
    $114 = ($113|0)>(999);
    $$ = $114 ? 0 : $112;
    HEAP32[8086] = $$;
    $2 = 0;
    $3 = 0;
    while(1) {
     (_getlex()|0);
     $115 = HEAP32[7954]|0;
     $116 = ($115|0)==(223);
     do {
      if ($116) {
       $117 = $2;
       $118 = ($117|0)==(0);
       if ($118) {
        $119 = HEAP32[8086]|0;
        $120 = (_createRenban($119)|0);
        $121 = ((($7)) + 404|0);
        HEAP32[$121>>2] = $120;
        $122 = ((($7)) + 84|0);
        HEAP32[$122>>2] = 6;
       }
       $123 = $2;
       $124 = HEAP32[(31976)>>2]|0;
       _memcpy(($$byval_copy36|0),($7|0),3216)|0;
       _save_int_array($$byval_copy36,$123,$124);
      } else {
       $125 = HEAP32[7954]|0;
       $126 = ($125|0)==(226);
       if ($126) {
        $127 = $2;
        $128 = ($127|0)==(0);
        if ($128) {
         $129 = HEAP32[8086]|0;
         $130 = (_createRenban($129)|0);
         $131 = ((($7)) + 408|0);
         HEAP32[$131>>2] = $130;
         $132 = ((($7)) + 84|0);
         HEAP32[$132>>2] = 7;
        }
        $133 = $2;
        $134 = +HEAPF64[(31976)>>3];
        _memcpy(($$byval_copy37|0),($7|0),3216)|0;
        _save_dbl_array($$byval_copy37,$133,$134);
        break;
       }
       $135 = HEAP32[7954]|0;
       $136 = ($135|0)==(225);
       if ($136) {
        $137 = $2;
        $138 = ($137|0)==(0);
        if ($138) {
         $139 = HEAP32[8086]|0;
         $140 = (_createRenban($139)|0);
         $141 = ((($7)) + 412|0);
         HEAP32[$141>>2] = $140;
         $142 = ((($7)) + 84|0);
         HEAP32[$142>>2] = 8;
        }
        $143 = $2;
        _memcpy(($$byval_copy38|0),($7|0),3216)|0;
        _save_str_array($$byval_copy38,$143,(31976));
        break;
       }
       $144 = HEAP32[7954]|0;
       $145 = ($144|0)==(224);
       if (!($145)) {
        _Error(17469,$vararg_buffer22);
        break;
       }
       $146 = HEAP32[8088]|0;
       _memcpy(($$byval_copy39|0),($9|0),3216)|0;
       _ValLabel($16,(31976),$146,$$byval_copy39,232);
       _memcpy(($9|0),($16|0),3216)|0;
       $147 = ((($9)) + 84|0);
       $148 = HEAP32[$147>>2]|0;
       $149 = ($148|0)==(0);
       if ($149) {
        $150 = $2;
        $151 = ($150|0)==(0);
        if ($151) {
         $152 = HEAP32[8086]|0;
         $153 = (_createRenban($152)|0);
         $154 = ((($7)) + 404|0);
         HEAP32[$154>>2] = $153;
         $155 = ((($7)) + 84|0);
         HEAP32[$155>>2] = 6;
        }
        $156 = $2;
        $157 = ((($9)) + 88|0);
        $158 = HEAP32[$157>>2]|0;
        _memcpy(($$byval_copy40|0),($7|0),3216)|0;
        _save_int_array($$byval_copy40,$156,$158);
        break;
       }
       $159 = ((($9)) + 84|0);
       $160 = HEAP32[$159>>2]|0;
       $161 = ($160|0)==(1);
       if ($161) {
        $162 = $2;
        $163 = ($162|0)==(0);
        if ($163) {
         $164 = HEAP32[8086]|0;
         $165 = (_createRenban($164)|0);
         $166 = ((($7)) + 408|0);
         HEAP32[$166>>2] = $165;
         $167 = ((($7)) + 84|0);
         HEAP32[$167>>2] = 7;
        }
        $168 = $2;
        $169 = ((($9)) + 96|0);
        $170 = +HEAPF64[$169>>3];
        _memcpy(($$byval_copy41|0),($7|0),3216)|0;
        _save_dbl_array($$byval_copy41,$168,$170);
        break;
       }
       $171 = ((($9)) + 84|0);
       $172 = HEAP32[$171>>2]|0;
       $173 = ($172|0)==(3);
       if (!($173)) {
        _Error(17469,$vararg_buffer20);
        break;
       }
       $174 = $2;
       $175 = ($174|0)==(0);
       if ($175) {
        $176 = HEAP32[8086]|0;
        $177 = (_createRenban($176)|0);
        $178 = ((($7)) + 412|0);
        HEAP32[$178>>2] = $177;
        $179 = ((($7)) + 84|0);
        HEAP32[$179>>2] = 8;
       }
       $180 = $2;
       $181 = ((($9)) + 104|0);
       _memcpy(($$byval_copy42|0),($7|0),3216)|0;
       _save_str_array($$byval_copy42,$180,$181);
      }
     } while(0);
     $182 = $2;
     $183 = (($182) + 1)|0;
     $2 = $183;
     (_getlex()|0);
     $184 = HEAP32[7954]|0;
     $185 = ($184|0)==(227);
     if (!($185)) {
      break;
     }
     $186 = HEAP8[(31976)>>0]|0;
     $187 = $186 << 24 >> 24;
     $188 = ($187|0)==(44);
     if (!($188)) {
      break;
     }
    }
    $189 = (_strncmp((31976),19229,1)|0);
    $190 = ($189|0)!=(0);
    if ($190) {
     _Error(17497,$vararg_buffer24);
    }
    (_getlex()|0);
    _ungetlex();
    $191 = $2;
    $192 = ($191|0)>=(999999000);
    if ($192) {
     _Error(17526,$vararg_buffer26);
    } else {
     $193 = $2;
     $194 = ((($7)) + 1020|0);
     HEAP32[$194>>2] = $193;
     $195 = ((($7)) + 720|0);
     $196 = HEAP32[8088]|0;
     _memcpy(($$byval_copy43|0),($7|0),3216)|0;
     _ValLabel($17,$195,$196,$$byval_copy43,233);
     _memcpy(($7|0),($17|0),3216)|0;
    }
    $197 = ((($7)) + 404|0);
    $198 = HEAP32[$197>>2]|0;
    $199 = ($198|0)!=(0);
    if ($199) {
     $200 = ((($7)) + 404|0);
     HEAP32[$200>>2] = 0;
    }
    $201 = ((($7)) + 408|0);
    $202 = HEAP32[$201>>2]|0;
    $203 = ($202|0)!=(0);
    if ($203) {
     $204 = ((($7)) + 408|0);
     HEAP32[$204>>2] = 0;
    }
    $205 = ((($7)) + 412|0);
    $206 = HEAP32[$205>>2]|0;
    $207 = ($206|0)!=(0);
    if ($207) {
     $208 = ((($7)) + 412|0);
     HEAP32[$208>>2] = 0;
    }
    _memset(($7|0),0,3216)|0;
   } else {
    label = 11;
   }
  } else {
   label = 11;
  }
 } while(0);
 do {
  if ((label|0) == 11) {
   _memset(($5|0),0,300)|0;
   _memset(($6|0),0,300)|0;
   $2 = 0;
   $3 = 0;
   while(1) {
    (_getlex()|0);
    $42 = HEAP32[7954]|0;
    $43 = ($42|0)==(223);
    $44 = HEAP32[7954]|0;
    $45 = ($44|0)==(226);
    $or$cond = $43 | $45;
    do {
     if ($or$cond) {
      _Error(17441,$vararg_buffer14);
     } else {
      $46 = HEAP32[7954]|0;
      $47 = ($46|0)==(225);
      $48 = HEAP32[7954]|0;
      $49 = ($48|0)==(226);
      $or$cond3 = $47 | $49;
      if ($or$cond3) {
       $50 = $2;
       $51 = ($50|0)==(0);
       if ($51) {
        (_strcpy($5,(31976))|0);
        break;
       }
       $52 = $2;
       $53 = ($52|0)==(1);
       if (!($53)) {
        break;
       }
       (_strcpy($6,(31976))|0);
       break;
      }
      $54 = HEAP32[7954]|0;
      $55 = ($54|0)==(228);
      if ($55) {
       _Error(17441,$vararg_buffer16);
       break;
      }
      $56 = HEAP32[8088]|0;
      _memcpy(($$byval_copy|0),($9|0),3216)|0;
      _ValLabel($14,(31976),$56,$$byval_copy,232);
      _memcpy(($9|0),($14|0),3216)|0;
      $57 = ((($9)) + 84|0);
      $58 = HEAP32[$57>>2]|0;
      $59 = ($58|0)==(3);
      if (!($59)) {
       break;
      }
      $60 = $2;
      $61 = ($60|0)==(0);
      if ($61) {
       $62 = ((($9)) + 104|0);
       (_strcpy($5,$62)|0);
       break;
      }
      $63 = $2;
      $64 = ($63|0)==(1);
      if ($64) {
       $65 = ((($9)) + 104|0);
       (_strcpy($6,$65)|0);
      }
     }
    } while(0);
    $66 = $2;
    $67 = (($66) + 1)|0;
    $2 = $67;
    (_getlex()|0);
    $68 = HEAP32[7954]|0;
    $69 = ($68|0)==(227);
    if (!($69)) {
     break;
    }
    $70 = HEAP8[(31976)>>0]|0;
    $71 = $70 << 24 >> 24;
    $72 = ($71|0)==(44);
    if (!($72)) {
     break;
    }
   }
   _ungetlex();
   $73 = $2;
   $74 = ($73|0)!=(2);
   if ($74) {
    _Error(17441,$vararg_buffer18);
    break;
   }
   $75 = ((($9)) + 84|0);
   $76 = HEAP32[$75>>2]|0;
   $77 = ($76|0)==(10);
   if ($77) {
    $78 = ((($9)) + 1024|0);
    $79 = HEAP32[$78>>2]|0;
    $80 = ((($7)) + 1024|0);
    HEAP32[$80>>2] = $79;
    $81 = ((($9)) + 1020|0);
    $82 = HEAP32[$81>>2]|0;
    $83 = ((($7)) + 1020|0);
    HEAP32[$83>>2] = $82;
    $84 = ((($7)) + 1028|0);
    HEAP32[$84>>2] = 1;
    $85 = ((($7)) + 84|0);
    HEAP32[$85>>2] = 10;
   } else {
    $11 = 0;
    $86 = (_split($5,$6)|0);
    $11 = $86;
    $4 = 0;
    while(1) {
     $87 = $4;
     $88 = $11;
     $89 = (($88) + ($87<<2)|0);
     $90 = HEAP32[$89>>2]|0;
     $91 = ($90|0)!=(0|0);
     $92 = $4;
     if (!($91)) {
      break;
     }
     $93 = ($92|0)==(0);
     if ($93) {
      $94 = HEAP32[8086]|0;
      $95 = (_createRenban($94)|0);
      $96 = ((($7)) + 412|0);
      HEAP32[$96>>2] = $95;
      $97 = ((($7)) + 84|0);
      HEAP32[$97>>2] = 8;
     }
     _memset(($12|0),0,300)|0;
     $98 = $4;
     $99 = $11;
     $100 = (($99) + ($98<<2)|0);
     $101 = HEAP32[$100>>2]|0;
     (_strcpy($12,$101)|0);
     $102 = $4;
     _memcpy(($$byval_copy34|0),($7|0),3216)|0;
     _save_str_array($$byval_copy34,$102,$12);
     $103 = $4;
     $104 = (($103) + 1)|0;
     $4 = $104;
    }
    $105 = ((($7)) + 1020|0);
    HEAP32[$105>>2] = $92;
    $106 = $11;
    _split_free($106);
   }
   $107 = ((($7)) + 720|0);
   $108 = HEAP32[8088]|0;
   _memcpy(($$byval_copy35|0),($7|0),3216)|0;
   _ValLabel($15,$107,$108,$$byval_copy35,233);
   _memset(($7|0),0,3216)|0;
  }
 } while(0);
 $253 = ((($7)) + 3196|0);
 $254 = HEAP32[$253>>2]|0;
 $255 = ($254|0)!=(0|0);
 if ($255) {
  $256 = ((($7)) + 3196|0);
  $257 = HEAP32[$256>>2]|0;
  _free($257);
 }
 $258 = ((($7)) + 3200|0);
 $259 = HEAP32[$258>>2]|0;
 $260 = ($259|0)!=(0|0);
 if ($260) {
  $261 = ((($7)) + 3200|0);
  $262 = HEAP32[$261>>2]|0;
  _free($262);
 }
 $263 = ((($7)) + 1796|0);
 $264 = HEAP32[$263>>2]|0;
 $265 = ($264|0)!=(0|0);
 if ($265) {
  $266 = ((($7)) + 1796|0);
  $267 = HEAP32[$266>>2]|0;
  _free($267);
 }
 $268 = ((($7)) + 1024|0);
 $269 = HEAP32[$268>>2]|0;
 $270 = ($269|0)!=(0|0);
 if ($270) {
  $271 = ((($7)) + 1024|0);
  $272 = HEAP32[$271>>2]|0;
  _free($272);
 }
 $273 = ((($7)) + 4|0);
 $274 = HEAP32[$273>>2]|0;
 $275 = ($274|0)!=(0|0);
 if ($275) {
  $276 = ((($7)) + 4|0);
  $277 = HEAP32[$276>>2]|0;
  _free($277);
 }
 $278 = ((($7)) + 8|0);
 $279 = HEAP32[$278>>2]|0;
 $280 = ($279|0)!=(0|0);
 if ($280) {
  $281 = ((($7)) + 8|0);
  $282 = HEAP32[$281>>2]|0;
  _free($282);
 }
 $283 = HEAP32[$7>>2]|0;
 $284 = ($283|0)!=(0|0);
 if ($284) {
  $285 = HEAP32[$7>>2]|0;
  _free($285);
 }
 $286 = ((($9)) + 3196|0);
 $287 = HEAP32[$286>>2]|0;
 $288 = ($287|0)!=(0|0);
 if ($288) {
  $289 = ((($9)) + 3196|0);
  $290 = HEAP32[$289>>2]|0;
  _free($290);
 }
 $291 = ((($9)) + 3200|0);
 $292 = HEAP32[$291>>2]|0;
 $293 = ($292|0)!=(0|0);
 if ($293) {
  $294 = ((($9)) + 3200|0);
  $295 = HEAP32[$294>>2]|0;
  _free($295);
 }
 $296 = ((($9)) + 1796|0);
 $297 = HEAP32[$296>>2]|0;
 $298 = ($297|0)!=(0|0);
 if ($298) {
  $299 = ((($9)) + 1796|0);
  $300 = HEAP32[$299>>2]|0;
  _free($300);
 }
 $301 = ((($9)) + 1024|0);
 $302 = HEAP32[$301>>2]|0;
 $303 = ($302|0)!=(0|0);
 if ($303) {
  $304 = ((($9)) + 1024|0);
  $305 = HEAP32[$304>>2]|0;
  _free($305);
 }
 $306 = ((($9)) + 4|0);
 $307 = HEAP32[$306>>2]|0;
 $308 = ($307|0)!=(0|0);
 if ($308) {
  $309 = ((($9)) + 4|0);
  $310 = HEAP32[$309>>2]|0;
  _free($310);
 }
 $311 = ((($9)) + 8|0);
 $312 = HEAP32[$311>>2]|0;
 $313 = ($312|0)!=(0|0);
 if ($313) {
  $314 = ((($9)) + 8|0);
  $315 = HEAP32[$314>>2]|0;
  _free($315);
 }
 $316 = HEAP32[$9>>2]|0;
 $317 = ($316|0)!=(0|0);
 if (!($317)) {
  STACKTOP = sp;return;
 }
 $318 = HEAP32[$9>>2]|0;
 _free($318);
 STACKTOP = sp;return;
}
function _save_int_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $$byval_copy2 = sp + 72|0;
 $$byval_copy1 = sp + 56|0;
 $$byval_copy = sp + 40|0;
 $vararg_buffer = sp;
 $7 = sp + 8|0;
 $3 = $1;
 $4 = $2;
 $5 = 0;
 $6 = 0;
 _memset(((72996)|0),0,256)|0;
 $8 = ((($0)) + 720|0);
 (_strcpy((72996),$8)|0);
 $9 = ((($0)) + 404|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $6;
 $12 = ($11|0)<(0);
 if ($12) {
  (_printf(16303,$vararg_buffer)|0);
  $21 = ((($0)) + 84|0);
  HEAP32[$21>>2] = 6;
  _memset(($0|0),0,3216)|0;
  STACKTOP = sp;return;
 }
 $13 = $6;
 HEAP32[18244] = $13;
 $14 = $3;
 HEAP32[(72980)>>2] = $14;
 ;HEAP32[$$byval_copy>>2]=HEAP32[72976>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[72976+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[72976+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[72976+12>>2]|0;
 $15 = (_int_findData($$byval_copy)|0);
 HEAP32[8080] = $15;
 $16 = HEAP32[8080]|0;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $4;
  HEAP32[(72984)>>2] = $18;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[72976>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[72976+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[72976+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[72976+12>>2]|0;
  _int_addFirst($$byval_copy1);
  $21 = ((($0)) + 84|0);
  HEAP32[$21>>2] = 6;
  _memset(($0|0),0,3216)|0;
  STACKTOP = sp;return;
 } else {
  $19 = HEAP32[8080]|0;
  _int_getElement($7,$19);
  ;HEAP32[72976>>2]=HEAP32[$7>>2]|0;HEAP32[72976+4>>2]=HEAP32[$7+4>>2]|0;HEAP32[72976+8>>2]=HEAP32[$7+8>>2]|0;HEAP32[72976+12>>2]=HEAP32[$7+12>>2]|0;
  $20 = $4;
  HEAP32[(72984)>>2] = $20;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[72976>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[72976+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[72976+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[72976+12>>2]|0;
  _int_addFirst($$byval_copy2);
  $21 = ((($0)) + 84|0);
  HEAP32[$21>>2] = 6;
  _memset(($0|0),0,3216)|0;
  STACKTOP = sp;return;
 }
}
function _save_dbl_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = +$2;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0.0, $18 = 0, $19 = 0.0, $20 = 0, $3 = 0, $4 = 0.0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy2 = sp + 88|0;
 $$byval_copy1 = sp + 64|0;
 $$byval_copy = sp + 40|0;
 $vararg_buffer = sp + 32|0;
 $6 = sp;
 $3 = $1;
 $4 = $2;
 $5 = 0;
 _memset(((31556)|0),0,256)|0;
 $7 = ((($0)) + 720|0);
 (_strcpy((31556),$7)|0);
 $8 = ((($0)) + 408|0);
 $9 = HEAP32[$8>>2]|0;
 $5 = $9;
 $10 = $5;
 $11 = ($10|0)<(0);
 if ($11) {
  (_printf(16303,$vararg_buffer)|0);
  $20 = ((($0)) + 84|0);
  HEAP32[$20>>2] = 7;
  _memset(($0|0),0,3216)|0;
  STACKTOP = sp;return;
 }
 $12 = $5;
 HEAP32[7882] = $12;
 $13 = $3;
 HEAP32[(31532)>>2] = $13;
 ;HEAP32[$$byval_copy>>2]=HEAP32[31528>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[31528+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[31528+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[31528+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[31528+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[31528+20>>2]|0;
 $14 = (_dbl_findData($$byval_copy)|0);
 HEAP32[8085] = $14;
 $15 = HEAP32[8085]|0;
 $16 = ($15|0)<(0);
 if ($16) {
  $17 = $4;
  HEAPF64[(31536)>>3] = $17;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[31528>>2]|0;HEAP32[$$byval_copy1+4>>2]=HEAP32[31528+4>>2]|0;HEAP32[$$byval_copy1+8>>2]=HEAP32[31528+8>>2]|0;HEAP32[$$byval_copy1+12>>2]=HEAP32[31528+12>>2]|0;HEAP32[$$byval_copy1+16>>2]=HEAP32[31528+16>>2]|0;HEAP32[$$byval_copy1+20>>2]=HEAP32[31528+20>>2]|0;
  _dbl_addFirst($$byval_copy1);
  $20 = ((($0)) + 84|0);
  HEAP32[$20>>2] = 7;
  _memset(($0|0),0,3216)|0;
  STACKTOP = sp;return;
 } else {
  $18 = HEAP32[8085]|0;
  _dbl_getElement($6,$18);
  ;HEAP32[31528>>2]=HEAP32[$6>>2]|0;HEAP32[31528+4>>2]=HEAP32[$6+4>>2]|0;HEAP32[31528+8>>2]=HEAP32[$6+8>>2]|0;HEAP32[31528+12>>2]=HEAP32[$6+12>>2]|0;HEAP32[31528+16>>2]=HEAP32[$6+16>>2]|0;HEAP32[31528+20>>2]=HEAP32[$6+20>>2]|0;
  $19 = $4;
  HEAPF64[(31536)>>3] = $19;
  ;HEAP32[$$byval_copy2>>2]=HEAP32[31528>>2]|0;HEAP32[$$byval_copy2+4>>2]=HEAP32[31528+4>>2]|0;HEAP32[$$byval_copy2+8>>2]=HEAP32[31528+8>>2]|0;HEAP32[$$byval_copy2+12>>2]=HEAP32[31528+12>>2]|0;HEAP32[$$byval_copy2+16>>2]=HEAP32[31528+16>>2]|0;HEAP32[$$byval_copy2+20>>2]=HEAP32[31528+20>>2]|0;
  _dbl_addFirst($$byval_copy2);
  $20 = ((($0)) + 84|0);
  HEAP32[$20>>2] = 7;
  _memset(($0|0),0,3216)|0;
  STACKTOP = sp;return;
 }
}
function _save_str_array($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1280|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1280|0);
 $$byval_copy2 = sp + 960|0;
 $$byval_copy1 = sp + 648|0;
 $$byval_copy = sp + 336|0;
 $vararg_buffer = sp;
 $7 = sp + 8|0;
 $3 = $1;
 $4 = $2;
 $5 = 0;
 $6 = 0;
 _memset(((72140)|0),0,256)|0;
 $8 = ((($0)) + 720|0);
 (_strcpy((72140),$8)|0);
 $9 = ((($0)) + 412|0);
 $10 = HEAP32[$9>>2]|0;
 $6 = $10;
 $11 = $6;
 $12 = ($11|0)<(0);
 if ($12) {
  (_printf(16303,$vararg_buffer)|0);
  $21 = ((($0)) + 84|0);
  HEAP32[$21>>2] = 8;
  _memset(($0|0),0,3216)|0;
  STACKTOP = sp;return;
 }
 $13 = $6;
 HEAP32[17956] = $13;
 $14 = $3;
 HEAP32[(71828)>>2] = $14;
 _memcpy(($$byval_copy|0),(71824|0),312)|0;
 $15 = (_string_findData($$byval_copy)|0);
 HEAP32[8074] = $15;
 $16 = HEAP32[8074]|0;
 $17 = ($16|0)<(0);
 if ($17) {
  $18 = $4;
  (_strcpy((71832),$18)|0);
  _memcpy(($$byval_copy1|0),(71824|0),312)|0;
  _string_addFirst($$byval_copy1);
  $21 = ((($0)) + 84|0);
  HEAP32[$21>>2] = 8;
  _memset(($0|0),0,3216)|0;
  STACKTOP = sp;return;
 } else {
  $19 = HEAP32[8074]|0;
  _string_getElement($7,$19);
  _memcpy((71824|0),($7|0),312)|0;
  $20 = $4;
  (_strcpy((71832),$20)|0);
  _memcpy(($$byval_copy2|0),(71824|0),312)|0;
  _string_addFirst($$byval_copy2);
  $21 = ((($0)) + 84|0);
  HEAP32[$21>>2] = 8;
  _memset(($0|0),0,3216)|0;
  STACKTOP = sp;return;
 }
}
function _interpretWhileCondition($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 12960|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(12960|0);
 $$byval_copy = sp + 9648|0;
 $7 = sp + 6432|0;
 $9 = sp + 12896|0;
 $13 = sp + 3216|0;
 $14 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $10 = 0;
 $11 = 0;
 $12 = 0;
 $8 = 0;
 $15 = $4;
 $8 = $15;
 _memset(($7|0),0,3216)|0;
 $16 = ((($7)) + 88|0);
 HEAP32[$16>>2] = 0;
 dest=$9; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 $17 = ((($7)) + 104|0);
 _memset(($17|0),0,300)|0;
 $18 = HEAP32[(73792)>>2]|0;
 HEAP32[8220] = $18;
 HEAP32[18446] = 0;
 HEAP32[(73788)>>2] = 0;
 $19 = $8;
 HEAP32[(73792)>>2] = $19;
 (_getlex()|0);
 (_getlex()|0);
 $20 = (_strncmp((31976),17819,1)|0);
 $21 = ($20|0)==(0);
 if ($21) {
  $3 = 0;
  $42 = $3;
  STACKTOP = sp;return ($42|0);
 }
 $22 = (_strncmp((31976),17821,1)|0);
 $23 = ($22|0)==(0);
 if ($23) {
  $3 = 0;
  $42 = $3;
  STACKTOP = sp;return ($42|0);
 }
 $24 = HEAP32[18446]|0;
 $11 = $24;
 $25 = HEAP32[(73788)>>2]|0;
 $12 = $25;
 $26 = HEAP32[7954]|0;
 $27 = ($26|0)==(224);
 if ($27) {
  (_strcpy($9,(31976))|0);
  (_getlex()|0);
  $28 = (_strncmp((31976),16539,1)|0);
  $29 = ($28|0)==(0);
  if ($29) {
   (_getlex()|0);
   $30 = (_strncmp((31976),16539,1)|0);
   $31 = ($30|0)!=(0);
   if ($31) {
    $10 = 1;
   }
  }
  $32 = $11;
  HEAP32[18446] = $32;
  $33 = $12;
  HEAP32[(73788)>>2] = $33;
 }
 _ungetlex();
 _expression($13);
 _memcpy(($7|0),($13|0),3216)|0;
 $34 = HEAP32[8220]|0;
 HEAP32[(73792)>>2] = $34;
 $35 = $5;
 HEAP32[18446] = $35;
 $36 = $6;
 HEAP32[(73788)>>2] = $36;
 $4 = 0;
 $37 = $10;
 $38 = ($37|0)!=(0);
 if ($38) {
  $39 = HEAP32[8088]|0;
  _memcpy(($$byval_copy|0),($7|0),3216)|0;
  _ValLabel($14,$9,$39,$$byval_copy,233);
 }
 $40 = ((($7)) + 88|0);
 $41 = HEAP32[$40>>2]|0;
 $3 = $41;
 $42 = $3;
 STACKTOP = sp;return ($42|0);
}
function _InterpreterWhileIncr($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = $0;
 while(1) {
  (_Interpreter()|0);
  $2 = HEAP32[18446]|0;
  $3 = $1;
  $4 = ($2|0)<=($3|0);
  $5 = HEAP32[7954]|0;
  $6 = ($5|0)!=(20);
  $or$cond = $4 & $6;
  $7 = HEAP32[7954]|0;
  $8 = ($7|0)!=(28);
  $or$cond3 = $or$cond & $8;
  if (!($or$cond3)) {
   break;
  }
 }
 STACKTOP = sp;return;
}
function _InterpreterForInitIncr() {
 var $$byval_copy = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0.0, $58 = 0.0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0.0, $8 = 0, $80 = 0.0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0.0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0;
 var $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer4 = 0, $vararg_buffer7 = 0, $vararg_ptr10 = 0, $vararg_ptr14 = 0, $vararg_ptr6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 52112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(52112|0);
 $$byval_copy19 = sp + 48280|0;
 $$byval_copy18 = sp + 45064|0;
 $$byval_copy17 = sp + 41848|0;
 $$byval_copy16 = sp + 38632|0;
 $$byval_copy15 = sp + 35416|0;
 $$byval_copy = sp + 32200|0;
 $vararg_buffer11 = sp + 32192|0;
 $vararg_buffer7 = sp + 32184|0;
 $vararg_buffer4 = sp + 32176|0;
 $vararg_buffer2 = sp + 32168|0;
 $vararg_buffer = sp + 32160|0;
 $0 = sp + 28944|0;
 $2 = sp + 25728|0;
 $3 = sp + 22512|0;
 $4 = sp + 51800|0;
 $5 = sp + 51500|0;
 $6 = sp + 19296|0;
 $7 = sp + 16080|0;
 $8 = sp + 12864|0;
 $9 = sp + 9648|0;
 $10 = sp + 6432|0;
 $11 = sp + 3216|0;
 $12 = sp;
 $1 = 0;
 _memset(($2|0),0,3216)|0;
 _memset(($0|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,300)|0;
 _memset(($5|0),0,300)|0;
 HEAP32[18446] = 0;
 HEAP32[(73788)>>2] = 0;
 (_getlex()|0);
 (_getlex()|0);
 $13 = (_strncmp((31976),17819,1)|0);
 $14 = ($13|0)==(0);
 if ($14) {
  STACKTOP = sp;return;
 }
 _ungetlex();
 while(1) {
  _memset(($2|0),0,3216)|0;
  _memset(($3|0),0,3216)|0;
  _memset(($4|0),0,300)|0;
  (_getlex()|0);
  $15 = HEAP32[7954]|0;
  $16 = ($15|0)==(224);
  do {
   if ($16) {
    _memset(($4|0),0,300)|0;
    (_strcpy($4,(31976))|0);
    (_getlex()|0);
    $17 = HEAP32[7954]|0;
    $18 = ($17|0)==(28);
    if ($18) {
     _Error(19234,$vararg_buffer);
    }
    $19 = HEAP32[7954]|0;
    $20 = ($19|0)==(227);
    do {
     if ($20) {
      $21 = HEAP8[(31976)>>0]|0;
      $22 = $21 << 24 >> 24;
      $23 = ($22|0)==(61);
      if (!($23)) {
       $24 = HEAP8[(31976)>>0]|0;
       $25 = $24 << 24 >> 24;
       $26 = ($25|0)==(43);
       if (!($26)) {
        $27 = HEAP8[(31976)>>0]|0;
        $28 = $27 << 24 >> 24;
        $29 = ($28|0)==(45);
        if (!($29)) {
         label = 14;
         break;
        }
       }
      }
      $30 = HEAP8[(31976)>>0]|0;
      $31 = $30 << 24 >> 24;
      $32 = ($31|0)==(43);
      if ($32) {
       $1 = 1;
       break;
      }
      $33 = HEAP8[(31976)>>0]|0;
      $34 = $33 << 24 >> 24;
      $35 = ($34|0)==(45);
      if ($35) {
       $1 = -1;
      }
     } else {
      label = 14;
     }
    } while(0);
    if ((label|0) == 14) {
     label = 0;
     _Error(18086,$vararg_buffer2);
    }
    (_getlex()|0);
    $36 = HEAP32[7954]|0;
    $37 = ($36|0)==(227);
    do {
     if ($37) {
      $38 = HEAP8[(31976)>>0]|0;
      $39 = $38 << 24 >> 24;
      $40 = ($39|0)==(43);
      if ($40) {
       $41 = $1;
       $42 = ($41|0)==(1);
       if ($42) {
        $43 = (_strlen(128380)|0);
        $44 = ($43>>>0)>(0);
        if ($44) {
         HEAP32[$vararg_buffer4>>2] = 128380;
         $vararg_ptr6 = ((($vararg_buffer4)) + 4|0);
         HEAP32[$vararg_ptr6>>2] = $4;
         (_sprintf($5,15808,$vararg_buffer4)|0);
         $45 = HEAP32[8091]|0;
         _memcpy(($$byval_copy|0),($3|0),3216)|0;
         _ValLabel($6,$5,$45,$$byval_copy,232);
         _memcpy(($3|0),($6|0),3216)|0;
        } else {
         $46 = HEAP32[8088]|0;
         _memcpy(($$byval_copy15|0),($3|0),3216)|0;
         _ValLabel($7,$4,$46,$$byval_copy15,232);
         _memcpy(($3|0),($7|0),3216)|0;
        }
        $47 = ((($3)) + 84|0);
        $48 = HEAP32[$47>>2]|0;
        $49 = ($48|0)==(0);
        if ($49) {
         $50 = ((($3)) + 88|0);
         $51 = HEAP32[$50>>2]|0;
         $52 = (($51) + 1)|0;
         HEAP32[$50>>2] = $52;
         break;
        }
        $53 = ((($3)) + 84|0);
        $54 = HEAP32[$53>>2]|0;
        $55 = ($54|0)==(1);
        if ($55) {
         $56 = ((($3)) + 96|0);
         $57 = +HEAPF64[$56>>3];
         $58 = $57 + 1.0;
         $59 = ((($3)) + 96|0);
         HEAPF64[$59>>3] = $58;
        }
       }
      } else {
       label = 25;
      }
     } else {
      label = 25;
     }
    } while(0);
    do {
     if ((label|0) == 25) {
      label = 0;
      $60 = HEAP8[(31976)>>0]|0;
      $61 = $60 << 24 >> 24;
      $62 = ($61|0)==(45);
      if ($62) {
       $63 = $1;
       $64 = ($63|0)==(-1);
       if (!($64)) {
        break;
       }
       $65 = (_strlen(128380)|0);
       $66 = ($65>>>0)>(0);
       if ($66) {
        HEAP32[$vararg_buffer7>>2] = 128380;
        $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
        HEAP32[$vararg_ptr10>>2] = $4;
        (_sprintf($5,15808,$vararg_buffer7)|0);
        $67 = HEAP32[8091]|0;
        _memcpy(($$byval_copy16|0),($3|0),3216)|0;
        _ValLabel($8,$5,$67,$$byval_copy16,232);
        _memcpy(($3|0),($8|0),3216)|0;
       } else {
        $68 = HEAP32[8088]|0;
        _memcpy(($$byval_copy17|0),($3|0),3216)|0;
        _ValLabel($9,$4,$68,$$byval_copy17,232);
        _memcpy(($3|0),($9|0),3216)|0;
       }
       $69 = ((($3)) + 84|0);
       $70 = HEAP32[$69>>2]|0;
       $71 = ($70|0)==(0);
       if ($71) {
        $72 = ((($3)) + 88|0);
        $73 = HEAP32[$72>>2]|0;
        $74 = (($73) + -1)|0;
        HEAP32[$72>>2] = $74;
        break;
       }
       $75 = ((($3)) + 84|0);
       $76 = HEAP32[$75>>2]|0;
       $77 = ($76|0)==(1);
       if (!($77)) {
        break;
       }
       $78 = ((($3)) + 96|0);
       $79 = +HEAPF64[$78>>3];
       $80 = $79 + 1.0;
       $81 = ((($3)) + 96|0);
       HEAPF64[$81>>3] = $80;
       break;
      }
      $82 = HEAP32[7954]|0;
      $83 = ($82|0)==(223);
      if ($83) {
       $84 = HEAP32[(31976)>>2]|0;
       $85 = ((($3)) + 88|0);
       HEAP32[$85>>2] = $84;
       $86 = ((($3)) + 84|0);
       HEAP32[$86>>2] = 0;
       break;
      }
      $87 = HEAP32[7954]|0;
      $88 = ($87|0)==(226);
      if ($88) {
       $89 = +HEAPF64[(31976)>>3];
       $90 = ((($3)) + 96|0);
       HEAPF64[$90>>3] = $89;
       $91 = ((($3)) + 84|0);
       HEAP32[$91>>2] = 1;
       break;
      }
      $92 = HEAP32[7954]|0;
      $93 = ($92|0)==(225);
      if (!($93)) {
       $98 = HEAP32[7954]|0;
       $99 = ($98|0)==(224);
       if (!($99)) {
        break;
       }
       _ungetlex();
       _ungetlex();
       _expression($10);
       _memcpy(($2|0),($10|0),3216)|0;
       _memcpy(($3|0),($2|0),3216)|0;
       $100 = ((($2)) + 84|0);
       $101 = HEAP32[$100>>2]|0;
       $102 = ((($3)) + 84|0);
       HEAP32[$102>>2] = $101;
       break;
      }
      $94 = (_strlen((31976))|0);
      $95 = ($94>>>0)>(0);
      $96 = ((($3)) + 104|0);
      if ($95) {
       (_strcpy($96,(31976))|0);
      } else {
       (_strcpy($96,1358125)|0);
      }
      $97 = ((($3)) + 84|0);
      HEAP32[$97>>2] = 3;
     }
    } while(0);
    $103 = (_strlen(128380)|0);
    $104 = ($103>>>0)>(0);
    if ($104) {
     _memset(($5|0),0,300)|0;
     HEAP32[$vararg_buffer11>>2] = 128380;
     $vararg_ptr14 = ((($vararg_buffer11)) + 4|0);
     HEAP32[$vararg_ptr14>>2] = $4;
     (_sprintf($5,15808,$vararg_buffer11)|0);
     $105 = HEAP32[8091]|0;
     _memcpy(($$byval_copy18|0),($3|0),3216)|0;
     _ValLabel($11,$5,$105,$$byval_copy18,233);
     break;
    } else {
     $106 = HEAP32[8088]|0;
     _memcpy(($$byval_copy19|0),($3|0),3216)|0;
     _ValLabel($12,$4,$106,$$byval_copy19,233);
     break;
    }
   }
  } while(0);
  $107 = HEAP32[7954]|0;
  $108 = ($107|0)!=(28);
  if (!($108)) {
   label = 51;
   break;
  }
  $109 = (_strncmp((31976),17821,1)|0);
  $110 = ($109|0)!=(0);
  if (!($110)) {
   label = 51;
   break;
  }
  $111 = (_strncmp((31976),17819,1)|0);
  $112 = ($111|0)!=(0);
  if (!($112)) {
   label = 51;
   break;
  }
 }
 if ((label|0) == 51) {
  STACKTOP = sp;return;
 }
}
function _interpretForCondition($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 6464|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(6464|0);
 $7 = sp + 3216|0;
 $9 = sp;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $8 = 0;
 $10 = $4;
 $8 = $10;
 _memset(($7|0),0,3216)|0;
 $11 = ((($7)) + 88|0);
 HEAP32[$11>>2] = 0;
 $12 = ((($7)) + 104|0);
 _memset(($12|0),0,300)|0;
 $13 = HEAP32[(73792)>>2]|0;
 HEAP32[8223] = $13;
 HEAP32[18446] = 0;
 HEAP32[(73788)>>2] = 0;
 ;HEAP32[(73792)>>2]=0|0;
 $14 = $8;
 HEAP32[(73792)>>2] = $14;
 (_getlex()|0);
 (_getlex()|0);
 $15 = (_strncmp((31976),17819,1)|0);
 $16 = ($15|0)==(0);
 if ($16) {
  $3 = 0;
  $24 = $3;
  STACKTOP = sp;return ($24|0);
 }
 $17 = (_strncmp((31976),17821,1)|0);
 $18 = ($17|0)==(0);
 if ($18) {
  $3 = 0;
  $24 = $3;
  STACKTOP = sp;return ($24|0);
 } else {
  _ungetlex();
  _expression($9);
  _memcpy(($7|0),($9|0),3216)|0;
  $19 = HEAP32[8223]|0;
  HEAP32[(73792)>>2] = $19;
  $20 = $5;
  HEAP32[18446] = $20;
  $21 = $6;
  HEAP32[(73788)>>2] = $21;
  HEAP32[8223] = 0;
  $22 = ((($7)) + 88|0);
  $23 = HEAP32[$22>>2]|0;
  $3 = $23;
  $24 = $3;
  STACKTOP = sp;return ($24|0);
 }
 return (0)|0;
}
function _InterpreterForIncr($0) {
 $0 = $0|0;
 var $$byval_copy = 0, $$byval_copy17 = 0, $$old = 0, $$old7 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond14 = 0;
 var $or$cond4 = 0, $or$cond8 = 0, $vararg_buffer = 0, $vararg_buffer15 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16176|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16176|0);
 $$byval_copy17 = sp + 12880|0;
 $$byval_copy = sp + 9664|0;
 $vararg_buffer15 = sp + 9656|0;
 $vararg_buffer = sp + 9648|0;
 $2 = sp + 16104|0;
 $3 = sp + 6432|0;
 $4 = sp + 3216|0;
 $5 = sp;
 $1 = $0;
 dest=$2; stop=dest+64|0; do { HEAP8[dest>>0]=0|0; dest=dest+1|0; } while ((dest|0) < (stop|0));
 _memset(($3|0),0,3216)|0;
 while(1) {
  (_Interpreter()|0);
  $6 = HEAP32[18446]|0;
  $7 = $1;
  $8 = ($6|0)!=($7|0);
  $9 = HEAP32[7954]|0;
  $10 = ($9|0)!=(23);
  $or$cond = $8 & $10;
  $11 = HEAP32[7954]|0;
  $12 = ($11|0)!=(28);
  $or$cond11 = $or$cond & $12;
  if (!($or$cond11)) {
   break;
  }
 }
 $13 = HEAP32[8222]|0;
 HEAP32[(73792)>>2] = $13;
 $14 = HEAP32[18461]|0;
 $15 = ($14|0)>(1);
 if (!($15)) {
  STACKTOP = sp;return;
 }
 while(1) {
  (_getlex()|0);
  $16 = HEAP32[7954]|0;
  L8: do {
   switch ($16|0) {
   case 208:  {
    _memcpy(($$byval_copy|0),($3|0),3216)|0;
    _ValLabel($4,1358125,0,$$byval_copy,236);
    break;
   }
   case 16:  {
    (_getlex()|0);
    $17 = HEAP32[7954]|0;
    switch ($17|0) {
    case 225:  {
     $18 = (_strlen((31976))|0);
     $19 = ($18>>>0)>(0);
     if ($19) {
      (_strcpy((28416),(31976))|0);
     } else {
      (_strcpy((28416),1358125)|0);
     }
     HEAP32[(28396)>>2] = 3;
     break L8;
     break;
    }
    case 223:  {
     $20 = HEAP32[(31976)>>2]|0;
     HEAP32[(28400)>>2] = $20;
     HEAP32[(28396)>>2] = 0;
     break L8;
     break;
    }
    case 228: case 224:  {
     _memset(($3|0),0,3216)|0;
     $21 = HEAP32[8088]|0;
     _memcpy(($$byval_copy17|0),($3|0),3216)|0;
     _ValLabel($5,(31976),$21,$$byval_copy17,232);
     _memcpy(($3|0),($5|0),3216)|0;
     $22 = ((($3)) + 84|0);
     $23 = HEAP32[$22>>2]|0;
     $24 = ($23|0)==(0);
     do {
      if ($24) {
       $25 = ((($3)) + 88|0);
       $26 = HEAP32[$25>>2]|0;
       HEAP32[(28400)>>2] = $26;
       HEAP32[(28396)>>2] = 0;
      } else {
       $27 = ((($3)) + 84|0);
       $28 = HEAP32[$27>>2]|0;
       $29 = ($28|0)==(3);
       if ($29) {
        $30 = ((($3)) + 104|0);
        (_strcpy((28416),$30)|0);
        HEAP32[(28396)>>2] = 3;
        break;
       } else {
        _memcpy((28312|0),($3|0),3216)|0;
        break;
       }
      }
     } while(0);
     $31 = HEAP32[8088]|0;
     $32 = ($31|0)>(0);
     $33 = HEAP32[7954]|0;
     $34 = ($33|0)!=(227);
     $or$cond8 = $32 & $34;
     if (!($or$cond8)) {
      break L8;
     }
     while(1) {
      $35 = HEAP8[(31976)>>0]|0;
      $36 = $35 << 24 >> 24;
      $37 = ($36|0)!=(125);
      if (!($37)) {
       break L8;
      }
      (_getlex()|0);
      $38 = HEAP32[7954]|0;
      $39 = ($38|0)==(28);
      if ($39) {
       _Error(16847,$vararg_buffer);
      }
      $$old = HEAP32[7954]|0;
      $$old7 = ($$old|0)!=(227);
      if (!($$old7)) {
       break;
      }
     }
     break;
    }
    default: {
     _Error(16860,$vararg_buffer15);
     break L8;
    }
    }
    break;
   }
   case 227:  {
    $40 = HEAP32[7954]|0;
    $41 = ($40|0)==(227);
    if ($41) {
     $42 = HEAP8[(31976)>>0]|0;
     $43 = $42 << 24 >> 24;
     $44 = ($43|0)==(38);
     if ($44) {
      (_strcpy($2,1358125)|0);
      _keySub($2);
     }
    }
    break;
   }
   case 29:  {
    (_strcpy($2,1358125)|0);
    _keyUntaian($2);
    break;
   }
   case 228:  {
    (_strcpy($2,(31976))|0);
    _keyArray($2);
    break;
   }
   default: {
   }
   }
  } while(0);
  $45 = HEAP32[18446]|0;
  $46 = $1;
  $47 = ($45|0)!=($46|0);
  $48 = HEAP32[7954]|0;
  $49 = ($48|0)!=(23);
  $or$cond4 = $47 & $49;
  if (!($or$cond4)) {
   label = 30;
   break;
  }
  $50 = (_strncmp((31976),19229,1)|0);
  $51 = ($50|0)!=(0);
  $52 = HEAP32[7954]|0;
  $53 = ($52|0)!=(28);
  $or$cond14 = $51 & $53;
  if (!($or$cond14)) {
   label = 30;
   break;
  }
 }
 if ((label|0) == 30) {
  STACKTOP = sp;return;
 }
}
function _del_int_array($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $2 = $1;
 $3 = 0;
 $4 = 0;
 _memset(((72996)|0),0,256)|0;
 $5 = ((($0)) + 720|0);
 (_strcpy((72996),$5)|0);
 $6 = ((($0)) + 404|0);
 $7 = HEAP32[$6>>2]|0;
 $4 = $7;
 $8 = $4;
 $9 = ($8|0)<(0);
 do {
  if ($9) {
   (_printf(16303,$vararg_buffer)|0);
  } else {
   $10 = $4;
   HEAP32[18244] = $10;
   $11 = $2;
   HEAP32[(72980)>>2] = $11;
   ;HEAP32[$$byval_copy>>2]=HEAP32[72976>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[72976+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[72976+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[72976+12>>2]|0;
   $12 = (_int_findData($$byval_copy)|0);
   HEAP32[8080] = $12;
   $13 = HEAP32[8080]|0;
   $14 = ($13|0)<(0);
   if ($14) {
    $3 = 13;
    break;
   } else {
    $15 = HEAP32[8080]|0;
    _int_removeAt($15);
    break;
   }
  }
 } while(0);
 $16 = ((($0)) + 84|0);
 HEAP32[$16>>2] = 6;
 _memset(($0|0),0,3216)|0;
 STACKTOP = sp;return;
}
function _del_dbl_array($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy = sp + 16|0;
 $vararg_buffer = sp + 8|0;
 $2 = $1;
 $3 = 0.0;
 $4 = 0;
 _memset(((31556)|0),0,256)|0;
 $5 = ((($0)) + 720|0);
 (_strcpy((31556),$5)|0);
 $6 = ((($0)) + 408|0);
 $7 = HEAP32[$6>>2]|0;
 $4 = $7;
 $8 = $4;
 $9 = ($8|0)<(0);
 do {
  if ($9) {
   (_printf(16303,$vararg_buffer)|0);
  } else {
   $10 = $4;
   HEAP32[7882] = $10;
   $11 = $2;
   HEAP32[(31532)>>2] = $11;
   ;HEAP32[$$byval_copy>>2]=HEAP32[31528>>2]|0;HEAP32[$$byval_copy+4>>2]=HEAP32[31528+4>>2]|0;HEAP32[$$byval_copy+8>>2]=HEAP32[31528+8>>2]|0;HEAP32[$$byval_copy+12>>2]=HEAP32[31528+12>>2]|0;HEAP32[$$byval_copy+16>>2]=HEAP32[31528+16>>2]|0;HEAP32[$$byval_copy+20>>2]=HEAP32[31528+20>>2]|0;
   $12 = (_dbl_findData($$byval_copy)|0);
   HEAP32[8085] = $12;
   $13 = HEAP32[8085]|0;
   $14 = ($13|0)<(0);
   if ($14) {
    $3 = 13.0;
    break;
   } else {
    $15 = HEAP32[8085]|0;
    _dbl_removeAt($15);
    break;
   }
  }
 } while(0);
 $16 = ((($0)) + 84|0);
 HEAP32[$16>>2] = 7;
 _memset(($0|0),0,3216)|0;
 STACKTOP = sp;return;
}
function _del_str_array($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy = sp + 16|0;
 $vararg_buffer = sp;
 $2 = $1;
 $3 = 0;
 $4 = 0;
 _memset(((72140)|0),0,256)|0;
 $5 = ((($0)) + 720|0);
 (_strcpy((72140),$5)|0);
 $6 = ((($0)) + 412|0);
 $7 = HEAP32[$6>>2]|0;
 $4 = $7;
 $8 = $4;
 $9 = ($8|0)<(0);
 if ($9) {
  (_printf(16303,$vararg_buffer)|0);
 } else {
  $10 = $4;
  HEAP32[17956] = $10;
  $11 = $2;
  HEAP32[(71828)>>2] = $11;
  _memcpy(($$byval_copy|0),(71824|0),312)|0;
  $12 = (_string_findData($$byval_copy)|0);
  HEAP32[8074] = $12;
  $13 = HEAP32[8074]|0;
  $14 = ($13|0)<(0);
  if (!($14)) {
   $15 = HEAP32[8074]|0;
   _string_removeAt($15);
  }
 }
 $16 = ((($0)) + 84|0);
 HEAP32[$16>>2] = 8;
 _memset(($0|0),0,3216)|0;
 STACKTOP = sp;return;
}
function _ReadSource() {
 var $$byval_copy = 0, $$byval_copy46 = 0, $$byval_copy47 = 0, $$byval_copy48 = 0, $$byval_copy49 = 0, $$byval_copy50 = 0, $$byval_copy51 = 0, $$byval_copy52 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0;
 var $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0;
 var $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0.0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0;
 var $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0;
 var $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0;
 var $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0;
 var $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0;
 var $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0;
 var $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0;
 var $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $vararg_buffer = 0, $vararg_buffer10 = 0, $vararg_buffer12 = 0, $vararg_buffer14 = 0;
 var $vararg_buffer16 = 0, $vararg_buffer18 = 0, $vararg_buffer20 = 0, $vararg_buffer23 = 0, $vararg_buffer27 = 0, $vararg_buffer29 = 0, $vararg_buffer31 = 0, $vararg_buffer34 = 0, $vararg_buffer38 = 0, $vararg_buffer4 = 0, $vararg_buffer40 = 0, $vararg_buffer42 = 0, $vararg_buffer44 = 0, $vararg_buffer6 = 0, $vararg_buffer8 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr37 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 51920|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(51920|0);
 $$byval_copy52 = sp + 41968|0;
 $$byval_copy51 = sp + 38752|0;
 $$byval_copy50 = sp + 48888|0;
 $$byval_copy49 = sp + 47968|0;
 $$byval_copy48 = sp + 47048|0;
 $$byval_copy47 = sp + 35536|0;
 $$byval_copy46 = sp + 32320|0;
 $$byval_copy = sp + 29104|0;
 $vararg_buffer44 = sp + 29096|0;
 $vararg_buffer42 = sp + 29088|0;
 $vararg_buffer40 = sp + 29080|0;
 $vararg_buffer38 = sp + 29072|0;
 $vararg_buffer34 = sp + 29064|0;
 $vararg_buffer31 = sp + 29056|0;
 $vararg_buffer29 = sp + 29048|0;
 $vararg_buffer27 = sp + 29040|0;
 $vararg_buffer23 = sp + 29024|0;
 $vararg_buffer20 = sp + 29016|0;
 $vararg_buffer18 = sp + 29008|0;
 $vararg_buffer16 = sp + 29000|0;
 $vararg_buffer14 = sp + 28992|0;
 $vararg_buffer12 = sp + 28984|0;
 $vararg_buffer10 = sp + 28976|0;
 $vararg_buffer8 = sp + 28968|0;
 $vararg_buffer6 = sp + 28960|0;
 $vararg_buffer4 = sp + 28952|0;
 $vararg_buffer = sp + 28944|0;
 $1 = sp + 25728|0;
 $2 = sp + 22512|0;
 $3 = sp + 19296|0;
 $4 = sp + 16080|0;
 $5 = sp + 51616|0;
 $6 = sp + 51016|0;
 $7 = sp + 50712|0;
 $8 = sp + 50112|0;
 $9 = sp + 49812|0;
 $10 = sp + 46120|0;
 $11 = sp + 45200|0;
 $17 = sp + 12864|0;
 $18 = sp + 9648|0;
 $19 = sp + 6432|0;
 $20 = sp + 3216|0;
 $21 = sp;
 $12 = 0;
 $13 = 0;
 $14 = 0;
 $15 = 0;
 $16 = 0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 _memset(($3|0),0,3216)|0;
 _memset(($4|0),0,3216)|0;
 _memset(($5|0),0,300)|0;
 _memset(($6|0),0,600)|0;
 _memset(($9|0),0,300)|0;
 _memset(($7|0),0,300)|0;
 _memset(($8|0),0,600)|0;
 _memset(($10|0),0,920)|0;
 _memset(($11|0),0,920)|0;
 _memcpy(($$byval_copy|0),($2|0),3216)|0;
 _ValLabel($17,18650,0,$$byval_copy,231);
 $22 = ((($17)) + 88|0);
 $23 = HEAP32[$22>>2]|0;
 $24 = ($23|0)==(1);
 if ($24) {
  _Error(18655,$vararg_buffer);
 }
 while(1) {
  (_getlex()|0);
  $25 = HEAP32[7954]|0;
  $26 = ($25|0)==(6);
  do {
   if ($26) {
    (_getlex()|0);
    $27 = HEAP32[7954]|0;
    $28 = ($27|0)!=(224);
    if ($28) {
     _Error(18724,$vararg_buffer4);
    }
    $29 = ((($1)) + 12|0);
    (_strcpy($29,(31976))|0);
    $30 = HEAP32[18446]|0;
    $31 = ((($1)) + 88|0);
    HEAP32[$31>>2] = $30;
    _memcpy(($$byval_copy46|0),($1|0),3216)|0;
    _ValLabel($18,(31976),0,$$byval_copy46,233);
   } else {
    $32 = HEAP32[7954]|0;
    $33 = ($32|0)==(15);
    if ($33) {
     _memset(($5|0),0,300)|0;
     _memset(($6|0),0,600)|0;
     (_getlex()|0);
     $34 = HEAP32[7954]|0;
     $35 = ($34|0)!=(224);
     if ($35) {
      _Error(18750,$vararg_buffer6);
     }
     $36 = HEAP32[18446]|0;
     $37 = ((($2)) + 88|0);
     HEAP32[$37>>2] = $36;
     $38 = ((($2)) + 84|0);
     HEAP32[$38>>2] = 9;
     (_strcpy($5,(31976))|0);
     (_getlex()|0);
     $39 = HEAP32[7954]|0;
     $40 = ($39|0)!=(227);
     if ($40) {
      label = 12;
     } else {
      $41 = (_strncmp((31976),16770,1)|0);
      $42 = ($41|0)!=(0);
      if ($42) {
       label = 12;
      }
     }
     if ((label|0) == 12) {
      label = 0;
      _Error(16772,$vararg_buffer8);
     }
     (_strcpy($6,1358125)|0);
     while(1) {
      $43 = HEAP8[(31976)>>0]|0;
      $44 = $43 << 24 >> 24;
      $45 = ($44|0)!=(41);
      $46 = HEAP32[7954]|0;
      $47 = ($46|0)!=(28);
      $48 = $45 ? $47 : 0;
      if (!($48)) {
       break;
      }
      (_getlex()|0);
      $49 = HEAP8[(31976)>>0]|0;
      $50 = $49 << 24 >> 24;
      $51 = ($50|0)==(41);
      if ($51) {
       break;
      }
      $52 = HEAP32[7954]|0;
      $53 = ($52|0)!=(224);
      if ($53) {
       _Error(18767,$vararg_buffer10);
      }
      (_strcat($6,(31976))|0);
      (_getlex()|0);
      $54 = HEAP8[(31976)>>0]|0;
      $55 = $54 << 24 >> 24;
      $56 = ($55|0)==(44);
      if (!($56)) {
       continue;
      }
      (_strcat($6,(31976))|0);
     }
     (_getlex()|0);
     $57 = HEAP32[7954]|0;
     $58 = ($57|0)!=(227);
     if ($58) {
      label = 22;
     } else {
      $59 = (_strncmp((31976),17467,1)|0);
      $60 = ($59|0)!=(0);
      if ($60) {
       label = 22;
      }
     }
     if ((label|0) == 22) {
      label = 0;
      _Error(18784,$vararg_buffer12);
     }
     $61 = HEAP32[18446]|0;
     $62 = (($61) - 1)|0;
     $63 = ((($2)) + 1784|0);
     HEAP32[$63>>2] = $62;
     while(1) {
      $64 = HEAP8[(31976)>>0]|0;
      $65 = $64 << 24 >> 24;
      $66 = ($65|0)!=(125);
      $67 = HEAP32[7954]|0;
      $68 = ($67|0)!=(28);
      $69 = $66 ? $68 : 0;
      if (!($69)) {
       break;
      }
      (_getlex()|0);
     }
     $70 = ((($2)) + 1784|0);
     $71 = HEAP32[$70>>2]|0;
     $13 = $71;
     while(1) {
      $72 = $13;
      $73 = (($72) + 1)|0;
      $13 = $73;
      $74 = HEAP32[(73792)>>2]|0;
      $75 = (($74) + ($72)|0);
      $76 = HEAP8[$75>>0]|0;
      $14 = $76;
      $77 = $14;
      $78 = $77 << 24 >> 24;
      $79 = ($78|0)!=(125);
      if (!($79)) {
       break;
      }
      $80 = $14;
      $81 = $80 << 24 >> 24;
      $82 = ($81|0)!=(28);
      if (!($82)) {
       break;
      }
     }
     $83 = $13;
     $84 = ((($2)) + 1788|0);
     HEAP32[$84>>2] = $83;
     $85 = ((($2)) + 1032|0);
     (_strcpy($85,$5)|0);
     $86 = ((($2)) + 1182|0);
     (_strcpy($86,$6)|0);
     _memcpy(($$byval_copy47|0),($2|0),3216)|0;
     _ValLabel($19,$5,0,$$byval_copy47,233);
     break;
    }
    $87 = HEAP32[7954]|0;
    $88 = ($87|0)==(40);
    if ($88) {
     _memset(($7|0),0,300)|0;
     (_getlex()|0);
     $89 = HEAP32[7954]|0;
     $90 = ($89|0)!=(224);
     if ($90) {
      _Error(18815,$vararg_buffer14);
     }
     $91 = HEAP32[18446]|0;
     $92 = ((($3)) + 88|0);
     HEAP32[$92>>2] = $91;
     $93 = ((($3)) + 84|0);
     HEAP32[$93>>2] = 30;
     (_strcpy($7,(31976))|0);
     (_getlex()|0);
     $94 = HEAP32[7954]|0;
     $95 = ($94|0)!=(227);
     if ($95) {
      label = 35;
     } else {
      $96 = (_strncmp((31976),18840,1)|0);
      $97 = ($96|0)!=(0);
      if ($97) {
       label = 35;
      }
     }
     if ((label|0) == 35) {
      label = 0;
      _Error(18842,$vararg_buffer16);
     }
     $98 = HEAP32[18446]|0;
     $99 = (($98) - 1)|0;
     $100 = ((($3)) + 3176|0);
     HEAP32[$100>>2] = $99;
     $16 = 0;
     while(1) {
      $101 = HEAP8[(31976)>>0]|0;
      $102 = $101 << 24 >> 24;
      $103 = ($102|0)!=(93);
      $104 = HEAP32[7954]|0;
      $105 = ($104|0)!=(28);
      $106 = $103 ? $105 : 0;
      if (!($106)) {
       break;
      }
      (_getlex()|0);
      $107 = HEAP32[7954]|0;
      $108 = ($107|0)==(41);
      if ($108) {
       $16 = 1;
       continue;
      }
      $109 = HEAP32[7954]|0;
      $110 = ($109|0)==(224);
      if ($110) {
       _memset(($8|0),0,600)|0;
       _memset(($10|0),0,920)|0;
       (_strcpy($8,(31976))|0);
       $111 = ((($10)) + 908|0);
       HEAP32[$111>>2] = 1;
       $112 = ((($10)) + 12|0);
       (_strcpy($112,$7)|0);
       $113 = ((($10)) + 140|0);
       (_strcpy($113,$8)|0);
       $114 = $16;
       $115 = ($114|0)==(1);
       if ($115) {
        $116 = $16;
        $117 = ((($10)) + 912|0);
        HEAP32[$117>>2] = $116;
        $16 = 0;
       }
       $118 = ((($4)) + 3184|0);
       HEAP32[$118>>2] = 1;
       (_getlex()|0);
       $119 = HEAP8[(31976)>>0]|0;
       $120 = $119 << 24 >> 24;
       $121 = ($120|0)==(61);
       if ($121) {
        (_getlex()|0);
        $122 = HEAP32[7954]|0;
        $123 = ($122|0)==(40);
        if ($123) {
         _Error(18883,$vararg_buffer18);
        }
        $124 = ((($10)) + 268|0);
        (_strcpy($124,$8)|0);
        $125 = ((($10)) + 268|0);
        (_strcat($125,16539)|0);
        $126 = HEAP32[7954]|0;
        $127 = ($126|0)==(224);
        do {
         if ($127) {
          $128 = ((($10)) + 268|0);
          (_strcat($128,(31976))|0);
         } else {
          $129 = HEAP32[7954]|0;
          $130 = ($129|0)==(223);
          if ($130) {
           $131 = ((($10)) + 268|0);
           $132 = HEAP32[(31976)>>2]|0;
           HEAP32[$vararg_buffer20>>2] = $8;
           $vararg_ptr22 = ((($vararg_buffer20)) + 4|0);
           HEAP32[$vararg_ptr22>>2] = $132;
           (_snprintf($131,512,18928,$vararg_buffer20)|0);
           break;
          }
          $133 = HEAP32[7954]|0;
          $134 = ($133|0)==(226);
          if ($134) {
           $135 = ((($10)) + 268|0);
           $136 = +HEAPF64[(31976)>>3];
           HEAP32[$vararg_buffer23>>2] = $8;
           $vararg_ptr26 = ((($vararg_buffer23)) + 8|0);
           HEAPF64[$vararg_ptr26>>3] = $136;
           (_snprintf($135,512,18935,$vararg_buffer23)|0);
           break;
          }
          $137 = HEAP32[7954]|0;
          $138 = ($137|0)==(225);
          if ($138) {
           $139 = ((($10)) + 268|0);
           (_strcat($139,18941)|0);
           $140 = ((($10)) + 268|0);
           (_strcat($140,(31976))|0);
           $141 = ((($10)) + 268|0);
           (_strcat($141,18941)|0);
           break;
          }
          $142 = HEAP32[7954]|0;
          $143 = ($142|0)==(228);
          if (!($143)) {
           break;
          }
          $144 = ((($10)) + 268|0);
          (_strcat($144,(31976))|0);
         }
        } while(0);
        $145 = ((($10)) + 268|0);
        (_strcat($145,17196)|0);
       } else {
        _ungetlex();
       }
       _memcpy(($$byval_copy48|0),($10|0),920)|0;
       _node_addLast($$byval_copy48);
       continue;
      }
      $146 = HEAP32[7954]|0;
      $147 = ($146|0)==(15);
      if (!($147)) {
       continue;
      }
      _memset(($5|0),0,300)|0;
      _memset(($9|0),0,300)|0;
      _memset(($6|0),0,600)|0;
      _memset(($10|0),0,920)|0;
      _memset(($2|0),0,3216)|0;
      $148 = $16;
      $149 = ($148|0)==(1);
      if ($149) {
       $150 = $16;
       $151 = ((($10)) + 912|0);
       HEAP32[$151>>2] = $150;
       $16 = 0;
      }
      (_getlex()|0);
      $152 = HEAP32[7954]|0;
      $153 = ($152|0)!=(224);
      if ($153) {
       _Error(18943,$vararg_buffer27);
      }
      $154 = HEAP32[18446]|0;
      $155 = ((($2)) + 88|0);
      HEAP32[$155>>2] = $154;
      $156 = ((($2)) + 84|0);
      HEAP32[$156>>2] = 32;
      $157 = ((($10)) + 908|0);
      HEAP32[$157>>2] = 2;
      $158 = ((($10)) + 12|0);
      (_strcpy($158,$7)|0);
      (_strcpy($9,(31976))|0);
      $159 = ((($10)) + 780|0);
      (_strcpy($159,$9)|0);
      _memcpy(($$byval_copy49|0),($10|0),920)|0;
      _node_addLast($$byval_copy49);
      $160 = (_strcmp($9,16525)|0);
      $161 = ($160|0)==(0);
      if ($161) {
       label = 67;
      } else {
       $162 = (_strcmp($9,16532)|0);
       $163 = ($162|0)==(0);
       if ($163) {
        label = 67;
       } else {
        $164 = (_strcmp($9,18989)|0);
        $165 = ($164|0)==(0);
        if ($165) {
         label = 67;
        }
       }
      }
      if ((label|0) == 67) {
       label = 0;
       _Error(18996,$vararg_buffer29);
      }
      $166 = (_strcmp($7,(31976))|0);
      $167 = ($166|0)==(0);
      if ($167) {
       $15 = 1;
       HEAP32[$vararg_buffer31>>2] = $7;
       (_snprintf($5,300,19063,$vararg_buffer31)|0);
      } else {
       HEAP32[$vararg_buffer34>>2] = $7;
       $vararg_ptr37 = ((($vararg_buffer34)) + 4|0);
       HEAP32[$vararg_ptr37>>2] = $9;
       (_snprintf($5,300,15808,$vararg_buffer34)|0);
      }
      (_getlex()|0);
      $168 = HEAP32[7954]|0;
      $169 = ($168|0)!=(227);
      if ($169) {
       label = 73;
      } else {
       $170 = (_strncmp((31976),16770,1)|0);
       $171 = ($170|0)!=(0);
       if ($171) {
        label = 73;
       }
      }
      if ((label|0) == 73) {
       label = 0;
       _Error(19074,$vararg_buffer38);
      }
      (_strcpy($6,1358125)|0);
      while(1) {
       $172 = HEAP8[(31976)>>0]|0;
       $173 = $172 << 24 >> 24;
       $174 = ($173|0)!=(41);
       $175 = HEAP32[7954]|0;
       $176 = ($175|0)!=(28);
       $177 = $174 ? $176 : 0;
       if (!($177)) {
        break;
       }
       (_getlex()|0);
       $178 = HEAP8[(31976)>>0]|0;
       $179 = $178 << 24 >> 24;
       $180 = ($179|0)==(41);
       if ($180) {
        break;
       }
       $181 = HEAP32[7954]|0;
       $182 = ($181|0)!=(224);
       if ($182) {
        _Error(19124,$vararg_buffer40);
       }
       (_strcat($6,(31976))|0);
       _memset(($10|0),0,920)|0;
       $183 = ((($10)) + 908|0);
       HEAP32[$183>>2] = 1;
       $184 = ((($10)) + 12|0);
       (_strcpy($184,$7)|0);
       $185 = ((($10)) + 140|0);
       (_strcpy($185,(31976))|0);
       _memcpy(($$byval_copy50|0),($10|0),920)|0;
       _node_addLast($$byval_copy50);
       (_getlex()|0);
       $186 = HEAP8[(31976)>>0]|0;
       $187 = $186 << 24 >> 24;
       $188 = ($187|0)==(44);
       if (!($188)) {
        continue;
       }
       (_strcat($6,(31976))|0);
      }
      (_getlex()|0);
      $189 = HEAP32[7954]|0;
      $190 = ($189|0)!=(227);
      if ($190) {
       label = 83;
      } else {
       $191 = (_strncmp((31976),17467,1)|0);
       $192 = ($191|0)!=(0);
       if ($192) {
        label = 83;
       }
      }
      if ((label|0) == 83) {
       label = 0;
       _Error(18784,$vararg_buffer42);
      }
      $193 = HEAP32[18446]|0;
      $194 = (($193) - 1)|0;
      $195 = ((($2)) + 1784|0);
      HEAP32[$195>>2] = $194;
      while(1) {
       (_getlex()|0);
       $196 = HEAP8[(31976)>>0]|0;
       $197 = $196 << 24 >> 24;
       $198 = ($197|0)!=(125);
       if (!($198)) {
        break;
       }
       $199 = $14;
       $200 = $199 << 24 >> 24;
       $201 = ($200|0)!=(28);
       if (!($201)) {
        break;
       }
      }
      $202 = ((($2)) + 1784|0);
      $203 = HEAP32[$202>>2]|0;
      $13 = $203;
      while(1) {
       $204 = $13;
       $205 = (($204) + 1)|0;
       $13 = $205;
       $206 = HEAP32[(73792)>>2]|0;
       $207 = (($206) + ($204)|0);
       $208 = HEAP8[$207>>0]|0;
       $14 = $208;
       $209 = $14;
       $210 = $209 << 24 >> 24;
       $211 = ($210|0)!=(125);
       if (!($211)) {
        break;
       }
       $212 = $14;
       $213 = $212 << 24 >> 24;
       $214 = ($213|0)!=(28);
       if (!($214)) {
        break;
       }
      }
      $215 = $13;
      $216 = ((($2)) + 1788|0);
      HEAP32[$216>>2] = $215;
      $217 = ((($2)) + 1032|0);
      (_strcpy($217,$5)|0);
      $218 = ((($2)) + 1182|0);
      (_strcpy($218,$6)|0);
      $219 = HEAP32[8088]|0;
      _memcpy(($$byval_copy51|0),($2|0),3216)|0;
      _ValLabel($20,$5,$219,$$byval_copy51,233);
     }
     $220 = ((($3)) + 3176|0);
     $221 = HEAP32[$220>>2]|0;
     $13 = $221;
     while(1) {
      $222 = $13;
      $223 = (($222) + 1)|0;
      $13 = $223;
      $224 = HEAP32[(73792)>>2]|0;
      $225 = (($224) + ($222)|0);
      $226 = HEAP8[$225>>0]|0;
      $14 = $226;
      $227 = $14;
      $228 = $227 << 24 >> 24;
      $229 = ($228|0)!=(93);
      if (!($229)) {
       break;
      }
      $230 = $14;
      $231 = $230 << 24 >> 24;
      $232 = ($231|0)!=(28);
      if (!($232)) {
       break;
      }
     }
     $233 = $13;
     $234 = ((($3)) + 3180|0);
     HEAP32[$234>>2] = $233;
     $235 = ((($3)) + 2424|0);
     (_strcpy($235,$7)|0);
     $236 = $15;
     $237 = ($236|0)!=(1);
     if ($237) {
      _Error(19158,$vararg_buffer44);
     }
     $238 = HEAP32[8088]|0;
     _memcpy(($$byval_copy52|0),($3|0),3216)|0;
     _ValLabel($21,$7,$238,$$byval_copy52,233);
    }
   }
  } while(0);
  $239 = HEAP32[7954]|0;
  $240 = ($239|0)!=(28);
  if (!($240)) {
   break;
  }
 }
 _memset((31816|0),0,464)|0;
 _memset(($1|0),0,3216)|0;
 _memset(($2|0),0,3216)|0;
 $241 = ((($2)) + 4|0);
 $242 = HEAP32[$241>>2]|0;
 $243 = ($242|0)!=(0|0);
 if ($243) {
  $244 = ((($2)) + 4|0);
  $245 = HEAP32[$244>>2]|0;
  _free($245);
 }
 $246 = ((($2)) + 8|0);
 $247 = HEAP32[$246>>2]|0;
 $248 = ($247|0)!=(0|0);
 if ($248) {
  $249 = ((($2)) + 8|0);
  $250 = HEAP32[$249>>2]|0;
  _free($250);
 }
 $251 = HEAP32[$2>>2]|0;
 $252 = ($251|0)!=(0|0);
 if ($252) {
  $253 = HEAP32[$2>>2]|0;
  _free($253);
 }
 $254 = ((($1)) + 4|0);
 $255 = HEAP32[$254>>2]|0;
 $256 = ($255|0)!=(0|0);
 if ($256) {
  $257 = ((($1)) + 4|0);
  $258 = HEAP32[$257>>2]|0;
  _free($258);
 }
 $259 = ((($1)) + 8|0);
 $260 = HEAP32[$259>>2]|0;
 $261 = ($260|0)!=(0|0);
 if ($261) {
  $262 = ((($1)) + 8|0);
  $263 = HEAP32[$262>>2]|0;
  _free($263);
 }
 $264 = HEAP32[$1>>2]|0;
 $265 = ($264|0)!=(0|0);
 if (!($265)) {
  $267 = $0;
  STACKTOP = sp;return ($267|0);
 }
 $266 = HEAP32[$1>>2]|0;
 _free($266);
 $267 = $0;
 STACKTOP = sp;return ($267|0);
}
function _InterpreterSub($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $2 = $0;
 $3 = $1;
 _memset((127780|0),0,300)|0;
 $4 = $3;
 (_strcpy(127780,$4)|0);
 $5 = HEAP32[8088]|0;
 $6 = (($5) + 1)|0;
 HEAP32[8088] = $6;
 $7 = HEAP32[8088]|0;
 $8 = ($7|0)>(64);
 if ($8) {
  _Error(19201,$vararg_buffer);
 }
 while(1) {
  (_Interpreter()|0);
  $9 = HEAP32[18446]|0;
  $10 = $2;
  $11 = ($9|0)<=($10|0);
  if (!($11)) {
   break;
  }
  $12 = (_strncmp((31976),19229,1)|0);
  $13 = ($12|0)!=(0);
  $14 = HEAP32[7954]|0;
  $15 = ($14|0)!=(28);
  $or$cond = $13 & $15;
  if (!($or$cond)) {
   break;
  }
 }
 $16 = HEAP32[8088]|0;
 $17 = (($16) + -1)|0;
 HEAP32[8088] = $17;
 _memset((127780|0),0,300)|0;
 STACKTOP = sp;return;
}
function _InterpreterParam($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16416|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16416|0);
 $$byval_copy = sp + 12880|0;
 $vararg_buffer1 = sp + 12872|0;
 $vararg_buffer = sp + 12864|0;
 $7 = sp + 9648|0;
 $8 = sp + 6432|0;
 $9 = sp + 16112|0;
 $10 = sp + 3216|0;
 $11 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 _memset(($7|0),0,3216)|0;
 _memset(($8|0),0,3216)|0;
 _memset(($9|0),0,300)|0;
 $12 = $3;
 $13 = ($12|0)==(2);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 HEAP32[18446] = 0;
 HEAP32[(73788)>>2] = 0;
 (_getlex()|0);
 (_getlex()|0);
 $14 = (_strncmp((31976),19229,1)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 _ungetlex();
 while(1) {
  (_getlex()|0);
  $16 = HEAP32[7954]|0;
  $17 = ($16|0)==(224);
  if ($17) {
   _memset(($9|0),0,300)|0;
   (_strcpy($9,(31976))|0);
   (_getlex()|0);
   $18 = HEAP32[7954]|0;
   $19 = ($18|0)==(28);
   if ($19) {
    _Error(19234,$vararg_buffer);
   }
   $20 = HEAP8[(31976)>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)!=(61);
   if ($22) {
    _Error(19266,$vararg_buffer1);
   }
   (_getlex()|0);
   $23 = HEAP32[7954]|0;
   $24 = ($23|0)==(223);
   do {
    if ($24) {
     $25 = HEAP32[(31976)>>2]|0;
     $26 = ((($8)) + 88|0);
     HEAP32[$26>>2] = $25;
     $27 = ((($8)) + 84|0);
     HEAP32[$27>>2] = 0;
    } else {
     $28 = HEAP32[7954]|0;
     $29 = ($28|0)==(226);
     if ($29) {
      $30 = +HEAPF64[(31976)>>3];
      $31 = ((($8)) + 96|0);
      HEAPF64[$31>>3] = $30;
      $32 = ((($8)) + 84|0);
      HEAP32[$32>>2] = 1;
      break;
     }
     $33 = HEAP32[7954]|0;
     $34 = ($33|0)==(225);
     if (!($34)) {
      $39 = HEAP32[7954]|0;
      $40 = ($39|0)==(224);
      if (!($40)) {
       break;
      }
      _ungetlex();
      _ungetlex();
      _expression($10);
      _memcpy(($7|0),($10|0),3216)|0;
      _memcpy(($8|0),($7|0),3216)|0;
      $41 = ((($7)) + 84|0);
      $42 = HEAP32[$41>>2]|0;
      $43 = ((($8)) + 84|0);
      HEAP32[$43>>2] = $42;
      break;
     }
     $35 = (_strlen((31976))|0);
     $36 = ($35>>>0)>(0);
     $37 = ((($8)) + 104|0);
     if ($36) {
      (_strcpy($37,(31976))|0);
     } else {
      (_strcpy($37,1358125)|0);
     }
     $38 = ((($8)) + 84|0);
     HEAP32[$38>>2] = 3;
    }
   } while(0);
   $44 = HEAP32[8088]|0;
   $45 = (($44) + 1)|0;
   _memcpy(($$byval_copy|0),($8|0),3216)|0;
   _ValLabel($11,$9,$45,$$byval_copy,233);
  }
  $46 = HEAP32[7954]|0;
  $47 = ($46|0)!=(28);
  if (!($47)) {
   label = 23;
   break;
  }
  $48 = (_strncmp((31976),19229,1)|0);
  $49 = ($48|0)!=(0);
  if (!($49)) {
   label = 23;
   break;
  }
 }
 if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function _InterpreterClassSub($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = $0;
 $3 = $1;
 _memset((128380|0),0,300)|0;
 $4 = $3;
 (_strcpy(128380,$4)|0);
 while(1) {
  (_Interpreter()|0);
  $5 = HEAP32[18446]|0;
  $6 = $2;
  $7 = ($5|0)<=($6|0);
  if (!($7)) {
   label = 4;
   break;
  }
  $8 = (_strncmp((31976),19229,1)|0);
  $9 = ($8|0)!=(0);
  $10 = HEAP32[7954]|0;
  $11 = ($10|0)!=(28);
  $or$cond = $9 & $11;
  if (!($or$cond)) {
   label = 4;
   break;
  }
 }
 if ((label|0) == 4) {
  _memset((128380|0),0,300)|0;
  STACKTOP = sp;return;
 }
}
function _InterpreterClassParam($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$byval_copy = 0, $$byval_copy5 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0.0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, $vararg_buffer3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 19648|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(19648|0);
 $$byval_copy5 = sp + 16104|0;
 $$byval_copy = sp + 12888|0;
 $vararg_buffer3 = sp + 12880|0;
 $vararg_buffer1 = sp + 12872|0;
 $vararg_buffer = sp + 12864|0;
 $7 = sp + 9648|0;
 $8 = sp + 6432|0;
 $9 = sp + 19336|0;
 $10 = sp + 3216|0;
 $11 = sp;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = 0;
 _memset(($7|0),0,3216)|0;
 _memset(($8|0),0,3216)|0;
 _memset(($9|0),0,300)|0;
 $12 = $3;
 $13 = ($12|0)==(2);
 if (!($13)) {
  STACKTOP = sp;return;
 }
 HEAP32[18446] = 0;
 HEAP32[(73788)>>2] = 0;
 (_getlex()|0);
 (_getlex()|0);
 $14 = (_strncmp((31976),19229,1)|0);
 $15 = ($14|0)==(0);
 if ($15) {
  STACKTOP = sp;return;
 }
 _ungetlex();
 while(1) {
  (_getlex()|0);
  $16 = HEAP32[7954]|0;
  $17 = ($16|0)==(229);
  if ($17) {
   _memset(($9|0),0,300)|0;
   HEAP32[$vararg_buffer>>2] = (31976);
   (_sprintf($9,19231,$vararg_buffer)|0);
   (_getlex()|0);
   $18 = HEAP32[7954]|0;
   $19 = ($18|0)==(28);
   if ($19) {
    _Error(19234,$vararg_buffer1);
   }
   $20 = HEAP8[(31976)>>0]|0;
   $21 = $20 << 24 >> 24;
   $22 = ($21|0)!=(61);
   if ($22) {
    _Error(19266,$vararg_buffer3);
   }
   (_getlex()|0);
   $23 = HEAP32[7954]|0;
   $24 = ($23|0)==(223);
   do {
    if ($24) {
     $25 = HEAP32[(31976)>>2]|0;
     $26 = ((($8)) + 88|0);
     HEAP32[$26>>2] = $25;
     $27 = ((($8)) + 84|0);
     HEAP32[$27>>2] = 0;
    } else {
     $28 = HEAP32[7954]|0;
     $29 = ($28|0)==(226);
     if ($29) {
      $30 = +HEAPF64[(31976)>>3];
      $31 = ((($8)) + 96|0);
      HEAPF64[$31>>3] = $30;
      $32 = ((($8)) + 84|0);
      HEAP32[$32>>2] = 1;
      break;
     }
     $33 = HEAP32[7954]|0;
     $34 = ($33|0)==(225);
     if (!($34)) {
      $39 = HEAP32[7954]|0;
      $40 = ($39|0)==(224);
      if (!($40)) {
       break;
      }
      $41 = HEAP32[8091]|0;
      _memcpy(($$byval_copy|0),($7|0),3216)|0;
      _ValLabel($10,(31976),$41,$$byval_copy,232);
      _memcpy(($7|0),($10|0),3216)|0;
      _memcpy(($8|0),($7|0),3216)|0;
      $42 = ((($7)) + 84|0);
      $43 = HEAP32[$42>>2]|0;
      $44 = ((($8)) + 84|0);
      HEAP32[$44>>2] = $43;
      break;
     }
     $35 = (_strlen((31976))|0);
     $36 = ($35>>>0)>(0);
     $37 = ((($8)) + 104|0);
     if ($36) {
      (_strcpy($37,(31976))|0);
     } else {
      (_strcpy($37,1358125)|0);
     }
     $38 = ((($8)) + 84|0);
     HEAP32[$38>>2] = 3;
    }
   } while(0);
   $45 = HEAP32[8091]|0;
   _memcpy(($$byval_copy5|0),($8|0),3216)|0;
   _ValLabel($11,$9,$45,$$byval_copy5,233);
  }
  $46 = HEAP32[7954]|0;
  $47 = ($46|0)!=(28);
  if (!($47)) {
   label = 23;
   break;
  }
  $48 = (_strncmp((31976),19229,1)|0);
  $49 = ($48|0)!=(0);
  if (!($49)) {
   label = 23;
   break;
  }
 }
 if ((label|0) == 23) {
  STACKTOP = sp;return;
 }
}
function ___stdio_close($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 60|0);
 $2 = HEAP32[$1>>2]|0;
 HEAP32[$vararg_buffer>>2] = $2;
 $3 = (___syscall6(6,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function ___stdio_read($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$026 = 0, $$cast = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 HEAP32[$3>>2] = $1;
 $4 = ((($3)) + 4|0);
 $5 = ((($0)) + 48|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)!=(0);
 $8 = $7&1;
 $9 = (($2) - ($8))|0;
 HEAP32[$4>>2] = $9;
 $10 = ((($3)) + 8|0);
 $11 = ((($0)) + 44|0);
 $12 = HEAP32[$11>>2]|0;
 HEAP32[$10>>2] = $12;
 $13 = ((($3)) + 12|0);
 HEAP32[$13>>2] = $6;
 $14 = HEAP32[31808]|0;
 $15 = ($14|0)==(0|0);
 if ($15) {
  $20 = ((($0)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  HEAP32[$vararg_buffer3>>2] = $21;
  $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
  HEAP32[$vararg_ptr6>>2] = $3;
  $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
  HEAP32[$vararg_ptr7>>2] = 2;
  $22 = (___syscall145(145,($vararg_buffer3|0))|0);
  $23 = (___syscall_ret($22)|0);
  $$0 = $23;
 } else {
  _pthread_cleanup_push((7|0),($0|0));
  $16 = ((($0)) + 60|0);
  $17 = HEAP32[$16>>2]|0;
  HEAP32[$vararg_buffer>>2] = $17;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $3;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 2;
  $18 = (___syscall145(145,($vararg_buffer|0))|0);
  $19 = (___syscall_ret($18)|0);
  _pthread_cleanup_pop(0);
  $$0 = $19;
 }
 $24 = ($$0|0)<(1);
 if ($24) {
  $25 = $$0 & 48;
  $26 = $25 ^ 16;
  $27 = HEAP32[$0>>2]|0;
  $28 = $27 | $26;
  HEAP32[$0>>2] = $28;
  $29 = ((($0)) + 8|0);
  HEAP32[$29>>2] = 0;
  $30 = ((($0)) + 4|0);
  HEAP32[$30>>2] = 0;
  $$026 = $$0;
 } else {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($$0>>>0)>($31>>>0);
  if ($32) {
   $33 = (($$0) - ($31))|0;
   $34 = HEAP32[$11>>2]|0;
   $35 = ((($0)) + 4|0);
   HEAP32[$35>>2] = $34;
   $$cast = $34;
   $36 = (($$cast) + ($33)|0);
   $37 = ((($0)) + 8|0);
   HEAP32[$37>>2] = $36;
   $38 = HEAP32[$5>>2]|0;
   $39 = ($38|0)==(0);
   if ($39) {
    $$026 = $2;
   } else {
    $40 = ((($$cast)) + 1|0);
    HEAP32[$35>>2] = $40;
    $41 = HEAP8[$$cast>>0]|0;
    $42 = (($2) + -1)|0;
    $43 = (($1) + ($42)|0);
    HEAP8[$43>>0] = $41;
    $$026 = $2;
   }
  } else {
   $$026 = $$0;
  }
 }
 STACKTOP = sp;return ($$026|0);
}
function ___stdio_seek($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$pre = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 20|0;
 $4 = ((($0)) + 60|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$vararg_buffer>>2] = $5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = 0;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $1;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $2;
 $6 = (___syscall140(140,($vararg_buffer|0))|0);
 $7 = (___syscall_ret($6)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  HEAP32[$3>>2] = -1;
  $9 = -1;
 } else {
  $$pre = HEAP32[$3>>2]|0;
  $9 = $$pre;
 }
 STACKTOP = sp;return ($9|0);
}
function ___syscall_ret($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)>(4294963200);
 if ($1) {
  $2 = (0 - ($0))|0;
  $3 = (___errno_location()|0);
  HEAP32[$3>>2] = $2;
  $$0 = -1;
 } else {
  $$0 = $0;
 }
 return ($$0|0);
}
function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = HEAP32[31808]|0;
 $1 = ($0|0)==(0|0);
 if ($1) {
  $$0 = 127276;
 } else {
  $2 = (_pthread_self()|0);
  $3 = ((($2)) + 64|0);
  $4 = HEAP32[$3>>2]|0;
  $$0 = $4;
 }
 return ($$0|0);
}
function _cleanup($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___unlockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}
function ___stdio_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$056 = 0, $$058 = 0, $$059 = 0, $$061 = 0, $$1 = 0, $$157 = 0, $$160 = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $3 = sp + 32|0;
 $4 = ((($0)) + 28|0);
 $5 = HEAP32[$4>>2]|0;
 HEAP32[$3>>2] = $5;
 $6 = ((($3)) + 4|0);
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = (($8) - ($5))|0;
 HEAP32[$6>>2] = $9;
 $10 = ((($3)) + 8|0);
 HEAP32[$10>>2] = $1;
 $11 = ((($3)) + 12|0);
 HEAP32[$11>>2] = $2;
 $12 = (($9) + ($2))|0;
 $13 = ((($0)) + 60|0);
 $14 = ((($0)) + 44|0);
 $$056 = 2;$$058 = $12;$$059 = $3;
 while(1) {
  $15 = HEAP32[31808]|0;
  $16 = ($15|0)==(0|0);
  if ($16) {
   $20 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer3>>2] = $20;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = $$059;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $$056;
   $21 = (___syscall146(146,($vararg_buffer3|0))|0);
   $22 = (___syscall_ret($21)|0);
   $$0 = $22;
  } else {
   _pthread_cleanup_push((8|0),($0|0));
   $17 = HEAP32[$13>>2]|0;
   HEAP32[$vararg_buffer>>2] = $17;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $$059;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $$056;
   $18 = (___syscall146(146,($vararg_buffer|0))|0);
   $19 = (___syscall_ret($18)|0);
   _pthread_cleanup_pop(0);
   $$0 = $19;
  }
  $23 = ($$058|0)==($$0|0);
  if ($23) {
   label = 6;
   break;
  }
  $30 = ($$0|0)<(0);
  if ($30) {
   label = 8;
   break;
  }
  $38 = (($$058) - ($$0))|0;
  $39 = ((($$059)) + 4|0);
  $40 = HEAP32[$39>>2]|0;
  $41 = ($$0>>>0)>($40>>>0);
  if ($41) {
   $42 = HEAP32[$14>>2]|0;
   HEAP32[$4>>2] = $42;
   HEAP32[$7>>2] = $42;
   $43 = (($$0) - ($40))|0;
   $44 = ((($$059)) + 8|0);
   $45 = (($$056) + -1)|0;
   $$phi$trans$insert = ((($$059)) + 12|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   $$1 = $43;$$157 = $45;$$160 = $44;$53 = $$pre;
  } else {
   $46 = ($$056|0)==(2);
   if ($46) {
    $47 = HEAP32[$4>>2]|0;
    $48 = (($47) + ($$0)|0);
    HEAP32[$4>>2] = $48;
    $$1 = $$0;$$157 = 2;$$160 = $$059;$53 = $40;
   } else {
    $$1 = $$0;$$157 = $$056;$$160 = $$059;$53 = $40;
   }
  }
  $49 = HEAP32[$$160>>2]|0;
  $50 = (($49) + ($$1)|0);
  HEAP32[$$160>>2] = $50;
  $51 = ((($$160)) + 4|0);
  $52 = (($53) - ($$1))|0;
  HEAP32[$51>>2] = $52;
  $$056 = $$157;$$058 = $38;$$059 = $$160;
 }
 if ((label|0) == 6) {
  $24 = HEAP32[$14>>2]|0;
  $25 = ((($0)) + 48|0);
  $26 = HEAP32[$25>>2]|0;
  $27 = (($24) + ($26)|0);
  $28 = ((($0)) + 16|0);
  HEAP32[$28>>2] = $27;
  $29 = $24;
  HEAP32[$4>>2] = $29;
  HEAP32[$7>>2] = $29;
  $$061 = $2;
 }
 else if ((label|0) == 8) {
  $31 = ((($0)) + 16|0);
  HEAP32[$31>>2] = 0;
  HEAP32[$4>>2] = 0;
  HEAP32[$7>>2] = 0;
  $32 = HEAP32[$0>>2]|0;
  $33 = $32 | 32;
  HEAP32[$0>>2] = $33;
  $34 = ($$056|0)==(2);
  if ($34) {
   $$061 = 0;
  } else {
   $35 = ((($$059)) + 4|0);
   $36 = HEAP32[$35>>2]|0;
   $37 = (($2) - ($36))|0;
   $$061 = $37;
  }
 }
 STACKTOP = sp;return ($$061|0);
}
function _cleanup_295($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 68|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  ___unlockfile($0);
 }
 return;
}
function ___stdout_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(80|0);
 $vararg_buffer = sp;
 $3 = sp + 12|0;
 $4 = ((($0)) + 36|0);
 HEAP32[$4>>2] = 4;
 $5 = HEAP32[$0>>2]|0;
 $6 = $5 & 64;
 $7 = ($6|0)==(0);
 if ($7) {
  $8 = ((($0)) + 60|0);
  $9 = HEAP32[$8>>2]|0;
  HEAP32[$vararg_buffer>>2] = $9;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = 21505;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = $3;
  $10 = (___syscall54(54,($vararg_buffer|0))|0);
  $11 = ($10|0)==(0);
  if (!($11)) {
   $12 = ((($0)) + 75|0);
   HEAP8[$12>>0] = -1;
  }
 }
 $13 = (___stdio_write($0,$1,$2)|0);
 STACKTOP = sp;return ($13|0);
}
function _close($0) {
 $0 = $0|0;
 var $$ = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall6(6,($vararg_buffer|0))|0);
 $2 = ($1|0)==(-4);
 $$ = $2 ? -115 : $1;
 $3 = (___syscall_ret($$)|0);
 STACKTOP = sp;return ($3|0);
}
function _getcwd($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$06 = 0, $$07 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 4112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(4112|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 $3 = ($0|0)==(0|0);
 if ($3) {
  $$0 = 4096;$$06 = $2;
  label = 4;
 } else {
  $4 = ($1|0)==(0);
  if ($4) {
   $5 = (___errno_location()|0);
   HEAP32[$5>>2] = 22;
   $$07 = 0;
  } else {
   $$0 = $1;$$06 = $0;
   label = 4;
  }
 }
 if ((label|0) == 4) {
  HEAP32[$vararg_buffer>>2] = $$06;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $$0;
  $6 = (___syscall183(183,($vararg_buffer|0))|0);
  $7 = (___syscall_ret($6)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   $$07 = 0;
  } else {
   $9 = ($$06|0)==($2|0);
   if ($9) {
    $10 = (___strdup($2)|0);
    $$07 = $10;
   } else {
    $$07 = $$06;
   }
  }
 }
 STACKTOP = sp;return ($$07|0);
}
function ___strdup($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strlen($0)|0);
 $2 = (($1) + 1)|0;
 $3 = (_malloc($2)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  _memcpy(($3|0),($0|0),($2|0))|0;
  $$0 = $3;
 }
 return ($$0|0);
}
function _strlen($0) {
 $0 = $0|0;
 var $$0 = 0, $$014 = 0, $$015$lcssa = 0, $$01518 = 0, $$1$lcssa = 0, $$pn = 0, $$pn29 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0;
 $2 = $1 & 3;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $$015$lcssa = $0;
   label = 4;
  } else {
   $$01518 = $0;$22 = $1;
   while(1) {
    $4 = HEAP8[$$01518>>0]|0;
    $5 = ($4<<24>>24)==(0);
    if ($5) {
     $$pn = $22;
     break L1;
    }
    $6 = ((($$01518)) + 1|0);
    $7 = $6;
    $8 = $7 & 3;
    $9 = ($8|0)==(0);
    if ($9) {
     $$015$lcssa = $6;
     label = 4;
     break;
    } else {
     $$01518 = $6;$22 = $7;
    }
   }
  }
 } while(0);
 if ((label|0) == 4) {
  $$0 = $$015$lcssa;
  while(1) {
   $10 = HEAP32[$$0>>2]|0;
   $11 = (($10) + -16843009)|0;
   $12 = $10 & -2139062144;
   $13 = $12 ^ -2139062144;
   $14 = $13 & $11;
   $15 = ($14|0)==(0);
   $16 = ((($$0)) + 4|0);
   if ($15) {
    $$0 = $16;
   } else {
    break;
   }
  }
  $17 = $10&255;
  $18 = ($17<<24>>24)==(0);
  if ($18) {
   $$1$lcssa = $$0;
  } else {
   $$pn29 = $$0;
   while(1) {
    $19 = ((($$pn29)) + 1|0);
    $$pre = HEAP8[$19>>0]|0;
    $20 = ($$pre<<24>>24)==(0);
    if ($20) {
     $$1$lcssa = $19;
     break;
    } else {
     $$pn29 = $19;
    }
   }
  }
  $21 = $$1$lcssa;
  $$pn = $21;
 }
 $$014 = (($$pn) - ($1))|0;
 return ($$014|0);
}
function _chdir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall12(12,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _rmdir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $1 = (___syscall40(40,($vararg_buffer|0))|0);
 $2 = (___syscall_ret($1)|0);
 STACKTOP = sp;return ($2|0);
}
function _sleep($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $0;
 $2 = ((($1)) + 4|0);
 HEAP32[$2>>2] = 0;
 $3 = (_nanosleep(($1|0),($1|0))|0);
 $4 = ($3|0)==(0);
 $5 = HEAP32[$1>>2]|0;
 $$0 = $4 ? 0 : $5;
 STACKTOP = sp;return ($$0|0);
}
function _write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $3 = (___syscall4(4,($vararg_buffer|0))|0);
 $4 = (___syscall_ret($3)|0);
 STACKTOP = sp;return ($4|0);
}
function _open($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0;
 var $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 16|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $3 = $arglist_current;
 $4 = ((0) + 4|0);
 $expanded2 = $4;
 $expanded = (($expanded2) - 1)|0;
 $5 = (($3) + ($expanded))|0;
 $6 = ((0) + 4|0);
 $expanded6 = $6;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $7 = $5 & $expanded4;
 $8 = $7;
 $9 = HEAP32[$8>>2]|0;
 $arglist_next = ((($8)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $10 = $1 | 32768;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $10;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $9;
 $11 = (___syscall5(5,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _strcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpcpy($0,$1)|0);
 return ($0|0);
}
function ___stpcpy($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$lcssa = 0, $$025$lcssa = 0, $$02536 = 0, $$026$lcssa = 0, $$02642 = 0, $$027$lcssa = 0, $$02741 = 0, $$029 = 0, $$037 = 0, $$1$ph = 0, $$128$ph = 0, $$12834 = 0, $$135 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1;
 $3 = $0;
 $4 = $2 ^ $3;
 $5 = $4 & 3;
 $6 = ($5|0)==(0);
 L1: do {
  if ($6) {
   $7 = $2 & 3;
   $8 = ($7|0)==(0);
   if ($8) {
    $$026$lcssa = $1;$$027$lcssa = $0;
   } else {
    $$02642 = $1;$$02741 = $0;
    while(1) {
     $9 = HEAP8[$$02642>>0]|0;
     HEAP8[$$02741>>0] = $9;
     $10 = ($9<<24>>24)==(0);
     if ($10) {
      $$029 = $$02741;
      break L1;
     }
     $11 = ((($$02642)) + 1|0);
     $12 = ((($$02741)) + 1|0);
     $13 = $11;
     $14 = $13 & 3;
     $15 = ($14|0)==(0);
     if ($15) {
      $$026$lcssa = $11;$$027$lcssa = $12;
      break;
     } else {
      $$02642 = $11;$$02741 = $12;
     }
    }
   }
   $16 = HEAP32[$$026$lcssa>>2]|0;
   $17 = (($16) + -16843009)|0;
   $18 = $16 & -2139062144;
   $19 = $18 ^ -2139062144;
   $20 = $19 & $17;
   $21 = ($20|0)==(0);
   if ($21) {
    $$02536 = $$027$lcssa;$$037 = $$026$lcssa;$24 = $16;
    while(1) {
     $22 = ((($$037)) + 4|0);
     $23 = ((($$02536)) + 4|0);
     HEAP32[$$02536>>2] = $24;
     $25 = HEAP32[$22>>2]|0;
     $26 = (($25) + -16843009)|0;
     $27 = $25 & -2139062144;
     $28 = $27 ^ -2139062144;
     $29 = $28 & $26;
     $30 = ($29|0)==(0);
     if ($30) {
      $$02536 = $23;$$037 = $22;$24 = $25;
     } else {
      $$0$lcssa = $22;$$025$lcssa = $23;
      break;
     }
    }
   } else {
    $$0$lcssa = $$026$lcssa;$$025$lcssa = $$027$lcssa;
   }
   $$1$ph = $$0$lcssa;$$128$ph = $$025$lcssa;
   label = 8;
  } else {
   $$1$ph = $1;$$128$ph = $0;
   label = 8;
  }
 } while(0);
 if ((label|0) == 8) {
  $31 = HEAP8[$$1$ph>>0]|0;
  HEAP8[$$128$ph>>0] = $31;
  $32 = ($31<<24>>24)==(0);
  if ($32) {
   $$029 = $$128$ph;
  } else {
   $$12834 = $$128$ph;$$135 = $$1$ph;
   while(1) {
    $33 = ((($$135)) + 1|0);
    $34 = ((($$12834)) + 1|0);
    $35 = HEAP8[$33>>0]|0;
    HEAP8[$34>>0] = $35;
    $36 = ($35<<24>>24)==(0);
    if ($36) {
     $$029 = $34;
     break;
    } else {
     $$12834 = $34;$$135 = $33;
    }
   }
  }
 }
 return ($$029|0);
}
function _snprintf($0,$1,$2,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $varargs = $varargs|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 HEAP32[$3>>2] = $varargs;
 $4 = (_vsnprintf($0,$1,$2,$3)|0);
 STACKTOP = sp;return ($4|0);
}
function _vsnprintf($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$015 = 0, $$0 = 0, $$014 = 0, $$015 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $4 = sp + 112|0;
 $5 = sp;
 dest=$5; src=580; stop=dest+112|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
 $6 = (($1) + -1)|0;
 $7 = ($6>>>0)>(2147483646);
 if ($7) {
  $8 = ($1|0)==(0);
  if ($8) {
   $$014 = $4;$$015 = 1;
   label = 4;
  } else {
   $9 = (___errno_location()|0);
   HEAP32[$9>>2] = 75;
   $$0 = -1;
  }
 } else {
  $$014 = $0;$$015 = $1;
  label = 4;
 }
 if ((label|0) == 4) {
  $10 = $$014;
  $11 = (-2 - ($10))|0;
  $12 = ($$015>>>0)>($11>>>0);
  $$$015 = $12 ? $11 : $$015;
  $13 = ((($5)) + 48|0);
  HEAP32[$13>>2] = $$$015;
  $14 = ((($5)) + 20|0);
  HEAP32[$14>>2] = $$014;
  $15 = ((($5)) + 44|0);
  HEAP32[$15>>2] = $$014;
  $16 = (($$014) + ($$$015)|0);
  $17 = ((($5)) + 16|0);
  HEAP32[$17>>2] = $16;
  $18 = ((($5)) + 28|0);
  HEAP32[$18>>2] = $16;
  $19 = (_vfprintf($5,$2,$3)|0);
  $20 = ($$$015|0)==(0);
  if ($20) {
   $$0 = $19;
  } else {
   $21 = HEAP32[$14>>2]|0;
   $22 = HEAP32[$17>>2]|0;
   $23 = ($21|0)==($22|0);
   $24 = $23 << 31 >> 31;
   $25 = (($21) + ($24)|0);
   HEAP8[$25>>0] = 0;
   $$0 = $19;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _vfprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $$1 = 0, $$1$ = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $vacopy_currentptr = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 224|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(224|0);
 $3 = sp + 120|0;
 $4 = sp + 80|0;
 $5 = sp;
 $6 = sp + 136|0;
 dest=$4; stop=dest+40|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $vacopy_currentptr = HEAP32[$2>>2]|0;
 HEAP32[$3>>2] = $vacopy_currentptr;
 $7 = (_printf_core(0,$1,$3,$5,$4)|0);
 $8 = ($7|0)<(0);
 if ($8) {
  $$0 = -1;
 } else {
  $9 = ((($0)) + 76|0);
  $10 = HEAP32[$9>>2]|0;
  $11 = ($10|0)>(-1);
  if ($11) {
   $12 = (___lockfile($0)|0);
   $39 = $12;
  } else {
   $39 = 0;
  }
  $13 = HEAP32[$0>>2]|0;
  $14 = $13 & 32;
  $15 = ((($0)) + 74|0);
  $16 = HEAP8[$15>>0]|0;
  $17 = ($16<<24>>24)<(1);
  if ($17) {
   $18 = $13 & -33;
   HEAP32[$0>>2] = $18;
  }
  $19 = ((($0)) + 48|0);
  $20 = HEAP32[$19>>2]|0;
  $21 = ($20|0)==(0);
  if ($21) {
   $23 = ((($0)) + 44|0);
   $24 = HEAP32[$23>>2]|0;
   HEAP32[$23>>2] = $6;
   $25 = ((($0)) + 28|0);
   HEAP32[$25>>2] = $6;
   $26 = ((($0)) + 20|0);
   HEAP32[$26>>2] = $6;
   HEAP32[$19>>2] = 80;
   $27 = ((($6)) + 80|0);
   $28 = ((($0)) + 16|0);
   HEAP32[$28>>2] = $27;
   $29 = (_printf_core($0,$1,$3,$5,$4)|0);
   $30 = ($24|0)==(0|0);
   if ($30) {
    $$1 = $29;
   } else {
    $31 = ((($0)) + 36|0);
    $32 = HEAP32[$31>>2]|0;
    (FUNCTION_TABLE_iiii[$32 & 7]($0,0,0)|0);
    $33 = HEAP32[$26>>2]|0;
    $34 = ($33|0)==(0|0);
    $$ = $34 ? -1 : $29;
    HEAP32[$23>>2] = $24;
    HEAP32[$19>>2] = 0;
    HEAP32[$28>>2] = 0;
    HEAP32[$25>>2] = 0;
    HEAP32[$26>>2] = 0;
    $$1 = $$;
   }
  } else {
   $22 = (_printf_core($0,$1,$3,$5,$4)|0);
   $$1 = $22;
  }
  $35 = HEAP32[$0>>2]|0;
  $36 = $35 & 32;
  $37 = ($36|0)==(0);
  $$1$ = $37 ? $$1 : -1;
  $38 = $35 | $14;
  HEAP32[$0>>2] = $38;
  $40 = ($39|0)==(0);
  if (!($40)) {
   ___unlockfile($0);
  }
  $$0 = $$1$;
 }
 STACKTOP = sp;return ($$0|0);
}
function _printf_core($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$0259 = 0, $$$0262 = 0, $$$0269 = 0, $$$3484$i = 0, $$$3484705$i = 0, $$$3484706$i = 0, $$$3501$i = 0, $$$4266 = 0, $$$4502$i = 0, $$$5 = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0$lcssa$i300 = 0, $$0228 = 0, $$0229396 = 0, $$0232 = 0, $$0235 = 0, $$0237 = 0;
 var $$0240$lcssa = 0, $$0240$lcssa460 = 0, $$0240395 = 0, $$0243 = 0, $$0247 = 0, $$0249$lcssa = 0, $$0249383 = 0, $$0252 = 0, $$0253 = 0, $$0254 = 0, $$0254$ = 0, $$0259 = 0, $$0262342 = 0, $$0262390 = 0, $$0269 = 0, $$0269$phi = 0, $$0321 = 0, $$0463$lcssa$i = 0, $$0463594$i = 0, $$0464603$i = 0;
 var $$0466$i = 0.0, $$0470$i = 0, $$0471$i = 0.0, $$0479$i = 0, $$0487652$i = 0, $$0488$i = 0, $$0488663$i = 0, $$0488665$i = 0, $$0496$$9$i = 0, $$0497664$i = 0, $$0498$i = 0, $$05$lcssa$i = 0, $$0509592$i = 0.0, $$0510$i = 0, $$0511$i = 0, $$0514647$i = 0, $$0520$i = 0, $$0522$$i = 0, $$0522$i = 0, $$0524$i = 0;
 var $$0526$i = 0, $$0528$i = 0, $$0528639$i = 0, $$0528641$i = 0, $$0531646$i = 0, $$056$i = 0, $$06$i = 0, $$06$i290 = 0, $$06$i298 = 0, $$1 = 0, $$1230407 = 0, $$1233 = 0, $$1236 = 0, $$1238 = 0, $$1241406 = 0, $$1244394 = 0, $$1248 = 0, $$1250 = 0, $$1255 = 0, $$1260 = 0;
 var $$1263 = 0, $$1263$ = 0, $$1270 = 0, $$1322 = 0, $$1465$i = 0, $$1467$i = 0.0, $$1469$i = 0.0, $$1472$i = 0.0, $$1480$i = 0, $$1482$lcssa$i = 0, $$1482671$i = 0, $$1489651$i = 0, $$1499$lcssa$i = 0, $$1499670$i = 0, $$1508593$i = 0, $$1512$lcssa$i = 0, $$1512617$i = 0, $$1515$i = 0, $$1521$i = 0, $$1525$i = 0;
 var $$1527$i = 0, $$1529624$i = 0, $$1532$lcssa$i = 0, $$1532640$i = 0, $$1607$i = 0, $$2 = 0, $$2$i = 0, $$2234 = 0, $$2239 = 0, $$2242381 = 0, $$2245 = 0, $$2251 = 0, $$2256 = 0, $$2256$ = 0, $$2261 = 0, $$2271 = 0, $$2323$lcssa = 0, $$2323382 = 0, $$2473$i = 0.0, $$2476$$545$i = 0;
 var $$2476$$547$i = 0, $$2476$i = 0, $$2483$ph$i = 0, $$2490$lcssa$i = 0, $$2490632$i = 0, $$2500$i = 0, $$2513$i = 0, $$2516628$i = 0, $$2530$i = 0, $$2533627$i = 0, $$3$i = 0.0, $$3257 = 0, $$3265 = 0, $$3272 = 0, $$331 = 0, $$332 = 0, $$333 = 0, $$3379 = 0, $$3477$i = 0, $$3484$lcssa$i = 0;
 var $$3484658$i = 0, $$3501$lcssa$i = 0, $$3501657$i = 0, $$3534623$i = 0, $$4$i = 0.0, $$4258458 = 0, $$4266 = 0, $$4325 = 0, $$4478$lcssa$i = 0, $$4478600$i = 0, $$4492$i = 0, $$4502$i = 0, $$4518$i = 0, $$5 = 0, $$5$lcssa$i = 0, $$537$i = 0, $$538$$i = 0, $$538$i = 0, $$541$i = 0.0, $$544$i = 0;
 var $$546$i = 0, $$5486$lcssa$i = 0, $$5486633$i = 0, $$5493606$i = 0, $$5519$ph$i = 0, $$553$i = 0, $$554$i = 0, $$557$i = 0.0, $$5611$i = 0, $$6 = 0, $$6$i = 0, $$6268 = 0, $$6494599$i = 0, $$7 = 0, $$7495610$i = 0, $$7505$$i = 0, $$7505$i = 0, $$7505$ph$i = 0, $$8$i = 0, $$9$ph$i = 0;
 var $$lcssa683$i = 0, $$neg$i = 0, $$neg572$i = 0, $$pn$i = 0, $$pr = 0, $$pr$i = 0, $$pr571$i = 0, $$pre = 0, $$pre$i = 0, $$pre$phi704$iZ2D = 0, $$pre452 = 0, $$pre453 = 0, $$pre454 = 0, $$pre697$i = 0, $$pre700$i = 0, $$pre703$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0;
 var $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0;
 var $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0;
 var $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0;
 var $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0;
 var $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0;
 var $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0;
 var $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0;
 var $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0.0, $372 = 0, $373 = 0, $374 = 0, $375 = 0.0;
 var $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0;
 var $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0.0, $404 = 0.0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0;
 var $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0.0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0.0, $424 = 0.0, $425 = 0.0, $426 = 0.0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0;
 var $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0;
 var $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0.0, $455 = 0.0, $456 = 0.0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0;
 var $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0;
 var $485 = 0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0.0, $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0;
 var $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0;
 var $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0;
 var $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0;
 var $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0;
 var $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0;
 var $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0.0, $606 = 0.0, $607 = 0, $608 = 0.0, $609 = 0, $61 = 0;
 var $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0;
 var $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0;
 var $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0;
 var $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0;
 var $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0;
 var $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0;
 var $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0;
 var $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0;
 var $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0;
 var $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0;
 var $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0;
 var $809 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $arglist_current = 0, $arglist_current2 = 0, $arglist_next = 0, $arglist_next3 = 0, $exitcond$i = 0, $expanded = 0, $expanded10 = 0, $expanded11 = 0, $expanded13 = 0, $expanded14 = 0, $expanded15 = 0, $expanded4 = 0, $expanded6 = 0, $expanded7 = 0, $expanded8 = 0, $isdigit = 0, $isdigit$i = 0, $isdigit$i292 = 0, $isdigit275 = 0;
 var $isdigit277 = 0, $isdigit5$i = 0, $isdigit5$i288 = 0, $isdigittmp = 0, $isdigittmp$ = 0, $isdigittmp$i = 0, $isdigittmp$i291 = 0, $isdigittmp274 = 0, $isdigittmp276 = 0, $isdigittmp4$i = 0, $isdigittmp4$i287 = 0, $isdigittmp7$i = 0, $isdigittmp7$i289 = 0, $notlhs$i = 0, $notrhs$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond280 = 0, $or$cond282 = 0, $or$cond285 = 0;
 var $or$cond3$not$i = 0, $or$cond412 = 0, $or$cond540$i = 0, $or$cond543$i = 0, $or$cond552$i = 0, $or$cond6$i = 0, $scevgep694$i = 0, $scevgep694695$i = 0, $storemerge = 0, $storemerge273345 = 0, $storemerge273389 = 0, $storemerge278 = 0, $sum = 0, $trunc = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 624|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(624|0);
 $5 = sp + 24|0;
 $6 = sp + 16|0;
 $7 = sp + 588|0;
 $8 = sp + 576|0;
 $9 = sp;
 $10 = sp + 536|0;
 $11 = sp + 8|0;
 $12 = sp + 528|0;
 $13 = ($0|0)!=(0|0);
 $14 = ((($10)) + 40|0);
 $15 = $14;
 $16 = ((($10)) + 39|0);
 $17 = ((($11)) + 4|0);
 $18 = $7;
 $19 = (0 - ($18))|0;
 $20 = ((($8)) + 12|0);
 $21 = ((($8)) + 11|0);
 $22 = $20;
 $23 = (($22) - ($18))|0;
 $24 = (-2 - ($18))|0;
 $25 = (($22) + 2)|0;
 $26 = ((($5)) + 288|0);
 $27 = ((($7)) + 9|0);
 $28 = $27;
 $29 = ((($7)) + 8|0);
 $$0243 = 0;$$0247 = 0;$$0269 = 0;$$0321 = $1;
 L1: while(1) {
  $30 = ($$0247|0)>(-1);
  do {
   if ($30) {
    $31 = (2147483647 - ($$0247))|0;
    $32 = ($$0243|0)>($31|0);
    if ($32) {
     $33 = (___errno_location()|0);
     HEAP32[$33>>2] = 75;
     $$1248 = -1;
     break;
    } else {
     $34 = (($$0243) + ($$0247))|0;
     $$1248 = $34;
     break;
    }
   } else {
    $$1248 = $$0247;
   }
  } while(0);
  $35 = HEAP8[$$0321>>0]|0;
  $36 = ($35<<24>>24)==(0);
  if ($36) {
   label = 243;
   break;
  } else {
   $$1322 = $$0321;$37 = $35;
  }
  L9: while(1) {
   switch ($37<<24>>24) {
   case 37:  {
    $$0249383 = $$1322;$$2323382 = $$1322;
    label = 9;
    break L9;
    break;
   }
   case 0:  {
    $$0249$lcssa = $$1322;$$2323$lcssa = $$1322;
    break L9;
    break;
   }
   default: {
   }
   }
   $38 = ((($$1322)) + 1|0);
   $$pre = HEAP8[$38>>0]|0;
   $$1322 = $38;$37 = $$pre;
  }
  L12: do {
   if ((label|0) == 9) {
    while(1) {
     label = 0;
     $39 = ((($$2323382)) + 1|0);
     $40 = HEAP8[$39>>0]|0;
     $41 = ($40<<24>>24)==(37);
     if (!($41)) {
      $$0249$lcssa = $$0249383;$$2323$lcssa = $$2323382;
      break L12;
     }
     $42 = ((($$0249383)) + 1|0);
     $43 = ((($$2323382)) + 2|0);
     $44 = HEAP8[$43>>0]|0;
     $45 = ($44<<24>>24)==(37);
     if ($45) {
      $$0249383 = $42;$$2323382 = $43;
      label = 9;
     } else {
      $$0249$lcssa = $42;$$2323$lcssa = $43;
      break;
     }
    }
   }
  } while(0);
  $46 = $$0249$lcssa;
  $47 = $$0321;
  $48 = (($46) - ($47))|0;
  if ($13) {
   $49 = HEAP32[$0>>2]|0;
   $50 = $49 & 32;
   $51 = ($50|0)==(0);
   if ($51) {
    (___fwritex($$0321,$48,$0)|0);
   }
  }
  $52 = ($48|0)==(0);
  if (!($52)) {
   $$0269$phi = $$0269;$$0243 = $48;$$0247 = $$1248;$$0321 = $$2323$lcssa;$$0269 = $$0269$phi;
   continue;
  }
  $53 = ((($$2323$lcssa)) + 1|0);
  $54 = HEAP8[$53>>0]|0;
  $55 = $54 << 24 >> 24;
  $isdigittmp = (($55) + -48)|0;
  $isdigit = ($isdigittmp>>>0)<(10);
  if ($isdigit) {
   $56 = ((($$2323$lcssa)) + 2|0);
   $57 = HEAP8[$56>>0]|0;
   $58 = ($57<<24>>24)==(36);
   $59 = ((($$2323$lcssa)) + 3|0);
   $$331 = $58 ? $59 : $53;
   $$$0269 = $58 ? 1 : $$0269;
   $isdigittmp$ = $58 ? $isdigittmp : -1;
   $$pre452 = HEAP8[$$331>>0]|0;
   $$0253 = $isdigittmp$;$$1270 = $$$0269;$61 = $$pre452;$storemerge = $$331;
  } else {
   $$0253 = -1;$$1270 = $$0269;$61 = $54;$storemerge = $53;
  }
  $60 = $61 << 24 >> 24;
  $62 = (($60) + -32)|0;
  $63 = ($62>>>0)<(32);
  L25: do {
   if ($63) {
    $$0262390 = 0;$65 = $62;$69 = $61;$storemerge273389 = $storemerge;
    while(1) {
     $64 = 1 << $65;
     $66 = $64 & 75913;
     $67 = ($66|0)==(0);
     if ($67) {
      $$0262342 = $$0262390;$78 = $69;$storemerge273345 = $storemerge273389;
      break L25;
     }
     $68 = $69 << 24 >> 24;
     $70 = (($68) + -32)|0;
     $71 = 1 << $70;
     $72 = $71 | $$0262390;
     $73 = ((($storemerge273389)) + 1|0);
     $74 = HEAP8[$73>>0]|0;
     $75 = $74 << 24 >> 24;
     $76 = (($75) + -32)|0;
     $77 = ($76>>>0)<(32);
     if ($77) {
      $$0262390 = $72;$65 = $76;$69 = $74;$storemerge273389 = $73;
     } else {
      $$0262342 = $72;$78 = $74;$storemerge273345 = $73;
      break;
     }
    }
   } else {
    $$0262342 = 0;$78 = $61;$storemerge273345 = $storemerge;
   }
  } while(0);
  $79 = ($78<<24>>24)==(42);
  do {
   if ($79) {
    $80 = ((($storemerge273345)) + 1|0);
    $81 = HEAP8[$80>>0]|0;
    $82 = $81 << 24 >> 24;
    $isdigittmp276 = (($82) + -48)|0;
    $isdigit277 = ($isdigittmp276>>>0)<(10);
    if ($isdigit277) {
     $83 = ((($storemerge273345)) + 2|0);
     $84 = HEAP8[$83>>0]|0;
     $85 = ($84<<24>>24)==(36);
     if ($85) {
      $86 = (($4) + ($isdigittmp276<<2)|0);
      HEAP32[$86>>2] = 10;
      $87 = HEAP8[$80>>0]|0;
      $88 = $87 << 24 >> 24;
      $89 = (($88) + -48)|0;
      $90 = (($3) + ($89<<3)|0);
      $91 = $90;
      $92 = $91;
      $93 = HEAP32[$92>>2]|0;
      $94 = (($91) + 4)|0;
      $95 = $94;
      $96 = HEAP32[$95>>2]|0;
      $97 = ((($storemerge273345)) + 3|0);
      $$0259 = $93;$$2271 = 1;$storemerge278 = $97;
     } else {
      label = 24;
     }
    } else {
     label = 24;
    }
    if ((label|0) == 24) {
     label = 0;
     $98 = ($$1270|0)==(0);
     if (!($98)) {
      $$0 = -1;
      break L1;
     }
     if (!($13)) {
      $$1260 = 0;$$1263 = $$0262342;$$3272 = 0;$$4325 = $80;$$pr = $81;
      break;
     }
     $arglist_current = HEAP32[$2>>2]|0;
     $99 = $arglist_current;
     $100 = ((0) + 4|0);
     $expanded4 = $100;
     $expanded = (($expanded4) - 1)|0;
     $101 = (($99) + ($expanded))|0;
     $102 = ((0) + 4|0);
     $expanded8 = $102;
     $expanded7 = (($expanded8) - 1)|0;
     $expanded6 = $expanded7 ^ -1;
     $103 = $101 & $expanded6;
     $104 = $103;
     $105 = HEAP32[$104>>2]|0;
     $arglist_next = ((($104)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     $$0259 = $105;$$2271 = 0;$storemerge278 = $80;
    }
    $106 = ($$0259|0)<(0);
    $107 = $$0262342 | 8192;
    $108 = (0 - ($$0259))|0;
    $$$0262 = $106 ? $107 : $$0262342;
    $$$0259 = $106 ? $108 : $$0259;
    $$pre453 = HEAP8[$storemerge278>>0]|0;
    $$1260 = $$$0259;$$1263 = $$$0262;$$3272 = $$2271;$$4325 = $storemerge278;$$pr = $$pre453;
   } else {
    $109 = $78 << 24 >> 24;
    $isdigittmp4$i = (($109) + -48)|0;
    $isdigit5$i = ($isdigittmp4$i>>>0)<(10);
    if ($isdigit5$i) {
     $$06$i = 0;$113 = $storemerge273345;$isdigittmp7$i = $isdigittmp4$i;
     while(1) {
      $110 = ($$06$i*10)|0;
      $111 = (($110) + ($isdigittmp7$i))|0;
      $112 = ((($113)) + 1|0);
      $114 = HEAP8[$112>>0]|0;
      $115 = $114 << 24 >> 24;
      $isdigittmp$i = (($115) + -48)|0;
      $isdigit$i = ($isdigittmp$i>>>0)<(10);
      if ($isdigit$i) {
       $$06$i = $111;$113 = $112;$isdigittmp7$i = $isdigittmp$i;
      } else {
       break;
      }
     }
     $116 = ($111|0)<(0);
     if ($116) {
      $$0 = -1;
      break L1;
     } else {
      $$1260 = $111;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $112;$$pr = $114;
     }
    } else {
     $$1260 = 0;$$1263 = $$0262342;$$3272 = $$1270;$$4325 = $storemerge273345;$$pr = $78;
    }
   }
  } while(0);
  $117 = ($$pr<<24>>24)==(46);
  L45: do {
   if ($117) {
    $118 = ((($$4325)) + 1|0);
    $119 = HEAP8[$118>>0]|0;
    $120 = ($119<<24>>24)==(42);
    if (!($120)) {
     $147 = $119 << 24 >> 24;
     $isdigittmp4$i287 = (($147) + -48)|0;
     $isdigit5$i288 = ($isdigittmp4$i287>>>0)<(10);
     if ($isdigit5$i288) {
      $$06$i290 = 0;$151 = $118;$isdigittmp7$i289 = $isdigittmp4$i287;
     } else {
      $$0254 = 0;$$6 = $118;
      break;
     }
     while(1) {
      $148 = ($$06$i290*10)|0;
      $149 = (($148) + ($isdigittmp7$i289))|0;
      $150 = ((($151)) + 1|0);
      $152 = HEAP8[$150>>0]|0;
      $153 = $152 << 24 >> 24;
      $isdigittmp$i291 = (($153) + -48)|0;
      $isdigit$i292 = ($isdigittmp$i291>>>0)<(10);
      if ($isdigit$i292) {
       $$06$i290 = $149;$151 = $150;$isdigittmp7$i289 = $isdigittmp$i291;
      } else {
       $$0254 = $149;$$6 = $150;
       break L45;
      }
     }
    }
    $121 = ((($$4325)) + 2|0);
    $122 = HEAP8[$121>>0]|0;
    $123 = $122 << 24 >> 24;
    $isdigittmp274 = (($123) + -48)|0;
    $isdigit275 = ($isdigittmp274>>>0)<(10);
    if ($isdigit275) {
     $124 = ((($$4325)) + 3|0);
     $125 = HEAP8[$124>>0]|0;
     $126 = ($125<<24>>24)==(36);
     if ($126) {
      $127 = (($4) + ($isdigittmp274<<2)|0);
      HEAP32[$127>>2] = 10;
      $128 = HEAP8[$121>>0]|0;
      $129 = $128 << 24 >> 24;
      $130 = (($129) + -48)|0;
      $131 = (($3) + ($130<<3)|0);
      $132 = $131;
      $133 = $132;
      $134 = HEAP32[$133>>2]|0;
      $135 = (($132) + 4)|0;
      $136 = $135;
      $137 = HEAP32[$136>>2]|0;
      $138 = ((($$4325)) + 4|0);
      $$0254 = $134;$$6 = $138;
      break;
     }
    }
    $139 = ($$3272|0)==(0);
    if (!($139)) {
     $$0 = -1;
     break L1;
    }
    if ($13) {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $140 = $arglist_current2;
     $141 = ((0) + 4|0);
     $expanded11 = $141;
     $expanded10 = (($expanded11) - 1)|0;
     $142 = (($140) + ($expanded10))|0;
     $143 = ((0) + 4|0);
     $expanded15 = $143;
     $expanded14 = (($expanded15) - 1)|0;
     $expanded13 = $expanded14 ^ -1;
     $144 = $142 & $expanded13;
     $145 = $144;
     $146 = HEAP32[$145>>2]|0;
     $arglist_next3 = ((($145)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $$0254 = $146;$$6 = $121;
    } else {
     $$0254 = 0;$$6 = $121;
    }
   } else {
    $$0254 = -1;$$6 = $$4325;
   }
  } while(0);
  $$0252 = 0;$$7 = $$6;
  while(1) {
   $154 = HEAP8[$$7>>0]|0;
   $155 = $154 << 24 >> 24;
   $156 = (($155) + -65)|0;
   $157 = ($156>>>0)>(57);
   if ($157) {
    $$0 = -1;
    break L1;
   }
   $158 = ((($$7)) + 1|0);
   $159 = ((19286 + (($$0252*58)|0)|0) + ($156)|0);
   $160 = HEAP8[$159>>0]|0;
   $161 = $160&255;
   $162 = (($161) + -1)|0;
   $163 = ($162>>>0)<(8);
   if ($163) {
    $$0252 = $161;$$7 = $158;
   } else {
    break;
   }
  }
  $164 = ($160<<24>>24)==(0);
  if ($164) {
   $$0 = -1;
   break;
  }
  $165 = ($160<<24>>24)==(19);
  $166 = ($$0253|0)>(-1);
  do {
   if ($165) {
    if ($166) {
     $$0 = -1;
     break L1;
    } else {
     label = 51;
    }
   } else {
    if ($166) {
     $167 = (($4) + ($$0253<<2)|0);
     HEAP32[$167>>2] = $161;
     $168 = (($3) + ($$0253<<3)|0);
     $169 = $168;
     $170 = $169;
     $171 = HEAP32[$170>>2]|0;
     $172 = (($169) + 4)|0;
     $173 = $172;
     $174 = HEAP32[$173>>2]|0;
     $175 = $9;
     $176 = $175;
     HEAP32[$176>>2] = $171;
     $177 = (($175) + 4)|0;
     $178 = $177;
     HEAP32[$178>>2] = $174;
     label = 51;
     break;
    }
    if (!($13)) {
     $$0 = 0;
     break L1;
    }
    _pop_arg($9,$161,$2);
   }
  } while(0);
  if ((label|0) == 51) {
   label = 0;
   if (!($13)) {
    $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue;
   }
  }
  $179 = HEAP8[$$7>>0]|0;
  $180 = $179 << 24 >> 24;
  $181 = ($$0252|0)!=(0);
  $182 = $180 & 15;
  $183 = ($182|0)==(3);
  $or$cond280 = $181 & $183;
  $184 = $180 & -33;
  $$0235 = $or$cond280 ? $184 : $180;
  $185 = $$1263 & 8192;
  $186 = ($185|0)==(0);
  $187 = $$1263 & -65537;
  $$1263$ = $186 ? $$1263 : $187;
  L74: do {
   switch ($$0235|0) {
   case 110:  {
    $trunc = $$0252&255;
    switch ($trunc<<24>>24) {
    case 0:  {
     $194 = HEAP32[$9>>2]|0;
     HEAP32[$194>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 1:  {
     $195 = HEAP32[$9>>2]|0;
     HEAP32[$195>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 2:  {
     $196 = ($$1248|0)<(0);
     $197 = $196 << 31 >> 31;
     $198 = HEAP32[$9>>2]|0;
     $199 = $198;
     $200 = $199;
     HEAP32[$200>>2] = $$1248;
     $201 = (($199) + 4)|0;
     $202 = $201;
     HEAP32[$202>>2] = $197;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 3:  {
     $203 = $$1248&65535;
     $204 = HEAP32[$9>>2]|0;
     HEAP16[$204>>1] = $203;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 4:  {
     $205 = $$1248&255;
     $206 = HEAP32[$9>>2]|0;
     HEAP8[$206>>0] = $205;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 6:  {
     $207 = HEAP32[$9>>2]|0;
     HEAP32[$207>>2] = $$1248;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    case 7:  {
     $208 = ($$1248|0)<(0);
     $209 = $208 << 31 >> 31;
     $210 = HEAP32[$9>>2]|0;
     $211 = $210;
     $212 = $211;
     HEAP32[$212>>2] = $$1248;
     $213 = (($211) + 4)|0;
     $214 = $213;
     HEAP32[$214>>2] = $209;
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
     break;
    }
    default: {
     $$0243 = 0;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
     continue L1;
    }
    }
    break;
   }
   case 112:  {
    $215 = ($$0254>>>0)>(8);
    $216 = $215 ? $$0254 : 8;
    $217 = $$1263$ | 8;
    $$1236 = 120;$$1255 = $216;$$3265 = $217;
    label = 63;
    break;
   }
   case 88: case 120:  {
    $$1236 = $$0235;$$1255 = $$0254;$$3265 = $$1263$;
    label = 63;
    break;
   }
   case 111:  {
    $257 = $9;
    $258 = $257;
    $259 = HEAP32[$258>>2]|0;
    $260 = (($257) + 4)|0;
    $261 = $260;
    $262 = HEAP32[$261>>2]|0;
    $263 = ($259|0)==(0);
    $264 = ($262|0)==(0);
    $265 = $263 & $264;
    if ($265) {
     $$0$lcssa$i300 = $14;
    } else {
     $$06$i298 = $14;$267 = $259;$271 = $262;
     while(1) {
      $266 = $267 & 7;
      $268 = $266 | 48;
      $269 = $268&255;
      $270 = ((($$06$i298)) + -1|0);
      HEAP8[$270>>0] = $269;
      $272 = (_bitshift64Lshr(($267|0),($271|0),3)|0);
      $273 = tempRet0;
      $274 = ($272|0)==(0);
      $275 = ($273|0)==(0);
      $276 = $274 & $275;
      if ($276) {
       $$0$lcssa$i300 = $270;
       break;
      } else {
       $$06$i298 = $270;$267 = $272;$271 = $273;
      }
     }
    }
    $277 = $$1263$ & 8;
    $278 = ($277|0)==(0);
    if ($278) {
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 19766;$$2256 = $$0254;$$4266 = $$1263$;
     label = 76;
    } else {
     $279 = $$0$lcssa$i300;
     $280 = (($15) - ($279))|0;
     $281 = ($$0254|0)>($280|0);
     $282 = (($280) + 1)|0;
     $$0254$ = $281 ? $$0254 : $282;
     $$0228 = $$0$lcssa$i300;$$1233 = 0;$$1238 = 19766;$$2256 = $$0254$;$$4266 = $$1263$;
     label = 76;
    }
    break;
   }
   case 105: case 100:  {
    $283 = $9;
    $284 = $283;
    $285 = HEAP32[$284>>2]|0;
    $286 = (($283) + 4)|0;
    $287 = $286;
    $288 = HEAP32[$287>>2]|0;
    $289 = ($288|0)<(0);
    if ($289) {
     $290 = (_i64Subtract(0,0,($285|0),($288|0))|0);
     $291 = tempRet0;
     $292 = $9;
     $293 = $292;
     HEAP32[$293>>2] = $290;
     $294 = (($292) + 4)|0;
     $295 = $294;
     HEAP32[$295>>2] = $291;
     $$0232 = 1;$$0237 = 19766;$300 = $290;$301 = $291;
     label = 75;
     break L74;
    }
    $296 = $$1263$ & 2048;
    $297 = ($296|0)==(0);
    if ($297) {
     $298 = $$1263$ & 1;
     $299 = ($298|0)==(0);
     $$ = $299 ? 19766 : (19768);
     $$0232 = $298;$$0237 = $$;$300 = $285;$301 = $288;
     label = 75;
    } else {
     $$0232 = 1;$$0237 = (19767);$300 = $285;$301 = $288;
     label = 75;
    }
    break;
   }
   case 117:  {
    $188 = $9;
    $189 = $188;
    $190 = HEAP32[$189>>2]|0;
    $191 = (($188) + 4)|0;
    $192 = $191;
    $193 = HEAP32[$192>>2]|0;
    $$0232 = 0;$$0237 = 19766;$300 = $190;$301 = $193;
    label = 75;
    break;
   }
   case 99:  {
    $321 = $9;
    $322 = $321;
    $323 = HEAP32[$322>>2]|0;
    $324 = (($321) + 4)|0;
    $325 = $324;
    $326 = HEAP32[$325>>2]|0;
    $327 = $323&255;
    HEAP8[$16>>0] = $327;
    $$2 = $16;$$2234 = 0;$$2239 = 19766;$$2251 = $14;$$5 = 1;$$6268 = $187;
    break;
   }
   case 109:  {
    $328 = (___errno_location()|0);
    $329 = HEAP32[$328>>2]|0;
    $330 = (_strerror($329)|0);
    $$1 = $330;
    label = 81;
    break;
   }
   case 115:  {
    $331 = HEAP32[$9>>2]|0;
    $332 = ($331|0)!=(0|0);
    $333 = $332 ? $331 : 19776;
    $$1 = $333;
    label = 81;
    break;
   }
   case 67:  {
    $340 = $9;
    $341 = $340;
    $342 = HEAP32[$341>>2]|0;
    $343 = (($340) + 4)|0;
    $344 = $343;
    $345 = HEAP32[$344>>2]|0;
    HEAP32[$11>>2] = $342;
    HEAP32[$17>>2] = 0;
    HEAP32[$9>>2] = $11;
    $$4258458 = -1;$809 = $11;
    label = 85;
    break;
   }
   case 83:  {
    $$pre454 = HEAP32[$9>>2]|0;
    $346 = ($$0254|0)==(0);
    if ($346) {
     _pad($0,32,$$1260,0,$$1263$);
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$4258458 = $$0254;$809 = $$pre454;
     label = 85;
    }
    break;
   }
   case 65: case 71: case 70: case 69: case 97: case 103: case 102: case 101:  {
    $371 = +HEAPF64[$9>>3];
    HEAP32[$6>>2] = 0;
    HEAPF64[tempDoublePtr>>3] = $371;$372 = HEAP32[tempDoublePtr>>2]|0;
    $373 = HEAP32[tempDoublePtr+4>>2]|0;
    $374 = ($373|0)<(0);
    if ($374) {
     $375 = -$371;
     $$0471$i = $375;$$0520$i = 1;$$0522$i = 19783;
    } else {
     $376 = $$1263$ & 2048;
     $377 = ($376|0)==(0);
     $378 = $$1263$ & 1;
     if ($377) {
      $379 = ($378|0)==(0);
      $$$i = $379 ? (19784) : (19789);
      $$0471$i = $371;$$0520$i = $378;$$0522$i = $$$i;
     } else {
      $$0471$i = $371;$$0520$i = 1;$$0522$i = (19786);
     }
    }
    HEAPF64[tempDoublePtr>>3] = $$0471$i;$380 = HEAP32[tempDoublePtr>>2]|0;
    $381 = HEAP32[tempDoublePtr+4>>2]|0;
    $382 = $381 & 2146435072;
    $383 = ($382>>>0)<(2146435072);
    $384 = (0)<(0);
    $385 = ($382|0)==(2146435072);
    $386 = $385 & $384;
    $387 = $383 | $386;
    do {
     if ($387) {
      $403 = (+_frexpl($$0471$i,$6));
      $404 = $403 * 2.0;
      $405 = $404 != 0.0;
      if ($405) {
       $406 = HEAP32[$6>>2]|0;
       $407 = (($406) + -1)|0;
       HEAP32[$6>>2] = $407;
      }
      $408 = $$0235 | 32;
      $409 = ($408|0)==(97);
      if ($409) {
       $410 = $$0235 & 32;
       $411 = ($410|0)==(0);
       $412 = ((($$0522$i)) + 9|0);
       $$0522$$i = $411 ? $$0522$i : $412;
       $413 = $$0520$i | 2;
       $414 = ($$0254>>>0)>(11);
       $415 = (12 - ($$0254))|0;
       $416 = ($415|0)==(0);
       $417 = $414 | $416;
       do {
        if ($417) {
         $$1472$i = $404;
        } else {
         $$0509592$i = 8.0;$$1508593$i = $415;
         while(1) {
          $418 = (($$1508593$i) + -1)|0;
          $419 = $$0509592$i * 16.0;
          $420 = ($418|0)==(0);
          if ($420) {
           break;
          } else {
           $$0509592$i = $419;$$1508593$i = $418;
          }
         }
         $421 = HEAP8[$$0522$$i>>0]|0;
         $422 = ($421<<24>>24)==(45);
         if ($422) {
          $423 = -$404;
          $424 = $423 - $419;
          $425 = $419 + $424;
          $426 = -$425;
          $$1472$i = $426;
          break;
         } else {
          $427 = $404 + $419;
          $428 = $427 - $419;
          $$1472$i = $428;
          break;
         }
        }
       } while(0);
       $429 = HEAP32[$6>>2]|0;
       $430 = ($429|0)<(0);
       $431 = (0 - ($429))|0;
       $432 = $430 ? $431 : $429;
       $433 = ($432|0)<(0);
       $434 = $433 << 31 >> 31;
       $435 = (_fmt_u($432,$434,$20)|0);
       $436 = ($435|0)==($20|0);
       if ($436) {
        HEAP8[$21>>0] = 48;
        $$0511$i = $21;
       } else {
        $$0511$i = $435;
       }
       $437 = $429 >> 31;
       $438 = $437 & 2;
       $439 = (($438) + 43)|0;
       $440 = $439&255;
       $441 = ((($$0511$i)) + -1|0);
       HEAP8[$441>>0] = $440;
       $442 = (($$0235) + 15)|0;
       $443 = $442&255;
       $444 = ((($$0511$i)) + -2|0);
       HEAP8[$444>>0] = $443;
       $notrhs$i = ($$0254|0)<(1);
       $445 = $$1263$ & 8;
       $446 = ($445|0)==(0);
       $$0524$i = $7;$$2473$i = $$1472$i;
       while(1) {
        $447 = (~~(($$2473$i)));
        $448 = (19750 + ($447)|0);
        $449 = HEAP8[$448>>0]|0;
        $450 = $449&255;
        $451 = $450 | $410;
        $452 = $451&255;
        $453 = ((($$0524$i)) + 1|0);
        HEAP8[$$0524$i>>0] = $452;
        $454 = (+($447|0));
        $455 = $$2473$i - $454;
        $456 = $455 * 16.0;
        $457 = $453;
        $458 = (($457) - ($18))|0;
        $459 = ($458|0)==(1);
        do {
         if ($459) {
          $notlhs$i = $456 == 0.0;
          $or$cond3$not$i = $notrhs$i & $notlhs$i;
          $or$cond$i = $446 & $or$cond3$not$i;
          if ($or$cond$i) {
           $$1525$i = $453;
           break;
          }
          $460 = ((($$0524$i)) + 2|0);
          HEAP8[$453>>0] = 46;
          $$1525$i = $460;
         } else {
          $$1525$i = $453;
         }
        } while(0);
        $461 = $456 != 0.0;
        if ($461) {
         $$0524$i = $$1525$i;$$2473$i = $456;
        } else {
         break;
        }
       }
       $462 = ($$0254|0)!=(0);
       $$pre700$i = $$1525$i;
       $463 = (($24) + ($$pre700$i))|0;
       $464 = ($463|0)<($$0254|0);
       $or$cond412 = $462 & $464;
       $465 = $444;
       $466 = (($25) + ($$0254))|0;
       $467 = (($466) - ($465))|0;
       $468 = (($23) - ($465))|0;
       $469 = (($468) + ($$pre700$i))|0;
       $$0526$i = $or$cond412 ? $467 : $469;
       $470 = (($$0526$i) + ($413))|0;
       _pad($0,32,$$1260,$470,$$1263$);
       $471 = HEAP32[$0>>2]|0;
       $472 = $471 & 32;
       $473 = ($472|0)==(0);
       if ($473) {
        (___fwritex($$0522$$i,$413,$0)|0);
       }
       $474 = $$1263$ ^ 65536;
       _pad($0,48,$$1260,$470,$474);
       $475 = (($$pre700$i) - ($18))|0;
       $476 = HEAP32[$0>>2]|0;
       $477 = $476 & 32;
       $478 = ($477|0)==(0);
       if ($478) {
        (___fwritex($7,$475,$0)|0);
       }
       $479 = (($22) - ($465))|0;
       $sum = (($475) + ($479))|0;
       $480 = (($$0526$i) - ($sum))|0;
       _pad($0,48,$480,0,0);
       $481 = HEAP32[$0>>2]|0;
       $482 = $481 & 32;
       $483 = ($482|0)==(0);
       if ($483) {
        (___fwritex($444,$479,$0)|0);
       }
       $484 = $$1263$ ^ 8192;
       _pad($0,32,$$1260,$470,$484);
       $485 = ($470|0)<($$1260|0);
       $$537$i = $485 ? $$1260 : $470;
       $$0470$i = $$537$i;
       break;
      }
      $486 = ($$0254|0)<(0);
      $$538$i = $486 ? 6 : $$0254;
      if ($405) {
       $487 = $404 * 268435456.0;
       $488 = HEAP32[$6>>2]|0;
       $489 = (($488) + -28)|0;
       HEAP32[$6>>2] = $489;
       $$3$i = $487;$$pr$i = $489;
      } else {
       $$pre697$i = HEAP32[$6>>2]|0;
       $$3$i = $404;$$pr$i = $$pre697$i;
      }
      $490 = ($$pr$i|0)<(0);
      $$554$i = $490 ? $5 : $26;
      $$0498$i = $$554$i;$$4$i = $$3$i;
      while(1) {
       $491 = (~~(($$4$i))>>>0);
       HEAP32[$$0498$i>>2] = $491;
       $492 = ((($$0498$i)) + 4|0);
       $493 = (+($491>>>0));
       $494 = $$4$i - $493;
       $495 = $494 * 1.0E+9;
       $496 = $495 != 0.0;
       if ($496) {
        $$0498$i = $492;$$4$i = $495;
       } else {
        break;
       }
      }
      $497 = ($$pr$i|0)>(0);
      if ($497) {
       $$1482671$i = $$554$i;$$1499670$i = $492;$498 = $$pr$i;
       while(1) {
        $499 = ($498|0)>(29);
        $500 = $499 ? 29 : $498;
        $$0488663$i = ((($$1499670$i)) + -4|0);
        $501 = ($$0488663$i>>>0)<($$1482671$i>>>0);
        do {
         if ($501) {
          $$2483$ph$i = $$1482671$i;
         } else {
          $$0488665$i = $$0488663$i;$$0497664$i = 0;
          while(1) {
           $502 = HEAP32[$$0488665$i>>2]|0;
           $503 = (_bitshift64Shl(($502|0),0,($500|0))|0);
           $504 = tempRet0;
           $505 = (_i64Add(($503|0),($504|0),($$0497664$i|0),0)|0);
           $506 = tempRet0;
           $507 = (___uremdi3(($505|0),($506|0),1000000000,0)|0);
           $508 = tempRet0;
           HEAP32[$$0488665$i>>2] = $507;
           $509 = (___udivdi3(($505|0),($506|0),1000000000,0)|0);
           $510 = tempRet0;
           $$0488$i = ((($$0488665$i)) + -4|0);
           $511 = ($$0488$i>>>0)<($$1482671$i>>>0);
           if ($511) {
            break;
           } else {
            $$0488665$i = $$0488$i;$$0497664$i = $509;
           }
          }
          $512 = ($509|0)==(0);
          if ($512) {
           $$2483$ph$i = $$1482671$i;
           break;
          }
          $513 = ((($$1482671$i)) + -4|0);
          HEAP32[$513>>2] = $509;
          $$2483$ph$i = $513;
         }
        } while(0);
        $$2500$i = $$1499670$i;
        while(1) {
         $514 = ($$2500$i>>>0)>($$2483$ph$i>>>0);
         if (!($514)) {
          break;
         }
         $515 = ((($$2500$i)) + -4|0);
         $516 = HEAP32[$515>>2]|0;
         $517 = ($516|0)==(0);
         if ($517) {
          $$2500$i = $515;
         } else {
          break;
         }
        }
        $518 = HEAP32[$6>>2]|0;
        $519 = (($518) - ($500))|0;
        HEAP32[$6>>2] = $519;
        $520 = ($519|0)>(0);
        if ($520) {
         $$1482671$i = $$2483$ph$i;$$1499670$i = $$2500$i;$498 = $519;
        } else {
         $$1482$lcssa$i = $$2483$ph$i;$$1499$lcssa$i = $$2500$i;$$pr571$i = $519;
         break;
        }
       }
      } else {
       $$1482$lcssa$i = $$554$i;$$1499$lcssa$i = $492;$$pr571$i = $$pr$i;
      }
      $521 = ($$pr571$i|0)<(0);
      if ($521) {
       $522 = (($$538$i) + 25)|0;
       $523 = (($522|0) / 9)&-1;
       $524 = (($523) + 1)|0;
       $525 = ($408|0)==(102);
       $$3484658$i = $$1482$lcssa$i;$$3501657$i = $$1499$lcssa$i;$527 = $$pr571$i;
       while(1) {
        $526 = (0 - ($527))|0;
        $528 = ($526|0)>(9);
        $529 = $528 ? 9 : $526;
        $530 = ($$3484658$i>>>0)<($$3501657$i>>>0);
        do {
         if ($530) {
          $534 = 1 << $529;
          $535 = (($534) + -1)|0;
          $536 = 1000000000 >>> $529;
          $$0487652$i = 0;$$1489651$i = $$3484658$i;
          while(1) {
           $537 = HEAP32[$$1489651$i>>2]|0;
           $538 = $537 & $535;
           $539 = $537 >>> $529;
           $540 = (($539) + ($$0487652$i))|0;
           HEAP32[$$1489651$i>>2] = $540;
           $541 = Math_imul($538, $536)|0;
           $542 = ((($$1489651$i)) + 4|0);
           $543 = ($542>>>0)<($$3501657$i>>>0);
           if ($543) {
            $$0487652$i = $541;$$1489651$i = $542;
           } else {
            break;
           }
          }
          $544 = HEAP32[$$3484658$i>>2]|0;
          $545 = ($544|0)==(0);
          $546 = ((($$3484658$i)) + 4|0);
          $$$3484$i = $545 ? $546 : $$3484658$i;
          $547 = ($541|0)==(0);
          if ($547) {
           $$$3484706$i = $$$3484$i;$$4502$i = $$3501657$i;
           break;
          }
          $548 = ((($$3501657$i)) + 4|0);
          HEAP32[$$3501657$i>>2] = $541;
          $$$3484706$i = $$$3484$i;$$4502$i = $548;
         } else {
          $531 = HEAP32[$$3484658$i>>2]|0;
          $532 = ($531|0)==(0);
          $533 = ((($$3484658$i)) + 4|0);
          $$$3484705$i = $532 ? $533 : $$3484658$i;
          $$$3484706$i = $$$3484705$i;$$4502$i = $$3501657$i;
         }
        } while(0);
        $549 = $525 ? $$554$i : $$$3484706$i;
        $550 = $$4502$i;
        $551 = $549;
        $552 = (($550) - ($551))|0;
        $553 = $552 >> 2;
        $554 = ($553|0)>($524|0);
        $555 = (($549) + ($524<<2)|0);
        $$$4502$i = $554 ? $555 : $$4502$i;
        $556 = HEAP32[$6>>2]|0;
        $557 = (($556) + ($529))|0;
        HEAP32[$6>>2] = $557;
        $558 = ($557|0)<(0);
        if ($558) {
         $$3484658$i = $$$3484706$i;$$3501657$i = $$$4502$i;$527 = $557;
        } else {
         $$3484$lcssa$i = $$$3484706$i;$$3501$lcssa$i = $$$4502$i;
         break;
        }
       }
      } else {
       $$3484$lcssa$i = $$1482$lcssa$i;$$3501$lcssa$i = $$1499$lcssa$i;
      }
      $559 = ($$3484$lcssa$i>>>0)<($$3501$lcssa$i>>>0);
      $560 = $$554$i;
      do {
       if ($559) {
        $561 = $$3484$lcssa$i;
        $562 = (($560) - ($561))|0;
        $563 = $562 >> 2;
        $564 = ($563*9)|0;
        $565 = HEAP32[$$3484$lcssa$i>>2]|0;
        $566 = ($565>>>0)<(10);
        if ($566) {
         $$1515$i = $564;
         break;
        } else {
         $$0514647$i = $564;$$0531646$i = 10;
        }
        while(1) {
         $567 = ($$0531646$i*10)|0;
         $568 = (($$0514647$i) + 1)|0;
         $569 = ($565>>>0)<($567>>>0);
         if ($569) {
          $$1515$i = $568;
          break;
         } else {
          $$0514647$i = $568;$$0531646$i = $567;
         }
        }
       } else {
        $$1515$i = 0;
       }
      } while(0);
      $570 = ($408|0)!=(102);
      $571 = $570 ? $$1515$i : 0;
      $572 = (($$538$i) - ($571))|0;
      $573 = ($408|0)==(103);
      $574 = ($$538$i|0)!=(0);
      $575 = $574 & $573;
      $$neg$i = $575 << 31 >> 31;
      $576 = (($572) + ($$neg$i))|0;
      $577 = $$3501$lcssa$i;
      $578 = (($577) - ($560))|0;
      $579 = $578 >> 2;
      $580 = ($579*9)|0;
      $581 = (($580) + -9)|0;
      $582 = ($576|0)<($581|0);
      if ($582) {
       $583 = ((($$554$i)) + 4|0);
       $584 = (($576) + 9216)|0;
       $585 = (($584|0) / 9)&-1;
       $586 = (($585) + -1024)|0;
       $587 = (($583) + ($586<<2)|0);
       $588 = (($584|0) % 9)&-1;
       $$0528639$i = (($588) + 1)|0;
       $589 = ($$0528639$i|0)<(9);
       if ($589) {
        $$0528641$i = $$0528639$i;$$1532640$i = 10;
        while(1) {
         $590 = ($$1532640$i*10)|0;
         $$0528$i = (($$0528641$i) + 1)|0;
         $exitcond$i = ($$0528$i|0)==(9);
         if ($exitcond$i) {
          $$1532$lcssa$i = $590;
          break;
         } else {
          $$0528641$i = $$0528$i;$$1532640$i = $590;
         }
        }
       } else {
        $$1532$lcssa$i = 10;
       }
       $591 = HEAP32[$587>>2]|0;
       $592 = (($591>>>0) % ($$1532$lcssa$i>>>0))&-1;
       $593 = ($592|0)==(0);
       $594 = ((($587)) + 4|0);
       $595 = ($594|0)==($$3501$lcssa$i|0);
       $or$cond540$i = $595 & $593;
       do {
        if ($or$cond540$i) {
         $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
        } else {
         $596 = (($591>>>0) / ($$1532$lcssa$i>>>0))&-1;
         $597 = $596 & 1;
         $598 = ($597|0)==(0);
         $$541$i = $598 ? 9007199254740992.0 : 9007199254740994.0;
         $599 = (($$1532$lcssa$i|0) / 2)&-1;
         $600 = ($592>>>0)<($599>>>0);
         if ($600) {
          $$0466$i = 0.5;
         } else {
          $601 = ($592|0)==($599|0);
          $or$cond543$i = $595 & $601;
          $$557$i = $or$cond543$i ? 1.0 : 1.5;
          $$0466$i = $$557$i;
         }
         $602 = ($$0520$i|0)==(0);
         do {
          if ($602) {
           $$1467$i = $$0466$i;$$1469$i = $$541$i;
          } else {
           $603 = HEAP8[$$0522$i>>0]|0;
           $604 = ($603<<24>>24)==(45);
           if (!($604)) {
            $$1467$i = $$0466$i;$$1469$i = $$541$i;
            break;
           }
           $605 = -$$541$i;
           $606 = -$$0466$i;
           $$1467$i = $606;$$1469$i = $605;
          }
         } while(0);
         $607 = (($591) - ($592))|0;
         HEAP32[$587>>2] = $607;
         $608 = $$1469$i + $$1467$i;
         $609 = $608 != $$1469$i;
         if (!($609)) {
          $$4492$i = $587;$$4518$i = $$1515$i;$$8$i = $$3484$lcssa$i;
          break;
         }
         $610 = (($607) + ($$1532$lcssa$i))|0;
         HEAP32[$587>>2] = $610;
         $611 = ($610>>>0)>(999999999);
         if ($611) {
          $$2490632$i = $587;$$5486633$i = $$3484$lcssa$i;
          while(1) {
           $612 = ((($$2490632$i)) + -4|0);
           HEAP32[$$2490632$i>>2] = 0;
           $613 = ($612>>>0)<($$5486633$i>>>0);
           if ($613) {
            $614 = ((($$5486633$i)) + -4|0);
            HEAP32[$614>>2] = 0;
            $$6$i = $614;
           } else {
            $$6$i = $$5486633$i;
           }
           $615 = HEAP32[$612>>2]|0;
           $616 = (($615) + 1)|0;
           HEAP32[$612>>2] = $616;
           $617 = ($616>>>0)>(999999999);
           if ($617) {
            $$2490632$i = $612;$$5486633$i = $$6$i;
           } else {
            $$2490$lcssa$i = $612;$$5486$lcssa$i = $$6$i;
            break;
           }
          }
         } else {
          $$2490$lcssa$i = $587;$$5486$lcssa$i = $$3484$lcssa$i;
         }
         $618 = $$5486$lcssa$i;
         $619 = (($560) - ($618))|0;
         $620 = $619 >> 2;
         $621 = ($620*9)|0;
         $622 = HEAP32[$$5486$lcssa$i>>2]|0;
         $623 = ($622>>>0)<(10);
         if ($623) {
          $$4492$i = $$2490$lcssa$i;$$4518$i = $621;$$8$i = $$5486$lcssa$i;
          break;
         } else {
          $$2516628$i = $621;$$2533627$i = 10;
         }
         while(1) {
          $624 = ($$2533627$i*10)|0;
          $625 = (($$2516628$i) + 1)|0;
          $626 = ($622>>>0)<($624>>>0);
          if ($626) {
           $$4492$i = $$2490$lcssa$i;$$4518$i = $625;$$8$i = $$5486$lcssa$i;
           break;
          } else {
           $$2516628$i = $625;$$2533627$i = $624;
          }
         }
        }
       } while(0);
       $627 = ((($$4492$i)) + 4|0);
       $628 = ($$3501$lcssa$i>>>0)>($627>>>0);
       $$$3501$i = $628 ? $627 : $$3501$lcssa$i;
       $$5519$ph$i = $$4518$i;$$7505$ph$i = $$$3501$i;$$9$ph$i = $$8$i;
      } else {
       $$5519$ph$i = $$1515$i;$$7505$ph$i = $$3501$lcssa$i;$$9$ph$i = $$3484$lcssa$i;
      }
      $629 = (0 - ($$5519$ph$i))|0;
      $$7505$i = $$7505$ph$i;
      while(1) {
       $630 = ($$7505$i>>>0)>($$9$ph$i>>>0);
       if (!($630)) {
        $$lcssa683$i = 0;
        break;
       }
       $631 = ((($$7505$i)) + -4|0);
       $632 = HEAP32[$631>>2]|0;
       $633 = ($632|0)==(0);
       if ($633) {
        $$7505$i = $631;
       } else {
        $$lcssa683$i = 1;
        break;
       }
      }
      do {
       if ($573) {
        $634 = $574&1;
        $635 = $634 ^ 1;
        $$538$$i = (($635) + ($$538$i))|0;
        $636 = ($$538$$i|0)>($$5519$ph$i|0);
        $637 = ($$5519$ph$i|0)>(-5);
        $or$cond6$i = $636 & $637;
        if ($or$cond6$i) {
         $638 = (($$0235) + -1)|0;
         $$neg572$i = (($$538$$i) + -1)|0;
         $639 = (($$neg572$i) - ($$5519$ph$i))|0;
         $$0479$i = $638;$$2476$i = $639;
        } else {
         $640 = (($$0235) + -2)|0;
         $641 = (($$538$$i) + -1)|0;
         $$0479$i = $640;$$2476$i = $641;
        }
        $642 = $$1263$ & 8;
        $643 = ($642|0)==(0);
        if (!($643)) {
         $$1480$i = $$0479$i;$$3477$i = $$2476$i;$$pre$phi704$iZ2D = $642;
         break;
        }
        do {
         if ($$lcssa683$i) {
          $644 = ((($$7505$i)) + -4|0);
          $645 = HEAP32[$644>>2]|0;
          $646 = ($645|0)==(0);
          if ($646) {
           $$2530$i = 9;
           break;
          }
          $647 = (($645>>>0) % 10)&-1;
          $648 = ($647|0)==(0);
          if ($648) {
           $$1529624$i = 0;$$3534623$i = 10;
          } else {
           $$2530$i = 0;
           break;
          }
          while(1) {
           $649 = ($$3534623$i*10)|0;
           $650 = (($$1529624$i) + 1)|0;
           $651 = (($645>>>0) % ($649>>>0))&-1;
           $652 = ($651|0)==(0);
           if ($652) {
            $$1529624$i = $650;$$3534623$i = $649;
           } else {
            $$2530$i = $650;
            break;
           }
          }
         } else {
          $$2530$i = 9;
         }
        } while(0);
        $653 = $$0479$i | 32;
        $654 = ($653|0)==(102);
        $655 = $$7505$i;
        $656 = (($655) - ($560))|0;
        $657 = $656 >> 2;
        $658 = ($657*9)|0;
        $659 = (($658) + -9)|0;
        if ($654) {
         $660 = (($659) - ($$2530$i))|0;
         $661 = ($660|0)<(0);
         $$544$i = $661 ? 0 : $660;
         $662 = ($$2476$i|0)<($$544$i|0);
         $$2476$$545$i = $662 ? $$2476$i : $$544$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$545$i;$$pre$phi704$iZ2D = 0;
         break;
        } else {
         $663 = (($659) + ($$5519$ph$i))|0;
         $664 = (($663) - ($$2530$i))|0;
         $665 = ($664|0)<(0);
         $$546$i = $665 ? 0 : $664;
         $666 = ($$2476$i|0)<($$546$i|0);
         $$2476$$547$i = $666 ? $$2476$i : $$546$i;
         $$1480$i = $$0479$i;$$3477$i = $$2476$$547$i;$$pre$phi704$iZ2D = 0;
         break;
        }
       } else {
        $$pre703$i = $$1263$ & 8;
        $$1480$i = $$0235;$$3477$i = $$538$i;$$pre$phi704$iZ2D = $$pre703$i;
       }
      } while(0);
      $667 = $$3477$i | $$pre$phi704$iZ2D;
      $668 = ($667|0)!=(0);
      $669 = $668&1;
      $670 = $$1480$i | 32;
      $671 = ($670|0)==(102);
      if ($671) {
       $672 = ($$5519$ph$i|0)>(0);
       $673 = $672 ? $$5519$ph$i : 0;
       $$2513$i = 0;$$pn$i = $673;
      } else {
       $674 = ($$5519$ph$i|0)<(0);
       $675 = $674 ? $629 : $$5519$ph$i;
       $676 = ($675|0)<(0);
       $677 = $676 << 31 >> 31;
       $678 = (_fmt_u($675,$677,$20)|0);
       $679 = $678;
       $680 = (($22) - ($679))|0;
       $681 = ($680|0)<(2);
       if ($681) {
        $$1512617$i = $678;
        while(1) {
         $682 = ((($$1512617$i)) + -1|0);
         HEAP8[$682>>0] = 48;
         $683 = $682;
         $684 = (($22) - ($683))|0;
         $685 = ($684|0)<(2);
         if ($685) {
          $$1512617$i = $682;
         } else {
          $$1512$lcssa$i = $682;
          break;
         }
        }
       } else {
        $$1512$lcssa$i = $678;
       }
       $686 = $$5519$ph$i >> 31;
       $687 = $686 & 2;
       $688 = (($687) + 43)|0;
       $689 = $688&255;
       $690 = ((($$1512$lcssa$i)) + -1|0);
       HEAP8[$690>>0] = $689;
       $691 = $$1480$i&255;
       $692 = ((($$1512$lcssa$i)) + -2|0);
       HEAP8[$692>>0] = $691;
       $693 = $692;
       $694 = (($22) - ($693))|0;
       $$2513$i = $692;$$pn$i = $694;
      }
      $695 = (($$0520$i) + 1)|0;
      $696 = (($695) + ($$3477$i))|0;
      $$1527$i = (($696) + ($669))|0;
      $697 = (($$1527$i) + ($$pn$i))|0;
      _pad($0,32,$$1260,$697,$$1263$);
      $698 = HEAP32[$0>>2]|0;
      $699 = $698 & 32;
      $700 = ($699|0)==(0);
      if ($700) {
       (___fwritex($$0522$i,$$0520$i,$0)|0);
      }
      $701 = $$1263$ ^ 65536;
      _pad($0,48,$$1260,$697,$701);
      do {
       if ($671) {
        $702 = ($$9$ph$i>>>0)>($$554$i>>>0);
        $$0496$$9$i = $702 ? $$554$i : $$9$ph$i;
        $$5493606$i = $$0496$$9$i;
        while(1) {
         $703 = HEAP32[$$5493606$i>>2]|0;
         $704 = (_fmt_u($703,0,$27)|0);
         $705 = ($$5493606$i|0)==($$0496$$9$i|0);
         do {
          if ($705) {
           $711 = ($704|0)==($27|0);
           if (!($711)) {
            $$1465$i = $704;
            break;
           }
           HEAP8[$29>>0] = 48;
           $$1465$i = $29;
          } else {
           $706 = ($704>>>0)>($7>>>0);
           if (!($706)) {
            $$1465$i = $704;
            break;
           }
           $707 = $704;
           $708 = (($707) - ($18))|0;
           _memset(($7|0),48,($708|0))|0;
           $$0464603$i = $704;
           while(1) {
            $709 = ((($$0464603$i)) + -1|0);
            $710 = ($709>>>0)>($7>>>0);
            if ($710) {
             $$0464603$i = $709;
            } else {
             $$1465$i = $709;
             break;
            }
           }
          }
         } while(0);
         $712 = HEAP32[$0>>2]|0;
         $713 = $712 & 32;
         $714 = ($713|0)==(0);
         if ($714) {
          $715 = $$1465$i;
          $716 = (($28) - ($715))|0;
          (___fwritex($$1465$i,$716,$0)|0);
         }
         $717 = ((($$5493606$i)) + 4|0);
         $718 = ($717>>>0)>($$554$i>>>0);
         if ($718) {
          break;
         } else {
          $$5493606$i = $717;
         }
        }
        $719 = ($667|0)==(0);
        do {
         if (!($719)) {
          $720 = HEAP32[$0>>2]|0;
          $721 = $720 & 32;
          $722 = ($721|0)==(0);
          if (!($722)) {
           break;
          }
          (___fwritex(19814,1,$0)|0);
         }
        } while(0);
        $723 = ($717>>>0)<($$7505$i>>>0);
        $724 = ($$3477$i|0)>(0);
        $725 = $724 & $723;
        if ($725) {
         $$4478600$i = $$3477$i;$$6494599$i = $717;
         while(1) {
          $726 = HEAP32[$$6494599$i>>2]|0;
          $727 = (_fmt_u($726,0,$27)|0);
          $728 = ($727>>>0)>($7>>>0);
          if ($728) {
           $729 = $727;
           $730 = (($729) - ($18))|0;
           _memset(($7|0),48,($730|0))|0;
           $$0463594$i = $727;
           while(1) {
            $731 = ((($$0463594$i)) + -1|0);
            $732 = ($731>>>0)>($7>>>0);
            if ($732) {
             $$0463594$i = $731;
            } else {
             $$0463$lcssa$i = $731;
             break;
            }
           }
          } else {
           $$0463$lcssa$i = $727;
          }
          $733 = HEAP32[$0>>2]|0;
          $734 = $733 & 32;
          $735 = ($734|0)==(0);
          if ($735) {
           $736 = ($$4478600$i|0)>(9);
           $737 = $736 ? 9 : $$4478600$i;
           (___fwritex($$0463$lcssa$i,$737,$0)|0);
          }
          $738 = ((($$6494599$i)) + 4|0);
          $739 = (($$4478600$i) + -9)|0;
          $740 = ($738>>>0)<($$7505$i>>>0);
          $741 = ($$4478600$i|0)>(9);
          $742 = $741 & $740;
          if ($742) {
           $$4478600$i = $739;$$6494599$i = $738;
          } else {
           $$4478$lcssa$i = $739;
           break;
          }
         }
        } else {
         $$4478$lcssa$i = $$3477$i;
        }
        $743 = (($$4478$lcssa$i) + 9)|0;
        _pad($0,48,$743,9,0);
       } else {
        $744 = ((($$9$ph$i)) + 4|0);
        $$7505$$i = $$lcssa683$i ? $$7505$i : $744;
        $745 = ($$3477$i|0)>(-1);
        if ($745) {
         $746 = ($$pre$phi704$iZ2D|0)==(0);
         $$5611$i = $$3477$i;$$7495610$i = $$9$ph$i;
         while(1) {
          $747 = HEAP32[$$7495610$i>>2]|0;
          $748 = (_fmt_u($747,0,$27)|0);
          $749 = ($748|0)==($27|0);
          if ($749) {
           HEAP8[$29>>0] = 48;
           $$0$i = $29;
          } else {
           $$0$i = $748;
          }
          $750 = ($$7495610$i|0)==($$9$ph$i|0);
          do {
           if ($750) {
            $754 = ((($$0$i)) + 1|0);
            $755 = HEAP32[$0>>2]|0;
            $756 = $755 & 32;
            $757 = ($756|0)==(0);
            if ($757) {
             (___fwritex($$0$i,1,$0)|0);
            }
            $758 = ($$5611$i|0)<(1);
            $or$cond552$i = $746 & $758;
            if ($or$cond552$i) {
             $$2$i = $754;
             break;
            }
            $759 = HEAP32[$0>>2]|0;
            $760 = $759 & 32;
            $761 = ($760|0)==(0);
            if (!($761)) {
             $$2$i = $754;
             break;
            }
            (___fwritex(19814,1,$0)|0);
            $$2$i = $754;
           } else {
            $751 = ($$0$i>>>0)>($7>>>0);
            if (!($751)) {
             $$2$i = $$0$i;
             break;
            }
            $scevgep694$i = (($$0$i) + ($19)|0);
            $scevgep694695$i = $scevgep694$i;
            _memset(($7|0),48,($scevgep694695$i|0))|0;
            $$1607$i = $$0$i;
            while(1) {
             $752 = ((($$1607$i)) + -1|0);
             $753 = ($752>>>0)>($7>>>0);
             if ($753) {
              $$1607$i = $752;
             } else {
              $$2$i = $752;
              break;
             }
            }
           }
          } while(0);
          $762 = $$2$i;
          $763 = (($28) - ($762))|0;
          $764 = HEAP32[$0>>2]|0;
          $765 = $764 & 32;
          $766 = ($765|0)==(0);
          if ($766) {
           $767 = ($$5611$i|0)>($763|0);
           $768 = $767 ? $763 : $$5611$i;
           (___fwritex($$2$i,$768,$0)|0);
          }
          $769 = (($$5611$i) - ($763))|0;
          $770 = ((($$7495610$i)) + 4|0);
          $771 = ($770>>>0)<($$7505$$i>>>0);
          $772 = ($769|0)>(-1);
          $773 = $771 & $772;
          if ($773) {
           $$5611$i = $769;$$7495610$i = $770;
          } else {
           $$5$lcssa$i = $769;
           break;
          }
         }
        } else {
         $$5$lcssa$i = $$3477$i;
        }
        $774 = (($$5$lcssa$i) + 18)|0;
        _pad($0,48,$774,18,0);
        $775 = HEAP32[$0>>2]|0;
        $776 = $775 & 32;
        $777 = ($776|0)==(0);
        if (!($777)) {
         break;
        }
        $778 = $$2513$i;
        $779 = (($22) - ($778))|0;
        (___fwritex($$2513$i,$779,$0)|0);
       }
      } while(0);
      $780 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$697,$780);
      $781 = ($697|0)<($$1260|0);
      $$553$i = $781 ? $$1260 : $697;
      $$0470$i = $$553$i;
     } else {
      $388 = $$0235 & 32;
      $389 = ($388|0)!=(0);
      $390 = $389 ? 19802 : 19806;
      $391 = ($$0471$i != $$0471$i) | (0.0 != 0.0);
      $392 = $389 ? 21721 : 19810;
      $$1521$i = $391 ? 0 : $$0520$i;
      $$0510$i = $391 ? $392 : $390;
      $393 = (($$1521$i) + 3)|0;
      _pad($0,32,$$1260,$393,$187);
      $394 = HEAP32[$0>>2]|0;
      $395 = $394 & 32;
      $396 = ($395|0)==(0);
      if ($396) {
       (___fwritex($$0522$i,$$1521$i,$0)|0);
       $$pre$i = HEAP32[$0>>2]|0;
       $398 = $$pre$i;
      } else {
       $398 = $394;
      }
      $397 = $398 & 32;
      $399 = ($397|0)==(0);
      if ($399) {
       (___fwritex($$0510$i,3,$0)|0);
      }
      $400 = $$1263$ ^ 8192;
      _pad($0,32,$$1260,$393,$400);
      $401 = ($393|0)<($$1260|0);
      $402 = $401 ? $$1260 : $393;
      $$0470$i = $402;
     }
    } while(0);
    $$0243 = $$0470$i;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
    continue L1;
    break;
   }
   default: {
    $$2 = $$0321;$$2234 = 0;$$2239 = 19766;$$2251 = $14;$$5 = $$0254;$$6268 = $$1263$;
   }
   }
  } while(0);
  L310: do {
   if ((label|0) == 63) {
    label = 0;
    $218 = $9;
    $219 = $218;
    $220 = HEAP32[$219>>2]|0;
    $221 = (($218) + 4)|0;
    $222 = $221;
    $223 = HEAP32[$222>>2]|0;
    $224 = $$1236 & 32;
    $225 = ($220|0)==(0);
    $226 = ($223|0)==(0);
    $227 = $225 & $226;
    if ($227) {
     $$05$lcssa$i = $14;$248 = 0;$250 = 0;
    } else {
     $$056$i = $14;$229 = $220;$236 = $223;
     while(1) {
      $228 = $229 & 15;
      $230 = (19750 + ($228)|0);
      $231 = HEAP8[$230>>0]|0;
      $232 = $231&255;
      $233 = $232 | $224;
      $234 = $233&255;
      $235 = ((($$056$i)) + -1|0);
      HEAP8[$235>>0] = $234;
      $237 = (_bitshift64Lshr(($229|0),($236|0),4)|0);
      $238 = tempRet0;
      $239 = ($237|0)==(0);
      $240 = ($238|0)==(0);
      $241 = $239 & $240;
      if ($241) {
       break;
      } else {
       $$056$i = $235;$229 = $237;$236 = $238;
      }
     }
     $242 = $9;
     $243 = $242;
     $244 = HEAP32[$243>>2]|0;
     $245 = (($242) + 4)|0;
     $246 = $245;
     $247 = HEAP32[$246>>2]|0;
     $$05$lcssa$i = $235;$248 = $244;$250 = $247;
    }
    $249 = ($248|0)==(0);
    $251 = ($250|0)==(0);
    $252 = $249 & $251;
    $253 = $$3265 & 8;
    $254 = ($253|0)==(0);
    $or$cond282 = $254 | $252;
    $255 = $$1236 >> 4;
    $256 = (19766 + ($255)|0);
    $$332 = $or$cond282 ? 19766 : $256;
    $$333 = $or$cond282 ? 0 : 2;
    $$0228 = $$05$lcssa$i;$$1233 = $$333;$$1238 = $$332;$$2256 = $$1255;$$4266 = $$3265;
    label = 76;
   }
   else if ((label|0) == 75) {
    label = 0;
    $302 = (_fmt_u($300,$301,$14)|0);
    $$0228 = $302;$$1233 = $$0232;$$1238 = $$0237;$$2256 = $$0254;$$4266 = $$1263$;
    label = 76;
   }
   else if ((label|0) == 81) {
    label = 0;
    $334 = (_memchr($$1,0,$$0254)|0);
    $335 = ($334|0)==(0|0);
    $336 = $334;
    $337 = $$1;
    $338 = (($336) - ($337))|0;
    $339 = (($$1) + ($$0254)|0);
    $$3257 = $335 ? $$0254 : $338;
    $$1250 = $335 ? $339 : $334;
    $$2 = $$1;$$2234 = 0;$$2239 = 19766;$$2251 = $$1250;$$5 = $$3257;$$6268 = $187;
   }
   else if ((label|0) == 85) {
    label = 0;
    $$0229396 = $809;$$0240395 = 0;$$1244394 = 0;
    while(1) {
     $347 = HEAP32[$$0229396>>2]|0;
     $348 = ($347|0)==(0);
     if ($348) {
      $$0240$lcssa = $$0240395;$$2245 = $$1244394;
      break;
     }
     $349 = (_wctomb($12,$347)|0);
     $350 = ($349|0)<(0);
     $351 = (($$4258458) - ($$0240395))|0;
     $352 = ($349>>>0)>($351>>>0);
     $or$cond285 = $350 | $352;
     if ($or$cond285) {
      $$0240$lcssa = $$0240395;$$2245 = $349;
      break;
     }
     $353 = ((($$0229396)) + 4|0);
     $354 = (($349) + ($$0240395))|0;
     $355 = ($$4258458>>>0)>($354>>>0);
     if ($355) {
      $$0229396 = $353;$$0240395 = $354;$$1244394 = $349;
     } else {
      $$0240$lcssa = $354;$$2245 = $349;
      break;
     }
    }
    $356 = ($$2245|0)<(0);
    if ($356) {
     $$0 = -1;
     break L1;
    }
    _pad($0,32,$$1260,$$0240$lcssa,$$1263$);
    $357 = ($$0240$lcssa|0)==(0);
    if ($357) {
     $$0240$lcssa460 = 0;
     label = 96;
    } else {
     $$1230407 = $809;$$1241406 = 0;
     while(1) {
      $358 = HEAP32[$$1230407>>2]|0;
      $359 = ($358|0)==(0);
      if ($359) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $360 = ((($$1230407)) + 4|0);
      $361 = (_wctomb($12,$358)|0);
      $362 = (($361) + ($$1241406))|0;
      $363 = ($362|0)>($$0240$lcssa|0);
      if ($363) {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break L310;
      }
      $364 = HEAP32[$0>>2]|0;
      $365 = $364 & 32;
      $366 = ($365|0)==(0);
      if ($366) {
       (___fwritex($12,$361,$0)|0);
      }
      $367 = ($362>>>0)<($$0240$lcssa>>>0);
      if ($367) {
       $$1230407 = $360;$$1241406 = $362;
      } else {
       $$0240$lcssa460 = $$0240$lcssa;
       label = 96;
       break;
      }
     }
    }
   }
  } while(0);
  if ((label|0) == 96) {
   label = 0;
   $368 = $$1263$ ^ 8192;
   _pad($0,32,$$1260,$$0240$lcssa460,$368);
   $369 = ($$1260|0)>($$0240$lcssa460|0);
   $370 = $369 ? $$1260 : $$0240$lcssa460;
   $$0243 = $370;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
   continue;
  }
  if ((label|0) == 76) {
   label = 0;
   $303 = ($$2256|0)>(-1);
   $304 = $$4266 & -65537;
   $$$4266 = $303 ? $304 : $$4266;
   $305 = $9;
   $306 = $305;
   $307 = HEAP32[$306>>2]|0;
   $308 = (($305) + 4)|0;
   $309 = $308;
   $310 = HEAP32[$309>>2]|0;
   $311 = ($307|0)!=(0);
   $312 = ($310|0)!=(0);
   $313 = $311 | $312;
   $314 = ($$2256|0)!=(0);
   $or$cond = $314 | $313;
   if ($or$cond) {
    $315 = $$0228;
    $316 = (($15) - ($315))|0;
    $317 = $313&1;
    $318 = $317 ^ 1;
    $319 = (($318) + ($316))|0;
    $320 = ($$2256|0)>($319|0);
    $$2256$ = $320 ? $$2256 : $319;
    $$2 = $$0228;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = $$2256$;$$6268 = $$$4266;
   } else {
    $$2 = $14;$$2234 = $$1233;$$2239 = $$1238;$$2251 = $14;$$5 = 0;$$6268 = $$$4266;
   }
  }
  $782 = $$2251;
  $783 = $$2;
  $784 = (($782) - ($783))|0;
  $785 = ($$5|0)<($784|0);
  $$$5 = $785 ? $784 : $$5;
  $786 = (($$$5) + ($$2234))|0;
  $787 = ($$1260|0)<($786|0);
  $$2261 = $787 ? $786 : $$1260;
  _pad($0,32,$$2261,$786,$$6268);
  $788 = HEAP32[$0>>2]|0;
  $789 = $788 & 32;
  $790 = ($789|0)==(0);
  if ($790) {
   (___fwritex($$2239,$$2234,$0)|0);
  }
  $791 = $$6268 ^ 65536;
  _pad($0,48,$$2261,$786,$791);
  _pad($0,48,$$$5,$784,0);
  $792 = HEAP32[$0>>2]|0;
  $793 = $792 & 32;
  $794 = ($793|0)==(0);
  if ($794) {
   (___fwritex($$2,$784,$0)|0);
  }
  $795 = $$6268 ^ 8192;
  _pad($0,32,$$2261,$786,$795);
  $$0243 = $$2261;$$0247 = $$1248;$$0269 = $$3272;$$0321 = $158;
 }
 L345: do {
  if ((label|0) == 243) {
   $796 = ($0|0)==(0|0);
   if ($796) {
    $797 = ($$0269|0)==(0);
    if ($797) {
     $$0 = 0;
    } else {
     $$2242381 = 1;
     while(1) {
      $798 = (($4) + ($$2242381<<2)|0);
      $799 = HEAP32[$798>>2]|0;
      $800 = ($799|0)==(0);
      if ($800) {
       $$3379 = $$2242381;
       break;
      }
      $801 = (($3) + ($$2242381<<3)|0);
      _pop_arg($801,$799,$2);
      $802 = (($$2242381) + 1)|0;
      $803 = ($802|0)<(10);
      if ($803) {
       $$2242381 = $802;
      } else {
       $$0 = 1;
       break L345;
      }
     }
     while(1) {
      $806 = (($4) + ($$3379<<2)|0);
      $807 = HEAP32[$806>>2]|0;
      $808 = ($807|0)==(0);
      $804 = (($$3379) + 1)|0;
      if (!($808)) {
       $$0 = -1;
       break L345;
      }
      $805 = ($804|0)<(10);
      if ($805) {
       $$3379 = $804;
      } else {
       $$0 = 1;
       break;
      }
     }
    }
   } else {
    $$0 = $$1248;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function ___lockfile($0) {
 $0 = $0|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}
function ___fwritex($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$032 = 0, $$033 = 0, $$034 = 0, $$1 = 0, $$pre = 0, $$pre38 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)==(0|0);
 if ($5) {
  $7 = (___towrite($2)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$3>>2]|0;
   $12 = $$pre;
   label = 5;
  } else {
   $$032 = 0;
  }
 } else {
  $6 = $4;
  $12 = $6;
  label = 5;
 }
 L5: do {
  if ((label|0) == 5) {
   $9 = ((($2)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = (($12) - ($10))|0;
   $13 = ($11>>>0)<($1>>>0);
   $14 = $10;
   if ($13) {
    $15 = ((($2)) + 36|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = (FUNCTION_TABLE_iiii[$16 & 7]($2,$0,$1)|0);
    $$032 = $17;
    break;
   }
   $18 = ((($2)) + 75|0);
   $19 = HEAP8[$18>>0]|0;
   $20 = ($19<<24>>24)>(-1);
   L10: do {
    if ($20) {
     $$0 = $1;
     while(1) {
      $21 = ($$0|0)==(0);
      if ($21) {
       $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
       break L10;
      }
      $22 = (($$0) + -1)|0;
      $23 = (($0) + ($22)|0);
      $24 = HEAP8[$23>>0]|0;
      $25 = ($24<<24>>24)==(10);
      if ($25) {
       break;
      } else {
       $$0 = $22;
      }
     }
     $26 = ((($2)) + 36|0);
     $27 = HEAP32[$26>>2]|0;
     $28 = (FUNCTION_TABLE_iiii[$27 & 7]($2,$0,$$0)|0);
     $29 = ($28>>>0)<($$0>>>0);
     if ($29) {
      $$032 = $$0;
      break L5;
     }
     $30 = (($0) + ($$0)|0);
     $31 = (($1) - ($$0))|0;
     $$pre38 = HEAP32[$9>>2]|0;
     $$033 = $31;$$034 = $30;$$1 = $$0;$32 = $$pre38;
    } else {
     $$033 = $1;$$034 = $0;$$1 = 0;$32 = $14;
    }
   } while(0);
   _memcpy(($32|0),($$034|0),($$033|0))|0;
   $33 = HEAP32[$9>>2]|0;
   $34 = (($33) + ($$033)|0);
   HEAP32[$9>>2] = $34;
   $35 = (($$1) + ($$033))|0;
   $$032 = $35;
  }
 } while(0);
 return ($$032|0);
}
function _pop_arg($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$mask = 0, $$mask31 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0.0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0.0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $arglist_current = 0, $arglist_current11 = 0, $arglist_current14 = 0, $arglist_current17 = 0;
 var $arglist_current2 = 0, $arglist_current20 = 0, $arglist_current23 = 0, $arglist_current26 = 0, $arglist_current5 = 0, $arglist_current8 = 0, $arglist_next = 0, $arglist_next12 = 0, $arglist_next15 = 0, $arglist_next18 = 0, $arglist_next21 = 0, $arglist_next24 = 0, $arglist_next27 = 0, $arglist_next3 = 0, $arglist_next6 = 0, $arglist_next9 = 0, $expanded = 0, $expanded28 = 0, $expanded30 = 0, $expanded31 = 0;
 var $expanded32 = 0, $expanded34 = 0, $expanded35 = 0, $expanded37 = 0, $expanded38 = 0, $expanded39 = 0, $expanded41 = 0, $expanded42 = 0, $expanded44 = 0, $expanded45 = 0, $expanded46 = 0, $expanded48 = 0, $expanded49 = 0, $expanded51 = 0, $expanded52 = 0, $expanded53 = 0, $expanded55 = 0, $expanded56 = 0, $expanded58 = 0, $expanded59 = 0;
 var $expanded60 = 0, $expanded62 = 0, $expanded63 = 0, $expanded65 = 0, $expanded66 = 0, $expanded67 = 0, $expanded69 = 0, $expanded70 = 0, $expanded72 = 0, $expanded73 = 0, $expanded74 = 0, $expanded76 = 0, $expanded77 = 0, $expanded79 = 0, $expanded80 = 0, $expanded81 = 0, $expanded83 = 0, $expanded84 = 0, $expanded86 = 0, $expanded87 = 0;
 var $expanded88 = 0, $expanded90 = 0, $expanded91 = 0, $expanded93 = 0, $expanded94 = 0, $expanded95 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(20);
 L1: do {
  if (!($3)) {
   do {
    switch ($1|0) {
    case 9:  {
     $arglist_current = HEAP32[$2>>2]|0;
     $4 = $arglist_current;
     $5 = ((0) + 4|0);
     $expanded28 = $5;
     $expanded = (($expanded28) - 1)|0;
     $6 = (($4) + ($expanded))|0;
     $7 = ((0) + 4|0);
     $expanded32 = $7;
     $expanded31 = (($expanded32) - 1)|0;
     $expanded30 = $expanded31 ^ -1;
     $8 = $6 & $expanded30;
     $9 = $8;
     $10 = HEAP32[$9>>2]|0;
     $arglist_next = ((($9)) + 4|0);
     HEAP32[$2>>2] = $arglist_next;
     HEAP32[$0>>2] = $10;
     break L1;
     break;
    }
    case 10:  {
     $arglist_current2 = HEAP32[$2>>2]|0;
     $11 = $arglist_current2;
     $12 = ((0) + 4|0);
     $expanded35 = $12;
     $expanded34 = (($expanded35) - 1)|0;
     $13 = (($11) + ($expanded34))|0;
     $14 = ((0) + 4|0);
     $expanded39 = $14;
     $expanded38 = (($expanded39) - 1)|0;
     $expanded37 = $expanded38 ^ -1;
     $15 = $13 & $expanded37;
     $16 = $15;
     $17 = HEAP32[$16>>2]|0;
     $arglist_next3 = ((($16)) + 4|0);
     HEAP32[$2>>2] = $arglist_next3;
     $18 = ($17|0)<(0);
     $19 = $18 << 31 >> 31;
     $20 = $0;
     $21 = $20;
     HEAP32[$21>>2] = $17;
     $22 = (($20) + 4)|0;
     $23 = $22;
     HEAP32[$23>>2] = $19;
     break L1;
     break;
    }
    case 11:  {
     $arglist_current5 = HEAP32[$2>>2]|0;
     $24 = $arglist_current5;
     $25 = ((0) + 4|0);
     $expanded42 = $25;
     $expanded41 = (($expanded42) - 1)|0;
     $26 = (($24) + ($expanded41))|0;
     $27 = ((0) + 4|0);
     $expanded46 = $27;
     $expanded45 = (($expanded46) - 1)|0;
     $expanded44 = $expanded45 ^ -1;
     $28 = $26 & $expanded44;
     $29 = $28;
     $30 = HEAP32[$29>>2]|0;
     $arglist_next6 = ((($29)) + 4|0);
     HEAP32[$2>>2] = $arglist_next6;
     $31 = $0;
     $32 = $31;
     HEAP32[$32>>2] = $30;
     $33 = (($31) + 4)|0;
     $34 = $33;
     HEAP32[$34>>2] = 0;
     break L1;
     break;
    }
    case 12:  {
     $arglist_current8 = HEAP32[$2>>2]|0;
     $35 = $arglist_current8;
     $36 = ((0) + 8|0);
     $expanded49 = $36;
     $expanded48 = (($expanded49) - 1)|0;
     $37 = (($35) + ($expanded48))|0;
     $38 = ((0) + 8|0);
     $expanded53 = $38;
     $expanded52 = (($expanded53) - 1)|0;
     $expanded51 = $expanded52 ^ -1;
     $39 = $37 & $expanded51;
     $40 = $39;
     $41 = $40;
     $42 = $41;
     $43 = HEAP32[$42>>2]|0;
     $44 = (($41) + 4)|0;
     $45 = $44;
     $46 = HEAP32[$45>>2]|0;
     $arglist_next9 = ((($40)) + 8|0);
     HEAP32[$2>>2] = $arglist_next9;
     $47 = $0;
     $48 = $47;
     HEAP32[$48>>2] = $43;
     $49 = (($47) + 4)|0;
     $50 = $49;
     HEAP32[$50>>2] = $46;
     break L1;
     break;
    }
    case 13:  {
     $arglist_current11 = HEAP32[$2>>2]|0;
     $51 = $arglist_current11;
     $52 = ((0) + 4|0);
     $expanded56 = $52;
     $expanded55 = (($expanded56) - 1)|0;
     $53 = (($51) + ($expanded55))|0;
     $54 = ((0) + 4|0);
     $expanded60 = $54;
     $expanded59 = (($expanded60) - 1)|0;
     $expanded58 = $expanded59 ^ -1;
     $55 = $53 & $expanded58;
     $56 = $55;
     $57 = HEAP32[$56>>2]|0;
     $arglist_next12 = ((($56)) + 4|0);
     HEAP32[$2>>2] = $arglist_next12;
     $58 = $57&65535;
     $59 = $58 << 16 >> 16;
     $60 = ($59|0)<(0);
     $61 = $60 << 31 >> 31;
     $62 = $0;
     $63 = $62;
     HEAP32[$63>>2] = $59;
     $64 = (($62) + 4)|0;
     $65 = $64;
     HEAP32[$65>>2] = $61;
     break L1;
     break;
    }
    case 14:  {
     $arglist_current14 = HEAP32[$2>>2]|0;
     $66 = $arglist_current14;
     $67 = ((0) + 4|0);
     $expanded63 = $67;
     $expanded62 = (($expanded63) - 1)|0;
     $68 = (($66) + ($expanded62))|0;
     $69 = ((0) + 4|0);
     $expanded67 = $69;
     $expanded66 = (($expanded67) - 1)|0;
     $expanded65 = $expanded66 ^ -1;
     $70 = $68 & $expanded65;
     $71 = $70;
     $72 = HEAP32[$71>>2]|0;
     $arglist_next15 = ((($71)) + 4|0);
     HEAP32[$2>>2] = $arglist_next15;
     $$mask31 = $72 & 65535;
     $73 = $0;
     $74 = $73;
     HEAP32[$74>>2] = $$mask31;
     $75 = (($73) + 4)|0;
     $76 = $75;
     HEAP32[$76>>2] = 0;
     break L1;
     break;
    }
    case 15:  {
     $arglist_current17 = HEAP32[$2>>2]|0;
     $77 = $arglist_current17;
     $78 = ((0) + 4|0);
     $expanded70 = $78;
     $expanded69 = (($expanded70) - 1)|0;
     $79 = (($77) + ($expanded69))|0;
     $80 = ((0) + 4|0);
     $expanded74 = $80;
     $expanded73 = (($expanded74) - 1)|0;
     $expanded72 = $expanded73 ^ -1;
     $81 = $79 & $expanded72;
     $82 = $81;
     $83 = HEAP32[$82>>2]|0;
     $arglist_next18 = ((($82)) + 4|0);
     HEAP32[$2>>2] = $arglist_next18;
     $84 = $83&255;
     $85 = $84 << 24 >> 24;
     $86 = ($85|0)<(0);
     $87 = $86 << 31 >> 31;
     $88 = $0;
     $89 = $88;
     HEAP32[$89>>2] = $85;
     $90 = (($88) + 4)|0;
     $91 = $90;
     HEAP32[$91>>2] = $87;
     break L1;
     break;
    }
    case 16:  {
     $arglist_current20 = HEAP32[$2>>2]|0;
     $92 = $arglist_current20;
     $93 = ((0) + 4|0);
     $expanded77 = $93;
     $expanded76 = (($expanded77) - 1)|0;
     $94 = (($92) + ($expanded76))|0;
     $95 = ((0) + 4|0);
     $expanded81 = $95;
     $expanded80 = (($expanded81) - 1)|0;
     $expanded79 = $expanded80 ^ -1;
     $96 = $94 & $expanded79;
     $97 = $96;
     $98 = HEAP32[$97>>2]|0;
     $arglist_next21 = ((($97)) + 4|0);
     HEAP32[$2>>2] = $arglist_next21;
     $$mask = $98 & 255;
     $99 = $0;
     $100 = $99;
     HEAP32[$100>>2] = $$mask;
     $101 = (($99) + 4)|0;
     $102 = $101;
     HEAP32[$102>>2] = 0;
     break L1;
     break;
    }
    case 17:  {
     $arglist_current23 = HEAP32[$2>>2]|0;
     $103 = $arglist_current23;
     $104 = ((0) + 8|0);
     $expanded84 = $104;
     $expanded83 = (($expanded84) - 1)|0;
     $105 = (($103) + ($expanded83))|0;
     $106 = ((0) + 8|0);
     $expanded88 = $106;
     $expanded87 = (($expanded88) - 1)|0;
     $expanded86 = $expanded87 ^ -1;
     $107 = $105 & $expanded86;
     $108 = $107;
     $109 = +HEAPF64[$108>>3];
     $arglist_next24 = ((($108)) + 8|0);
     HEAP32[$2>>2] = $arglist_next24;
     HEAPF64[$0>>3] = $109;
     break L1;
     break;
    }
    case 18:  {
     $arglist_current26 = HEAP32[$2>>2]|0;
     $110 = $arglist_current26;
     $111 = ((0) + 8|0);
     $expanded91 = $111;
     $expanded90 = (($expanded91) - 1)|0;
     $112 = (($110) + ($expanded90))|0;
     $113 = ((0) + 8|0);
     $expanded95 = $113;
     $expanded94 = (($expanded95) - 1)|0;
     $expanded93 = $expanded94 ^ -1;
     $114 = $112 & $expanded93;
     $115 = $114;
     $116 = +HEAPF64[$115>>3];
     $arglist_next27 = ((($115)) + 8|0);
     HEAP32[$2>>2] = $arglist_next27;
     HEAPF64[$0>>3] = $116;
     break L1;
     break;
    }
    default: {
     break L1;
    }
    }
   } while(0);
  }
 } while(0);
 return;
}
function _fmt_u($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$010$lcssa$off0 = 0, $$012 = 0, $$09$lcssa = 0, $$0914 = 0, $$1$lcssa = 0, $$111 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($1>>>0)>(0);
 $4 = ($0>>>0)>(4294967295);
 $5 = ($1|0)==(0);
 $6 = $5 & $4;
 $7 = $3 | $6;
 if ($7) {
  $$0914 = $2;$8 = $0;$9 = $1;
  while(1) {
   $10 = (___uremdi3(($8|0),($9|0),10,0)|0);
   $11 = tempRet0;
   $12 = $10 | 48;
   $13 = $12&255;
   $14 = ((($$0914)) + -1|0);
   HEAP8[$14>>0] = $13;
   $15 = (___udivdi3(($8|0),($9|0),10,0)|0);
   $16 = tempRet0;
   $17 = ($9>>>0)>(9);
   $18 = ($8>>>0)>(4294967295);
   $19 = ($9|0)==(9);
   $20 = $19 & $18;
   $21 = $17 | $20;
   if ($21) {
    $$0914 = $14;$8 = $15;$9 = $16;
   } else {
    break;
   }
  }
  $$010$lcssa$off0 = $15;$$09$lcssa = $14;
 } else {
  $$010$lcssa$off0 = $0;$$09$lcssa = $2;
 }
 $22 = ($$010$lcssa$off0|0)==(0);
 if ($22) {
  $$1$lcssa = $$09$lcssa;
 } else {
  $$012 = $$010$lcssa$off0;$$111 = $$09$lcssa;
  while(1) {
   $23 = (($$012>>>0) % 10)&-1;
   $24 = $23 | 48;
   $25 = $24&255;
   $26 = ((($$111)) + -1|0);
   HEAP8[$26>>0] = $25;
   $27 = (($$012>>>0) / 10)&-1;
   $28 = ($$012>>>0)<(10);
   if ($28) {
    $$1$lcssa = $26;
    break;
   } else {
    $$012 = $27;$$111 = $26;
   }
  }
 }
 return ($$1$lcssa|0);
}
function _strerror($0) {
 $0 = $0|0;
 var $$011$lcssa = 0, $$01113 = 0, $$015 = 0, $$112 = 0, $$114 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$015 = 0;
 while(1) {
  $2 = (19816 + ($$015)|0);
  $3 = HEAP8[$2>>0]|0;
  $4 = $3&255;
  $5 = ($4|0)==($0|0);
  if ($5) {
   label = 2;
   break;
  }
  $6 = (($$015) + 1)|0;
  $7 = ($6|0)==(87);
  if ($7) {
   $$01113 = 19904;$$114 = 87;
   label = 5;
   break;
  } else {
   $$015 = $6;
  }
 }
 if ((label|0) == 2) {
  $1 = ($$015|0)==(0);
  if ($1) {
   $$011$lcssa = 19904;
  } else {
   $$01113 = 19904;$$114 = $$015;
   label = 5;
  }
 }
 if ((label|0) == 5) {
  while(1) {
   label = 0;
   $$112 = $$01113;
   while(1) {
    $8 = HEAP8[$$112>>0]|0;
    $9 = ($8<<24>>24)==(0);
    $10 = ((($$112)) + 1|0);
    if ($9) {
     break;
    } else {
     $$112 = $10;
    }
   }
   $11 = (($$114) + -1)|0;
   $12 = ($11|0)==(0);
   if ($12) {
    $$011$lcssa = $10;
    break;
   } else {
    $$01113 = $10;$$114 = $11;
    label = 5;
   }
  }
 }
 return ($$011$lcssa|0);
}
function _memchr($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$035$lcssa = 0, $$035$lcssa65 = 0, $$03555 = 0, $$036$lcssa = 0, $$036$lcssa64 = 0, $$03654 = 0, $$046 = 0, $$137$lcssa = 0, $$13745 = 0, $$140 = 0, $$2 = 0, $$23839 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond53 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1 & 255;
 $4 = $0;
 $5 = $4 & 3;
 $6 = ($5|0)!=(0);
 $7 = ($2|0)!=(0);
 $or$cond53 = $7 & $6;
 L1: do {
  if ($or$cond53) {
   $8 = $1&255;
   $$03555 = $0;$$03654 = $2;
   while(1) {
    $9 = HEAP8[$$03555>>0]|0;
    $10 = ($9<<24>>24)==($8<<24>>24);
    if ($10) {
     $$035$lcssa65 = $$03555;$$036$lcssa64 = $$03654;
     label = 6;
     break L1;
    }
    $11 = ((($$03555)) + 1|0);
    $12 = (($$03654) + -1)|0;
    $13 = $11;
    $14 = $13 & 3;
    $15 = ($14|0)!=(0);
    $16 = ($12|0)!=(0);
    $or$cond = $16 & $15;
    if ($or$cond) {
     $$03555 = $11;$$03654 = $12;
    } else {
     $$035$lcssa = $11;$$036$lcssa = $12;$$lcssa = $16;
     label = 5;
     break;
    }
   }
  } else {
   $$035$lcssa = $0;$$036$lcssa = $2;$$lcssa = $7;
   label = 5;
  }
 } while(0);
 if ((label|0) == 5) {
  if ($$lcssa) {
   $$035$lcssa65 = $$035$lcssa;$$036$lcssa64 = $$036$lcssa;
   label = 6;
  } else {
   $$2 = $$035$lcssa;$$3 = 0;
  }
 }
 L8: do {
  if ((label|0) == 6) {
   $17 = HEAP8[$$035$lcssa65>>0]|0;
   $18 = $1&255;
   $19 = ($17<<24>>24)==($18<<24>>24);
   if ($19) {
    $$2 = $$035$lcssa65;$$3 = $$036$lcssa64;
   } else {
    $20 = Math_imul($3, 16843009)|0;
    $21 = ($$036$lcssa64>>>0)>(3);
    L11: do {
     if ($21) {
      $$046 = $$035$lcssa65;$$13745 = $$036$lcssa64;
      while(1) {
       $22 = HEAP32[$$046>>2]|0;
       $23 = $22 ^ $20;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        break;
       }
       $29 = ((($$046)) + 4|0);
       $30 = (($$13745) + -4)|0;
       $31 = ($30>>>0)>(3);
       if ($31) {
        $$046 = $29;$$13745 = $30;
       } else {
        $$0$lcssa = $29;$$137$lcssa = $30;
        label = 11;
        break L11;
       }
      }
      $$140 = $$046;$$23839 = $$13745;
     } else {
      $$0$lcssa = $$035$lcssa65;$$137$lcssa = $$036$lcssa64;
      label = 11;
     }
    } while(0);
    if ((label|0) == 11) {
     $32 = ($$137$lcssa|0)==(0);
     if ($32) {
      $$2 = $$0$lcssa;$$3 = 0;
      break;
     } else {
      $$140 = $$0$lcssa;$$23839 = $$137$lcssa;
     }
    }
    while(1) {
     $33 = HEAP8[$$140>>0]|0;
     $34 = ($33<<24>>24)==($18<<24>>24);
     if ($34) {
      $$2 = $$140;$$3 = $$23839;
      break L8;
     }
     $35 = ((($$140)) + 1|0);
     $36 = (($$23839) + -1)|0;
     $37 = ($36|0)==(0);
     if ($37) {
      $$2 = $35;$$3 = 0;
      break;
     } else {
      $$140 = $35;$$23839 = $36;
     }
    }
   }
  }
 } while(0);
 $38 = ($$3|0)!=(0);
 $39 = $38 ? $$2 : 0;
 return ($39|0);
}
function _pad($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa16 = 0, $$012 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $5 = sp;
 $6 = $4 & 73728;
 $7 = ($6|0)==(0);
 $8 = ($2|0)>($3|0);
 $or$cond = $8 & $7;
 do {
  if ($or$cond) {
   $9 = (($2) - ($3))|0;
   $10 = ($9>>>0)>(256);
   $11 = $10 ? 256 : $9;
   _memset(($5|0),($1|0),($11|0))|0;
   $12 = ($9>>>0)>(255);
   $13 = HEAP32[$0>>2]|0;
   $14 = $13 & 32;
   $15 = ($14|0)==(0);
   if ($12) {
    $16 = (($2) - ($3))|0;
    $$012 = $9;$23 = $13;$24 = $15;
    while(1) {
     if ($24) {
      (___fwritex($5,256,$0)|0);
      $$pre = HEAP32[$0>>2]|0;
      $20 = $$pre;
     } else {
      $20 = $23;
     }
     $17 = (($$012) + -256)|0;
     $18 = ($17>>>0)>(255);
     $19 = $20 & 32;
     $21 = ($19|0)==(0);
     if ($18) {
      $$012 = $17;$23 = $20;$24 = $21;
     } else {
      break;
     }
    }
    $22 = $16 & 255;
    if ($21) {
     $$0$lcssa16 = $22;
    } else {
     break;
    }
   } else {
    if ($15) {
     $$0$lcssa16 = $9;
    } else {
     break;
    }
   }
   (___fwritex($5,$$0$lcssa16,$0)|0);
  }
 } while(0);
 STACKTOP = sp;return;
}
function _wctomb($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = (_wcrtomb($0,$1,0)|0);
  $$0 = $3;
 }
 return ($$0|0);
}
function _frexpl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_frexp($0,$1));
 return (+$2);
}
function _frexp($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$0 = 0.0, $$016 = 0.0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0.0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0.0, $storemerge = 0, $trunc$clear = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 $4 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $5 = tempRet0;
 $6 = $4&65535;
 $trunc$clear = $6 & 2047;
 switch ($trunc$clear<<16>>16) {
 case 0:  {
  $7 = $0 != 0.0;
  if ($7) {
   $8 = $0 * 1.8446744073709552E+19;
   $9 = (+_frexp($8,$1));
   $10 = HEAP32[$1>>2]|0;
   $11 = (($10) + -64)|0;
   $$016 = $9;$storemerge = $11;
  } else {
   $$016 = $0;$storemerge = 0;
  }
  HEAP32[$1>>2] = $storemerge;
  $$0 = $$016;
  break;
 }
 case 2047:  {
  $$0 = $0;
  break;
 }
 default: {
  $12 = $4 & 2047;
  $13 = (($12) + -1022)|0;
  HEAP32[$1>>2] = $13;
  $14 = $3 & -2146435073;
  $15 = $14 | 1071644672;
  HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $15;$16 = +HEAPF64[tempDoublePtr>>3];
  $$0 = $16;
 }
 }
 return (+$$0);
}
function _wcrtomb($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($0|0)==(0|0);
 do {
  if ($3) {
   $$0 = 1;
  } else {
   $4 = ($1>>>0)<(128);
   if ($4) {
    $5 = $1&255;
    HEAP8[$0>>0] = $5;
    $$0 = 1;
    break;
   }
   $6 = ($1>>>0)<(2048);
   if ($6) {
    $7 = $1 >>> 6;
    $8 = $7 | 192;
    $9 = $8&255;
    $10 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $9;
    $11 = $1 & 63;
    $12 = $11 | 128;
    $13 = $12&255;
    HEAP8[$10>>0] = $13;
    $$0 = 2;
    break;
   }
   $14 = ($1>>>0)<(55296);
   $15 = $1 & -8192;
   $16 = ($15|0)==(57344);
   $or$cond = $14 | $16;
   if ($or$cond) {
    $17 = $1 >>> 12;
    $18 = $17 | 224;
    $19 = $18&255;
    $20 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $19;
    $21 = $1 >>> 6;
    $22 = $21 & 63;
    $23 = $22 | 128;
    $24 = $23&255;
    $25 = ((($0)) + 2|0);
    HEAP8[$20>>0] = $24;
    $26 = $1 & 63;
    $27 = $26 | 128;
    $28 = $27&255;
    HEAP8[$25>>0] = $28;
    $$0 = 3;
    break;
   }
   $29 = (($1) + -65536)|0;
   $30 = ($29>>>0)<(1048576);
   if ($30) {
    $31 = $1 >>> 18;
    $32 = $31 | 240;
    $33 = $32&255;
    $34 = ((($0)) + 1|0);
    HEAP8[$0>>0] = $33;
    $35 = $1 >>> 12;
    $36 = $35 & 63;
    $37 = $36 | 128;
    $38 = $37&255;
    $39 = ((($0)) + 2|0);
    HEAP8[$34>>0] = $38;
    $40 = $1 >>> 6;
    $41 = $40 & 63;
    $42 = $41 | 128;
    $43 = $42&255;
    $44 = ((($0)) + 3|0);
    HEAP8[$39>>0] = $43;
    $45 = $1 & 63;
    $46 = $45 | 128;
    $47 = $46&255;
    HEAP8[$44>>0] = $47;
    $$0 = 4;
    break;
   } else {
    $48 = (___errno_location()|0);
    HEAP32[$48>>2] = 84;
    $$0 = -1;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___towrite($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = HEAP32[$0>>2]|0;
 $8 = $7 & 8;
 $9 = ($8|0)==(0);
 if ($9) {
  $11 = ((($0)) + 8|0);
  HEAP32[$11>>2] = 0;
  $12 = ((($0)) + 4|0);
  HEAP32[$12>>2] = 0;
  $13 = ((($0)) + 44|0);
  $14 = HEAP32[$13>>2]|0;
  $15 = ((($0)) + 28|0);
  HEAP32[$15>>2] = $14;
  $16 = ((($0)) + 20|0);
  HEAP32[$16>>2] = $14;
  $17 = $14;
  $18 = ((($0)) + 48|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = (($17) + ($19)|0);
  $21 = ((($0)) + 16|0);
  HEAP32[$21>>2] = $20;
  $$0 = 0;
 } else {
  $10 = $7 | 32;
  HEAP32[$0>>2] = $10;
  $$0 = -1;
 }
 return ($$0|0);
}
function _sn_write($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$cast = 0, $10 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($0)) + 16|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 20|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ($7>>>0)>($2>>>0);
 $$ = $8 ? $2 : $7;
 $$cast = $6;
 _memcpy(($$cast|0),($1|0),($$|0))|0;
 $9 = HEAP32[$5>>2]|0;
 $10 = (($9) + ($$)|0);
 HEAP32[$5>>2] = $10;
 return ($2|0);
}
function _mbtowc($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $3 = sp;
 $4 = ($1|0)==(0|0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   do {
    if (!($5)) {
     $6 = ($0|0)==(0|0);
     $$ = $6 ? $3 : $0;
     $7 = HEAP8[$1>>0]|0;
     $8 = $7&255;
     $9 = ($7<<24>>24)>(-1);
     if ($9) {
      HEAP32[$$>>2] = $8;
      $10 = ($7<<24>>24)!=(0);
      $11 = $10&1;
      $$0 = $11;
      break L1;
     }
     $12 = (($8) + -194)|0;
     $13 = ($12>>>0)>(50);
     if (!($13)) {
      $14 = ((($1)) + 1|0);
      $15 = (376 + ($12<<2)|0);
      $16 = HEAP32[$15>>2]|0;
      $17 = ($2>>>0)<(4);
      if ($17) {
       $18 = ($2*6)|0;
       $19 = (($18) + -6)|0;
       $20 = -2147483648 >>> $19;
       $21 = $16 & $20;
       $22 = ($21|0)==(0);
       if (!($22)) {
        break;
       }
      }
      $23 = HEAP8[$14>>0]|0;
      $24 = $23&255;
      $25 = $24 >>> 3;
      $26 = (($25) + -16)|0;
      $27 = $16 >> 26;
      $28 = (($25) + ($27))|0;
      $29 = $26 | $28;
      $30 = ($29>>>0)>(7);
      if (!($30)) {
       $31 = $16 << 6;
       $32 = (($24) + -128)|0;
       $33 = $32 | $31;
       $34 = ($33|0)<(0);
       if (!($34)) {
        HEAP32[$$>>2] = $33;
        $$0 = 2;
        break L1;
       }
       $35 = ((($1)) + 2|0);
       $36 = HEAP8[$35>>0]|0;
       $37 = $36&255;
       $38 = (($37) + -128)|0;
       $39 = ($38>>>0)>(63);
       if (!($39)) {
        $40 = $33 << 6;
        $41 = $38 | $40;
        $42 = ($41|0)<(0);
        if (!($42)) {
         HEAP32[$$>>2] = $41;
         $$0 = 3;
         break L1;
        }
        $43 = ((($1)) + 3|0);
        $44 = HEAP8[$43>>0]|0;
        $45 = $44&255;
        $46 = (($45) + -128)|0;
        $47 = ($46>>>0)>(63);
        if (!($47)) {
         $48 = $41 << 6;
         $49 = $46 | $48;
         HEAP32[$$>>2] = $49;
         $$0 = 4;
         break L1;
        }
       }
      }
     }
    }
   } while(0);
   $50 = (___errno_location()|0);
   HEAP32[$50>>2] = 84;
   $$0 = -1;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _stat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall195(195,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _opendir($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $vararg_buffer = 0, $vararg_buffer1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer1 = sp + 8|0;
 $vararg_buffer = sp;
 $1 = (_open($0,589824,$vararg_buffer)|0);
 $2 = ($1|0)<(0);
 do {
  if ($2) {
   $$0 = 0;
  } else {
   $3 = (_calloc(1,2072)|0);
   $4 = ($3|0)==(0|0);
   if ($4) {
    HEAP32[$vararg_buffer1>>2] = $1;
    (___syscall6(6,($vararg_buffer1|0))|0);
    $$0 = 0;
    break;
   } else {
    HEAP32[$3>>2] = $1;
    $$0 = $3;
    break;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _readdir($0) {
 $0 = $0|0;
 var $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = ((($0)) + 8|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 12|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2|0)<($4|0);
 L1: do {
  if ($5) {
   $13 = $2;
   label = 6;
  } else {
   $6 = HEAP32[$0>>2]|0;
   $7 = ((($0)) + 24|0);
   HEAP32[$vararg_buffer>>2] = $6;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = $7;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = 2048;
   $8 = (___syscall220(220,($vararg_buffer|0))|0);
   $9 = ($8|0)<(1);
   if (!($9)) {
    HEAP32[$3>>2] = $8;
    HEAP32[$1>>2] = 0;
    $13 = 0;
    label = 6;
    break;
   }
   switch ($8|0) {
   case 0: case -2:  {
    $$1 = 0;
    break L1;
    break;
   }
   default: {
   }
   }
   $10 = (0 - ($8))|0;
   $11 = (___errno_location()|0);
   HEAP32[$11>>2] = $10;
   $$1 = 0;
  }
 } while(0);
 if ((label|0) == 6) {
  $12 = (((($0)) + 24|0) + ($13)|0);
  $14 = ((($12)) + 8|0);
  $15 = HEAP16[$14>>1]|0;
  $16 = $15&65535;
  $17 = (($16) + ($13))|0;
  HEAP32[$1>>2] = $17;
  $18 = ((($12)) + 4|0);
  $19 = HEAP32[$18>>2]|0;
  $20 = ((($0)) + 4|0);
  HEAP32[$20>>2] = $19;
  $$1 = $12;
 }
 STACKTOP = sp;return ($$1|0);
}
function _closedir($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = (_close($1)|0);
 _free($0);
 return ($2|0);
}
function _fcntl($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $$ = 0, $$0 = 0, $$2 = 0, $$off = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $arglist_current = 0, $arglist_next = 0, $expanded = 0, $expanded2 = 0, $expanded4 = 0, $expanded5 = 0, $expanded6 = 0, $switch = 0, $vararg_buffer = 0, $vararg_buffer13 = 0, $vararg_buffer18 = 0, $vararg_buffer23 = 0, $vararg_buffer28 = 0, $vararg_buffer3 = 0, $vararg_buffer31 = 0, $vararg_buffer36 = 0;
 var $vararg_buffer41 = 0, $vararg_buffer46 = 0, $vararg_buffer8 = 0, $vararg_ptr1 = 0, $vararg_ptr11 = 0, $vararg_ptr12 = 0, $vararg_ptr16 = 0, $vararg_ptr17 = 0, $vararg_ptr2 = 0, $vararg_ptr21 = 0, $vararg_ptr22 = 0, $vararg_ptr26 = 0, $vararg_ptr27 = 0, $vararg_ptr34 = 0, $vararg_ptr35 = 0, $vararg_ptr39 = 0, $vararg_ptr40 = 0, $vararg_ptr44 = 0, $vararg_ptr45 = 0, $vararg_ptr49 = 0;
 var $vararg_ptr50 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 192|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(192|0);
 $vararg_buffer46 = sp + 152|0;
 $vararg_buffer41 = sp + 136|0;
 $vararg_buffer36 = sp + 120|0;
 $vararg_buffer31 = sp + 104|0;
 $vararg_buffer28 = sp + 96|0;
 $vararg_buffer23 = sp + 80|0;
 $vararg_buffer18 = sp + 64|0;
 $vararg_buffer13 = sp + 48|0;
 $vararg_buffer8 = sp + 32|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 176|0;
 $3 = sp + 168|0;
 HEAP32[$2>>2] = $varargs;
 $arglist_current = HEAP32[$2>>2]|0;
 $4 = $arglist_current;
 $5 = ((0) + 4|0);
 $expanded2 = $5;
 $expanded = (($expanded2) - 1)|0;
 $6 = (($4) + ($expanded))|0;
 $7 = ((0) + 4|0);
 $expanded6 = $7;
 $expanded5 = (($expanded6) - 1)|0;
 $expanded4 = $expanded5 ^ -1;
 $8 = $6 & $expanded4;
 $9 = $8;
 $10 = HEAP32[$9>>2]|0;
 $arglist_next = ((($9)) + 4|0);
 HEAP32[$2>>2] = $arglist_next;
 $11 = ($1|0)==(4);
 $12 = $10 | 32768;
 $$ = $11 ? $12 : $10;
 L1: do {
  switch ($1|0) {
  case 14:  {
   $13 = $$;
   HEAP32[$vararg_buffer>>2] = $0;
   $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
   HEAP32[$vararg_ptr1>>2] = 14;
   $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
   HEAP32[$vararg_ptr2>>2] = $13;
   $14 = (___syscall221(221,($vararg_buffer|0))|0);
   $15 = (___syscall_ret($14)|0);
   $$2 = $15;
   break;
  }
  case 9:  {
   HEAP32[$vararg_buffer3>>2] = $0;
   $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
   HEAP32[$vararg_ptr6>>2] = 16;
   $vararg_ptr7 = ((($vararg_buffer3)) + 8|0);
   HEAP32[$vararg_ptr7>>2] = $3;
   $16 = (___syscall221(221,($vararg_buffer3|0))|0);
   switch ($16|0) {
   case -22:  {
    $17 = $$;
    HEAP32[$vararg_buffer8>>2] = $0;
    $vararg_ptr11 = ((($vararg_buffer8)) + 4|0);
    HEAP32[$vararg_ptr11>>2] = 9;
    $vararg_ptr12 = ((($vararg_buffer8)) + 8|0);
    HEAP32[$vararg_ptr12>>2] = $17;
    $18 = (___syscall221(221,($vararg_buffer8|0))|0);
    $$0 = $18;
    break;
   }
   case 0:  {
    $20 = HEAP32[$3>>2]|0;
    $21 = ($20|0)==(2);
    $22 = ((($3)) + 4|0);
    $23 = HEAP32[$22>>2]|0;
    $24 = (0 - ($23))|0;
    $25 = $21 ? $24 : $23;
    $$0 = $25;
    break;
   }
   default: {
    $19 = (___syscall_ret($16)|0);
    $$0 = $19;
   }
   }
   $$2 = $$0;
   break;
  }
  case 1030:  {
   HEAP32[$vararg_buffer13>>2] = $0;
   $vararg_ptr16 = ((($vararg_buffer13)) + 4|0);
   HEAP32[$vararg_ptr16>>2] = 1030;
   $vararg_ptr17 = ((($vararg_buffer13)) + 8|0);
   HEAP32[$vararg_ptr17>>2] = $$;
   $26 = (___syscall221(221,($vararg_buffer13|0))|0);
   $27 = ($26|0)==(-22);
   if (!($27)) {
    $28 = ($26|0)>(-1);
    if ($28) {
     HEAP32[$vararg_buffer18>>2] = $26;
     $vararg_ptr21 = ((($vararg_buffer18)) + 4|0);
     HEAP32[$vararg_ptr21>>2] = 2;
     $vararg_ptr22 = ((($vararg_buffer18)) + 8|0);
     HEAP32[$vararg_ptr22>>2] = 1;
     (___syscall221(221,($vararg_buffer18|0))|0);
    }
    $29 = (___syscall_ret($26)|0);
    $$2 = $29;
    break L1;
   }
   HEAP32[$vararg_buffer23>>2] = $0;
   $vararg_ptr26 = ((($vararg_buffer23)) + 4|0);
   HEAP32[$vararg_ptr26>>2] = 1030;
   $vararg_ptr27 = ((($vararg_buffer23)) + 8|0);
   HEAP32[$vararg_ptr27>>2] = 0;
   $30 = (___syscall221(221,($vararg_buffer23|0))|0);
   $31 = ($30|0)==(-22);
   if ($31) {
    HEAP32[$vararg_buffer31>>2] = $0;
    $vararg_ptr34 = ((($vararg_buffer31)) + 4|0);
    HEAP32[$vararg_ptr34>>2] = 0;
    $vararg_ptr35 = ((($vararg_buffer31)) + 8|0);
    HEAP32[$vararg_ptr35>>2] = $$;
    $34 = (___syscall221(221,($vararg_buffer31|0))|0);
    $35 = ($34|0)>(-1);
    if ($35) {
     HEAP32[$vararg_buffer36>>2] = $34;
     $vararg_ptr39 = ((($vararg_buffer36)) + 4|0);
     HEAP32[$vararg_ptr39>>2] = 2;
     $vararg_ptr40 = ((($vararg_buffer36)) + 8|0);
     HEAP32[$vararg_ptr40>>2] = 1;
     (___syscall221(221,($vararg_buffer36|0))|0);
    }
    $36 = (___syscall_ret($34)|0);
    $$2 = $36;
    break L1;
   } else {
    $32 = ($30|0)>(-1);
    if ($32) {
     HEAP32[$vararg_buffer28>>2] = $30;
     (___syscall6(6,($vararg_buffer28|0))|0);
    }
    $33 = (___syscall_ret(-22)|0);
    $$2 = $33;
    break L1;
   }
   break;
  }
  default: {
   $$off = (($1) + -12)|0;
   $switch = ($$off>>>0)<(5);
   if ($switch) {
    $37 = $$;
    HEAP32[$vararg_buffer41>>2] = $0;
    $vararg_ptr44 = ((($vararg_buffer41)) + 4|0);
    HEAP32[$vararg_ptr44>>2] = $1;
    $vararg_ptr45 = ((($vararg_buffer41)) + 8|0);
    HEAP32[$vararg_ptr45>>2] = $37;
    $38 = (___syscall221(221,($vararg_buffer41|0))|0);
    $39 = (___syscall_ret($38)|0);
    $$2 = $39;
    break L1;
   } else {
    HEAP32[$vararg_buffer46>>2] = $0;
    $vararg_ptr49 = ((($vararg_buffer46)) + 4|0);
    HEAP32[$vararg_ptr49>>2] = $1;
    $vararg_ptr50 = ((($vararg_buffer46)) + 8|0);
    HEAP32[$vararg_ptr50>>2] = $$;
    $40 = (___syscall221(221,($vararg_buffer46|0))|0);
    $41 = (___syscall_ret($40)|0);
    $$2 = $41;
    break L1;
   }
  }
  }
 } while(0);
 STACKTOP = sp;return ($$2|0);
}
function _fclose($0) {
 $0 = $0|0;
 var $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
 }
 $4 = HEAP32[$0>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)!=(0);
 if (!($6)) {
  ___lock(((127260)|0));
  $7 = ((($0)) + 52|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = ($8|0)==(0|0);
  $10 = $8;
  $$pre = ((($0)) + 56|0);
  if (!($9)) {
   $11 = HEAP32[$$pre>>2]|0;
   $12 = ((($8)) + 56|0);
   HEAP32[$12>>2] = $11;
  }
  $13 = HEAP32[$$pre>>2]|0;
  $14 = ($13|0)==(0|0);
  $15 = $13;
  if (!($14)) {
   $16 = ((($13)) + 52|0);
   HEAP32[$16>>2] = $10;
  }
  $17 = HEAP32[(127256)>>2]|0;
  $18 = ($17|0)==($0|0);
  if ($18) {
   HEAP32[(127256)>>2] = $15;
  }
  ___unlock(((127260)|0));
 }
 $19 = (_fflush($0)|0);
 $20 = ((($0)) + 12|0);
 $21 = HEAP32[$20>>2]|0;
 $22 = (FUNCTION_TABLE_ii[$21 & 1]($0)|0);
 $23 = $22 | $19;
 $24 = ((($0)) + 92|0);
 $25 = HEAP32[$24>>2]|0;
 $26 = ($25|0)==(0|0);
 if (!($26)) {
  _free($25);
 }
 if (!($6)) {
  _free($0);
 }
 return ($23|0);
}
function _fflush($0) {
 $0 = $0|0;
 var $$0 = 0, $$023 = 0, $$02325 = 0, $$02327 = 0, $$024$lcssa = 0, $$02426 = 0, $$1 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 do {
  if ($1) {
   $8 = HEAP32[93]|0;
   $9 = ($8|0)==(0|0);
   if ($9) {
    $28 = 0;
   } else {
    $10 = HEAP32[93]|0;
    $11 = (_fflush($10)|0);
    $28 = $11;
   }
   ___lock(((127260)|0));
   $$02325 = HEAP32[(127256)>>2]|0;
   $12 = ($$02325|0)==(0|0);
   if ($12) {
    $$024$lcssa = $28;
   } else {
    $$02327 = $$02325;$$02426 = $28;
    while(1) {
     $13 = ((($$02327)) + 76|0);
     $14 = HEAP32[$13>>2]|0;
     $15 = ($14|0)>(-1);
     if ($15) {
      $16 = (___lockfile($$02327)|0);
      $24 = $16;
     } else {
      $24 = 0;
     }
     $17 = ((($$02327)) + 20|0);
     $18 = HEAP32[$17>>2]|0;
     $19 = ((($$02327)) + 28|0);
     $20 = HEAP32[$19>>2]|0;
     $21 = ($18>>>0)>($20>>>0);
     if ($21) {
      $22 = (___fflush_unlocked($$02327)|0);
      $23 = $22 | $$02426;
      $$1 = $23;
     } else {
      $$1 = $$02426;
     }
     $25 = ($24|0)==(0);
     if (!($25)) {
      ___unlockfile($$02327);
     }
     $26 = ((($$02327)) + 56|0);
     $$023 = HEAP32[$26>>2]|0;
     $27 = ($$023|0)==(0|0);
     if ($27) {
      $$024$lcssa = $$1;
      break;
     } else {
      $$02327 = $$023;$$02426 = $$1;
     }
    }
   }
   ___unlock(((127260)|0));
   $$0 = $$024$lcssa;
  } else {
   $2 = ((($0)) + 76|0);
   $3 = HEAP32[$2>>2]|0;
   $4 = ($3|0)>(-1);
   if (!($4)) {
    $5 = (___fflush_unlocked($0)|0);
    $$0 = $5;
    break;
   }
   $6 = (___lockfile($0)|0);
   $phitmp = ($6|0)==(0);
   $7 = (___fflush_unlocked($0)|0);
   if ($phitmp) {
    $$0 = $7;
   } else {
    ___unlockfile($0);
    $$0 = $7;
   }
  }
 } while(0);
 return ($$0|0);
}
function ___fflush_unlocked($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 20|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ((($0)) + 28|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($2>>>0)>($4>>>0);
 if ($5) {
  $6 = ((($0)) + 36|0);
  $7 = HEAP32[$6>>2]|0;
  (FUNCTION_TABLE_iiii[$7 & 7]($0,0,0)|0);
  $8 = HEAP32[$1>>2]|0;
  $9 = ($8|0)==(0|0);
  if ($9) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $10 = ((($0)) + 4|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ((($0)) + 8|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($11>>>0)<($13>>>0);
  if ($14) {
   $15 = ((($0)) + 40|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = $11;
   $18 = $13;
   $19 = (($17) - ($18))|0;
   (FUNCTION_TABLE_iiii[$16 & 7]($0,$19,1)|0);
  }
  $20 = ((($0)) + 16|0);
  HEAP32[$20>>2] = 0;
  HEAP32[$3>>2] = 0;
  HEAP32[$1>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $$0 = 0;
 }
 return ($$0|0);
}
function ___uflow($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ((($0)) + 8|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)==(0|0);
 if ($4) {
  $5 = (___toread($0)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $$0 = -1;
  }
 } else {
  label = 3;
 }
 if ((label|0) == 3) {
  $7 = ((($0)) + 32|0);
  $8 = HEAP32[$7>>2]|0;
  $9 = (FUNCTION_TABLE_iiii[$8 & 7]($0,$1,1)|0);
  $10 = ($9|0)==(1);
  if ($10) {
   $11 = HEAP8[$1>>0]|0;
   $12 = $11&255;
   $$0 = $12;
  } else {
   $$0 = -1;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___toread($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 74|0);
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $4 = (($3) + 255)|0;
 $5 = $4 | $3;
 $6 = $5&255;
 HEAP8[$1>>0] = $6;
 $7 = ((($0)) + 20|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($0)) + 44|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = ($8>>>0)>($10>>>0);
 if ($11) {
  $12 = ((($0)) + 36|0);
  $13 = HEAP32[$12>>2]|0;
  (FUNCTION_TABLE_iiii[$13 & 7]($0,0,0)|0);
 }
 $14 = ((($0)) + 16|0);
 HEAP32[$14>>2] = 0;
 $15 = ((($0)) + 28|0);
 HEAP32[$15>>2] = 0;
 HEAP32[$7>>2] = 0;
 $16 = HEAP32[$0>>2]|0;
 $17 = $16 & 20;
 $18 = ($17|0)==(0);
 if ($18) {
  $22 = HEAP32[$9>>2]|0;
  $23 = ((($0)) + 8|0);
  HEAP32[$23>>2] = $22;
  $24 = ((($0)) + 4|0);
  HEAP32[$24>>2] = $22;
  $$0 = 0;
 } else {
  $19 = $16 & 4;
  $20 = ($19|0)==(0);
  if ($20) {
   $$0 = -1;
  } else {
   $21 = $16 | 32;
   HEAP32[$0>>2] = $21;
   $$0 = -1;
  }
 }
 return ($$0|0);
}
function ___fdopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$cast = 0, $$pre = 0, $$pre34 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer12 = 0, $vararg_buffer3 = 0, $vararg_buffer7 = 0, $vararg_ptr1 = 0, $vararg_ptr10 = 0, $vararg_ptr11 = 0, $vararg_ptr15 = 0, $vararg_ptr16 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $vararg_buffer12 = sp + 40|0;
 $vararg_buffer7 = sp + 24|0;
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = sp + 52|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = $3 << 24 >> 24;
 $memchr = (_memchr(21708,$4,4)|0);
 $5 = ($memchr|0)==(0|0);
 if ($5) {
  $6 = (___errno_location()|0);
  HEAP32[$6>>2] = 22;
  $$0 = 0;
 } else {
  $7 = (_malloc(1144)|0);
  $8 = ($7|0)==(0|0);
  if ($8) {
   $$0 = 0;
  } else {
   dest=$7; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   $9 = (_strchr($1,43)|0);
   $10 = ($9|0)==(0|0);
   if ($10) {
    $11 = ($3<<24>>24)==(114);
    $12 = $11 ? 8 : 4;
    HEAP32[$7>>2] = $12;
   }
   $13 = (_strchr($1,101)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $15 = $3;
   } else {
    HEAP32[$vararg_buffer>>2] = $0;
    $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
    HEAP32[$vararg_ptr1>>2] = 2;
    $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
    HEAP32[$vararg_ptr2>>2] = 1;
    (___syscall221(221,($vararg_buffer|0))|0);
    $$pre = HEAP8[$1>>0]|0;
    $15 = $$pre;
   }
   $16 = ($15<<24>>24)==(97);
   if ($16) {
    HEAP32[$vararg_buffer3>>2] = $0;
    $vararg_ptr6 = ((($vararg_buffer3)) + 4|0);
    HEAP32[$vararg_ptr6>>2] = 3;
    $17 = (___syscall221(221,($vararg_buffer3|0))|0);
    $18 = $17 & 1024;
    $19 = ($18|0)==(0);
    if ($19) {
     $20 = $17 | 1024;
     HEAP32[$vararg_buffer7>>2] = $0;
     $vararg_ptr10 = ((($vararg_buffer7)) + 4|0);
     HEAP32[$vararg_ptr10>>2] = 4;
     $vararg_ptr11 = ((($vararg_buffer7)) + 8|0);
     HEAP32[$vararg_ptr11>>2] = $20;
     (___syscall221(221,($vararg_buffer7|0))|0);
    }
    $21 = HEAP32[$7>>2]|0;
    $22 = $21 | 128;
    HEAP32[$7>>2] = $22;
    $29 = $22;
   } else {
    $$pre34 = HEAP32[$7>>2]|0;
    $29 = $$pre34;
   }
   $23 = ((($7)) + 60|0);
   HEAP32[$23>>2] = $0;
   $24 = ((($7)) + 120|0);
   $25 = ((($7)) + 44|0);
   HEAP32[$25>>2] = $24;
   $26 = ((($7)) + 48|0);
   HEAP32[$26>>2] = 1024;
   $27 = ((($7)) + 75|0);
   HEAP8[$27>>0] = -1;
   $28 = $29 & 8;
   $30 = ($28|0)==(0);
   if ($30) {
    HEAP32[$vararg_buffer12>>2] = $0;
    $vararg_ptr15 = ((($vararg_buffer12)) + 4|0);
    HEAP32[$vararg_ptr15>>2] = 21505;
    $vararg_ptr16 = ((($vararg_buffer12)) + 8|0);
    HEAP32[$vararg_ptr16>>2] = $2;
    $31 = (___syscall54(54,($vararg_buffer12|0))|0);
    $32 = ($31|0)==(0);
    if ($32) {
     HEAP8[$27>>0] = 10;
    }
   }
   $33 = ((($7)) + 32|0);
   HEAP32[$33>>2] = 2;
   $34 = ((($7)) + 36|0);
   HEAP32[$34>>2] = 4;
   $35 = ((($7)) + 40|0);
   HEAP32[$35>>2] = 3;
   $36 = ((($7)) + 12|0);
   HEAP32[$36>>2] = 1;
   $37 = HEAP32[(127236)>>2]|0;
   $38 = ($37|0)==(0);
   if ($38) {
    $39 = ((($7)) + 76|0);
    HEAP32[$39>>2] = -1;
   }
   ___lock(((127260)|0));
   $40 = HEAP32[(127256)>>2]|0;
   $41 = ((($7)) + 56|0);
   HEAP32[$41>>2] = $40;
   $42 = ($40|0)==(0);
   if (!($42)) {
    $$cast = $40;
    $43 = ((($$cast)) + 52|0);
    HEAP32[$43>>2] = $7;
   }
   HEAP32[(127256)>>2] = $7;
   ___unlock(((127260)|0));
   $$0 = $7;
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function _strchr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (___strchrnul($0,$1)|0);
 $3 = HEAP8[$2>>0]|0;
 $4 = $1&255;
 $5 = ($3<<24>>24)==($4<<24>>24);
 $6 = $5 ? $2 : 0;
 return ($6|0);
}
function ___strchrnul($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$029$lcssa = 0, $$02936 = 0, $$030$lcssa = 0, $$03039 = 0, $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond33 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 & 255;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $8 = (_strlen($0)|0);
   $9 = (($0) + ($8)|0);
   $$0 = $9;
  } else {
   $4 = $0;
   $5 = $4 & 3;
   $6 = ($5|0)==(0);
   if ($6) {
    $$030$lcssa = $0;
   } else {
    $7 = $1&255;
    $$03039 = $0;
    while(1) {
     $10 = HEAP8[$$03039>>0]|0;
     $11 = ($10<<24>>24)==(0);
     $12 = ($10<<24>>24)==($7<<24>>24);
     $or$cond = $11 | $12;
     if ($or$cond) {
      $$0 = $$03039;
      break L1;
     }
     $13 = ((($$03039)) + 1|0);
     $14 = $13;
     $15 = $14 & 3;
     $16 = ($15|0)==(0);
     if ($16) {
      $$030$lcssa = $13;
      break;
     } else {
      $$03039 = $13;
     }
    }
   }
   $17 = Math_imul($2, 16843009)|0;
   $18 = HEAP32[$$030$lcssa>>2]|0;
   $19 = (($18) + -16843009)|0;
   $20 = $18 & -2139062144;
   $21 = $20 ^ -2139062144;
   $22 = $21 & $19;
   $23 = ($22|0)==(0);
   L10: do {
    if ($23) {
     $$02936 = $$030$lcssa;$25 = $18;
     while(1) {
      $24 = $25 ^ $17;
      $26 = (($24) + -16843009)|0;
      $27 = $24 & -2139062144;
      $28 = $27 ^ -2139062144;
      $29 = $28 & $26;
      $30 = ($29|0)==(0);
      if (!($30)) {
       $$029$lcssa = $$02936;
       break L10;
      }
      $31 = ((($$02936)) + 4|0);
      $32 = HEAP32[$31>>2]|0;
      $33 = (($32) + -16843009)|0;
      $34 = $32 & -2139062144;
      $35 = $34 ^ -2139062144;
      $36 = $35 & $33;
      $37 = ($36|0)==(0);
      if ($37) {
       $$02936 = $31;$25 = $32;
      } else {
       $$029$lcssa = $31;
       break;
      }
     }
    } else {
     $$029$lcssa = $$030$lcssa;
    }
   } while(0);
   $38 = $1&255;
   $$1 = $$029$lcssa;
   while(1) {
    $39 = HEAP8[$$1>>0]|0;
    $40 = ($39<<24>>24)==(0);
    $41 = ($39<<24>>24)==($38<<24>>24);
    $or$cond33 = $40 | $41;
    $42 = ((($$1)) + 1|0);
    if ($or$cond33) {
     $$0 = $$1;
     break;
    } else {
     $$1 = $42;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _fopen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $memchr = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer3 = sp + 16|0;
 $vararg_buffer = sp;
 $2 = HEAP8[$1>>0]|0;
 $3 = $2 << 24 >> 24;
 $memchr = (_memchr(21708,$3,4)|0);
 $4 = ($memchr|0)==(0|0);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 22;
  $$0 = 0;
 } else {
  $6 = (___fmodeflags($1)|0);
  $7 = $6 | 32768;
  HEAP32[$vararg_buffer>>2] = $0;
  $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
  HEAP32[$vararg_ptr1>>2] = $7;
  $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
  HEAP32[$vararg_ptr2>>2] = 438;
  $8 = (___syscall5(5,($vararg_buffer|0))|0);
  $9 = (___syscall_ret($8)|0);
  $10 = ($9|0)<(0);
  if ($10) {
   $$0 = 0;
  } else {
   $11 = (___fdopen($9,$1)|0);
   $12 = ($11|0)==(0|0);
   if ($12) {
    HEAP32[$vararg_buffer3>>2] = $9;
    (___syscall6(6,($vararg_buffer3|0))|0);
    $$0 = 0;
   } else {
    $$0 = $11;
   }
  }
 }
 STACKTOP = sp;return ($$0|0);
}
function ___fmodeflags($0) {
 $0 = $0|0;
 var $$ = 0, $$$4 = 0, $$0 = 0, $$0$ = 0, $$2 = 0, $$2$ = 0, $$4 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_strchr($0,43)|0);
 $2 = ($1|0)==(0|0);
 $3 = HEAP8[$0>>0]|0;
 $not$ = ($3<<24>>24)!=(114);
 $$ = $not$&1;
 $$0 = $2 ? $$ : 2;
 $4 = (_strchr($0,120)|0);
 $5 = ($4|0)==(0|0);
 $6 = $$0 | 128;
 $$0$ = $5 ? $$0 : $6;
 $7 = (_strchr($0,101)|0);
 $8 = ($7|0)==(0|0);
 $9 = $$0$ | 524288;
 $$2 = $8 ? $$0$ : $9;
 $10 = ($3<<24>>24)==(114);
 $11 = $$2 | 64;
 $$2$ = $10 ? $$2 : $11;
 $12 = ($3<<24>>24)==(119);
 $13 = $$2$ | 512;
 $$4 = $12 ? $13 : $$2$;
 $14 = ($3<<24>>24)==(97);
 $15 = $$4 | 1024;
 $$$4 = $14 ? $15 : $$4;
 return ($$$4|0);
}
function _fgets($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$06266 = 0, $$063 = 0, $$064 = 0, $$1 = 0, $$old2 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0;
 var $or$cond3 = 0, $sext$mask = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ((($2)) + 76|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ($4|0)>(-1);
 if ($5) {
  $6 = (___lockfile($2)|0);
  $15 = $6;
 } else {
  $15 = 0;
 }
 $7 = (($1) + -1)|0;
 $8 = ($1|0)<(2);
 if ($8) {
  $9 = ((($2)) + 74|0);
  $10 = HEAP8[$9>>0]|0;
  $11 = $10 << 24 >> 24;
  $12 = (($11) + 255)|0;
  $13 = $12 | $11;
  $14 = $13&255;
  HEAP8[$9>>0] = $14;
  $16 = ($15|0)==(0);
  if (!($16)) {
   ___unlockfile($2);
  }
  $17 = ($7|0)==(0);
  if ($17) {
   HEAP8[$0>>0] = 0;
   $$0 = $0;
  } else {
   $$0 = 0;
  }
 } else {
  $$old2 = ($7|0)==(0);
  L11: do {
   if ($$old2) {
    $$1 = $0;
    label = 17;
   } else {
    $18 = ((($2)) + 4|0);
    $19 = ((($2)) + 8|0);
    $$063 = $7;$$064 = $0;
    while(1) {
     $20 = HEAP32[$18>>2]|0;
     $21 = HEAP32[$19>>2]|0;
     $22 = $20;
     $23 = (($21) - ($22))|0;
     $24 = (_memchr($20,10,$23)|0);
     $25 = ($24|0)==(0|0);
     $26 = $24;
     $27 = (1 - ($22))|0;
     $28 = (($27) + ($26))|0;
     $29 = $25 ? $23 : $28;
     $30 = ($29>>>0)<($$063>>>0);
     $31 = $30 ? $29 : $$063;
     _memcpy(($$064|0),($20|0),($31|0))|0;
     $32 = HEAP32[$18>>2]|0;
     $33 = (($32) + ($31)|0);
     HEAP32[$18>>2] = $33;
     $34 = (($$064) + ($31)|0);
     $35 = (($$063) - ($31))|0;
     $36 = ($35|0)!=(0);
     $or$cond = $25 & $36;
     if (!($or$cond)) {
      $$1 = $34;
      label = 17;
      break L11;
     }
     $37 = HEAP32[$19>>2]|0;
     $38 = ($33>>>0)<($37>>>0);
     if ($38) {
      $39 = ((($33)) + 1|0);
      HEAP32[$18>>2] = $39;
      $40 = HEAP8[$33>>0]|0;
      $41 = $40&255;
      $50 = $41;
     } else {
      $42 = (___uflow($2)|0);
      $43 = ($42|0)<(0);
      if ($43) {
       break;
      } else {
       $50 = $42;
      }
     }
     $48 = (($35) + -1)|0;
     $49 = $50&255;
     $51 = ((($34)) + 1|0);
     HEAP8[$34>>0] = $49;
     $sext$mask = $50 & 255;
     $52 = ($sext$mask|0)!=(10);
     $53 = ($48|0)!=(0);
     $or$cond3 = $53 & $52;
     if ($or$cond3) {
      $$063 = $48;$$064 = $51;
     } else {
      $$1 = $51;
      label = 17;
      break L11;
     }
    }
    $44 = ($34|0)==($0|0);
    if ($44) {
     $$06266 = 0;
    } else {
     $45 = HEAP32[$2>>2]|0;
     $46 = $45 & 16;
     $47 = ($46|0)==(0);
     if ($47) {
      $$06266 = 0;
     } else {
      $$1 = $34;
      label = 17;
     }
    }
   }
  } while(0);
  if ((label|0) == 17) {
   $54 = ($0|0)==(0|0);
   if ($54) {
    $$06266 = 0;
   } else {
    HEAP8[$$1>>0] = 0;
    $$06266 = $0;
   }
  }
  $55 = ($15|0)==(0);
  if ($55) {
   $$0 = $$06266;
  } else {
   ___unlockfile($2);
   $$0 = $$06266;
  }
 }
 return ($$0|0);
}
function _isspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = (($0) + -9)|0;
 $3 = ($2>>>0)<(5);
 $4 = $1 | $3;
 $5 = $4&1;
 return ($5|0);
}
function ___shlim($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 104|0);
 HEAP32[$2>>2] = $1;
 $3 = ((($0)) + 8|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = ((($0)) + 4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = (($4) - ($6))|0;
 $8 = ((($0)) + 108|0);
 HEAP32[$8>>2] = $7;
 $9 = ($1|0)!=(0);
 $10 = ($7|0)>($1|0);
 $or$cond = $9 & $10;
 if ($or$cond) {
  $11 = $6;
  $12 = (($11) + ($1)|0);
  $13 = ((($0)) + 100|0);
  HEAP32[$13>>2] = $12;
 } else {
  $14 = ((($0)) + 100|0);
  HEAP32[$14>>2] = $4;
 }
 return;
}
function ___shgetc($0) {
 $0 = $0|0;
 var $$0 = 0, $$phi$trans$insert = 0, $$phi$trans$insert28 = 0, $$pre = 0, $$pre29 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 104|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0);
 if ($3) {
  label = 3;
 } else {
  $4 = ((($0)) + 108|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)<($2|0);
  if ($6) {
   label = 3;
  } else {
   label = 4;
  }
 }
 if ((label|0) == 3) {
  $7 = (___uflow($0)|0);
  $8 = ($7|0)<(0);
  if ($8) {
   label = 4;
  } else {
   $10 = HEAP32[$1>>2]|0;
   $11 = ($10|0)==(0);
   $$phi$trans$insert = ((($0)) + 8|0);
   $$pre = HEAP32[$$phi$trans$insert>>2]|0;
   if ($11) {
    $12 = $$pre;
    $42 = $12;
    label = 9;
   } else {
    $13 = ((($0)) + 4|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = $14;
    $16 = (($$pre) - ($15))|0;
    $17 = ((($0)) + 108|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = (($10) - ($18))|0;
    $20 = ($16|0)<($19|0);
    $21 = $$pre;
    if ($20) {
     $42 = $21;
     label = 9;
    } else {
     $22 = (($19) + -1)|0;
     $23 = (($14) + ($22)|0);
     $24 = ((($0)) + 100|0);
     HEAP32[$24>>2] = $23;
     $26 = $21;
    }
   }
   if ((label|0) == 9) {
    $25 = ((($0)) + 100|0);
    HEAP32[$25>>2] = $$pre;
    $26 = $42;
   }
   $27 = ($26|0)==(0|0);
   $$phi$trans$insert28 = ((($0)) + 4|0);
   if ($27) {
    $$pre29 = HEAP32[$$phi$trans$insert28>>2]|0;
    $37 = $$pre29;
   } else {
    $28 = HEAP32[$$phi$trans$insert28>>2]|0;
    $29 = $26;
    $30 = ((($0)) + 108|0);
    $31 = HEAP32[$30>>2]|0;
    $32 = (($29) + 1)|0;
    $33 = (($32) - ($28))|0;
    $34 = (($33) + ($31))|0;
    HEAP32[$30>>2] = $34;
    $35 = $28;
    $37 = $35;
   }
   $36 = ((($37)) + -1|0);
   $38 = HEAP8[$36>>0]|0;
   $39 = $38&255;
   $40 = ($39|0)==($7|0);
   if ($40) {
    $$0 = $7;
   } else {
    $41 = $7&255;
    HEAP8[$36>>0] = $41;
    $$0 = $7;
   }
  }
 }
 if ((label|0) == 4) {
  $9 = ((($0)) + 100|0);
  HEAP32[$9>>2] = 0;
  $$0 = -1;
 }
 return ($$0|0);
}
function ___intscan($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0154222 = 0, $$0157 = 0, $$0157$ = 0, $$0159 = 0, $$1155188 = 0, $$1158 = 0, $$1160 = 0, $$1160169 = 0, $$1165 = 0, $$1165167 = 0, $$1165168 = 0, $$166 = 0, $$2156206 = 0, $$2161$be = 0, $$2161$lcssa = 0, $$3162$be = 0, $$3162$lcssa = 0, $$3162211 = 0, $$4163$be = 0, $$4163$lcssa = 0;
 var $$5$be = 0, $$6$be = 0, $$6$lcssa = 0, $$7$be = 0, $$7194 = 0, $$8 = 0, $$9$be = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0;
 var $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0;
 var $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0;
 var $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0;
 var $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0;
 var $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0;
 var $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0;
 var $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0;
 var $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0;
 var $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0;
 var $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0;
 var $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $or$cond = 0, $or$cond12 = 0, $or$cond183 = 0, $or$cond5 = 0, $or$cond7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($1>>>0)>(36);
 L1: do {
  if ($5) {
   $8 = (___errno_location()|0);
   HEAP32[$8>>2] = 22;
   $289 = 0;$290 = 0;
  } else {
   $6 = ((($0)) + 4|0);
   $7 = ((($0)) + 100|0);
   while(1) {
    $9 = HEAP32[$6>>2]|0;
    $10 = HEAP32[$7>>2]|0;
    $11 = ($9>>>0)<($10>>>0);
    if ($11) {
     $12 = ((($9)) + 1|0);
     HEAP32[$6>>2] = $12;
     $13 = HEAP8[$9>>0]|0;
     $14 = $13&255;
     $16 = $14;
    } else {
     $15 = (___shgetc($0)|0);
     $16 = $15;
    }
    $17 = (_isspace($16)|0);
    $18 = ($17|0)==(0);
    if ($18) {
     break;
    }
   }
   $19 = ($16|0)==(45);
   L11: do {
    switch ($16|0) {
    case 43: case 45:  {
     $20 = $19 << 31 >> 31;
     $21 = HEAP32[$6>>2]|0;
     $22 = HEAP32[$7>>2]|0;
     $23 = ($21>>>0)<($22>>>0);
     if ($23) {
      $24 = ((($21)) + 1|0);
      HEAP32[$6>>2] = $24;
      $25 = HEAP8[$21>>0]|0;
      $26 = $25&255;
      $$0157 = $20;$$0159 = $26;
      break L11;
     } else {
      $27 = (___shgetc($0)|0);
      $$0157 = $20;$$0159 = $27;
      break L11;
     }
     break;
    }
    default: {
     $$0157 = 0;$$0159 = $16;
    }
    }
   } while(0);
   $28 = ($1|0)==(0);
   $29 = $1 | 16;
   $30 = ($29|0)==(16);
   $31 = ($$0159|0)==(48);
   $or$cond5 = $30 & $31;
   do {
    if ($or$cond5) {
     $32 = HEAP32[$6>>2]|0;
     $33 = HEAP32[$7>>2]|0;
     $34 = ($32>>>0)<($33>>>0);
     if ($34) {
      $35 = ((($32)) + 1|0);
      HEAP32[$6>>2] = $35;
      $36 = HEAP8[$32>>0]|0;
      $37 = $36&255;
      $40 = $37;
     } else {
      $38 = (___shgetc($0)|0);
      $40 = $38;
     }
     $39 = $40 | 32;
     $41 = ($39|0)==(120);
     if (!($41)) {
      if ($28) {
       $$1160169 = $40;$$1165168 = 8;
       label = 46;
       break;
      } else {
       $$1160 = $40;$$1165 = $1;
       label = 32;
       break;
      }
     }
     $42 = HEAP32[$6>>2]|0;
     $43 = HEAP32[$7>>2]|0;
     $44 = ($42>>>0)<($43>>>0);
     if ($44) {
      $45 = ((($42)) + 1|0);
      HEAP32[$6>>2] = $45;
      $46 = HEAP8[$42>>0]|0;
      $47 = $46&255;
      $50 = $47;
     } else {
      $48 = (___shgetc($0)|0);
      $50 = $48;
     }
     $49 = ((21726) + ($50)|0);
     $51 = HEAP8[$49>>0]|0;
     $52 = ($51&255)>(15);
     if ($52) {
      $53 = HEAP32[$7>>2]|0;
      $54 = ($53|0)==(0|0);
      if (!($54)) {
       $55 = HEAP32[$6>>2]|0;
       $56 = ((($55)) + -1|0);
       HEAP32[$6>>2] = $56;
      }
      $57 = ($2|0)==(0);
      if ($57) {
       ___shlim($0,0);
       $289 = 0;$290 = 0;
       break L1;
      }
      if ($54) {
       $289 = 0;$290 = 0;
       break L1;
      }
      $58 = HEAP32[$6>>2]|0;
      $59 = ((($58)) + -1|0);
      HEAP32[$6>>2] = $59;
      $289 = 0;$290 = 0;
      break L1;
     } else {
      $$1160169 = $50;$$1165168 = 16;
      label = 46;
     }
    } else {
     $$166 = $28 ? 10 : $1;
     $60 = ((21726) + ($$0159)|0);
     $61 = HEAP8[$60>>0]|0;
     $62 = $61&255;
     $63 = ($62>>>0)<($$166>>>0);
     if ($63) {
      $$1160 = $$0159;$$1165 = $$166;
      label = 32;
     } else {
      $64 = HEAP32[$7>>2]|0;
      $65 = ($64|0)==(0|0);
      if (!($65)) {
       $66 = HEAP32[$6>>2]|0;
       $67 = ((($66)) + -1|0);
       HEAP32[$6>>2] = $67;
      }
      ___shlim($0,0);
      $68 = (___errno_location()|0);
      HEAP32[$68>>2] = 22;
      $289 = 0;$290 = 0;
      break L1;
     }
    }
   } while(0);
   if ((label|0) == 32) {
    $69 = ($$1165|0)==(10);
    if ($69) {
     $70 = (($$1160) + -48)|0;
     $71 = ($70>>>0)<(10);
     if ($71) {
      $$0154222 = 0;$74 = $70;
      while(1) {
       $72 = ($$0154222*10)|0;
       $73 = (($72) + ($74))|0;
       $75 = HEAP32[$6>>2]|0;
       $76 = HEAP32[$7>>2]|0;
       $77 = ($75>>>0)<($76>>>0);
       if ($77) {
        $78 = ((($75)) + 1|0);
        HEAP32[$6>>2] = $78;
        $79 = HEAP8[$75>>0]|0;
        $80 = $79&255;
        $$2161$be = $80;
       } else {
        $81 = (___shgetc($0)|0);
        $$2161$be = $81;
       }
       $82 = (($$2161$be) + -48)|0;
       $83 = ($82>>>0)<(10);
       $84 = ($73>>>0)<(429496729);
       $85 = $83 & $84;
       if ($85) {
        $$0154222 = $73;$74 = $82;
       } else {
        break;
       }
      }
      $$2161$lcssa = $$2161$be;$291 = $73;$292 = 0;
     } else {
      $$2161$lcssa = $$1160;$291 = 0;$292 = 0;
     }
     $86 = (($$2161$lcssa) + -48)|0;
     $87 = ($86>>>0)<(10);
     if ($87) {
      $$3162211 = $$2161$lcssa;$88 = $291;$89 = $292;$92 = $86;
      while(1) {
       $90 = (___muldi3(($88|0),($89|0),10,0)|0);
       $91 = tempRet0;
       $93 = ($92|0)<(0);
       $94 = $93 << 31 >> 31;
       $95 = $92 ^ -1;
       $96 = $94 ^ -1;
       $97 = ($91>>>0)>($96>>>0);
       $98 = ($90>>>0)>($95>>>0);
       $99 = ($91|0)==($96|0);
       $100 = $99 & $98;
       $101 = $97 | $100;
       if ($101) {
        $$3162$lcssa = $$3162211;$$lcssa = $92;$293 = $88;$294 = $89;
        break;
       }
       $102 = (_i64Add(($90|0),($91|0),($92|0),($94|0))|0);
       $103 = tempRet0;
       $104 = HEAP32[$6>>2]|0;
       $105 = HEAP32[$7>>2]|0;
       $106 = ($104>>>0)<($105>>>0);
       if ($106) {
        $107 = ((($104)) + 1|0);
        HEAP32[$6>>2] = $107;
        $108 = HEAP8[$104>>0]|0;
        $109 = $108&255;
        $$3162$be = $109;
       } else {
        $110 = (___shgetc($0)|0);
        $$3162$be = $110;
       }
       $111 = (($$3162$be) + -48)|0;
       $112 = ($111>>>0)<(10);
       $113 = ($103>>>0)<(429496729);
       $114 = ($102>>>0)<(2576980378);
       $115 = ($103|0)==(429496729);
       $116 = $115 & $114;
       $117 = $113 | $116;
       $or$cond7 = $112 & $117;
       if ($or$cond7) {
        $$3162211 = $$3162$be;$88 = $102;$89 = $103;$92 = $111;
       } else {
        $$3162$lcssa = $$3162$be;$$lcssa = $111;$293 = $102;$294 = $103;
        break;
       }
      }
      $118 = ($$lcssa>>>0)>(9);
      if ($118) {
       $$1158 = $$0157;$262 = $294;$264 = $293;
      } else {
       $$1165167 = 10;$$8 = $$3162$lcssa;$295 = $293;$296 = $294;
       label = 72;
      }
     } else {
      $$1158 = $$0157;$262 = $292;$264 = $291;
     }
    } else {
     $$1160169 = $$1160;$$1165168 = $$1165;
     label = 46;
    }
   }
   L63: do {
    if ((label|0) == 46) {
     $119 = (($$1165168) + -1)|0;
     $120 = $119 & $$1165168;
     $121 = ($120|0)==(0);
     if ($121) {
      $126 = ($$1165168*23)|0;
      $127 = $126 >>> 5;
      $128 = $127 & 7;
      $129 = (21982 + ($128)|0);
      $130 = HEAP8[$129>>0]|0;
      $131 = $130 << 24 >> 24;
      $132 = ((21726) + ($$1160169)|0);
      $133 = HEAP8[$132>>0]|0;
      $134 = $133&255;
      $135 = ($134>>>0)<($$1165168>>>0);
      if ($135) {
       $$1155188 = 0;$138 = $134;
       while(1) {
        $136 = $$1155188 << $131;
        $137 = $138 | $136;
        $139 = HEAP32[$6>>2]|0;
        $140 = HEAP32[$7>>2]|0;
        $141 = ($139>>>0)<($140>>>0);
        if ($141) {
         $142 = ((($139)) + 1|0);
         HEAP32[$6>>2] = $142;
         $143 = HEAP8[$139>>0]|0;
         $144 = $143&255;
         $$4163$be = $144;
        } else {
         $145 = (___shgetc($0)|0);
         $$4163$be = $145;
        }
        $146 = ((21726) + ($$4163$be)|0);
        $147 = HEAP8[$146>>0]|0;
        $148 = $147&255;
        $149 = ($148>>>0)<($$1165168>>>0);
        $150 = ($137>>>0)<(134217728);
        $151 = $150 & $149;
        if ($151) {
         $$1155188 = $137;$138 = $148;
        } else {
         break;
        }
       }
       $$4163$lcssa = $$4163$be;$155 = $147;$157 = 0;$159 = $137;
      } else {
       $$4163$lcssa = $$1160169;$155 = $133;$157 = 0;$159 = 0;
      }
      $152 = (_bitshift64Lshr(-1,-1,($131|0))|0);
      $153 = tempRet0;
      $154 = $155&255;
      $156 = ($154>>>0)>=($$1165168>>>0);
      $158 = ($157>>>0)>($153>>>0);
      $160 = ($159>>>0)>($152>>>0);
      $161 = ($157|0)==($153|0);
      $162 = $161 & $160;
      $163 = $158 | $162;
      $or$cond183 = $156 | $163;
      if ($or$cond183) {
       $$1165167 = $$1165168;$$8 = $$4163$lcssa;$295 = $159;$296 = $157;
       label = 72;
       break;
      } else {
       $164 = $159;$165 = $157;$169 = $155;
      }
      while(1) {
       $166 = (_bitshift64Shl(($164|0),($165|0),($131|0))|0);
       $167 = tempRet0;
       $168 = $169&255;
       $170 = $168 | $166;
       $171 = HEAP32[$6>>2]|0;
       $172 = HEAP32[$7>>2]|0;
       $173 = ($171>>>0)<($172>>>0);
       if ($173) {
        $174 = ((($171)) + 1|0);
        HEAP32[$6>>2] = $174;
        $175 = HEAP8[$171>>0]|0;
        $176 = $175&255;
        $$5$be = $176;
       } else {
        $177 = (___shgetc($0)|0);
        $$5$be = $177;
       }
       $178 = ((21726) + ($$5$be)|0);
       $179 = HEAP8[$178>>0]|0;
       $180 = $179&255;
       $181 = ($180>>>0)>=($$1165168>>>0);
       $182 = ($167>>>0)>($153>>>0);
       $183 = ($170>>>0)>($152>>>0);
       $184 = ($167|0)==($153|0);
       $185 = $184 & $183;
       $186 = $182 | $185;
       $or$cond = $181 | $186;
       if ($or$cond) {
        $$1165167 = $$1165168;$$8 = $$5$be;$295 = $170;$296 = $167;
        label = 72;
        break L63;
       } else {
        $164 = $170;$165 = $167;$169 = $179;
       }
      }
     }
     $122 = ((21726) + ($$1160169)|0);
     $123 = HEAP8[$122>>0]|0;
     $124 = $123&255;
     $125 = ($124>>>0)<($$1165168>>>0);
     if ($125) {
      $$2156206 = 0;$189 = $124;
      while(1) {
       $187 = Math_imul($$2156206, $$1165168)|0;
       $188 = (($189) + ($187))|0;
       $190 = HEAP32[$6>>2]|0;
       $191 = HEAP32[$7>>2]|0;
       $192 = ($190>>>0)<($191>>>0);
       if ($192) {
        $193 = ((($190)) + 1|0);
        HEAP32[$6>>2] = $193;
        $194 = HEAP8[$190>>0]|0;
        $195 = $194&255;
        $$6$be = $195;
       } else {
        $196 = (___shgetc($0)|0);
        $$6$be = $196;
       }
       $197 = ((21726) + ($$6$be)|0);
       $198 = HEAP8[$197>>0]|0;
       $199 = $198&255;
       $200 = ($199>>>0)<($$1165168>>>0);
       $201 = ($188>>>0)<(119304647);
       $202 = $201 & $200;
       if ($202) {
        $$2156206 = $188;$189 = $199;
       } else {
        break;
       }
      }
      $$6$lcssa = $$6$be;$204 = $198;$297 = $188;$298 = 0;
     } else {
      $$6$lcssa = $$1160169;$204 = $123;$297 = 0;$298 = 0;
     }
     $203 = $204&255;
     $205 = ($203>>>0)<($$1165168>>>0);
     if ($205) {
      $206 = (___udivdi3(-1,-1,($$1165168|0),0)|0);
      $207 = tempRet0;
      $$7194 = $$6$lcssa;$208 = $298;$210 = $297;$218 = $204;
      while(1) {
       $209 = ($208>>>0)>($207>>>0);
       $211 = ($210>>>0)>($206>>>0);
       $212 = ($208|0)==($207|0);
       $213 = $212 & $211;
       $214 = $209 | $213;
       if ($214) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $215 = (___muldi3(($210|0),($208|0),($$1165168|0),0)|0);
       $216 = tempRet0;
       $217 = $218&255;
       $219 = $217 ^ -1;
       $220 = ($216>>>0)>(4294967295);
       $221 = ($215>>>0)>($219>>>0);
       $222 = ($216|0)==(-1);
       $223 = $222 & $221;
       $224 = $220 | $223;
       if ($224) {
        $$1165167 = $$1165168;$$8 = $$7194;$295 = $210;$296 = $208;
        label = 72;
        break L63;
       }
       $225 = (_i64Add(($217|0),0,($215|0),($216|0))|0);
       $226 = tempRet0;
       $227 = HEAP32[$6>>2]|0;
       $228 = HEAP32[$7>>2]|0;
       $229 = ($227>>>0)<($228>>>0);
       if ($229) {
        $230 = ((($227)) + 1|0);
        HEAP32[$6>>2] = $230;
        $231 = HEAP8[$227>>0]|0;
        $232 = $231&255;
        $$7$be = $232;
       } else {
        $233 = (___shgetc($0)|0);
        $$7$be = $233;
       }
       $234 = ((21726) + ($$7$be)|0);
       $235 = HEAP8[$234>>0]|0;
       $236 = $235&255;
       $237 = ($236>>>0)<($$1165168>>>0);
       if ($237) {
        $$7194 = $$7$be;$208 = $226;$210 = $225;$218 = $235;
       } else {
        $$1165167 = $$1165168;$$8 = $$7$be;$295 = $225;$296 = $226;
        label = 72;
        break;
       }
      }
     } else {
      $$1165167 = $$1165168;$$8 = $$6$lcssa;$295 = $297;$296 = $298;
      label = 72;
     }
    }
   } while(0);
   if ((label|0) == 72) {
    $238 = ((21726) + ($$8)|0);
    $239 = HEAP8[$238>>0]|0;
    $240 = $239&255;
    $241 = ($240>>>0)<($$1165167>>>0);
    if ($241) {
     while(1) {
      $242 = HEAP32[$6>>2]|0;
      $243 = HEAP32[$7>>2]|0;
      $244 = ($242>>>0)<($243>>>0);
      if ($244) {
       $245 = ((($242)) + 1|0);
       HEAP32[$6>>2] = $245;
       $246 = HEAP8[$242>>0]|0;
       $247 = $246&255;
       $$9$be = $247;
      } else {
       $248 = (___shgetc($0)|0);
       $$9$be = $248;
      }
      $249 = ((21726) + ($$9$be)|0);
      $250 = HEAP8[$249>>0]|0;
      $251 = $250&255;
      $252 = ($251>>>0)<($$1165167>>>0);
      if (!($252)) {
       break;
      }
     }
     $253 = (___errno_location()|0);
     HEAP32[$253>>2] = 34;
     $254 = $3 & 1;
     $255 = ($254|0)==(0);
     $256 = (0)==(0);
     $257 = $255 & $256;
     $$0157$ = $257 ? $$0157 : 0;
     $$1158 = $$0157$;$262 = $4;$264 = $3;
    } else {
     $$1158 = $$0157;$262 = $296;$264 = $295;
    }
   }
   $258 = HEAP32[$7>>2]|0;
   $259 = ($258|0)==(0|0);
   if (!($259)) {
    $260 = HEAP32[$6>>2]|0;
    $261 = ((($260)) + -1|0);
    HEAP32[$6>>2] = $261;
   }
   $263 = ($262>>>0)<($4>>>0);
   $265 = ($264>>>0)<($3>>>0);
   $266 = ($262|0)==($4|0);
   $267 = $266 & $265;
   $268 = $263 | $267;
   if (!($268)) {
    $269 = $3 & 1;
    $270 = ($269|0)!=(0);
    $271 = (0)!=(0);
    $272 = $270 | $271;
    $273 = ($$1158|0)!=(0);
    $or$cond12 = $272 | $273;
    if (!($or$cond12)) {
     $274 = (___errno_location()|0);
     HEAP32[$274>>2] = 34;
     $275 = (_i64Add(($3|0),($4|0),-1,-1)|0);
     $276 = tempRet0;
     $289 = $276;$290 = $275;
     break;
    }
    $277 = ($262>>>0)>($4>>>0);
    $278 = ($264>>>0)>($3>>>0);
    $279 = ($262|0)==($4|0);
    $280 = $279 & $278;
    $281 = $277 | $280;
    if ($281) {
     $282 = (___errno_location()|0);
     HEAP32[$282>>2] = 34;
     $289 = $4;$290 = $3;
     break;
    }
   }
   $283 = ($$1158|0)<(0);
   $284 = $283 << 31 >> 31;
   $285 = $264 ^ $$1158;
   $286 = $262 ^ $284;
   $287 = (_i64Subtract(($285|0),($286|0),($$1158|0),($284|0))|0);
   $288 = tempRet0;
   $289 = $288;$290 = $287;
  }
 } while(0);
 tempRet0 = ($289);
 return ($290|0);
}
function ___floatscan($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$$0340$i = 0, $$$0345$i = 0, $$$0380$i = 0, $$$0396$i = 0, $$$5350$i = 0, $$$5385$i = 0, $$$i = 0, $$0 = 0, $$0$i = 0, $$0105$ph = 0, $$0106$ph = 0, $$0107$lcssa = 0, $$0107163 = 0, $$0113 = 0, $$0114 = 0.0, $$0133$i = 0, $$0142$i = 0, $$0146$i = 0, $$0148$i = 0, $$0151$i = 0.0;
 var $$0152$i = 0.0, $$0155$i = 0.0, $$0159$i = 0, $$0166$i = 0, $$0166169$i = 0, $$0166170$i = 0, $$0324$i = 0, $$0327480$i = 0, $$0328$i = 0, $$0329$i = 0, $$0331476$i = 0, $$0335486$i = 0, $$0336$lcssa$i = 0, $$0336453$i = 0, $$0336454$i = 0, $$0336455$i = 0, $$0336503$i = 0, $$0340$lcssa$i = 0, $$0340457$i = 0, $$0340458$i = 0;
 var $$0340459$i = 0, $$0340502$i = 0, $$0345$lcssa545$i = 0, $$0345484$i = 0, $$0355$i = 0.0, $$0356$i = 0.0, $$0360474$i = 0.0, $$0364$i = 0, $$0367$i = 0, $$0375$i = 0, $$0375$ph$i = 0, $$0380$lcssa544$i = 0, $$0380483$i = 0, $$0388$i = 0, $$0391$i = 0, $$0396$lcssa$i = 0, $$0396463$i = 0, $$0396464$i = 0, $$0396465$i = 0, $$0396499$i = 0;
 var $$1$i = 0.0, $$1$lcssa = 0, $$1$ph$i = 0, $$10$i = 0, $$1108 = 0, $$1147$i = 0, $$1149$i = 0, $$1153$i = 0.0, $$1156$i = 0.0, $$1160$i = 0, $$1164 = 0, $$1325$be$i = 0, $$1325$ph$i = 0, $$1330$i = 0, $$1332$i = 0, $$1357$i = 0.0, $$1361$i = 0.0, $$1365$i = 0, $$1368$i = 0, $$1368$ph438$i = 0;
 var $$1376$i = 0, $$1376$ph$i = 0, $$1376$ph549$i = 0, $$1389$lcssa$i = 0, $$1389501$i = 0, $$2 = 0, $$2$i = 0, $$2$i117 = 0, $$2$lcssa$i = 0, $$2109161 = 0, $$2144$i = 0, $$2150$i = 0, $$2154$i = 0.0, $$2157$i = 0.0, $$2161$i = 0, $$2338$i = 0, $$2342$i = 0, $$2347$ph439$i = 0, $$2362$i = 0.0, $$2366$i = 0;
 var $$2369$i = 0, $$2382$ph437$i = 0, $$2390$i = 0, $$2393$i = 0, $$2398$i = 0, $$3$be$i = 0, $$3$lcssa$i = 0, $$3110 = 0, $$3145$i = 0, $$3158$lcssa$i = 0.0, $$3158179$i = 0.0, $$3162 = 0, $$3162$lcssa$i = 0, $$3162183$i = 0, $$3339493$i = 0, $$3343$i = 0, $$3359$i = 0.0, $$3363$i = 0.0, $$3370$i = 0, $$3378$i = 0;
 var $$3394$lcssa$i = 0, $$3394500$i = 0, $$3504$i = 0, $$4 = 0, $$4$i = 0.0, $$408$i = 0, $$4111 = 0, $$416$i = 0, $$4163$lcssa$i = 0, $$4163178$i = 0, $$4344485$i = 0, $$4349$i = 0, $$4349$ph$i = 0, $$4349$ph550$i = 0, $$4371$i = 0, $$4379$i = 0, $$4384$ph$i = 0, $$4384$ph435$i = 0, $$4395$i = 0, $$4475$i = 0;
 var $$5 = 0, $$5$$2369$i = 0, $$5$i = 0.0, $$5$i121 = 0, $$5$in$i = 0, $$5164$i = 0, $$5350478$i = 0, $$5385477$i = 0, $$6 = 0, $$6$i = 0, $$6373$ph$i = 0, $$6479$i = 0, $$9473$i = 0, $$in = 0, $$neg432$i = 0, $$neg433$i = 0, $$old8 = 0, $$pn$i = 0.0, $$pre$i = 0, $$pre$i119 = 0;
 var $$pre$phi202$iZ2D = 0.0, $$pre201$i = 0.0, $$promoted$i = 0, $$sink$off0$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0;
 var $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0;
 var $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0;
 var $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0.0;
 var $187 = 0.0, $188 = 0.0, $189 = 0.0, $19 = 0, $190 = 0, $191 = 0, $192 = 0.0, $193 = 0.0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0;
 var $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0.0, $214 = 0.0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0;
 var $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0;
 var $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0;
 var $26 = 0, $260 = 0.0, $261 = 0.0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0.0, $27 = 0, $270 = 0.0, $271 = 0.0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0;
 var $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0.0, $283 = 0.0, $284 = 0.0, $285 = 0, $286 = 0, $287 = 0.0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0;
 var $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0.0;
 var $313 = 0.0, $314 = 0.0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0.0, $321 = 0.0, $322 = 0.0, $323 = 0.0, $324 = 0.0, $325 = 0.0, $326 = 0, $327 = 0, $328 = 0.0, $329 = 0, $33 = 0, $330 = 0;
 var $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0;
 var $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0;
 var $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0;
 var $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0;
 var $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0;
 var $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0.0, $428 = 0.0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0;
 var $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0.0, $445 = 0.0, $446 = 0.0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0.0, $457 = 0.0;
 var $458 = 0.0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0.0, $469 = 0.0, $47 = 0, $470 = 0.0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0;
 var $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0.0, $483 = 0, $484 = 0.0, $485 = 0.0, $486 = 0, $487 = 0.0, $488 = 0, $489 = 0.0, $49 = 0, $490 = 0.0, $491 = 0, $492 = 0, $493 = 0;
 var $494 = 0.0, $495 = 0.0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0.0, $501 = 0.0, $502 = 0.0, $503 = 0, $504 = 0, $505 = 0, $506 = 0.0, $507 = 0.0, $508 = 0, $509 = 0, $51 = 0, $510 = 0;
 var $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0;
 var $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0.0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0;
 var $548 = 0, $549 = 0, $55 = 0.0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0.0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0;
 var $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0;
 var $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0;
 var $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0;
 var $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0.0, $63 = 0, $630 = 0, $631 = 0, $632 = 0.0, $633 = 0.0, $634 = 0, $635 = 0.0, $636 = 0.0, $637 = 0;
 var $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0.0, $644 = 0.0, $645 = 0, $646 = 0.0, $647 = 0.0, $648 = 0.0, $649 = 0.0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0;
 var $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0.0, $661 = 0.0, $662 = 0, $663 = 0.0, $664 = 0.0, $665 = 0, $666 = 0, $667 = 0, $668 = 0.0, $669 = 0.0, $67 = 0, $670 = 0.0, $671 = 0.0, $672 = 0, $673 = 0;
 var $674 = 0.0, $675 = 0, $676 = 0.0, $677 = 0.0, $678 = 0.0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0.0, $683 = 0, $684 = 0, $685 = 0, $686 = 0.0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0;
 var $692 = 0.0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0;
 var $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond$i = 0, $exitcond$i = 0;
 var $exitcond541$i = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i118 = 0, $or$cond168$i = 0, $or$cond3$i = 0, $or$cond4$i = 0, $or$cond410$i = 0, $or$cond412$i = 0, $or$cond413$i = 0, $or$cond414$i = 0, $or$cond417$i = 0, $or$cond418$i = 0, $or$cond5 = 0, $or$cond571$i = 0, $or$cond6$i = 0, $or$cond6$i122 = 0, $or$cond7 = 0, $or$cond9 = 0, $or$cond9$i = 0;
 var $storemerge$i = 0, $sum$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 512|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(512|0);
 $3 = sp;
 switch ($1|0) {
 case 0:  {
  $$0105$ph = -149;$$0106$ph = 24;
  label = 4;
  break;
 }
 case 1:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 case 2:  {
  $$0105$ph = -1074;$$0106$ph = 53;
  label = 4;
  break;
 }
 default: {
  $$0114 = 0.0;
 }
 }
 L4: do {
  if ((label|0) == 4) {
   $4 = ((($0)) + 4|0);
   $5 = ((($0)) + 100|0);
   while(1) {
    $6 = HEAP32[$4>>2]|0;
    $7 = HEAP32[$5>>2]|0;
    $8 = ($6>>>0)<($7>>>0);
    if ($8) {
     $9 = ((($6)) + 1|0);
     HEAP32[$4>>2] = $9;
     $10 = HEAP8[$6>>0]|0;
     $11 = $10&255;
     $13 = $11;
    } else {
     $12 = (___shgetc($0)|0);
     $13 = $12;
    }
    $14 = (_isspace($13)|0);
    $15 = ($14|0)==(0);
    if ($15) {
     break;
    }
   }
   $16 = ($13|0)==(45);
   L13: do {
    switch ($13|0) {
    case 43: case 45:  {
     $17 = $16&1;
     $18 = $17 << 1;
     $19 = (1 - ($18))|0;
     $20 = HEAP32[$4>>2]|0;
     $21 = HEAP32[$5>>2]|0;
     $22 = ($20>>>0)<($21>>>0);
     if ($22) {
      $23 = ((($20)) + 1|0);
      HEAP32[$4>>2] = $23;
      $24 = HEAP8[$20>>0]|0;
      $25 = $24&255;
      $$0 = $25;$$0113 = $19;
      break L13;
     } else {
      $26 = (___shgetc($0)|0);
      $$0 = $26;$$0113 = $19;
      break L13;
     }
     break;
    }
    default: {
     $$0 = $13;$$0113 = 1;
    }
    }
   } while(0);
   $$0107163 = 0;$$1164 = $$0;
   while(1) {
    $27 = $$1164 | 32;
    $28 = (21712 + ($$0107163)|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = $29 << 24 >> 24;
    $31 = ($27|0)==($30|0);
    if (!($31)) {
     $$0107$lcssa = $$0107163;$$1$lcssa = $$1164;
     break;
    }
    $32 = ($$0107163>>>0)<(7);
    do {
     if ($32) {
      $33 = HEAP32[$4>>2]|0;
      $34 = HEAP32[$5>>2]|0;
      $35 = ($33>>>0)<($34>>>0);
      if ($35) {
       $36 = ((($33)) + 1|0);
       HEAP32[$4>>2] = $36;
       $37 = HEAP8[$33>>0]|0;
       $38 = $37&255;
       $$2 = $38;
       break;
      } else {
       $39 = (___shgetc($0)|0);
       $$2 = $39;
       break;
      }
     } else {
      $$2 = $$1164;
     }
    } while(0);
    $40 = (($$0107163) + 1)|0;
    $41 = ($40>>>0)<(8);
    if ($41) {
     $$0107163 = $40;$$1164 = $$2;
    } else {
     $$0107$lcssa = $40;$$1$lcssa = $$2;
     break;
    }
   }
   L29: do {
    switch ($$0107$lcssa|0) {
    case 8:  {
     break;
    }
    case 3:  {
     label = 23;
     break;
    }
    default: {
     $42 = ($$0107$lcssa>>>0)>(3);
     $43 = ($2|0)!=(0);
     $or$cond5 = $43 & $42;
     if ($or$cond5) {
      $44 = ($$0107$lcssa|0)==(8);
      if ($44) {
       break L29;
      } else {
       label = 23;
       break L29;
      }
     }
     $57 = ($$0107$lcssa|0)==(0);
     L34: do {
      if ($57) {
       $$2109161 = 0;$$3162 = $$1$lcssa;
       while(1) {
        $58 = $$3162 | 32;
        $59 = (21721 + ($$2109161)|0);
        $60 = HEAP8[$59>>0]|0;
        $61 = $60 << 24 >> 24;
        $62 = ($58|0)==($61|0);
        if (!($62)) {
         $$3110 = $$2109161;$$5 = $$3162;
         break L34;
        }
        $63 = ($$2109161>>>0)<(2);
        do {
         if ($63) {
          $64 = HEAP32[$4>>2]|0;
          $65 = HEAP32[$5>>2]|0;
          $66 = ($64>>>0)<($65>>>0);
          if ($66) {
           $67 = ((($64)) + 1|0);
           HEAP32[$4>>2] = $67;
           $68 = HEAP8[$64>>0]|0;
           $69 = $68&255;
           $$4 = $69;
           break;
          } else {
           $70 = (___shgetc($0)|0);
           $$4 = $70;
           break;
          }
         } else {
          $$4 = $$3162;
         }
        } while(0);
        $71 = (($$2109161) + 1)|0;
        $72 = ($71>>>0)<(3);
        if ($72) {
         $$2109161 = $71;$$3162 = $$4;
        } else {
         $$3110 = $71;$$5 = $$4;
         break;
        }
       }
      } else {
       $$3110 = $$0107$lcssa;$$5 = $$1$lcssa;
      }
     } while(0);
     switch ($$3110|0) {
     case 3:  {
      $73 = HEAP32[$4>>2]|0;
      $74 = HEAP32[$5>>2]|0;
      $75 = ($73>>>0)<($74>>>0);
      if ($75) {
       $76 = ((($73)) + 1|0);
       HEAP32[$4>>2] = $76;
       $77 = HEAP8[$73>>0]|0;
       $78 = $77&255;
       $80 = $78;
      } else {
       $79 = (___shgetc($0)|0);
       $80 = $79;
      }
      $81 = ($80|0)==(40);
      if ($81) {
       $$4111 = 1;
      } else {
       $82 = HEAP32[$5>>2]|0;
       $83 = ($82|0)==(0|0);
       if ($83) {
        $$0114 = nan;
        break L4;
       }
       $84 = HEAP32[$4>>2]|0;
       $85 = ((($84)) + -1|0);
       HEAP32[$4>>2] = $85;
       $$0114 = nan;
       break L4;
      }
      while(1) {
       $86 = HEAP32[$4>>2]|0;
       $87 = HEAP32[$5>>2]|0;
       $88 = ($86>>>0)<($87>>>0);
       if ($88) {
        $89 = ((($86)) + 1|0);
        HEAP32[$4>>2] = $89;
        $90 = HEAP8[$86>>0]|0;
        $91 = $90&255;
        $94 = $91;
       } else {
        $92 = (___shgetc($0)|0);
        $94 = $92;
       }
       $93 = (($94) + -48)|0;
       $95 = ($93>>>0)<(10);
       $96 = (($94) + -65)|0;
       $97 = ($96>>>0)<(26);
       $or$cond = $95 | $97;
       if (!($or$cond)) {
        $98 = (($94) + -97)|0;
        $99 = ($98>>>0)<(26);
        $100 = ($94|0)==(95);
        $or$cond7 = $100 | $99;
        if (!($or$cond7)) {
         break;
        }
       }
       $112 = (($$4111) + 1)|0;
       $$4111 = $112;
      }
      $101 = ($94|0)==(41);
      if ($101) {
       $$0114 = nan;
       break L4;
      }
      $102 = HEAP32[$5>>2]|0;
      $103 = ($102|0)==(0|0);
      if (!($103)) {
       $104 = HEAP32[$4>>2]|0;
       $105 = ((($104)) + -1|0);
       HEAP32[$4>>2] = $105;
      }
      if (!($43)) {
       $107 = (___errno_location()|0);
       HEAP32[$107>>2] = 22;
       ___shlim($0,0);
       $$0114 = 0.0;
       break L4;
      }
      $106 = ($$4111|0)==(0);
      if ($106) {
       $$0114 = nan;
       break L4;
      } else {
       $$in = $$4111;
      }
      while(1) {
       $108 = (($$in) + -1)|0;
       if (!($103)) {
        $109 = HEAP32[$4>>2]|0;
        $110 = ((($109)) + -1|0);
        HEAP32[$4>>2] = $110;
       }
       $111 = ($108|0)==(0);
       if ($111) {
        $$0114 = nan;
        break L4;
       } else {
        $$in = $108;
       }
      }
      break;
     }
     case 0:  {
      $118 = ($$5|0)==(48);
      do {
       if ($118) {
        $119 = HEAP32[$4>>2]|0;
        $120 = HEAP32[$5>>2]|0;
        $121 = ($119>>>0)<($120>>>0);
        if ($121) {
         $122 = ((($119)) + 1|0);
         HEAP32[$4>>2] = $122;
         $123 = HEAP8[$119>>0]|0;
         $124 = $123&255;
         $127 = $124;
        } else {
         $125 = (___shgetc($0)|0);
         $127 = $125;
        }
        $126 = $127 | 32;
        $128 = ($126|0)==(120);
        if (!($128)) {
         $329 = HEAP32[$5>>2]|0;
         $330 = ($329|0)==(0|0);
         if ($330) {
          $$6 = 48;
          break;
         }
         $331 = HEAP32[$4>>2]|0;
         $332 = ((($331)) + -1|0);
         HEAP32[$4>>2] = $332;
         $$6 = 48;
         break;
        }
        $129 = HEAP32[$4>>2]|0;
        $130 = HEAP32[$5>>2]|0;
        $131 = ($129>>>0)<($130>>>0);
        if ($131) {
         $132 = ((($129)) + 1|0);
         HEAP32[$4>>2] = $132;
         $133 = HEAP8[$129>>0]|0;
         $134 = $133&255;
         $$0$i = $134;$$0142$i = 0;
        } else {
         $135 = (___shgetc($0)|0);
         $$0$i = $135;$$0142$i = 0;
        }
        L94: while(1) {
         switch ($$0$i|0) {
         case 46:  {
          label = 74;
          break L94;
          break;
         }
         case 48:  {
          break;
         }
         default: {
          $$0146$i = 0;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$0$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
          break L94;
         }
         }
         $136 = HEAP32[$4>>2]|0;
         $137 = HEAP32[$5>>2]|0;
         $138 = ($136>>>0)<($137>>>0);
         if ($138) {
          $139 = ((($136)) + 1|0);
          HEAP32[$4>>2] = $139;
          $140 = HEAP8[$136>>0]|0;
          $141 = $140&255;
          $$0$i = $141;$$0142$i = 1;
          continue;
         } else {
          $142 = (___shgetc($0)|0);
          $$0$i = $142;$$0142$i = 1;
          continue;
         }
        }
        if ((label|0) == 74) {
         $143 = HEAP32[$4>>2]|0;
         $144 = HEAP32[$5>>2]|0;
         $145 = ($143>>>0)<($144>>>0);
         if ($145) {
          $146 = ((($143)) + 1|0);
          HEAP32[$4>>2] = $146;
          $147 = HEAP8[$143>>0]|0;
          $148 = $147&255;
          $$1$ph$i = $148;
         } else {
          $149 = (___shgetc($0)|0);
          $$1$ph$i = $149;
         }
         $150 = ($$1$ph$i|0)==(48);
         if ($150) {
          $158 = 0;$159 = 0;
          while(1) {
           $151 = HEAP32[$4>>2]|0;
           $152 = HEAP32[$5>>2]|0;
           $153 = ($151>>>0)<($152>>>0);
           if ($153) {
            $154 = ((($151)) + 1|0);
            HEAP32[$4>>2] = $154;
            $155 = HEAP8[$151>>0]|0;
            $156 = $155&255;
            $162 = $156;
           } else {
            $157 = (___shgetc($0)|0);
            $162 = $157;
           }
           $160 = (_i64Add(($158|0),($159|0),-1,-1)|0);
           $161 = tempRet0;
           $163 = ($162|0)==(48);
           if ($163) {
            $158 = $160;$159 = $161;
           } else {
            $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $162;$$2144$i = 1;$172 = 0;$174 = 0;$216 = $160;$218 = $161;
            break;
           }
          }
         } else {
          $$0146$i = 1;$$0148$i = 0;$$0152$i = 1.0;$$0155$i = 0.0;$$0159$i = 0;$$2$i = $$1$ph$i;$$2144$i = $$0142$i;$172 = 0;$174 = 0;$216 = 0;$218 = 0;
         }
        }
        while(1) {
         $164 = (($$2$i) + -48)|0;
         $165 = ($164>>>0)<(10);
         $$pre$i = $$2$i | 32;
         if ($165) {
          label = 86;
         } else {
          $166 = (($$pre$i) + -97)|0;
          $167 = ($166>>>0)<(6);
          $168 = ($$2$i|0)==(46);
          $or$cond6$i = $168 | $167;
          if (!($or$cond6$i)) {
           $$2$lcssa$i = $$2$i;
           break;
          }
          if ($168) {
           $169 = ($$0146$i|0)==(0);
           if ($169) {
            $$1147$i = 1;$$2150$i = $$0148$i;$$2154$i = $$0152$i;$$2157$i = $$0155$i;$$2161$i = $$0159$i;$$3145$i = $$2144$i;$693 = $174;$694 = $172;$695 = $174;$696 = $172;
           } else {
            $$2$lcssa$i = 46;
            break;
           }
          } else {
           label = 86;
          }
         }
         if ((label|0) == 86) {
          label = 0;
          $170 = ($$2$i|0)>(57);
          $171 = (($$pre$i) + -87)|0;
          $$0133$i = $170 ? $171 : $164;
          $173 = ($172|0)<(0);
          $175 = ($174>>>0)<(8);
          $176 = ($172|0)==(0);
          $177 = $176 & $175;
          $178 = $173 | $177;
          do {
           if ($178) {
            $179 = $$0159$i << 4;
            $180 = (($$0133$i) + ($179))|0;
            $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $180;
           } else {
            $181 = ($172|0)<(0);
            $182 = ($174>>>0)<(14);
            $183 = ($172|0)==(0);
            $184 = $183 & $182;
            $185 = $181 | $184;
            if ($185) {
             $186 = (+($$0133$i|0));
             $187 = $$0152$i * 0.0625;
             $188 = $187 * $186;
             $189 = $$0155$i + $188;
             $$1149$i = $$0148$i;$$1153$i = $187;$$1156$i = $189;$$1160$i = $$0159$i;
             break;
            }
            $190 = ($$0133$i|0)==(0);
            $191 = ($$0148$i|0)!=(0);
            $or$cond$i = $191 | $190;
            if ($or$cond$i) {
             $$1149$i = $$0148$i;$$1153$i = $$0152$i;$$1156$i = $$0155$i;$$1160$i = $$0159$i;
            } else {
             $192 = $$0152$i * 0.5;
             $193 = $$0155$i + $192;
             $$1149$i = 1;$$1153$i = $$0152$i;$$1156$i = $193;$$1160$i = $$0159$i;
            }
           }
          } while(0);
          $194 = (_i64Add(($174|0),($172|0),1,0)|0);
          $195 = tempRet0;
          $$1147$i = $$0146$i;$$2150$i = $$1149$i;$$2154$i = $$1153$i;$$2157$i = $$1156$i;$$2161$i = $$1160$i;$$3145$i = 1;$693 = $216;$694 = $218;$695 = $194;$696 = $195;
         }
         $196 = HEAP32[$4>>2]|0;
         $197 = HEAP32[$5>>2]|0;
         $198 = ($196>>>0)<($197>>>0);
         if ($198) {
          $199 = ((($196)) + 1|0);
          HEAP32[$4>>2] = $199;
          $200 = HEAP8[$196>>0]|0;
          $201 = $200&255;
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $201;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         } else {
          $202 = (___shgetc($0)|0);
          $$0146$i = $$1147$i;$$0148$i = $$2150$i;$$0152$i = $$2154$i;$$0155$i = $$2157$i;$$0159$i = $$2161$i;$$2$i = $202;$$2144$i = $$3145$i;$172 = $696;$174 = $695;$216 = $693;$218 = $694;
          continue;
         }
        }
        $203 = ($$2144$i|0)==(0);
        if ($203) {
         $204 = HEAP32[$5>>2]|0;
         $205 = ($204|0)==(0|0);
         if (!($205)) {
          $206 = HEAP32[$4>>2]|0;
          $207 = ((($206)) + -1|0);
          HEAP32[$4>>2] = $207;
         }
         $208 = ($2|0)==(0);
         if ($208) {
          ___shlim($0,0);
         } else {
          if (!($205)) {
           $209 = HEAP32[$4>>2]|0;
           $210 = ((($209)) + -1|0);
           HEAP32[$4>>2] = $210;
           $211 = ($$0146$i|0)==(0);
           if (!($211)) {
            $212 = ((($209)) + -2|0);
            HEAP32[$4>>2] = $212;
           }
          }
         }
         $213 = (+($$0113|0));
         $214 = $213 * 0.0;
         $$0114 = $214;
         break L4;
        }
        $215 = ($$0146$i|0)==(0);
        $217 = $215 ? $174 : $216;
        $219 = $215 ? $172 : $218;
        $220 = ($172|0)<(0);
        $221 = ($174>>>0)<(8);
        $222 = ($172|0)==(0);
        $223 = $222 & $221;
        $224 = $220 | $223;
        if ($224) {
         $$3162183$i = $$0159$i;$226 = $174;$227 = $172;
         while(1) {
          $225 = $$3162183$i << 4;
          $228 = (_i64Add(($226|0),($227|0),1,0)|0);
          $229 = tempRet0;
          $230 = ($229|0)<(0);
          $231 = ($228>>>0)<(8);
          $232 = ($229|0)==(0);
          $233 = $232 & $231;
          $234 = $230 | $233;
          if ($234) {
           $$3162183$i = $225;$226 = $228;$227 = $229;
          } else {
           $$3162$lcssa$i = $225;
           break;
          }
         }
        } else {
         $$3162$lcssa$i = $$0159$i;
        }
        $235 = $$2$lcssa$i | 32;
        $236 = ($235|0)==(112);
        if ($236) {
         $237 = (_scanexp($0,$2)|0);
         $238 = tempRet0;
         $239 = ($237|0)==(0);
         $240 = ($238|0)==(-2147483648);
         $241 = $239 & $240;
         if ($241) {
          $242 = ($2|0)==(0);
          if ($242) {
           ___shlim($0,0);
           $$0114 = 0.0;
           break L4;
          }
          $243 = HEAP32[$5>>2]|0;
          $244 = ($243|0)==(0|0);
          if ($244) {
           $255 = 0;$256 = 0;
          } else {
           $245 = HEAP32[$4>>2]|0;
           $246 = ((($245)) + -1|0);
           HEAP32[$4>>2] = $246;
           $255 = 0;$256 = 0;
          }
         } else {
          $255 = $237;$256 = $238;
         }
        } else {
         $247 = HEAP32[$5>>2]|0;
         $248 = ($247|0)==(0|0);
         if ($248) {
          $255 = 0;$256 = 0;
         } else {
          $249 = HEAP32[$4>>2]|0;
          $250 = ((($249)) + -1|0);
          HEAP32[$4>>2] = $250;
          $255 = 0;$256 = 0;
         }
        }
        $251 = (_bitshift64Shl(($217|0),($219|0),2)|0);
        $252 = tempRet0;
        $253 = (_i64Add(($251|0),($252|0),-32,-1)|0);
        $254 = tempRet0;
        $257 = (_i64Add(($253|0),($254|0),($255|0),($256|0))|0);
        $258 = tempRet0;
        $259 = ($$3162$lcssa$i|0)==(0);
        if ($259) {
         $260 = (+($$0113|0));
         $261 = $260 * 0.0;
         $$0114 = $261;
         break L4;
        }
        $262 = (0 - ($$0105$ph))|0;
        $263 = ($258|0)>(0);
        $264 = ($257>>>0)>($262>>>0);
        $265 = ($258|0)==(0);
        $266 = $265 & $264;
        $267 = $263 | $266;
        if ($267) {
         $268 = (___errno_location()|0);
         HEAP32[$268>>2] = 34;
         $269 = (+($$0113|0));
         $270 = $269 * 1.7976931348623157E+308;
         $271 = $270 * 1.7976931348623157E+308;
         $$0114 = $271;
         break L4;
        }
        $272 = (($$0105$ph) + -106)|0;
        $273 = ($272|0)<(0);
        $274 = $273 << 31 >> 31;
        $275 = ($258|0)<($274|0);
        $276 = ($257>>>0)<($272>>>0);
        $277 = ($258|0)==($274|0);
        $278 = $277 & $276;
        $279 = $275 | $278;
        if ($279) {
         $281 = (___errno_location()|0);
         HEAP32[$281>>2] = 34;
         $282 = (+($$0113|0));
         $283 = $282 * 2.2250738585072014E-308;
         $284 = $283 * 2.2250738585072014E-308;
         $$0114 = $284;
         break L4;
        }
        $280 = ($$3162$lcssa$i|0)>(-1);
        if ($280) {
         $$3158179$i = $$0155$i;$$4163178$i = $$3162$lcssa$i;$290 = $257;$291 = $258;
         while(1) {
          $285 = !($$3158179$i >= 0.5);
          $286 = $$4163178$i << 1;
          $287 = $$3158179$i + -1.0;
          $288 = $285&1;
          $289 = $288 | $286;
          $$5164$i = $289 ^ 1;
          $$pn$i = $285 ? $$3158179$i : $287;
          $$4$i = $$3158179$i + $$pn$i;
          $292 = (_i64Add(($290|0),($291|0),-1,-1)|0);
          $293 = tempRet0;
          $294 = ($289|0)>(-1);
          if ($294) {
           $$3158179$i = $$4$i;$$4163178$i = $$5164$i;$290 = $292;$291 = $293;
          } else {
           $$3158$lcssa$i = $$4$i;$$4163$lcssa$i = $$5164$i;$299 = $292;$300 = $293;
           break;
          }
         }
        } else {
         $$3158$lcssa$i = $$0155$i;$$4163$lcssa$i = $$3162$lcssa$i;$299 = $257;$300 = $258;
        }
        $295 = ($$0105$ph|0)<(0);
        $296 = $295 << 31 >> 31;
        $297 = (_i64Subtract(32,0,($$0105$ph|0),($296|0))|0);
        $298 = tempRet0;
        $301 = (_i64Add(($299|0),($300|0),($297|0),($298|0))|0);
        $302 = tempRet0;
        $303 = (0)>($302|0);
        $304 = ($$0106$ph>>>0)>($301>>>0);
        $305 = (0)==($302|0);
        $306 = $305 & $304;
        $307 = $303 | $306;
        if ($307) {
         $308 = ($301|0)<(0);
         if ($308) {
          $$0166170$i = 0;$311 = 84;
          label = 127;
         } else {
          $$0166$i = $301;
          label = 125;
         }
        } else {
         $$0166$i = $$0106$ph;
         label = 125;
        }
        if ((label|0) == 125) {
         $309 = ($$0166$i|0)<(53);
         $310 = (84 - ($$0166$i))|0;
         if ($309) {
          $$0166170$i = $$0166$i;$311 = $310;
          label = 127;
         } else {
          $$pre201$i = (+($$0113|0));
          $$0151$i = 0.0;$$0166169$i = $$0166$i;$$pre$phi202$iZ2D = $$pre201$i;
         }
        }
        if ((label|0) == 127) {
         $312 = (+_scalbn(1.0,$311));
         $313 = (+($$0113|0));
         $314 = (+_copysignl($312,$313));
         $$0151$i = $314;$$0166169$i = $$0166170$i;$$pre$phi202$iZ2D = $313;
        }
        $315 = ($$0166169$i|0)<(32);
        $316 = $$3158$lcssa$i != 0.0;
        $or$cond4$i = $316 & $315;
        $317 = $$4163$lcssa$i & 1;
        $318 = ($317|0)==(0);
        $or$cond168$i = $318 & $or$cond4$i;
        $319 = $or$cond168$i&1;
        $$6$i = (($319) + ($$4163$lcssa$i))|0;
        $$5$i = $or$cond168$i ? 0.0 : $$3158$lcssa$i;
        $320 = (+($$6$i>>>0));
        $321 = $$pre$phi202$iZ2D * $320;
        $322 = $$0151$i + $321;
        $323 = $$pre$phi202$iZ2D * $$5$i;
        $324 = $323 + $322;
        $325 = $324 - $$0151$i;
        $326 = $325 != 0.0;
        if (!($326)) {
         $327 = (___errno_location()|0);
         HEAP32[$327>>2] = 34;
        }
        $328 = (+_scalbnl($325,$299));
        $$0114 = $328;
        break L4;
       } else {
        $$6 = $$5;
       }
      } while(0);
      $sum$i = (($$0105$ph) + ($$0106$ph))|0;
      $333 = (0 - ($sum$i))|0;
      $$0324$i = $$6;$$0391$i = 0;
      L184: while(1) {
       switch ($$0324$i|0) {
       case 46:  {
        label = 138;
        break L184;
        break;
       }
       case 48:  {
        break;
       }
       default: {
        $$0388$i = 0;$$2$i117 = $$0324$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
        break L184;
       }
       }
       $334 = HEAP32[$4>>2]|0;
       $335 = HEAP32[$5>>2]|0;
       $336 = ($334>>>0)<($335>>>0);
       if ($336) {
        $337 = ((($334)) + 1|0);
        HEAP32[$4>>2] = $337;
        $338 = HEAP8[$334>>0]|0;
        $339 = $338&255;
        $$0324$i = $339;$$0391$i = 1;
        continue;
       } else {
        $340 = (___shgetc($0)|0);
        $$0324$i = $340;$$0391$i = 1;
        continue;
       }
      }
      if ((label|0) == 138) {
       $341 = HEAP32[$4>>2]|0;
       $342 = HEAP32[$5>>2]|0;
       $343 = ($341>>>0)<($342>>>0);
       if ($343) {
        $344 = ((($341)) + 1|0);
        HEAP32[$4>>2] = $344;
        $345 = HEAP8[$341>>0]|0;
        $346 = $345&255;
        $$1325$ph$i = $346;
       } else {
        $347 = (___shgetc($0)|0);
        $$1325$ph$i = $347;
       }
       $348 = ($$1325$ph$i|0)==(48);
       if ($348) {
        $349 = 0;$350 = 0;
        while(1) {
         $351 = (_i64Add(($349|0),($350|0),-1,-1)|0);
         $352 = tempRet0;
         $353 = HEAP32[$4>>2]|0;
         $354 = HEAP32[$5>>2]|0;
         $355 = ($353>>>0)<($354>>>0);
         if ($355) {
          $356 = ((($353)) + 1|0);
          HEAP32[$4>>2] = $356;
          $357 = HEAP8[$353>>0]|0;
          $358 = $357&255;
          $$1325$be$i = $358;
         } else {
          $359 = (___shgetc($0)|0);
          $$1325$be$i = $359;
         }
         $360 = ($$1325$be$i|0)==(48);
         if ($360) {
          $349 = $351;$350 = $352;
         } else {
          $$0388$i = 1;$$2$i117 = $$1325$be$i;$$2393$i = 1;$697 = $351;$698 = $352;
          break;
         }
        }
       } else {
        $$0388$i = 1;$$2$i117 = $$1325$ph$i;$$2393$i = $$0391$i;$697 = 0;$698 = 0;
       }
      }
      HEAP32[$3>>2] = 0;
      $361 = (($$2$i117) + -48)|0;
      $362 = ($361>>>0)<(10);
      $363 = ($$2$i117|0)==(46);
      $364 = $363 | $362;
      L203: do {
       if ($364) {
        $365 = ((($3)) + 496|0);
        $$0336503$i = 0;$$0340502$i = 0;$$0396499$i = 0;$$1389501$i = $$0388$i;$$3394500$i = $$2393$i;$$3504$i = $$2$i117;$368 = 0;$369 = 0;$699 = $363;$700 = $361;$701 = $697;$702 = $698;
        L205: while(1) {
         do {
          if ($699) {
           $cond$i = ($$1389501$i|0)==(0);
           if ($cond$i) {
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = 1;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $368;$704 = $369;$705 = $368;$706 = $369;
           } else {
            break L205;
           }
          } else {
           $367 = ($$0340502$i|0)<(125);
           $370 = (_i64Add(($368|0),($369|0),1,0)|0);
           $371 = tempRet0;
           $372 = ($$3504$i|0)!=(48);
           if (!($367)) {
            if (!($372)) {
             $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
             break;
            }
            $382 = HEAP32[$365>>2]|0;
            $383 = $382 | 1;
            HEAP32[$365>>2] = $383;
            $$2338$i = $$0336503$i;$$2342$i = $$0340502$i;$$2390$i = $$1389501$i;$$2398$i = $$0396499$i;$$4395$i = $$3394500$i;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
            break;
           }
           $$$0396$i = $372 ? $370 : $$0396499$i;
           $373 = ($$0336503$i|0)==(0);
           $374 = (($3) + ($$0340502$i<<2)|0);
           if ($373) {
            $storemerge$i = $700;
           } else {
            $375 = (($$3504$i) + -48)|0;
            $376 = HEAP32[$374>>2]|0;
            $377 = ($376*10)|0;
            $378 = (($375) + ($377))|0;
            $storemerge$i = $378;
           }
           HEAP32[$374>>2] = $storemerge$i;
           $379 = (($$0336503$i) + 1)|0;
           $380 = ($379|0)==(9);
           $381 = $380&1;
           $$$0340$i = (($381) + ($$0340502$i))|0;
           $$408$i = $380 ? 0 : $379;
           $$2338$i = $$408$i;$$2342$i = $$$0340$i;$$2390$i = $$1389501$i;$$2398$i = $$$0396$i;$$4395$i = 1;$703 = $701;$704 = $702;$705 = $370;$706 = $371;
          }
         } while(0);
         $384 = HEAP32[$4>>2]|0;
         $385 = HEAP32[$5>>2]|0;
         $386 = ($384>>>0)<($385>>>0);
         if ($386) {
          $387 = ((($384)) + 1|0);
          HEAP32[$4>>2] = $387;
          $388 = HEAP8[$384>>0]|0;
          $389 = $388&255;
          $$3$be$i = $389;
         } else {
          $390 = (___shgetc($0)|0);
          $$3$be$i = $390;
         }
         $391 = (($$3$be$i) + -48)|0;
         $392 = ($391>>>0)<(10);
         $393 = ($$3$be$i|0)==(46);
         $394 = $393 | $392;
         if ($394) {
          $$0336503$i = $$2338$i;$$0340502$i = $$2342$i;$$0396499$i = $$2398$i;$$1389501$i = $$2390$i;$$3394500$i = $$4395$i;$$3504$i = $$3$be$i;$368 = $705;$369 = $706;$699 = $393;$700 = $391;$701 = $703;$702 = $704;
         } else {
          $$0336$lcssa$i = $$2338$i;$$0340$lcssa$i = $$2342$i;$$0396$lcssa$i = $$2398$i;$$1389$lcssa$i = $$2390$i;$$3$lcssa$i = $$3$be$i;$$3394$lcssa$i = $$4395$i;$396 = $703;$397 = $705;$399 = $704;$400 = $706;
          label = 161;
          break L203;
         }
        }
        $366 = ($$3394500$i|0)!=(0);
        $$0336455$i = $$0336503$i;$$0340459$i = $$0340502$i;$$0396465$i = $$0396499$i;$707 = $368;$708 = $369;$709 = $701;$710 = $702;$711 = $366;
        label = 169;
       } else {
        $$0336$lcssa$i = 0;$$0340$lcssa$i = 0;$$0396$lcssa$i = 0;$$1389$lcssa$i = $$0388$i;$$3$lcssa$i = $$2$i117;$$3394$lcssa$i = $$2393$i;$396 = $697;$397 = 0;$399 = $698;$400 = 0;
        label = 161;
       }
      } while(0);
      do {
       if ((label|0) == 161) {
        $395 = ($$1389$lcssa$i|0)==(0);
        $398 = $395 ? $397 : $396;
        $401 = $395 ? $400 : $399;
        $402 = ($$3394$lcssa$i|0)!=(0);
        $403 = $$3$lcssa$i | 32;
        $404 = ($403|0)==(101);
        $or$cond410$i = $402 & $404;
        if (!($or$cond410$i)) {
         $419 = ($$3$lcssa$i|0)>(-1);
         if ($419) {
          $$0336455$i = $$0336$lcssa$i;$$0340459$i = $$0340$lcssa$i;$$0396465$i = $$0396$lcssa$i;$707 = $397;$708 = $400;$709 = $398;$710 = $401;$711 = $402;
          label = 169;
          break;
         } else {
          $$0336454$i = $$0336$lcssa$i;$$0340458$i = $$0340$lcssa$i;$$0396464$i = $$0396$lcssa$i;$712 = $397;$713 = $400;$714 = $402;$715 = $398;$716 = $401;
          label = 171;
          break;
         }
        }
        $405 = (_scanexp($0,$2)|0);
        $406 = tempRet0;
        $407 = ($405|0)==(0);
        $408 = ($406|0)==(-2147483648);
        $409 = $407 & $408;
        if ($409) {
         $410 = ($2|0)==(0);
         if ($410) {
          ___shlim($0,0);
          $$1$i = 0.0;
          break;
         }
         $411 = HEAP32[$5>>2]|0;
         $412 = ($411|0)==(0|0);
         if ($412) {
          $415 = 0;$416 = 0;
         } else {
          $413 = HEAP32[$4>>2]|0;
          $414 = ((($413)) + -1|0);
          HEAP32[$4>>2] = $414;
          $415 = 0;$416 = 0;
         }
        } else {
         $415 = $405;$416 = $406;
        }
        $417 = (_i64Add(($415|0),($416|0),($398|0),($401|0))|0);
        $418 = tempRet0;
        $$0336453$i = $$0336$lcssa$i;$$0340457$i = $$0340$lcssa$i;$$0396463$i = $$0396$lcssa$i;$429 = $417;$431 = $397;$432 = $418;$434 = $400;
        label = 173;
       }
      } while(0);
      if ((label|0) == 169) {
       $420 = HEAP32[$5>>2]|0;
       $421 = ($420|0)==(0|0);
       if ($421) {
        $$0336454$i = $$0336455$i;$$0340458$i = $$0340459$i;$$0396464$i = $$0396465$i;$712 = $707;$713 = $708;$714 = $711;$715 = $709;$716 = $710;
        label = 171;
       } else {
        $422 = HEAP32[$4>>2]|0;
        $423 = ((($422)) + -1|0);
        HEAP32[$4>>2] = $423;
        if ($711) {
         $$0336453$i = $$0336455$i;$$0340457$i = $$0340459$i;$$0396463$i = $$0396465$i;$429 = $709;$431 = $707;$432 = $710;$434 = $708;
         label = 173;
        } else {
         label = 172;
        }
       }
      }
      if ((label|0) == 171) {
       if ($714) {
        $$0336453$i = $$0336454$i;$$0340457$i = $$0340458$i;$$0396463$i = $$0396464$i;$429 = $715;$431 = $712;$432 = $716;$434 = $713;
        label = 173;
       } else {
        label = 172;
       }
      }
      do {
       if ((label|0) == 172) {
        $424 = (___errno_location()|0);
        HEAP32[$424>>2] = 22;
        ___shlim($0,0);
        $$1$i = 0.0;
       }
       else if ((label|0) == 173) {
        $425 = HEAP32[$3>>2]|0;
        $426 = ($425|0)==(0);
        if ($426) {
         $427 = (+($$0113|0));
         $428 = $427 * 0.0;
         $$1$i = $428;
         break;
        }
        $430 = ($429|0)==($431|0);
        $433 = ($432|0)==($434|0);
        $435 = $430 & $433;
        $436 = ($434|0)<(0);
        $437 = ($431>>>0)<(10);
        $438 = ($434|0)==(0);
        $439 = $438 & $437;
        $440 = $436 | $439;
        $or$cond$i118 = $440 & $435;
        if ($or$cond$i118) {
         $441 = ($$0106$ph>>>0)>(30);
         $442 = $425 >>> $$0106$ph;
         $443 = ($442|0)==(0);
         $or$cond412$i = $441 | $443;
         if ($or$cond412$i) {
          $444 = (+($$0113|0));
          $445 = (+($425>>>0));
          $446 = $444 * $445;
          $$1$i = $446;
          break;
         }
        }
        $447 = (($$0105$ph|0) / -2)&-1;
        $448 = ($447|0)<(0);
        $449 = $448 << 31 >> 31;
        $450 = ($432|0)>($449|0);
        $451 = ($429>>>0)>($447>>>0);
        $452 = ($432|0)==($449|0);
        $453 = $452 & $451;
        $454 = $450 | $453;
        if ($454) {
         $455 = (___errno_location()|0);
         HEAP32[$455>>2] = 34;
         $456 = (+($$0113|0));
         $457 = $456 * 1.7976931348623157E+308;
         $458 = $457 * 1.7976931348623157E+308;
         $$1$i = $458;
         break;
        }
        $459 = (($$0105$ph) + -106)|0;
        $460 = ($459|0)<(0);
        $461 = $460 << 31 >> 31;
        $462 = ($432|0)<($461|0);
        $463 = ($429>>>0)<($459>>>0);
        $464 = ($432|0)==($461|0);
        $465 = $464 & $463;
        $466 = $462 | $465;
        if ($466) {
         $467 = (___errno_location()|0);
         HEAP32[$467>>2] = 34;
         $468 = (+($$0113|0));
         $469 = $468 * 2.2250738585072014E-308;
         $470 = $469 * 2.2250738585072014E-308;
         $$1$i = $470;
         break;
        }
        $471 = ($$0336453$i|0)==(0);
        if ($471) {
         $$3343$i = $$0340457$i;
        } else {
         $472 = ($$0336453$i|0)<(9);
         if ($472) {
          $473 = (($3) + ($$0340457$i<<2)|0);
          $$promoted$i = HEAP32[$473>>2]|0;
          $$3339493$i = $$0336453$i;$475 = $$promoted$i;
          while(1) {
           $474 = ($475*10)|0;
           $476 = (($$3339493$i) + 1)|0;
           $exitcond541$i = ($476|0)==(9);
           if ($exitcond541$i) {
            break;
           } else {
            $$3339493$i = $476;$475 = $474;
           }
          }
          HEAP32[$473>>2] = $474;
         }
         $477 = (($$0340457$i) + 1)|0;
         $$3343$i = $477;
        }
        $478 = ($$0396463$i|0)<(9);
        if ($478) {
         $479 = ($$0396463$i|0)<=($429|0);
         $480 = ($429|0)<(18);
         $or$cond3$i = $479 & $480;
         if ($or$cond3$i) {
          $481 = ($429|0)==(9);
          if ($481) {
           $482 = (+($$0113|0));
           $483 = HEAP32[$3>>2]|0;
           $484 = (+($483>>>0));
           $485 = $482 * $484;
           $$1$i = $485;
           break;
          }
          $486 = ($429|0)<(9);
          if ($486) {
           $487 = (+($$0113|0));
           $488 = HEAP32[$3>>2]|0;
           $489 = (+($488>>>0));
           $490 = $487 * $489;
           $491 = (8 - ($429))|0;
           $492 = (692 + ($491<<2)|0);
           $493 = HEAP32[$492>>2]|0;
           $494 = (+($493|0));
           $495 = $490 / $494;
           $$1$i = $495;
           break;
          }
          $$neg432$i = Math_imul($429, -3)|0;
          $$neg433$i = (($$0106$ph) + 27)|0;
          $496 = (($$neg433$i) + ($$neg432$i))|0;
          $497 = ($496|0)>(30);
          $$pre$i119 = HEAP32[$3>>2]|0;
          $498 = $$pre$i119 >>> $496;
          $499 = ($498|0)==(0);
          $or$cond571$i = $497 | $499;
          if ($or$cond571$i) {
           $500 = (+($$0113|0));
           $501 = (+($$pre$i119>>>0));
           $502 = $500 * $501;
           $503 = (($429) + -10)|0;
           $504 = (692 + ($503<<2)|0);
           $505 = HEAP32[$504>>2]|0;
           $506 = (+($505|0));
           $507 = $502 * $506;
           $$1$i = $507;
           break;
          }
         }
        }
        $508 = (($429|0) % 9)&-1;
        $509 = ($508|0)==(0);
        if ($509) {
         $$0375$ph$i = 0;$$1368$ph438$i = $$3343$i;$$2347$ph439$i = 0;$$2382$ph437$i = $429;
        } else {
         $510 = ($429|0)>(-1);
         $511 = (($508) + 9)|0;
         $512 = $510 ? $508 : $511;
         $513 = (8 - ($512))|0;
         $514 = (692 + ($513<<2)|0);
         $515 = HEAP32[$514>>2]|0;
         $516 = ($$3343$i|0)==(0);
         if ($516) {
          $$0345$lcssa545$i = 0;$$0367$i = 0;$$0380$lcssa544$i = $429;
         } else {
          $517 = (1000000000 / ($515|0))&-1;
          $$0335486$i = 0;$$0345484$i = 0;$$0380483$i = $429;$$4344485$i = 0;
          while(1) {
           $518 = (($3) + ($$4344485$i<<2)|0);
           $519 = HEAP32[$518>>2]|0;
           $520 = (($519>>>0) % ($515>>>0))&-1;
           $521 = (($519>>>0) / ($515>>>0))&-1;
           $522 = (($521) + ($$0335486$i))|0;
           HEAP32[$518>>2] = $522;
           $523 = Math_imul($520, $517)|0;
           $524 = ($$4344485$i|0)==($$0345484$i|0);
           $525 = ($522|0)==(0);
           $or$cond413$i = $524 & $525;
           $526 = (($$0345484$i) + 1)|0;
           $527 = $526 & 127;
           $528 = (($$0380483$i) + -9)|0;
           $$$0380$i = $or$cond413$i ? $528 : $$0380483$i;
           $$$0345$i = $or$cond413$i ? $527 : $$0345484$i;
           $529 = (($$4344485$i) + 1)|0;
           $530 = ($529|0)==($$3343$i|0);
           if ($530) {
            break;
           } else {
            $$0335486$i = $523;$$0345484$i = $$$0345$i;$$0380483$i = $$$0380$i;$$4344485$i = $529;
           }
          }
          $531 = ($523|0)==(0);
          if ($531) {
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $$3343$i;$$0380$lcssa544$i = $$$0380$i;
          } else {
           $532 = (($$3343$i) + 1)|0;
           $533 = (($3) + ($$3343$i<<2)|0);
           HEAP32[$533>>2] = $523;
           $$0345$lcssa545$i = $$$0345$i;$$0367$i = $532;$$0380$lcssa544$i = $$$0380$i;
          }
         }
         $534 = (9 - ($512))|0;
         $535 = (($534) + ($$0380$lcssa544$i))|0;
         $$0375$ph$i = 0;$$1368$ph438$i = $$0367$i;$$2347$ph439$i = $$0345$lcssa545$i;$$2382$ph437$i = $535;
        }
        L284: while(1) {
         $536 = ($$2382$ph437$i|0)<(18);
         $537 = ($$2382$ph437$i|0)==(18);
         $538 = (($3) + ($$2347$ph439$i<<2)|0);
         $$0375$i = $$0375$ph$i;$$1368$i = $$1368$ph438$i;
         while(1) {
          if (!($536)) {
           if (!($537)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = $$2382$ph437$i;$$6373$ph$i = $$1368$i;
            break L284;
           }
           $539 = HEAP32[$538>>2]|0;
           $540 = ($539>>>0)<(9007199);
           if (!($540)) {
            $$1376$ph$i = $$0375$i;$$4349$ph$i = $$2347$ph439$i;$$4384$ph435$i = 18;$$6373$ph$i = $$1368$i;
            break L284;
           }
          }
          $541 = (($$1368$i) + 127)|0;
          $$0329$i = 0;$$2369$i = $$1368$i;$$5$in$i = $541;
          while(1) {
           $$5$i121 = $$5$in$i & 127;
           $542 = (($3) + ($$5$i121<<2)|0);
           $543 = HEAP32[$542>>2]|0;
           $544 = (_bitshift64Shl(($543|0),0,29)|0);
           $545 = tempRet0;
           $546 = (_i64Add(($544|0),($545|0),($$0329$i|0),0)|0);
           $547 = tempRet0;
           $548 = ($547>>>0)>(0);
           $549 = ($546>>>0)>(1000000000);
           $550 = ($547|0)==(0);
           $551 = $550 & $549;
           $552 = $548 | $551;
           if ($552) {
            $553 = (___udivdi3(($546|0),($547|0),1000000000,0)|0);
            $554 = tempRet0;
            $555 = (___uremdi3(($546|0),($547|0),1000000000,0)|0);
            $556 = tempRet0;
            $$1330$i = $553;$$sink$off0$i = $555;
           } else {
            $$1330$i = 0;$$sink$off0$i = $546;
           }
           HEAP32[$542>>2] = $$sink$off0$i;
           $557 = (($$2369$i) + 127)|0;
           $558 = $557 & 127;
           $559 = ($$5$i121|0)!=($558|0);
           $560 = ($$5$i121|0)==($$2347$ph439$i|0);
           $or$cond414$i = $559 | $560;
           $561 = ($$sink$off0$i|0)==(0);
           $$5$$2369$i = $561 ? $$5$i121 : $$2369$i;
           $$3370$i = $or$cond414$i ? $$2369$i : $$5$$2369$i;
           $562 = (($$5$i121) + -1)|0;
           if ($560) {
            break;
           } else {
            $$0329$i = $$1330$i;$$2369$i = $$3370$i;$$5$in$i = $562;
           }
          }
          $563 = (($$0375$i) + -29)|0;
          $564 = ($$1330$i|0)==(0);
          if ($564) {
           $$0375$i = $563;$$1368$i = $$3370$i;
          } else {
           break;
          }
         }
         $565 = (($$2382$ph437$i) + 9)|0;
         $566 = (($$2347$ph439$i) + 127)|0;
         $567 = $566 & 127;
         $568 = ($567|0)==($$3370$i|0);
         $569 = (($$3370$i) + 127)|0;
         $570 = $569 & 127;
         $571 = (($$3370$i) + 126)|0;
         $572 = $571 & 127;
         $573 = (($3) + ($572<<2)|0);
         if ($568) {
          $574 = (($3) + ($570<<2)|0);
          $575 = HEAP32[$574>>2]|0;
          $576 = HEAP32[$573>>2]|0;
          $577 = $576 | $575;
          HEAP32[$573>>2] = $577;
          $$4371$i = $570;
         } else {
          $$4371$i = $$3370$i;
         }
         $578 = (($3) + ($567<<2)|0);
         HEAP32[$578>>2] = $$1330$i;
         $$0375$ph$i = $563;$$1368$ph438$i = $$4371$i;$$2347$ph439$i = $567;$$2382$ph437$i = $565;
        }
        L302: while(1) {
         $615 = (($$6373$ph$i) + 1)|0;
         $612 = $615 & 127;
         $616 = (($$6373$ph$i) + 127)|0;
         $617 = $616 & 127;
         $618 = (($3) + ($617<<2)|0);
         $$1376$ph549$i = $$1376$ph$i;$$4349$ph550$i = $$4349$ph$i;$$4384$ph$i = $$4384$ph435$i;
         while(1) {
          $591 = ($$4384$ph$i|0)==(18);
          $619 = ($$4384$ph$i|0)>(27);
          $$416$i = $619 ? 9 : 1;
          $$1376$i = $$1376$ph549$i;$$4349$i = $$4349$ph550$i;
          while(1) {
           $$0331476$i = 0;
           while(1) {
            $579 = (($$0331476$i) + ($$4349$i))|0;
            $580 = $579 & 127;
            $581 = ($580|0)==($$6373$ph$i|0);
            if ($581) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $582 = (($3) + ($580<<2)|0);
            $583 = HEAP32[$582>>2]|0;
            $584 = (724 + ($$0331476$i<<2)|0);
            $585 = HEAP32[$584>>2]|0;
            $586 = ($583>>>0)<($585>>>0);
            if ($586) {
             $$1332$i = 2;
             label = 220;
             break;
            }
            $587 = ($583>>>0)>($585>>>0);
            if ($587) {
             break;
            }
            $588 = (($$0331476$i) + 1)|0;
            $589 = ($588|0)<(2);
            if ($589) {
             $$0331476$i = $588;
            } else {
             $$1332$i = $588;
             label = 220;
             break;
            }
           }
           if ((label|0) == 220) {
            label = 0;
            $590 = ($$1332$i|0)==(2);
            $or$cond6$i122 = $591 & $590;
            if ($or$cond6$i122) {
             $$0360474$i = 0.0;$$4475$i = 0;$$9473$i = $$6373$ph$i;
             break L302;
            }
           }
           $592 = (($$1376$i) + ($$416$i))|0;
           $593 = ($$4349$i|0)==($$6373$ph$i|0);
           if ($593) {
            $$1376$i = $592;$$4349$i = $$6373$ph$i;
           } else {
            break;
           }
          }
          $594 = 1 << $$416$i;
          $595 = (($594) + -1)|0;
          $596 = 1000000000 >>> $$416$i;
          $$0327480$i = 0;$$5350478$i = $$4349$i;$$5385477$i = $$4384$ph$i;$$6479$i = $$4349$i;
          while(1) {
           $597 = (($3) + ($$6479$i<<2)|0);
           $598 = HEAP32[$597>>2]|0;
           $599 = $598 & $595;
           $600 = $598 >>> $$416$i;
           $601 = (($600) + ($$0327480$i))|0;
           HEAP32[$597>>2] = $601;
           $602 = Math_imul($599, $596)|0;
           $603 = ($$6479$i|0)==($$5350478$i|0);
           $604 = ($601|0)==(0);
           $or$cond417$i = $603 & $604;
           $605 = (($$5350478$i) + 1)|0;
           $606 = $605 & 127;
           $607 = (($$5385477$i) + -9)|0;
           $$$5385$i = $or$cond417$i ? $607 : $$5385477$i;
           $$$5350$i = $or$cond417$i ? $606 : $$5350478$i;
           $608 = (($$6479$i) + 1)|0;
           $609 = $608 & 127;
           $610 = ($609|0)==($$6373$ph$i|0);
           if ($610) {
            break;
           } else {
            $$0327480$i = $602;$$5350478$i = $$$5350$i;$$5385477$i = $$$5385$i;$$6479$i = $609;
           }
          }
          $611 = ($602|0)==(0);
          if ($611) {
           $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
           continue;
          }
          $613 = ($612|0)==($$$5350$i|0);
          if (!($613)) {
           break;
          }
          $620 = HEAP32[$618>>2]|0;
          $621 = $620 | 1;
          HEAP32[$618>>2] = $621;
          $$1376$ph549$i = $592;$$4349$ph550$i = $$$5350$i;$$4384$ph$i = $$$5385$i;
         }
         $614 = (($3) + ($$6373$ph$i<<2)|0);
         HEAP32[$614>>2] = $602;
         $$1376$ph$i = $592;$$4349$ph$i = $$$5350$i;$$4384$ph435$i = $$$5385$i;$$6373$ph$i = $612;
        }
        while(1) {
         $622 = (($$4475$i) + ($$4349$i))|0;
         $623 = $622 & 127;
         $624 = ($623|0)==($$9473$i|0);
         $625 = (($$9473$i) + 1)|0;
         $626 = $625 & 127;
         if ($624) {
          $627 = (($626) + -1)|0;
          $628 = (($3) + ($627<<2)|0);
          HEAP32[$628>>2] = 0;
          $$10$i = $626;
         } else {
          $$10$i = $$9473$i;
         }
         $629 = $$0360474$i * 1.0E+9;
         $630 = (($3) + ($623<<2)|0);
         $631 = HEAP32[$630>>2]|0;
         $632 = (+($631>>>0));
         $633 = $629 + $632;
         $634 = (($$4475$i) + 1)|0;
         $exitcond$i = ($634|0)==(2);
         if ($exitcond$i) {
          break;
         } else {
          $$0360474$i = $633;$$4475$i = $634;$$9473$i = $$10$i;
         }
        }
        $635 = (+($$0113|0));
        $636 = $635 * $633;
        $637 = (($$1376$i) + 53)|0;
        $638 = (($637) - ($$0105$ph))|0;
        $639 = ($638|0)<($$0106$ph|0);
        $640 = ($638|0)<(0);
        $$$i = $640 ? 0 : $638;
        $$0364$i = $639&1;
        $$0328$i = $639 ? $$$i : $$0106$ph;
        $641 = ($$0328$i|0)<(53);
        if ($641) {
         $642 = (105 - ($$0328$i))|0;
         $643 = (+_scalbn(1.0,$642));
         $644 = (+_copysignl($643,$636));
         $645 = (53 - ($$0328$i))|0;
         $646 = (+_scalbn(1.0,$645));
         $647 = (+_fmodl($636,$646));
         $648 = $636 - $647;
         $649 = $644 + $648;
         $$0355$i = $644;$$0356$i = $647;$$1361$i = $649;
        } else {
         $$0355$i = 0.0;$$0356$i = 0.0;$$1361$i = $636;
        }
        $650 = (($$4349$i) + 2)|0;
        $651 = $650 & 127;
        $652 = ($651|0)==($$10$i|0);
        do {
         if ($652) {
          $$3359$i = $$0356$i;
         } else {
          $653 = (($3) + ($651<<2)|0);
          $654 = HEAP32[$653>>2]|0;
          $655 = ($654>>>0)<(500000000);
          do {
           if ($655) {
            $656 = ($654|0)==(0);
            if ($656) {
             $657 = (($$4349$i) + 3)|0;
             $658 = $657 & 127;
             $659 = ($658|0)==($$10$i|0);
             if ($659) {
              $$1357$i = $$0356$i;
              break;
             }
            }
            $660 = $635 * 0.25;
            $661 = $660 + $$0356$i;
            $$1357$i = $661;
           } else {
            $662 = ($654|0)==(500000000);
            if (!($662)) {
             $663 = $635 * 0.75;
             $664 = $663 + $$0356$i;
             $$1357$i = $664;
             break;
            }
            $665 = (($$4349$i) + 3)|0;
            $666 = $665 & 127;
            $667 = ($666|0)==($$10$i|0);
            if ($667) {
             $668 = $635 * 0.5;
             $669 = $668 + $$0356$i;
             $$1357$i = $669;
             break;
            } else {
             $670 = $635 * 0.75;
             $671 = $670 + $$0356$i;
             $$1357$i = $671;
             break;
            }
           }
          } while(0);
          $672 = (53 - ($$0328$i))|0;
          $673 = ($672|0)>(1);
          if ($673) {
           $674 = (+_fmodl($$1357$i,1.0));
           $675 = $674 != 0.0;
           if ($675) {
            $$3359$i = $$1357$i;
            break;
           }
           $676 = $$1357$i + 1.0;
           $$3359$i = $676;
          } else {
           $$3359$i = $$1357$i;
          }
         }
        } while(0);
        $677 = $$1361$i + $$3359$i;
        $678 = $677 - $$0355$i;
        $679 = $637 & 2147483647;
        $680 = (-2 - ($sum$i))|0;
        $681 = ($679|0)>($680|0);
        do {
         if ($681) {
          $682 = (+Math_abs((+$678)));
          $683 = !($682 >= 9007199254740992.0);
          if ($683) {
           $$2362$i = $678;$$2366$i = $$0364$i;$$3378$i = $$1376$i;
          } else {
           $684 = (($$1376$i) + 1)|0;
           $685 = ($$0328$i|0)==($638|0);
           $or$cond418$i = $639 & $685;
           $$1365$i = $or$cond418$i ? 0 : $$0364$i;
           $686 = $678 * 0.5;
           $$2362$i = $686;$$2366$i = $$1365$i;$$3378$i = $684;
          }
          $687 = (($$3378$i) + 50)|0;
          $688 = ($687|0)>($333|0);
          if (!($688)) {
           $689 = ($$2366$i|0)!=(0);
           $690 = $$3359$i != 0.0;
           $or$cond9$i = $690 & $689;
           if (!($or$cond9$i)) {
            $$3363$i = $$2362$i;$$4379$i = $$3378$i;
            break;
           }
          }
          $691 = (___errno_location()|0);
          HEAP32[$691>>2] = 34;
          $$3363$i = $$2362$i;$$4379$i = $$3378$i;
         } else {
          $$3363$i = $678;$$4379$i = $$1376$i;
         }
        } while(0);
        $692 = (+_scalbnl($$3363$i,$$4379$i));
        $$1$i = $692;
       }
      } while(0);
      $$0114 = $$1$i;
      break L4;
      break;
     }
     default: {
      $113 = HEAP32[$5>>2]|0;
      $114 = ($113|0)==(0|0);
      if (!($114)) {
       $115 = HEAP32[$4>>2]|0;
       $116 = ((($115)) + -1|0);
       HEAP32[$4>>2] = $116;
      }
      $117 = (___errno_location()|0);
      HEAP32[$117>>2] = 22;
      ___shlim($0,0);
      $$0114 = 0.0;
      break L4;
     }
     }
    }
    }
   } while(0);
   if ((label|0) == 23) {
    $45 = HEAP32[$5>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = HEAP32[$4>>2]|0;
     $48 = ((($47)) + -1|0);
     HEAP32[$4>>2] = $48;
    }
    $49 = ($2|0)!=(0);
    $50 = ($$0107$lcssa>>>0)>(3);
    $or$cond9 = $49 & $50;
    if ($or$cond9) {
     $$1108 = $$0107$lcssa;
     while(1) {
      if (!($46)) {
       $51 = HEAP32[$4>>2]|0;
       $52 = ((($51)) + -1|0);
       HEAP32[$4>>2] = $52;
      }
      $53 = (($$1108) + -1)|0;
      $$old8 = ($53>>>0)>(3);
      if ($$old8) {
       $$1108 = $53;
      } else {
       break;
      }
     }
    }
   }
   $54 = (+($$0113|0));
   $55 = $54 * inf;
   $56 = $55;
   $$0114 = $56;
  }
 } while(0);
 STACKTOP = sp;return (+$$0114);
}
function _scanexp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$04860 = 0, $$049 = 0, $$1$be = 0, $$159 = 0, $$2$be = 0, $$2$lcssa = 0, $$254 = 0, $$3$be = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ((($0)) + 100|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($3>>>0)<($5>>>0);
 if ($6) {
  $7 = ((($3)) + 1|0);
  HEAP32[$2>>2] = $7;
  $8 = HEAP8[$3>>0]|0;
  $9 = $8&255;
  $11 = $9;
 } else {
  $10 = (___shgetc($0)|0);
  $11 = $10;
 }
 $12 = ($11|0)==(45);
 switch ($11|0) {
 case 43: case 45:  {
  $13 = $12&1;
  $14 = HEAP32[$2>>2]|0;
  $15 = HEAP32[$4>>2]|0;
  $16 = ($14>>>0)<($15>>>0);
  if ($16) {
   $17 = ((($14)) + 1|0);
   HEAP32[$2>>2] = $17;
   $18 = HEAP8[$14>>0]|0;
   $19 = $18&255;
   $22 = $19;
  } else {
   $20 = (___shgetc($0)|0);
   $22 = $20;
  }
  $21 = (($22) + -48)|0;
  $23 = ($21>>>0)>(9);
  $24 = ($1|0)!=(0);
  $or$cond3 = $24 & $23;
  if ($or$cond3) {
   $25 = HEAP32[$4>>2]|0;
   $26 = ($25|0)==(0|0);
   if ($26) {
    $$0 = $13;$$049 = $22;
   } else {
    $27 = HEAP32[$2>>2]|0;
    $28 = ((($27)) + -1|0);
    HEAP32[$2>>2] = $28;
    $$0 = $13;$$049 = $22;
   }
  } else {
   $$0 = $13;$$049 = $22;
  }
  break;
 }
 default: {
  $$0 = 0;$$049 = $11;
 }
 }
 $29 = (($$049) + -48)|0;
 $30 = ($29>>>0)>(9);
 if ($30) {
  $31 = HEAP32[$4>>2]|0;
  $32 = ($31|0)==(0|0);
  if ($32) {
   $100 = -2147483648;$101 = 0;
  } else {
   $33 = HEAP32[$2>>2]|0;
   $34 = ((($33)) + -1|0);
   HEAP32[$2>>2] = $34;
   $100 = -2147483648;$101 = 0;
  }
 } else {
  $$04860 = 0;$$159 = $$049;
  while(1) {
   $35 = ($$04860*10)|0;
   $36 = (($$159) + -48)|0;
   $37 = (($36) + ($35))|0;
   $38 = HEAP32[$2>>2]|0;
   $39 = HEAP32[$4>>2]|0;
   $40 = ($38>>>0)<($39>>>0);
   if ($40) {
    $41 = ((($38)) + 1|0);
    HEAP32[$2>>2] = $41;
    $42 = HEAP8[$38>>0]|0;
    $43 = $42&255;
    $$1$be = $43;
   } else {
    $44 = (___shgetc($0)|0);
    $$1$be = $44;
   }
   $45 = (($$1$be) + -48)|0;
   $46 = ($45>>>0)<(10);
   $47 = ($37|0)<(214748364);
   $48 = $46 & $47;
   if ($48) {
    $$04860 = $37;$$159 = $$1$be;
   } else {
    break;
   }
  }
  $49 = ($37|0)<(0);
  $50 = $49 << 31 >> 31;
  $51 = (($$1$be) + -48)|0;
  $52 = ($51>>>0)<(10);
  if ($52) {
   $$254 = $$1$be;$55 = $37;$56 = $50;
   while(1) {
    $57 = (___muldi3(($55|0),($56|0),10,0)|0);
    $58 = tempRet0;
    $59 = ($$254|0)<(0);
    $60 = $59 << 31 >> 31;
    $61 = (_i64Add(($$254|0),($60|0),-48,-1)|0);
    $62 = tempRet0;
    $63 = (_i64Add(($61|0),($62|0),($57|0),($58|0))|0);
    $64 = tempRet0;
    $65 = HEAP32[$2>>2]|0;
    $66 = HEAP32[$4>>2]|0;
    $67 = ($65>>>0)<($66>>>0);
    if ($67) {
     $68 = ((($65)) + 1|0);
     HEAP32[$2>>2] = $68;
     $69 = HEAP8[$65>>0]|0;
     $70 = $69&255;
     $$2$be = $70;
    } else {
     $71 = (___shgetc($0)|0);
     $$2$be = $71;
    }
    $72 = (($$2$be) + -48)|0;
    $73 = ($72>>>0)<(10);
    $74 = ($64|0)<(21474836);
    $75 = ($63>>>0)<(2061584302);
    $76 = ($64|0)==(21474836);
    $77 = $76 & $75;
    $78 = $74 | $77;
    $79 = $73 & $78;
    if ($79) {
     $$254 = $$2$be;$55 = $63;$56 = $64;
    } else {
     $$2$lcssa = $$2$be;$94 = $63;$95 = $64;
     break;
    }
   }
  } else {
   $$2$lcssa = $$1$be;$94 = $37;$95 = $50;
  }
  $53 = (($$2$lcssa) + -48)|0;
  $54 = ($53>>>0)<(10);
  if ($54) {
   while(1) {
    $80 = HEAP32[$2>>2]|0;
    $81 = HEAP32[$4>>2]|0;
    $82 = ($80>>>0)<($81>>>0);
    if ($82) {
     $83 = ((($80)) + 1|0);
     HEAP32[$2>>2] = $83;
     $84 = HEAP8[$80>>0]|0;
     $85 = $84&255;
     $$3$be = $85;
    } else {
     $86 = (___shgetc($0)|0);
     $$3$be = $86;
    }
    $87 = (($$3$be) + -48)|0;
    $88 = ($87>>>0)<(10);
    if (!($88)) {
     break;
    }
   }
  }
  $89 = HEAP32[$4>>2]|0;
  $90 = ($89|0)==(0|0);
  if (!($90)) {
   $91 = HEAP32[$2>>2]|0;
   $92 = ((($91)) + -1|0);
   HEAP32[$2>>2] = $92;
  }
  $93 = ($$0|0)!=(0);
  $96 = (_i64Subtract(0,0,($94|0),($95|0))|0);
  $97 = tempRet0;
  $98 = $93 ? $96 : $94;
  $99 = $93 ? $97 : $95;
  $100 = $99;$101 = $98;
 }
 tempRet0 = ($100);
 return ($101|0);
}
function _scalbn($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0.0, $$020 = 0, $$1 = 0, $10 = 0.0, $11 = 0, $12 = 0, $13 = 0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0.0, $2 = 0, $20 = 0.0, $3 = 0.0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0.0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)>(1023);
 if ($2) {
  $3 = $0 * 8.9884656743115795E+307;
  $4 = (($1) + -1023)|0;
  $5 = ($4|0)>(1023);
  $6 = (($1) + -2046)|0;
  if ($5) {
   $7 = $3 * 8.9884656743115795E+307;
   $8 = ($6|0)>(1023);
   $$ = $8 ? 1023 : $6;
   $$0 = $7;$$020 = $$;
  } else {
   $$0 = $3;$$020 = $4;
  }
 } else {
  $9 = ($1|0)<(-1022);
  if ($9) {
   $10 = $0 * 2.2250738585072014E-308;
   $11 = (($1) + 1022)|0;
   $12 = ($11|0)<(-1022);
   $13 = (($1) + 2044)|0;
   if ($12) {
    $14 = $10 * 2.2250738585072014E-308;
    $15 = ($13|0)<(-1022);
    $$1 = $15 ? -1022 : $13;
    $$0 = $14;$$020 = $$1;
   } else {
    $$0 = $10;$$020 = $11;
   }
  } else {
   $$0 = $0;$$020 = $1;
  }
 }
 $16 = (($$020) + 1023)|0;
 $17 = (_bitshift64Shl(($16|0),0,52)|0);
 $18 = tempRet0;
 HEAP32[tempDoublePtr>>2] = $17;HEAP32[tempDoublePtr+4>>2] = $18;$19 = +HEAPF64[tempDoublePtr>>3];
 $20 = $$0 * $19;
 return (+$20);
}
function _copysignl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_copysign($0,$1));
 return (+$2);
}
function _scalbnl($0,$1) {
 $0 = +$0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_scalbn($0,$1));
 return (+$2);
}
function _fmodl($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_fmod($0,$1));
 return (+$2);
}
function _fmod($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $$ = 0.0, $$070 = 0.0, $$071$lcssa = 0, $$07195 = 0, $$073$lcssa = 0, $$073101 = 0, $$172$ph = 0, $$174 = 0, $$275$lcssa = 0, $$27587 = 0, $$376$lcssa = 0, $$37684 = 0, $$lcssa = 0, $10 = 0, $100 = 0, $101 = 0.0, $102 = 0, $103 = 0, $104 = 0, $105 = 0;
 var $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0;
 var $124 = 0, $125 = 0, $126 = 0, $127 = 0.0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0;
 var $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0.0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0.0, $26 = 0.0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0.0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = (_bitshift64Lshr(($2|0),($3|0),52)|0);
 $7 = tempRet0;
 $8 = $6 & 2047;
 $9 = (_bitshift64Lshr(($4|0),($5|0),52)|0);
 $10 = tempRet0;
 $11 = $9 & 2047;
 $12 = $3 & -2147483648;
 $13 = (_bitshift64Shl(($4|0),($5|0),1)|0);
 $14 = tempRet0;
 $15 = ($13|0)==(0);
 $16 = ($14|0)==(0);
 $17 = $15 & $16;
 L1: do {
  if ($17) {
   label = 3;
  } else {
   $18 = $5 & 2147483647;
   $19 = ($18>>>0)>(2146435072);
   $20 = ($4>>>0)>(0);
   $21 = ($18|0)==(2146435072);
   $22 = $21 & $20;
   $23 = $19 | $22;
   $24 = ($8|0)==(2047);
   $or$cond = $23 | $24;
   if ($or$cond) {
    label = 3;
   } else {
    $27 = (_bitshift64Shl(($2|0),($3|0),1)|0);
    $28 = tempRet0;
    $29 = ($28>>>0)>($14>>>0);
    $30 = ($27>>>0)>($13>>>0);
    $31 = ($28|0)==($14|0);
    $32 = $31 & $30;
    $33 = $29 | $32;
    if (!($33)) {
     $34 = ($27|0)==($13|0);
     $35 = ($28|0)==($14|0);
     $36 = $34 & $35;
     $37 = $0 * 0.0;
     $$ = $36 ? $37 : $0;
     return (+$$);
    }
    $38 = ($8|0)==(0);
    if ($38) {
     $39 = (_bitshift64Shl(($2|0),($3|0),12)|0);
     $40 = tempRet0;
     $41 = ($40|0)>(-1);
     $42 = ($39>>>0)>(4294967295);
     $43 = ($40|0)==(-1);
     $44 = $43 & $42;
     $45 = $41 | $44;
     if ($45) {
      $$073101 = 0;$47 = $39;$48 = $40;
      while(1) {
       $46 = (($$073101) + -1)|0;
       $49 = (_bitshift64Shl(($47|0),($48|0),1)|0);
       $50 = tempRet0;
       $51 = ($50|0)>(-1);
       $52 = ($49>>>0)>(4294967295);
       $53 = ($50|0)==(-1);
       $54 = $53 & $52;
       $55 = $51 | $54;
       if ($55) {
        $$073101 = $46;$47 = $49;$48 = $50;
       } else {
        $$073$lcssa = $46;
        break;
       }
      }
     } else {
      $$073$lcssa = 0;
     }
     $56 = (1 - ($$073$lcssa))|0;
     $57 = (_bitshift64Shl(($2|0),($3|0),($56|0))|0);
     $58 = tempRet0;
     $$174 = $$073$lcssa;$85 = $57;$86 = $58;
    } else {
     $59 = $3 & 1048575;
     $60 = $59 | 1048576;
     $$174 = $8;$85 = $2;$86 = $60;
    }
    $61 = ($11|0)==(0);
    if ($61) {
     $62 = (_bitshift64Shl(($4|0),($5|0),12)|0);
     $63 = tempRet0;
     $64 = ($63|0)>(-1);
     $65 = ($62>>>0)>(4294967295);
     $66 = ($63|0)==(-1);
     $67 = $66 & $65;
     $68 = $64 | $67;
     if ($68) {
      $$07195 = 0;$70 = $62;$71 = $63;
      while(1) {
       $69 = (($$07195) + -1)|0;
       $72 = (_bitshift64Shl(($70|0),($71|0),1)|0);
       $73 = tempRet0;
       $74 = ($73|0)>(-1);
       $75 = ($72>>>0)>(4294967295);
       $76 = ($73|0)==(-1);
       $77 = $76 & $75;
       $78 = $74 | $77;
       if ($78) {
        $$07195 = $69;$70 = $72;$71 = $73;
       } else {
        $$071$lcssa = $69;
        break;
       }
      }
     } else {
      $$071$lcssa = 0;
     }
     $79 = (1 - ($$071$lcssa))|0;
     $80 = (_bitshift64Shl(($4|0),($5|0),($79|0))|0);
     $81 = tempRet0;
     $$172$ph = $$071$lcssa;$87 = $80;$88 = $81;
    } else {
     $82 = $5 & 1048575;
     $83 = $82 | 1048576;
     $$172$ph = $11;$87 = $4;$88 = $83;
    }
    $84 = ($$174|0)>($$172$ph|0);
    $89 = (_i64Subtract(($85|0),($86|0),($87|0),($88|0))|0);
    $90 = tempRet0;
    $91 = ($90|0)>(-1);
    $92 = ($89>>>0)>(4294967295);
    $93 = ($90|0)==(-1);
    $94 = $93 & $92;
    $95 = $91 | $94;
    L23: do {
     if ($84) {
      $$27587 = $$174;$154 = $95;$155 = $85;$156 = $86;$96 = $89;$98 = $90;
      while(1) {
       if ($154) {
        $97 = ($96|0)==(0);
        $99 = ($98|0)==(0);
        $100 = $97 & $99;
        if ($100) {
         break;
        } else {
         $102 = $96;$103 = $98;
        }
       } else {
        $102 = $155;$103 = $156;
       }
       $104 = (_bitshift64Shl(($102|0),($103|0),1)|0);
       $105 = tempRet0;
       $106 = (($$27587) + -1)|0;
       $107 = ($106|0)>($$172$ph|0);
       $108 = (_i64Subtract(($104|0),($105|0),($87|0),($88|0))|0);
       $109 = tempRet0;
       $110 = ($109|0)>(-1);
       $111 = ($108>>>0)>(4294967295);
       $112 = ($109|0)==(-1);
       $113 = $112 & $111;
       $114 = $110 | $113;
       if ($107) {
        $$27587 = $106;$154 = $114;$155 = $104;$156 = $105;$96 = $108;$98 = $109;
       } else {
        $$275$lcssa = $106;$$lcssa = $114;$115 = $108;$117 = $109;$157 = $104;$158 = $105;
        break L23;
       }
      }
      $101 = $0 * 0.0;
      $$070 = $101;
      break L1;
     } else {
      $$275$lcssa = $$174;$$lcssa = $95;$115 = $89;$117 = $90;$157 = $85;$158 = $86;
     }
    } while(0);
    if ($$lcssa) {
     $116 = ($115|0)==(0);
     $118 = ($117|0)==(0);
     $119 = $116 & $118;
     if ($119) {
      $127 = $0 * 0.0;
      $$070 = $127;
      break;
     } else {
      $120 = $117;$122 = $115;
     }
    } else {
     $120 = $158;$122 = $157;
    }
    $121 = ($120>>>0)<(1048576);
    $123 = ($122>>>0)<(0);
    $124 = ($120|0)==(1048576);
    $125 = $124 & $123;
    $126 = $121 | $125;
    if ($126) {
     $$37684 = $$275$lcssa;$128 = $122;$129 = $120;
     while(1) {
      $130 = (_bitshift64Shl(($128|0),($129|0),1)|0);
      $131 = tempRet0;
      $132 = (($$37684) + -1)|0;
      $133 = ($131>>>0)<(1048576);
      $134 = ($130>>>0)<(0);
      $135 = ($131|0)==(1048576);
      $136 = $135 & $134;
      $137 = $133 | $136;
      if ($137) {
       $$37684 = $132;$128 = $130;$129 = $131;
      } else {
       $$376$lcssa = $132;$139 = $130;$140 = $131;
       break;
      }
     }
    } else {
     $$376$lcssa = $$275$lcssa;$139 = $122;$140 = $120;
    }
    $138 = ($$376$lcssa|0)>(0);
    if ($138) {
     $141 = (_i64Add(($139|0),($140|0),0,-1048576)|0);
     $142 = tempRet0;
     $143 = (_bitshift64Shl(($$376$lcssa|0),0,52)|0);
     $144 = tempRet0;
     $145 = $141 | $143;
     $146 = $142 | $144;
     $151 = $146;$153 = $145;
    } else {
     $147 = (1 - ($$376$lcssa))|0;
     $148 = (_bitshift64Lshr(($139|0),($140|0),($147|0))|0);
     $149 = tempRet0;
     $151 = $149;$153 = $148;
    }
    $150 = $151 | $12;
    HEAP32[tempDoublePtr>>2] = $153;HEAP32[tempDoublePtr+4>>2] = $150;$152 = +HEAPF64[tempDoublePtr>>3];
    $$070 = $152;
   }
  }
 } while(0);
 if ((label|0) == 3) {
  $25 = $0 * $1;
  $26 = $25 / $25;
  $$070 = $26;
 }
 return (+$$070);
}
function _copysign($0,$1) {
 $0 = +$0;
 $1 = +$1;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 HEAPF64[tempDoublePtr>>3] = $0;$2 = HEAP32[tempDoublePtr>>2]|0;
 $3 = HEAP32[tempDoublePtr+4>>2]|0;
 HEAPF64[tempDoublePtr>>3] = $1;$4 = HEAP32[tempDoublePtr>>2]|0;
 $5 = HEAP32[tempDoublePtr+4>>2]|0;
 $6 = $3 & 2147483647;
 $7 = $5 & -2147483648;
 $8 = $7 | $6;
 HEAP32[tempDoublePtr>>2] = $2;HEAP32[tempDoublePtr+4>>2] = $8;$9 = +HEAPF64[tempDoublePtr>>3];
 return (+$9);
}
function _fprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vfprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function ___fseeko_unlocked($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(1);
 if ($3) {
  $4 = ((($0)) + 8|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ((($0)) + 4|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($1) - ($5))|0;
  $9 = (($8) + ($7))|0;
  $$019 = $9;
 } else {
  $$019 = $1;
 }
 $10 = ((($0)) + 20|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = ((($0)) + 28|0);
 $13 = HEAP32[$12>>2]|0;
 $14 = ($11>>>0)>($13>>>0);
 if ($14) {
  $15 = ((($0)) + 36|0);
  $16 = HEAP32[$15>>2]|0;
  (FUNCTION_TABLE_iiii[$16 & 7]($0,0,0)|0);
  $17 = HEAP32[$10>>2]|0;
  $18 = ($17|0)==(0|0);
  if ($18) {
   $$0 = -1;
  } else {
   label = 5;
  }
 } else {
  label = 5;
 }
 if ((label|0) == 5) {
  $19 = ((($0)) + 16|0);
  HEAP32[$19>>2] = 0;
  HEAP32[$12>>2] = 0;
  HEAP32[$10>>2] = 0;
  $20 = ((($0)) + 40|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = (FUNCTION_TABLE_iiii[$21 & 7]($0,$$019,$2)|0);
  $23 = ($22|0)<(0);
  if ($23) {
   $$0 = -1;
  } else {
   $24 = ((($0)) + 8|0);
   HEAP32[$24>>2] = 0;
   $25 = ((($0)) + 4|0);
   HEAP32[$25>>2] = 0;
   $26 = HEAP32[$0>>2]|0;
   $27 = $26 & -17;
   HEAP32[$0>>2] = $27;
   $$0 = 0;
  }
 }
 return ($$0|0);
}
function _strstr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$0$in16$i = 0, $$014$lcssa$i = 0, $$01415$i = 0, $$016$lcssa$i = 0, $$01618$i = 0, $$0165$i = 0, $$0167$i = 0, $$0168$i = 0, $$0169$i = 0, $$0174$ph$ph$lcssa217$i = 0, $$0174$ph$ph$lcssa217329$i = 0, $$0174$ph$ph256$i = 0, $$0178244$i = 0, $$018$lcssa$i = 0, $$0182$ph197$ph255$i = 0, $$0182$ph197250$i = 0, $$0182$ph262$i = 0, $$01820$i = 0, $$0184$ph$lcssa$i = 0;
 var $$0184$ph$lcssa328$i = 0, $$0184$ph261$i = 0, $$0186265$i = 0, $$019$i = 0, $$021$i = 0, $$1175$$0174$i = 0, $$1175$ph$ph$lcssa208$i = 0, $$1175$ph$ph235$i = 0, $$1179224$i = 0, $$1183$ph193$ph234$i = 0, $$1183$ph193229$i = 0, $$1183$ph241$i = 0, $$1185$$0184$$i = 0, $$1185$$0184$i = 0, $$1185$ph$lcssa$i = 0, $$1185$ph240$i = 0, $$2180$i = 0, $$3$i = 0, $$3172$i = 0, $$3177$i = 0;
 var $$3181223$i = 0, $$4$i = 0, $$lcssa$i = 0, $$lcssa$i23 = 0, $$pr$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0;
 var $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0;
 var $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0;
 var $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0;
 var $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0;
 var $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0;
 var $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0;
 var $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0;
 var $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $div$i = 0, $div187$i = 0, $or$cond$i = 0, $or$cond$i18 = 0, $or$cond$i21 = 0, $or$cond188$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 1056|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(1056|0);
 $2 = sp + 1024|0;
 $3 = sp;
 $4 = HEAP8[$1>>0]|0;
 $5 = ($4<<24>>24)==(0);
 do {
  if ($5) {
   $$0 = $0;
  } else {
   $6 = $4 << 24 >> 24;
   $7 = (_strchr($0,$6)|0);
   $8 = ($7|0)==(0|0);
   if ($8) {
    $$0 = 0;
   } else {
    $9 = ((($1)) + 1|0);
    $10 = HEAP8[$9>>0]|0;
    $11 = ($10<<24>>24)==(0);
    if ($11) {
     $$0 = $7;
    } else {
     $12 = ((($7)) + 1|0);
     $13 = HEAP8[$12>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0 = 0;
     } else {
      $15 = ((($1)) + 2|0);
      $16 = HEAP8[$15>>0]|0;
      $17 = ($16<<24>>24)==(0);
      if ($17) {
       $18 = $4&255;
       $19 = $18 << 8;
       $20 = $10&255;
       $21 = $20 | $19;
       $22 = HEAP8[$7>>0]|0;
       $23 = $22&255;
       $24 = $23 << 8;
       $25 = $13&255;
       $26 = $24 | $25;
       $$0$in16$i = $26;$$01415$i = $12;$237 = $13;
       while(1) {
        $27 = $$0$in16$i & 65535;
        $28 = ($27|0)==($21|0);
        if ($28) {
         $$014$lcssa$i = $$01415$i;$35 = $237;
         break;
        }
        $29 = $27 << 8;
        $30 = ((($$01415$i)) + 1|0);
        $31 = HEAP8[$30>>0]|0;
        $32 = $31&255;
        $33 = $32 | $29;
        $34 = ($31<<24>>24)==(0);
        if ($34) {
         $$014$lcssa$i = $30;$35 = 0;
         break;
        } else {
         $$0$in16$i = $33;$$01415$i = $30;$237 = $31;
        }
       }
       $36 = ($35<<24>>24)!=(0);
       $37 = ((($$014$lcssa$i)) + -1|0);
       $38 = $36 ? $37 : 0;
       $$0 = $38;
       break;
      }
      $39 = ((($7)) + 2|0);
      $40 = HEAP8[$39>>0]|0;
      $41 = ($40<<24>>24)==(0);
      if ($41) {
       $$0 = 0;
      } else {
       $42 = ((($1)) + 3|0);
       $43 = HEAP8[$42>>0]|0;
       $44 = ($43<<24>>24)==(0);
       if ($44) {
        $45 = $4&255;
        $46 = $45 << 24;
        $47 = $10&255;
        $48 = $47 << 16;
        $49 = $48 | $46;
        $50 = $16&255;
        $51 = $50 << 8;
        $52 = $49 | $51;
        $53 = HEAP8[$7>>0]|0;
        $54 = $53&255;
        $55 = $54 << 24;
        $56 = $13&255;
        $57 = $56 << 16;
        $58 = $40&255;
        $59 = $58 << 8;
        $60 = $59 | $57;
        $61 = $60 | $55;
        $62 = ($61|0)==($52|0);
        if ($62) {
         $$016$lcssa$i = $39;$$lcssa$i = $40;
        } else {
         $$01618$i = $39;$$019$i = $61;
         while(1) {
          $63 = ((($$01618$i)) + 1|0);
          $64 = HEAP8[$63>>0]|0;
          $65 = $64&255;
          $66 = $65 | $$019$i;
          $67 = $66 << 8;
          $68 = ($64<<24>>24)==(0);
          $69 = ($67|0)==($52|0);
          $or$cond$i18 = $68 | $69;
          if ($or$cond$i18) {
           $$016$lcssa$i = $63;$$lcssa$i = $64;
           break;
          } else {
           $$01618$i = $63;$$019$i = $67;
          }
         }
        }
        $70 = ($$lcssa$i<<24>>24)!=(0);
        $71 = ((($$016$lcssa$i)) + -2|0);
        $72 = $70 ? $71 : 0;
        $$0 = $72;
        break;
       }
       $73 = ((($7)) + 3|0);
       $74 = HEAP8[$73>>0]|0;
       $75 = ($74<<24>>24)==(0);
       if ($75) {
        $$0 = 0;
       } else {
        $76 = ((($1)) + 4|0);
        $77 = HEAP8[$76>>0]|0;
        $78 = ($77<<24>>24)==(0);
        if ($78) {
         $79 = $4&255;
         $80 = $79 << 24;
         $81 = $10&255;
         $82 = $81 << 16;
         $83 = $82 | $80;
         $84 = $16&255;
         $85 = $84 << 8;
         $86 = $83 | $85;
         $87 = $43&255;
         $88 = $86 | $87;
         $89 = HEAP8[$7>>0]|0;
         $90 = $89&255;
         $91 = $90 << 24;
         $92 = $13&255;
         $93 = $92 << 16;
         $94 = $40&255;
         $95 = $94 << 8;
         $96 = $74&255;
         $97 = $95 | $93;
         $98 = $97 | $96;
         $99 = $98 | $91;
         $100 = ($99|0)==($88|0);
         if ($100) {
          $$018$lcssa$i = $73;$$lcssa$i23 = $74;
         } else {
          $$01820$i = $73;$$021$i = $99;
          while(1) {
           $101 = $$021$i << 8;
           $102 = ((($$01820$i)) + 1|0);
           $103 = HEAP8[$102>>0]|0;
           $104 = $103&255;
           $105 = $104 | $101;
           $106 = ($103<<24>>24)==(0);
           $107 = ($105|0)==($88|0);
           $or$cond$i21 = $106 | $107;
           if ($or$cond$i21) {
            $$018$lcssa$i = $102;$$lcssa$i23 = $103;
            break;
           } else {
            $$01820$i = $102;$$021$i = $105;
           }
          }
         }
         $108 = ($$lcssa$i23<<24>>24)!=(0);
         $109 = ((($$018$lcssa$i)) + -3|0);
         $110 = $108 ? $109 : 0;
         $$0 = $110;
         break;
        }
        ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
        $$0186265$i = 0;$115 = $4;
        while(1) {
         $111 = (($7) + ($$0186265$i)|0);
         $112 = HEAP8[$111>>0]|0;
         $113 = ($112<<24>>24)==(0);
         if ($113) {
          $$3$i = 0;
          break;
         }
         $114 = $115 & 31;
         $116 = $114&255;
         $117 = 1 << $116;
         $div187$i = ($115&255) >>> 5;
         $118 = $div187$i&255;
         $119 = (($2) + ($118<<2)|0);
         $120 = HEAP32[$119>>2]|0;
         $121 = $120 | $117;
         HEAP32[$119>>2] = $121;
         $122 = (($$0186265$i) + 1)|0;
         $123 = $115&255;
         $124 = (($3) + ($123<<2)|0);
         HEAP32[$124>>2] = $122;
         $125 = (($1) + ($122)|0);
         $126 = HEAP8[$125>>0]|0;
         $127 = ($126<<24>>24)==(0);
         if ($127) {
          label = 23;
          break;
         } else {
          $$0186265$i = $122;$115 = $126;
         }
        }
        L32: do {
         if ((label|0) == 23) {
          $128 = ($122>>>0)>(1);
          L34: do {
           if ($128) {
            $$0182$ph262$i = 0;$$0184$ph261$i = -1;$238 = 1;
            L35: while(1) {
             $$0174$ph$ph256$i = 1;$$0182$ph197$ph255$i = $$0182$ph262$i;$239 = $238;
             while(1) {
              $$0182$ph197250$i = $$0182$ph197$ph255$i;$240 = $239;
              L39: while(1) {
               $$0178244$i = 1;$130 = $240;
               while(1) {
                $135 = (($$0178244$i) + ($$0184$ph261$i))|0;
                $136 = (($1) + ($135)|0);
                $137 = HEAP8[$136>>0]|0;
                $138 = (($1) + ($130)|0);
                $139 = HEAP8[$138>>0]|0;
                $140 = ($137<<24>>24)==($139<<24>>24);
                if (!($140)) {
                 break L39;
                }
                $141 = ($$0178244$i|0)==($$0174$ph$ph256$i|0);
                $133 = (($$0178244$i) + 1)|0;
                if ($141) {
                 break;
                }
                $132 = (($133) + ($$0182$ph197250$i))|0;
                $134 = ($132>>>0)<($122>>>0);
                if ($134) {
                 $$0178244$i = $133;$130 = $132;
                } else {
                 $$0174$ph$ph$lcssa217$i = $$0174$ph$ph256$i;$$0184$ph$lcssa$i = $$0184$ph261$i;
                 break L35;
                }
               }
               $142 = (($$0182$ph197250$i) + ($$0174$ph$ph256$i))|0;
               $143 = (($142) + 1)|0;
               $144 = ($143>>>0)<($122>>>0);
               if ($144) {
                $$0182$ph197250$i = $142;$240 = $143;
               } else {
                $$0174$ph$ph$lcssa217$i = $$0174$ph$ph256$i;$$0184$ph$lcssa$i = $$0184$ph261$i;
                break L35;
               }
              }
              $145 = ($137&255)>($139&255);
              $146 = (($130) - ($$0184$ph261$i))|0;
              if (!($145)) {
               break;
              }
              $129 = (($130) + 1)|0;
              $131 = ($129>>>0)<($122>>>0);
              if ($131) {
               $$0174$ph$ph256$i = $146;$$0182$ph197$ph255$i = $130;$239 = $129;
              } else {
               $$0174$ph$ph$lcssa217$i = $146;$$0184$ph$lcssa$i = $$0184$ph261$i;
               break L35;
              }
             }
             $147 = (($$0182$ph197250$i) + 1)|0;
             $148 = (($$0182$ph197250$i) + 2)|0;
             $149 = ($148>>>0)<($122>>>0);
             if ($149) {
              $$0182$ph262$i = $147;$$0184$ph261$i = $$0182$ph197250$i;$238 = $148;
             } else {
              $$0174$ph$ph$lcssa217$i = 1;$$0184$ph$lcssa$i = $$0182$ph197250$i;
              break;
             }
            }
            $$1183$ph241$i = 0;$$1185$ph240$i = -1;$241 = 1;
            while(1) {
             $$1175$ph$ph235$i = 1;$$1183$ph193$ph234$i = $$1183$ph241$i;$243 = $241;
             while(1) {
              $$1183$ph193229$i = $$1183$ph193$ph234$i;$242 = $243;
              L54: while(1) {
               $$1179224$i = 1;$157 = $242;
               while(1) {
                $153 = (($$1179224$i) + ($$1185$ph240$i))|0;
                $154 = (($1) + ($153)|0);
                $155 = HEAP8[$154>>0]|0;
                $156 = (($1) + ($157)|0);
                $158 = HEAP8[$156>>0]|0;
                $159 = ($155<<24>>24)==($158<<24>>24);
                if (!($159)) {
                 break L54;
                }
                $160 = ($$1179224$i|0)==($$1175$ph$ph235$i|0);
                $151 = (($$1179224$i) + 1)|0;
                if ($160) {
                 break;
                }
                $150 = (($151) + ($$1183$ph193229$i))|0;
                $152 = ($150>>>0)<($122>>>0);
                if ($152) {
                 $$1179224$i = $151;$157 = $150;
                } else {
                 $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $$1175$ph$ph235$i;$$1185$ph$lcssa$i = $$1185$ph240$i;
                 break L34;
                }
               }
               $161 = (($$1183$ph193229$i) + ($$1175$ph$ph235$i))|0;
               $162 = (($161) + 1)|0;
               $163 = ($162>>>0)<($122>>>0);
               if ($163) {
                $$1183$ph193229$i = $161;$242 = $162;
               } else {
                $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $$1175$ph$ph235$i;$$1185$ph$lcssa$i = $$1185$ph240$i;
                break L34;
               }
              }
              $164 = ($155&255)<($158&255);
              $165 = (($157) - ($$1185$ph240$i))|0;
              if (!($164)) {
               break;
              }
              $169 = (($157) + 1)|0;
              $170 = ($169>>>0)<($122>>>0);
              if ($170) {
               $$1175$ph$ph235$i = $165;$$1183$ph193$ph234$i = $157;$243 = $169;
              } else {
               $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = $165;$$1185$ph$lcssa$i = $$1185$ph240$i;
               break L34;
              }
             }
             $166 = (($$1183$ph193229$i) + 1)|0;
             $167 = (($$1183$ph193229$i) + 2)|0;
             $168 = ($167>>>0)<($122>>>0);
             if ($168) {
              $$1183$ph241$i = $166;$$1185$ph240$i = $$1183$ph193229$i;$241 = $167;
             } else {
              $$0174$ph$ph$lcssa217329$i = $$0174$ph$ph$lcssa217$i;$$0184$ph$lcssa328$i = $$0184$ph$lcssa$i;$$1175$ph$ph$lcssa208$i = 1;$$1185$ph$lcssa$i = $$1183$ph193229$i;
              break;
             }
            }
           } else {
            $$0174$ph$ph$lcssa217329$i = 1;$$0184$ph$lcssa328$i = -1;$$1175$ph$ph$lcssa208$i = 1;$$1185$ph$lcssa$i = -1;
           }
          } while(0);
          $171 = (($$1185$ph$lcssa$i) + 1)|0;
          $172 = (($$0184$ph$lcssa328$i) + 1)|0;
          $173 = ($171>>>0)>($172>>>0);
          $$1175$$0174$i = $173 ? $$1175$ph$ph$lcssa208$i : $$0174$ph$ph$lcssa217329$i;
          $$1185$$0184$i = $173 ? $$1185$ph$lcssa$i : $$0184$ph$lcssa328$i;
          $174 = (($1) + ($$1175$$0174$i)|0);
          $175 = (($$1185$$0184$i) + 1)|0;
          $176 = (_memcmp($1,$174,$175)|0);
          $177 = ($176|0)==(0);
          if ($177) {
           $182 = (($122) - ($$1175$$0174$i))|0;
           $$0167$i = $182;$$3177$i = $$1175$$0174$i;
          } else {
           $178 = (($122) - ($$1185$$0184$i))|0;
           $179 = (($178) + -1)|0;
           $180 = ($$1185$$0184$i>>>0)>($179>>>0);
           $$1185$$0184$$i = $180 ? $$1185$$0184$i : $179;
           $181 = (($$1185$$0184$$i) + 1)|0;
           $$0167$i = 0;$$3177$i = $181;
          }
          $183 = $122 | 63;
          $184 = ($$0167$i|0)!=(0);
          $185 = (($122) - ($$3177$i))|0;
          $$0165$i = $7;$$0168$i = 0;$$0169$i = $7;
          L69: while(1) {
           $186 = $$0169$i;
           $187 = $$0165$i;
           $188 = (($186) - ($187))|0;
           $189 = ($188>>>0)<($122>>>0);
           do {
            if ($189) {
             $190 = (_memchr($$0169$i,0,$183)|0);
             $191 = ($190|0)==(0|0);
             if ($191) {
              $195 = (($$0169$i) + ($183)|0);
              $$3172$i = $195;
              break;
             } else {
              $192 = $190;
              $193 = (($192) - ($187))|0;
              $194 = ($193>>>0)<($122>>>0);
              if ($194) {
               $$3$i = 0;
               break L32;
              } else {
               $$3172$i = $190;
               break;
              }
             }
            } else {
             $$3172$i = $$0169$i;
            }
           } while(0);
           $196 = (($$0165$i) + ($$0186265$i)|0);
           $197 = HEAP8[$196>>0]|0;
           $div$i = ($197&255) >>> 5;
           $198 = $div$i&255;
           $199 = (($2) + ($198<<2)|0);
           $200 = HEAP32[$199>>2]|0;
           $201 = $197 & 31;
           $202 = $201&255;
           $203 = 1 << $202;
           $204 = $203 & $200;
           $205 = ($204|0)==(0);
           if ($205) {
            $214 = (($$0165$i) + ($122)|0);
            $$0165$i = $214;$$0168$i = 0;$$0169$i = $$3172$i;
            continue;
           }
           $206 = $197&255;
           $207 = (($3) + ($206<<2)|0);
           $208 = HEAP32[$207>>2]|0;
           $209 = (($122) - ($208))|0;
           $210 = ($209|0)==(0);
           if (!($210)) {
            $211 = ($$0168$i|0)!=(0);
            $or$cond$i = $184 & $211;
            $212 = ($209>>>0)<($$3177$i>>>0);
            $or$cond188$i = $or$cond$i & $212;
            $$2180$i = $or$cond188$i ? $185 : $209;
            $213 = (($$0165$i) + ($$2180$i)|0);
            $$0165$i = $213;$$0168$i = 0;$$0169$i = $$3172$i;
            continue;
           }
           $215 = ($175>>>0)>($$0168$i>>>0);
           $216 = $215 ? $175 : $$0168$i;
           $217 = (($1) + ($216)|0);
           $218 = HEAP8[$217>>0]|0;
           $219 = ($218<<24>>24)==(0);
           L83: do {
            if ($219) {
             $$4$i = $175;
            } else {
             $$3181223$i = $216;$$pr$i = $218;
             while(1) {
              $220 = (($$0165$i) + ($$3181223$i)|0);
              $221 = HEAP8[$220>>0]|0;
              $222 = ($$pr$i<<24>>24)==($221<<24>>24);
              if (!($222)) {
               break;
              }
              $223 = (($$3181223$i) + 1)|0;
              $224 = (($1) + ($223)|0);
              $225 = HEAP8[$224>>0]|0;
              $226 = ($225<<24>>24)==(0);
              if ($226) {
               $$4$i = $175;
               break L83;
              } else {
               $$3181223$i = $223;$$pr$i = $225;
              }
             }
             $227 = (($$3181223$i) - ($$1185$$0184$i))|0;
             $228 = (($$0165$i) + ($227)|0);
             $$0165$i = $228;$$0168$i = 0;$$0169$i = $$3172$i;
             continue L69;
            }
           } while(0);
           while(1) {
            $229 = ($$4$i>>>0)>($$0168$i>>>0);
            if (!($229)) {
             $$3$i = $$0165$i;
             break L32;
            }
            $230 = (($$4$i) + -1)|0;
            $231 = (($1) + ($230)|0);
            $232 = HEAP8[$231>>0]|0;
            $233 = (($$0165$i) + ($230)|0);
            $234 = HEAP8[$233>>0]|0;
            $235 = ($232<<24>>24)==($234<<24>>24);
            if ($235) {
             $$4$i = $230;
            } else {
             break;
            }
           }
           $236 = (($$0165$i) + ($$3177$i)|0);
           $$0165$i = $236;$$0168$i = $$0167$i;$$0169$i = $$3172$i;
          }
         }
        } while(0);
        $$0 = $$3$i;
       }
      }
     }
    }
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _memcmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$01318 = 0, $$01417 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 L1: do {
  if ($3) {
   $14 = 0;
  } else {
   $$01318 = $0;$$01417 = $2;$$019 = $1;
   while(1) {
    $4 = HEAP8[$$01318>>0]|0;
    $5 = HEAP8[$$019>>0]|0;
    $6 = ($4<<24>>24)==($5<<24>>24);
    if (!($6)) {
     break;
    }
    $7 = (($$01417) + -1)|0;
    $8 = ((($$01318)) + 1|0);
    $9 = ((($$019)) + 1|0);
    $10 = ($7|0)==(0);
    if ($10) {
     $14 = 0;
     break L1;
    } else {
     $$01318 = $8;$$01417 = $7;$$019 = $9;
    }
   }
   $11 = $4&255;
   $12 = $5&255;
   $13 = (($11) - ($12))|0;
   $14 = $13;
  }
 } while(0);
 return ($14|0);
}
function _socket($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$018 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_buffer11 = 0, $vararg_buffer2 = 0, $vararg_buffer6 = 0, $vararg_buffer9 = 0, $vararg_ptr1 = 0, $vararg_ptr5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(96|0);
 $vararg_buffer11 = sp + 32|0;
 $vararg_buffer9 = sp + 24|0;
 $vararg_buffer6 = sp + 16|0;
 $vararg_buffer2 = sp + 8|0;
 $vararg_buffer = sp;
 $3 = sp + 64|0;
 $4 = sp + 40|0;
 HEAP32[$3>>2] = $0;
 $5 = ((($3)) + 4|0);
 HEAP32[$5>>2] = $1;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 1;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $10 = (___syscall102(102,($vararg_buffer|0))|0);
 $11 = (___syscall_ret($10)|0);
 $12 = ($11|0)<(0);
 L1: do {
  if ($12) {
   $13 = (___errno_location()|0);
   $14 = HEAP32[$13>>2]|0;
   switch ($14|0) {
   case 93: case 22:  {
    break;
   }
   default: {
    $$018 = $11;
    break L1;
   }
   }
   $15 = $1 & 526336;
   $16 = ($15|0)==(0);
   if ($16) {
    $$018 = $11;
   } else {
    HEAP32[$4>>2] = $0;
    $17 = ((($4)) + 4|0);
    $18 = $1 & -526337;
    HEAP32[$17>>2] = $18;
    $19 = ((($4)) + 8|0);
    HEAP32[$19>>2] = $2;
    $20 = ((($4)) + 12|0);
    HEAP32[$20>>2] = 0;
    $21 = ((($4)) + 16|0);
    HEAP32[$21>>2] = 0;
    $22 = ((($4)) + 20|0);
    HEAP32[$22>>2] = 0;
    HEAP32[$vararg_buffer2>>2] = 1;
    $vararg_ptr5 = ((($vararg_buffer2)) + 4|0);
    HEAP32[$vararg_ptr5>>2] = $4;
    $23 = (___syscall102(102,($vararg_buffer2|0))|0);
    $24 = (___syscall_ret($23)|0);
    $25 = ($24|0)<(0);
    if ($25) {
     $$018 = $24;
    } else {
     $26 = $1 & 524288;
     $27 = ($26|0)==(0);
     if (!($27)) {
      HEAP32[$vararg_buffer6>>2] = 1;
      (_fcntl($24,2,$vararg_buffer6)|0);
     }
     $28 = $1 & 2048;
     $29 = ($28|0)==(0);
     if ($29) {
      $$018 = $24;
     } else {
      $30 = (_fcntl($24,3,$vararg_buffer9)|0);
      $31 = $30 | 2048;
      HEAP32[$vararg_buffer11>>2] = $31;
      (_fcntl($24,4,$vararg_buffer11)|0);
      $$018 = $24;
     }
    }
   }
  } else {
   $$018 = $11;
  }
 } while(0);
 STACKTOP = sp;return ($$018|0);
}
function _connect($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 3;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $10 = (___syscall102(102,($vararg_buffer|0))|0);
 $11 = (___syscall_ret($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _send($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_sendto($0,$1,$2,$3,0,0)|0);
 return ($4|0);
}
function _sendto($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = sp + 8|0;
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($6)) + 12|0);
 HEAP32[$10>>2] = $3;
 $11 = ((($6)) + 16|0);
 $12 = $4;
 HEAP32[$11>>2] = $12;
 $13 = ((($6)) + 20|0);
 HEAP32[$13>>2] = $5;
 HEAP32[$vararg_buffer>>2] = 11;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $14 = (___syscall102(102,($vararg_buffer|0))|0);
 $15 = (___syscall_ret($14)|0);
 STACKTOP = sp;return ($15|0);
}
function _strcmp($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$011 = 0, $$0710 = 0, $$lcssa = 0, $$lcssa8 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $2 = HEAP8[$0>>0]|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($2<<24>>24)!=($3<<24>>24);
 $5 = ($2<<24>>24)==(0);
 $or$cond9 = $5 | $4;
 if ($or$cond9) {
  $$lcssa = $3;$$lcssa8 = $2;
 } else {
  $$011 = $1;$$0710 = $0;
  while(1) {
   $6 = ((($$0710)) + 1|0);
   $7 = ((($$011)) + 1|0);
   $8 = HEAP8[$6>>0]|0;
   $9 = HEAP8[$7>>0]|0;
   $10 = ($8<<24>>24)!=($9<<24>>24);
   $11 = ($8<<24>>24)==(0);
   $or$cond = $11 | $10;
   if ($or$cond) {
    $$lcssa = $9;$$lcssa8 = $8;
    break;
   } else {
    $$011 = $7;$$0710 = $6;
   }
  }
 }
 $12 = $$lcssa8&255;
 $13 = $$lcssa&255;
 $14 = (($12) - ($13))|0;
 return ($14|0);
}
function _strncmp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$01823 = 0, $$01925 = 0, $$01925$in = 0, $$020 = 0, $$024 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = ($2|0)==(0);
 if ($3) {
  $$020 = 0;
 } else {
  $4 = HEAP8[$0>>0]|0;
  $5 = ($4<<24>>24)==(0);
  L3: do {
   if ($5) {
    $$0$lcssa = $1;$16 = 0;
   } else {
    $$01823 = $0;$$01925$in = $2;$$024 = $1;$9 = $4;
    while(1) {
     $$01925 = (($$01925$in) + -1)|0;
     $6 = HEAP8[$$024>>0]|0;
     $7 = ($6<<24>>24)!=(0);
     $8 = ($$01925|0)!=(0);
     $or$cond = $8 & $7;
     $10 = ($9<<24>>24)==($6<<24>>24);
     $or$cond21 = $10 & $or$cond;
     if (!($or$cond21)) {
      $$0$lcssa = $$024;$16 = $9;
      break L3;
     }
     $11 = ((($$01823)) + 1|0);
     $12 = ((($$024)) + 1|0);
     $13 = HEAP8[$11>>0]|0;
     $14 = ($13<<24>>24)==(0);
     if ($14) {
      $$0$lcssa = $12;$16 = 0;
      break;
     } else {
      $$01823 = $11;$$01925$in = $$01925;$$024 = $12;$9 = $13;
     }
    }
   }
  } while(0);
  $15 = $16&255;
  $17 = HEAP8[$$0$lcssa>>0]|0;
  $18 = $17&255;
  $19 = (($15) - ($18))|0;
  $$020 = $19;
 }
 return ($$020|0);
}
function _qsort($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$0 = 0, $$0$i = 0, $$0$i88 = 0, $$067$lcssa = 0, $$06793 = 0, $$068$i$i = 0, $$068$i8$i = 0, $$068$lcssa = 0, $$06892 = 0, $$07$i10$i$ph = 0, $$09$i$i = 0, $$09$i7$i = 0, $$1 = 0, $$169$be = 0, $$169108 = 0, $$2$be = 0, $$2109 = 0, $$pre = 0, $$pre$i = 0, $$pre$i71 = 0;
 var $$pre$i73 = 0, $$pre$i75 = 0, $$pre11$i = 0, $$pre11$i72 = 0, $$pre11$i74 = 0, $$pre11$i76 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $15$phi = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond106 = 0, $or$cond97 = 0, $or$cond97107 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 208|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(208|0);
 $4 = sp + 8|0;
 $5 = sp;
 $6 = Math_imul($2, $1)|0;
 $7 = $5;
 $8 = $7;
 HEAP32[$8>>2] = 1;
 $9 = (($7) + 4)|0;
 $10 = $9;
 HEAP32[$10>>2] = 0;
 $11 = ($6|0)==(0);
 if (!($11)) {
  $12 = (0 - ($2))|0;
  $13 = ((($4)) + 4|0);
  HEAP32[$13>>2] = $2;
  HEAP32[$4>>2] = $2;
  $$0 = 2;$15 = $2;$17 = $2;
  while(1) {
   $14 = (($15) + ($2))|0;
   $16 = (($14) + ($17))|0;
   $18 = (($4) + ($$0<<2)|0);
   HEAP32[$18>>2] = $16;
   $19 = ($16>>>0)<($6>>>0);
   $20 = (($$0) + 1)|0;
   if ($19) {
    $15$phi = $17;$$0 = $20;$17 = $16;$15 = $15$phi;
   } else {
    break;
   }
  }
  $21 = (($0) + ($6)|0);
  $22 = (($21) + ($12)|0);
  $23 = ($22>>>0)>($0>>>0);
  $24 = ((($5)) + 4|0);
  if ($23) {
   $25 = $22;
   $$06793 = 1;$$06892 = $0;$27 = 1;
   while(1) {
    $26 = $27 & 3;
    $28 = ($26|0)==(3);
    do {
     if ($28) {
      _sift($$06892,$2,$3,$$06793,$4);
      $$pre$i = HEAP32[$5>>2]|0;
      $$pre11$i = HEAP32[$24>>2]|0;
      $29 = $$pre$i >>> 2;
      $30 = $$pre11$i << 30;
      $31 = $30 | $29;
      HEAP32[$5>>2] = $31;
      $32 = $$pre11$i >>> 2;
      HEAP32[$24>>2] = $32;
      $33 = (($$06793) + 2)|0;
      $$1 = $33;$56 = $31;
     } else {
      $34 = (($$06793) + -1)|0;
      $35 = (($4) + ($34<<2)|0);
      $36 = HEAP32[$35>>2]|0;
      $37 = $$06892;
      $38 = (($25) - ($37))|0;
      $39 = ($36>>>0)<($38>>>0);
      if ($39) {
       _sift($$06892,$2,$3,$$06793,$4);
      } else {
       _trinkle($$06892,$2,$3,$5,$$06793,0,$4);
      }
      $40 = ($$06793|0)==(1);
      if ($40) {
       $$pre$i71 = HEAP32[$24>>2]|0;
       $$pre11$i72 = HEAP32[$5>>2]|0;
       $41 = $$pre$i71 << 1;
       $42 = $$pre11$i72 >>> 31;
       $43 = $42 | $41;
       HEAP32[$24>>2] = $43;
       $44 = $$pre11$i72 << 1;
       HEAP32[$5>>2] = $44;
       $$1 = 0;$56 = $44;
       break;
      }
      $45 = ($34>>>0)>(31);
      if ($45) {
       $46 = (($$06793) + -33)|0;
       $47 = HEAP32[$5>>2]|0;
       HEAP32[$24>>2] = $47;
       HEAP32[$5>>2] = 0;
       $$0$i = $46;$49 = $47;$52 = 0;
      } else {
       $$pre$i75 = HEAP32[$24>>2]|0;
       $$pre11$i76 = HEAP32[$5>>2]|0;
       $$0$i = $34;$49 = $$pre$i75;$52 = $$pre11$i76;
      }
      $48 = $49 << $$0$i;
      $50 = (32 - ($$0$i))|0;
      $51 = $52 >>> $50;
      $53 = $51 | $48;
      HEAP32[$24>>2] = $53;
      $54 = $52 << $$0$i;
      HEAP32[$5>>2] = $54;
      $$1 = 1;$56 = $54;
     }
    } while(0);
    $55 = $56 | 1;
    HEAP32[$5>>2] = $55;
    $57 = (($$06892) + ($2)|0);
    $58 = ($57>>>0)<($22>>>0);
    if ($58) {
     $$06793 = $$1;$$06892 = $57;$27 = $55;
    } else {
     $$067$lcssa = $$1;$$068$lcssa = $57;
     break;
    }
   }
  } else {
   $$067$lcssa = 1;$$068$lcssa = $0;
  }
  _trinkle($$068$lcssa,$2,$3,$5,$$067$lcssa,0,$4);
  $59 = ((($5)) + 4|0);
  $60 = ($$067$lcssa|0)==(1);
  $61 = HEAP32[$5>>2]|0;
  $62 = ($61|0)==(1);
  $or$cond106 = $60 & $62;
  $63 = HEAP32[$59>>2]|0;
  $64 = ($63|0)==(0);
  $or$cond97107 = $or$cond106 & $64;
  if (!($or$cond97107)) {
   $$169108 = $$068$lcssa;$$2109 = $$067$lcssa;$123 = $64;$67 = $61;$76 = $63;
   while(1) {
    $65 = ($$2109|0)<(2);
    if ($65) {
     $66 = (($67) + -1)|0;
     $68 = ($66|0)==(0);
     do {
      if ($68) {
       $86 = 32;
       label = 28;
      } else {
       $69 = $66 & 1;
       $70 = ($69|0)==(0);
       if ($70) {
        $$068$i$i = $66;$$09$i$i = 0;
        while(1) {
         $71 = (($$09$i$i) + 1)|0;
         $72 = $$068$i$i >>> 1;
         $73 = $72 & 1;
         $74 = ($73|0)==(0);
         if ($74) {
          $$068$i$i = $72;$$09$i$i = $71;
         } else {
          $83 = $71;
          break;
         }
        }
       } else {
        if ($123) {
         $$07$i10$i$ph = 32;
        } else {
         $75 = $76 & 1;
         $77 = ($75|0)==(0);
         if ($77) {
          $$068$i8$i = $76;$$09$i7$i = 0;
         } else {
          $$0$i88 = 0;$88 = $67;$91 = $76;$95 = 0;
          break;
         }
         while(1) {
          $78 = (($$09$i7$i) + 1)|0;
          $79 = $$068$i8$i >>> 1;
          $80 = $79 & 1;
          $81 = ($80|0)==(0);
          if ($81) {
           $$068$i8$i = $79;$$09$i7$i = $78;
          } else {
           $$07$i10$i$ph = $78;
           break;
          }
         }
        }
        $82 = (($$07$i10$i$ph) + 32)|0;
        $83 = $82;
       }
       $84 = ($83>>>0)>(31);
       if ($84) {
        $86 = $83;
        label = 28;
       } else {
        $$0$i88 = $83;$88 = $67;$91 = $76;$95 = $83;
       }
      }
     } while(0);
     if ((label|0) == 28) {
      label = 0;
      $85 = (($86) + -32)|0;
      HEAP32[$5>>2] = $76;
      HEAP32[$24>>2] = 0;
      $$0$i88 = $85;$88 = $76;$91 = 0;$95 = $86;
     }
     $87 = $88 >>> $$0$i88;
     $89 = (32 - ($$0$i88))|0;
     $90 = $91 << $89;
     $92 = $90 | $87;
     HEAP32[$5>>2] = $92;
     $93 = $91 >>> $$0$i88;
     HEAP32[$24>>2] = $93;
     $94 = (($95) + ($$2109))|0;
     $$pre = (($$169108) + ($12)|0);
     $$169$be = $$pre;$$2$be = $94;
    } else {
     $96 = $76 << 2;
     $97 = $67 >>> 30;
     $98 = $97 | $96;
     $99 = (($$2109) + -2)|0;
     $100 = $67 << 1;
     $101 = $100 & 2147483646;
     $102 = $97 << 31;
     $103 = $101 | $102;
     $104 = $103 ^ 3;
     HEAP32[$5>>2] = $104;
     $105 = $98 >>> 1;
     HEAP32[$24>>2] = $105;
     $106 = (($4) + ($99<<2)|0);
     $107 = HEAP32[$106>>2]|0;
     $108 = (0 - ($107))|0;
     $109 = (($$169108) + ($108)|0);
     $110 = (($109) + ($12)|0);
     $111 = (($$2109) + -1)|0;
     _trinkle($110,$2,$3,$5,$111,1,$4);
     $$pre$i73 = HEAP32[$24>>2]|0;
     $$pre11$i74 = HEAP32[$5>>2]|0;
     $112 = $$pre$i73 << 1;
     $113 = $$pre11$i74 >>> 31;
     $114 = $113 | $112;
     HEAP32[$24>>2] = $114;
     $115 = $$pre11$i74 << 1;
     $116 = $115 | 1;
     HEAP32[$5>>2] = $116;
     $117 = (($$169108) + ($12)|0);
     _trinkle($117,$2,$3,$5,$99,1,$4);
     $$169$be = $117;$$2$be = $99;
    }
    $118 = ($$2$be|0)==(1);
    $119 = HEAP32[$5>>2]|0;
    $120 = ($119|0)==(1);
    $or$cond = $118 & $120;
    $121 = HEAP32[$59>>2]|0;
    $122 = ($121|0)==(0);
    $or$cond97 = $or$cond & $122;
    if ($or$cond97) {
     break;
    } else {
     $$169108 = $$169$be;$$2109 = $$2$be;$123 = $122;$67 = $119;$76 = $121;
    }
   }
  }
 }
 STACKTOP = sp;return;
}
function _sift($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$029$be = 0, $$02932 = 0, $$030$be = 0, $$03031 = 0, $$033 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $5 = sp;
 HEAP32[$5>>2] = $0;
 $6 = ($3|0)>(1);
 L1: do {
  if ($6) {
   $7 = (0 - ($1))|0;
   $$02932 = $0;$$03031 = $3;$$033 = 1;$14 = $0;
   while(1) {
    $8 = (($$02932) + ($7)|0);
    $9 = (($$03031) + -2)|0;
    $10 = (($4) + ($9<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    $12 = (0 - ($11))|0;
    $13 = (($8) + ($12)|0);
    $15 = (FUNCTION_TABLE_iii[$2 & 15]($14,$13)|0);
    $16 = ($15|0)>(-1);
    if ($16) {
     $17 = (FUNCTION_TABLE_iii[$2 & 15]($14,$8)|0);
     $18 = ($17|0)>(-1);
     if ($18) {
      $$0$lcssa = $$033;
      break L1;
     }
    }
    $19 = (FUNCTION_TABLE_iii[$2 & 15]($13,$8)|0);
    $20 = ($19|0)>(-1);
    $21 = (($$033) + 1)|0;
    $22 = (($5) + ($$033<<2)|0);
    if ($20) {
     HEAP32[$22>>2] = $13;
     $23 = (($$03031) + -1)|0;
     $$029$be = $13;$$030$be = $23;
    } else {
     HEAP32[$22>>2] = $8;
     $$029$be = $8;$$030$be = $9;
    }
    $24 = ($$030$be|0)>(1);
    if (!($24)) {
     $$0$lcssa = $21;
     break L1;
    }
    $$pre = HEAP32[$5>>2]|0;
    $$02932 = $$029$be;$$03031 = $$030$be;$$033 = $21;$14 = $$pre;
   }
  } else {
   $$0$lcssa = 1;
  }
 } while(0);
 _cycle($1,$5,$$0$lcssa);
 STACKTOP = sp;return;
}
function _trinkle($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0$i = 0, $$0$lcssa = 0, $$0$lcssa84 = 0, $$045$lcssa = 0, $$045$lcssa83 = 0, $$0456196 = 0, $$046$lcssa = 0, $$046$lcssa82 = 0, $$0466097 = 0, $$047$lcssa = 0, $$0475998 = 0, $$06295 = 0, $$06295$phi = 0, $$068$i$i = 0, $$068$i8$i = 0, $$07$i10$i$ph = 0, $$09$i$i = 0, $$09$i7$i = 0, $$pre = 0, $$sroa$0$05899 = 0;
 var $$sroa$8$056100 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $or$cond = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(240|0);
 $7 = sp;
 $8 = HEAP32[$3>>2]|0;
 $9 = ((($3)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 HEAP32[$7>>2] = $0;
 $11 = (0 - ($1))|0;
 $12 = ($8|0)!=(1);
 $13 = ($10|0)!=(0);
 $14 = $13 | $12;
 L1: do {
  if ($14) {
   $15 = (($6) + ($4<<2)|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (0 - ($16))|0;
   $18 = (($0) + ($17)|0);
   $19 = (FUNCTION_TABLE_iii[$2 & 15]($18,$0)|0);
   $20 = ($19|0)<(1);
   if ($20) {
    $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
    label = 18;
   } else {
    $phitmp = ($5|0)==(0);
    $$0456196 = 1;$$0466097 = $4;$$0475998 = $phitmp;$$06295 = $0;$$sroa$0$05899 = $8;$$sroa$8$056100 = $10;$26 = $18;
    while(1) {
     $21 = ($$0466097|0)>(1);
     $or$cond = $$0475998 & $21;
     if ($or$cond) {
      $22 = (($$06295) + ($11)|0);
      $23 = (($$0466097) + -2)|0;
      $24 = (($6) + ($23<<2)|0);
      $25 = HEAP32[$24>>2]|0;
      $27 = (FUNCTION_TABLE_iii[$2 & 15]($22,$26)|0);
      $28 = ($27|0)>(-1);
      if ($28) {
       $$0$lcssa84 = $$06295;$$045$lcssa83 = $$0456196;$$046$lcssa82 = $$0466097;
       label = 19;
       break L1;
      }
      $29 = (0 - ($25))|0;
      $30 = (($22) + ($29)|0);
      $31 = (FUNCTION_TABLE_iii[$2 & 15]($30,$26)|0);
      $32 = ($31|0)>(-1);
      if ($32) {
       $$0$lcssa84 = $$06295;$$045$lcssa83 = $$0456196;$$046$lcssa82 = $$0466097;
       label = 19;
       break L1;
      }
     }
     $33 = (($$0456196) + 1)|0;
     $34 = (($7) + ($$0456196<<2)|0);
     HEAP32[$34>>2] = $26;
     $35 = (($$sroa$0$05899) + -1)|0;
     $36 = ($35|0)==(0);
     do {
      if ($36) {
       $73 = 0;$74 = 32;
       label = 15;
      } else {
       $37 = $35 & 1;
       $38 = ($37|0)==(0);
       if ($38) {
        $$068$i$i = $35;$$09$i$i = 0;
        while(1) {
         $39 = (($$09$i$i) + 1)|0;
         $40 = $$068$i$i >>> 1;
         $41 = $40 & 1;
         $42 = ($41|0)==(0);
         if ($42) {
          $$068$i$i = $40;$$09$i$i = $39;
         } else {
          $51 = $39;
          break;
         }
        }
       } else {
        $43 = ($$sroa$8$056100|0)==(0);
        if ($43) {
         $$07$i10$i$ph = 32;
        } else {
         $44 = $$sroa$8$056100 & 1;
         $45 = ($44|0)==(0);
         if ($45) {
          $$068$i8$i = $$sroa$8$056100;$$09$i7$i = 0;
         } else {
          $$0$i = 0;$55 = $$sroa$0$05899;$58 = $$sroa$8$056100;$62 = 0;
          break;
         }
         while(1) {
          $46 = (($$09$i7$i) + 1)|0;
          $47 = $$068$i8$i >>> 1;
          $48 = $47 & 1;
          $49 = ($48|0)==(0);
          if ($49) {
           $$068$i8$i = $47;$$09$i7$i = $46;
          } else {
           $$07$i10$i$ph = $46;
           break;
          }
         }
        }
        $50 = (($$07$i10$i$ph) + 32)|0;
        $51 = $50;
       }
       $52 = ($51>>>0)>(31);
       $53 = (($51) + -32)|0;
       if ($52) {
        $73 = $53;$74 = $51;
        label = 15;
       } else {
        $$0$i = $51;$55 = $$sroa$0$05899;$58 = $$sroa$8$056100;$62 = $51;
       }
      }
     } while(0);
     if ((label|0) == 15) {
      label = 0;
      $$0$i = $73;$55 = $$sroa$8$056100;$58 = 0;$62 = $74;
     }
     $54 = $55 >>> $$0$i;
     $56 = (32 - ($$0$i))|0;
     $57 = $58 << $56;
     $59 = $57 | $54;
     $60 = $58 >>> $$0$i;
     $61 = (($62) + ($$0466097))|0;
     $63 = ($59|0)!=(1);
     $64 = ($60|0)!=(0);
     $65 = $64 | $63;
     if (!($65)) {
      $$0$lcssa84 = $26;$$045$lcssa83 = $33;$$046$lcssa82 = $61;
      label = 19;
      break L1;
     }
     $$pre = HEAP32[$7>>2]|0;
     $66 = (($6) + ($61<<2)|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = (0 - ($67))|0;
     $69 = (($26) + ($68)|0);
     $70 = (FUNCTION_TABLE_iii[$2 & 15]($69,$$pre)|0);
     $71 = ($70|0)<(1);
     if ($71) {
      $$0$lcssa = $26;$$045$lcssa = $33;$$046$lcssa = $61;$$047$lcssa = 0;
      label = 18;
      break;
     } else {
      $$06295$phi = $26;$$0456196 = $33;$$0466097 = $61;$$0475998 = 1;$$sroa$0$05899 = $59;$$sroa$8$056100 = $60;$26 = $69;$$06295 = $$06295$phi;
     }
    }
   }
  } else {
   $$0$lcssa = $0;$$045$lcssa = 1;$$046$lcssa = $4;$$047$lcssa = $5;
   label = 18;
  }
 } while(0);
 if ((label|0) == 18) {
  $72 = ($$047$lcssa|0)==(0);
  if ($72) {
   $$0$lcssa84 = $$0$lcssa;$$045$lcssa83 = $$045$lcssa;$$046$lcssa82 = $$046$lcssa;
   label = 19;
  }
 }
 if ((label|0) == 19) {
  _cycle($1,$7,$$045$lcssa83);
  _sift($$0$lcssa84,$1,$2,$$046$lcssa82,$6);
 }
 STACKTOP = sp;return;
}
function _cycle($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$02527 = 0, $$026 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $exitcond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 256|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(256|0);
 $3 = sp;
 $4 = ($2|0)<(2);
 L1: do {
  if (!($4)) {
   $5 = (($1) + ($2<<2)|0);
   HEAP32[$5>>2] = $3;
   $6 = ($0|0)==(0);
   if (!($6)) {
    $$02527 = $0;$10 = $3;
    while(1) {
     $7 = ($$02527>>>0)>(256);
     $8 = $7 ? 256 : $$02527;
     $9 = HEAP32[$1>>2]|0;
     _memcpy(($10|0),($9|0),($8|0))|0;
     $$026 = 0;
     while(1) {
      $11 = (($1) + ($$026<<2)|0);
      $12 = HEAP32[$11>>2]|0;
      $13 = (($$026) + 1)|0;
      $14 = (($1) + ($13<<2)|0);
      $15 = HEAP32[$14>>2]|0;
      _memcpy(($12|0),($15|0),($8|0))|0;
      $16 = HEAP32[$11>>2]|0;
      $17 = (($16) + ($8)|0);
      HEAP32[$11>>2] = $17;
      $exitcond = ($13|0)==($2|0);
      if ($exitcond) {
       break;
      } else {
       $$026 = $13;
      }
     }
     $18 = (($$02527) - ($8))|0;
     $19 = ($18|0)==(0);
     if ($19) {
      break L1;
     }
     $$pre = HEAP32[$5>>2]|0;
     $$02527 = $18;$10 = $$pre;
    }
   }
  }
 } while(0);
 STACKTOP = sp;return;
}
function _strtok($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$010 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = HEAP32[31820]|0;
  $4 = ($3|0)==(0|0);
  if ($4) {
   $$0 = 0;
  } else {
   $$010 = $3;
   label = 3;
  }
 } else {
  $$010 = $0;
  label = 3;
 }
 do {
  if ((label|0) == 3) {
   $5 = (_strspn($$010,$1)|0);
   $6 = (($$010) + ($5)|0);
   $7 = HEAP8[$6>>0]|0;
   $8 = ($7<<24>>24)==(0);
   if ($8) {
    HEAP32[31820] = 0;
    $$0 = 0;
    break;
   }
   $9 = (_strcspn($6,$1)|0);
   $10 = (($6) + ($9)|0);
   HEAP32[31820] = $10;
   $11 = HEAP8[$10>>0]|0;
   $12 = ($11<<24>>24)==(0);
   if ($12) {
    HEAP32[31820] = 0;
    $$0 = $6;
    break;
   } else {
    $13 = ((($10)) + 1|0);
    HEAP32[31820] = $13;
    HEAP8[$10>>0] = 0;
    $$0 = $6;
    break;
   }
  }
 } while(0);
 return ($$0|0);
}
function _strspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01925 = 0, $$020 = 0, $$1$lcssa = 0, $$123 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $div = 0, $div21 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ((($1)) + 1|0);
   $6 = HEAP8[$5>>0]|0;
   $7 = ($6<<24>>24)==(0);
   if ($7) {
    $$020 = $0;
    while(1) {
     $8 = HEAP8[$$020>>0]|0;
     $9 = ($8<<24>>24)==($3<<24>>24);
     $10 = ((($$020)) + 1|0);
     if ($9) {
      $$020 = $10;
     } else {
      break;
     }
    }
    $11 = $$020;
    $12 = $0;
    $13 = (($11) - ($12))|0;
    $$0 = $13;
    break;
   } else {
    $$01925 = $1;$17 = $3;
   }
   while(1) {
    $16 = $17 & 31;
    $18 = $16&255;
    $19 = 1 << $18;
    $div21 = ($17&255) >>> 5;
    $20 = $div21&255;
    $21 = (($2) + ($20<<2)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $22 | $19;
    HEAP32[$21>>2] = $23;
    $24 = ((($$01925)) + 1|0);
    $25 = HEAP8[$24>>0]|0;
    $26 = ($25<<24>>24)==(0);
    if ($26) {
     break;
    } else {
     $$01925 = $24;$17 = $25;
    }
   }
   $14 = HEAP8[$0>>0]|0;
   $15 = ($14<<24>>24)==(0);
   L10: do {
    if ($15) {
     $$1$lcssa = $0;
    } else {
     $$123 = $0;$27 = $14;
     while(1) {
      $div = ($27&255) >>> 5;
      $28 = $div&255;
      $29 = (($2) + ($28<<2)|0);
      $30 = HEAP32[$29>>2]|0;
      $31 = $27 & 31;
      $32 = $31&255;
      $33 = 1 << $32;
      $34 = $30 & $33;
      $35 = ($34|0)==(0);
      if ($35) {
       $$1$lcssa = $$123;
       break L10;
      }
      $36 = ((($$123)) + 1|0);
      $37 = HEAP8[$36>>0]|0;
      $38 = ($37<<24>>24)==(0);
      if ($38) {
       $$1$lcssa = $36;
       break;
      } else {
       $$123 = $36;$27 = $37;
      }
     }
    }
   } while(0);
   $39 = $$1$lcssa;
   $40 = $0;
   $41 = (($39) - ($40))|0;
   $$0 = $41;
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _strcspn($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$01823 = 0, $$019$lcssa = 0, $$01921 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $div = 0, $div20 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $2 = sp;
 $3 = HEAP8[$1>>0]|0;
 $4 = ($3<<24>>24)==(0);
 if ($4) {
  label = 3;
 } else {
  $5 = ((($1)) + 1|0);
  $6 = HEAP8[$5>>0]|0;
  $7 = ($6<<24>>24)==(0);
  if ($7) {
   label = 3;
  } else {
   ;HEAP32[$2>>2]=0|0;HEAP32[$2+4>>2]=0|0;HEAP32[$2+8>>2]=0|0;HEAP32[$2+12>>2]=0|0;HEAP32[$2+16>>2]=0|0;HEAP32[$2+20>>2]=0|0;HEAP32[$2+24>>2]=0|0;HEAP32[$2+28>>2]=0|0;
   $$01823 = $1;$16 = $3;
   while(1) {
    $15 = $16 & 31;
    $17 = $15&255;
    $18 = 1 << $17;
    $div20 = ($16&255) >>> 5;
    $19 = $div20&255;
    $20 = (($2) + ($19<<2)|0);
    $21 = HEAP32[$20>>2]|0;
    $22 = $21 | $18;
    HEAP32[$20>>2] = $22;
    $23 = ((($$01823)) + 1|0);
    $24 = HEAP8[$23>>0]|0;
    $25 = ($24<<24>>24)==(0);
    if ($25) {
     break;
    } else {
     $$01823 = $23;$16 = $24;
    }
   }
   $13 = HEAP8[$0>>0]|0;
   $14 = ($13<<24>>24)==(0);
   L7: do {
    if ($14) {
     $$019$lcssa = $0;
    } else {
     $$01921 = $0;$26 = $13;
     while(1) {
      $div = ($26&255) >>> 5;
      $27 = $div&255;
      $28 = (($2) + ($27<<2)|0);
      $29 = HEAP32[$28>>2]|0;
      $30 = $26 & 31;
      $31 = $30&255;
      $32 = 1 << $31;
      $33 = $29 & $32;
      $34 = ($33|0)==(0);
      if (!($34)) {
       $$019$lcssa = $$01921;
       break L7;
      }
      $35 = ((($$01921)) + 1|0);
      $36 = HEAP8[$35>>0]|0;
      $37 = ($36<<24>>24)==(0);
      if ($37) {
       $$019$lcssa = $35;
       break;
      } else {
       $$01921 = $35;$26 = $36;
      }
     }
    }
   } while(0);
   $38 = $$019$lcssa;
   $39 = $0;
   $40 = (($38) - ($39))|0;
   $$0 = $40;
  }
 }
 if ((label|0) == 3) {
  $8 = $3 << 24 >> 24;
  $9 = (___strchrnul($0,$8)|0);
  $10 = $9;
  $11 = $0;
  $12 = (($10) - ($11))|0;
  $$0 = $12;
 }
 STACKTOP = sp;return ($$0|0);
}
function _wcschr($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$09 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_wcslen($0)|0);
  $4 = (($0) + ($3<<2)|0);
  $$0 = $4;
 } else {
  $$09 = $0;
  while(1) {
   $5 = HEAP32[$$09>>2]|0;
   $6 = ($5|0)==(0);
   $7 = ($5|0)==($1|0);
   $or$cond = $6 | $7;
   $8 = ((($$09)) + 4|0);
   if ($or$cond) {
    break;
   } else {
    $$09 = $8;
   }
  }
  $9 = ($5|0)!=(0);
  $10 = $9 ? $$09 : 0;
  $$0 = $10;
 }
 return ($$0|0);
}
function _wcslen($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$0 = $0;
 while(1) {
  $1 = HEAP32[$$0>>2]|0;
  $2 = ($1|0)==(0);
  $3 = ((($$0)) + 4|0);
  if ($2) {
   break;
  } else {
   $$0 = $3;
  }
 }
 $4 = $$0;
 $5 = $0;
 $6 = (($4) - ($5))|0;
 $7 = $6 >> 2;
 return ($7|0);
}
function _towlower($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___towcase($0,1)|0);
 return ($1|0);
}
function ___towcase($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$06385 = 0, $$16484 = 0, $$2 = 0, $$neg76 = 0, $$neg78 = 0, $$neg79 = 0, $$not = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond66 = 0, $or$cond68 = 0, $or$cond70 = 0, $or$cond72 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = $1 << 1;
 $3 = (($2) + -1)|0;
 $4 = (($1) + -1)|0;
 $5 = (_iswalpha($0)|0);
 $6 = ($5|0)==(0);
 $7 = (($0) + -1536)|0;
 $8 = ($7>>>0)<(2560);
 $or$cond66 = $8 | $6;
 $9 = (($0) + -11776)|0;
 $10 = ($9>>>0)<(30784);
 $or$cond68 = $10 | $or$cond66;
 $11 = (($0) + -43008)|0;
 $12 = ($11>>>0)<(22272);
 $or$cond70 = $12 | $or$cond68;
 L1: do {
  if ($or$cond70) {
   $$2 = $0;
  } else {
   $13 = ($1|0)!=(0);
   $14 = (($0) + -4256)|0;
   $15 = ($14>>>0)<(46);
   $or$cond72 = $13 & $15;
   if ($or$cond72) {
    $16 = ($0|0)>(4293);
    if ($16) {
     switch ($0|0) {
     case 4295: case 4301:  {
      break;
     }
     default: {
      $$2 = $0;
      break L1;
     }
     }
    }
    $17 = (($0) + 7264)|0;
    $$2 = $17;
    break;
   }
   $$not = $13 ^ 1;
   $18 = (($0) + -11520)|0;
   $19 = ($18>>>0)<(38);
   $or$cond = $19 & $$not;
   if ($or$cond) {
    $20 = ($0|0)>(11557);
    if ($20) {
     switch ($0|0) {
     case 11559: case 11565:  {
      break;
     }
     default: {
      $$2 = $0;
      break L1;
     }
     }
    }
    $21 = (($0) + -7264)|0;
    $$2 = $21;
    break;
   } else {
    $$06385 = 0;
   }
   while(1) {
    $28 = (((1416 + ($$06385<<2)|0)) + 3|0);
    $29 = HEAP8[$28>>0]|0;
    $30 = (1416 + ($$06385<<2)|0);
    $31 = HEAP16[$30>>1]|0;
    $32 = $31&65535;
    $33 = (((1416 + ($$06385<<2)|0)) + 2|0);
    $34 = HEAP8[$33>>0]|0;
    $35 = $34 << 24 >> 24;
    $36 = $35 & $4;
    $$neg76 = (($0) - ($32))|0;
    $37 = (($$neg76) - ($36))|0;
    $38 = $29&255;
    $39 = ($37>>>0)<($38>>>0);
    $22 = (($$06385) + 1)|0;
    if ($39) {
     label = 13;
     break;
    }
    $23 = ($22|0)==(61);
    if ($23) {
     break;
    } else {
     $$06385 = $22;
    }
   }
   if ((label|0) == 13) {
    $40 = ($34<<24>>24)==(1);
    if ($40) {
     $41 = (($1) + ($0))|0;
     $42 = $$neg76 & 1;
     $43 = (($41) - ($42))|0;
     $$2 = $43;
     break;
    } else {
     $44 = Math_imul($35, $3)|0;
     $45 = (($44) + ($0))|0;
     $$2 = $45;
     break;
    }
   }
   $24 = (1 - ($1))|0;
   $25 = (924 + ($24<<1)|0);
   $26 = HEAP16[$25>>1]|0;
   $27 = ($26<<16>>16)==(0);
   L23: do {
    if (!($27)) {
     $$16484 = 0;$47 = $26;
     while(1) {
      $46 = $47&65535;
      $48 = ($46|0)==($0|0);
      if ($48) {
       break;
      }
      $52 = (($$16484) + 1)|0;
      $53 = ((924 + ($52<<2)|0) + ($24<<1)|0);
      $54 = HEAP16[$53>>1]|0;
      $55 = ($54<<16>>16)==(0);
      if ($55) {
       break L23;
      } else {
       $$16484 = $52;$47 = $54;
      }
     }
     $49 = ((924 + ($$16484<<2)|0) + ($1<<1)|0);
     $50 = HEAP16[$49>>1]|0;
     $51 = $50&65535;
     $$2 = $51;
     break L1;
    }
   } while(0);
   $$neg78 = ($1*40)|0;
   $$neg79 = (($0) + -66600)|0;
   $56 = (($$neg79) + ($$neg78))|0;
   $57 = ($56>>>0)<(40);
   $58 = (($0) + -40)|0;
   $59 = ($1*80)|0;
   $60 = (($58) + ($59))|0;
   $$ = $57 ? $60 : $0;
   return ($$|0);
  }
 } while(0);
 return ($$2|0);
}
function _iswalpha($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(131072);
 if ($1) {
  $2 = $0 >>> 8;
  $3 = (21991 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 << 5;
  $7 = $0 >>> 3;
  $8 = $7 & 31;
  $9 = $6 | $8;
  $10 = (21991 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $0 & 7;
  $14 = $12 >>> $13;
  $15 = $14 & 1;
  $$0 = $15;
 } else {
  $16 = ($0>>>0)<(196606);
  $$ = $16&1;
  $$0 = $$;
 }
 return ($$0|0);
}
function ___stpncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0$lcssa = 0, $$037$lcssa = 0, $$03753 = 0, $$038$lcssa = 0, $$038$lcssa79 = 0, $$03866 = 0, $$039$lcssa = 0, $$039$lcssa78 = 0, $$03965 = 0, $$041$lcssa = 0, $$041$lcssa77 = 0, $$04164 = 0, $$054 = 0, $$1$lcssa = 0, $$140$ph = 0, $$14046 = 0, $$142$ph = 0, $$14245 = 0, $$152 = 0, $$2$ph = 0;
 var $$243 = 0, $$247 = 0, $$3 = 0, $$lcssa = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $or$cond = 0, $or$cond63 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = $1;
 $4 = $0;
 $5 = $3 ^ $4;
 $6 = $5 & 3;
 $7 = ($6|0)==(0);
 do {
  if ($7) {
   $8 = $3 & 3;
   $9 = ($8|0)!=(0);
   $10 = ($2|0)!=(0);
   $or$cond63 = $10 & $9;
   L3: do {
    if ($or$cond63) {
     $$03866 = $2;$$03965 = $1;$$04164 = $0;
     while(1) {
      $11 = HEAP8[$$03965>>0]|0;
      HEAP8[$$04164>>0] = $11;
      $12 = ($11<<24>>24)==(0);
      if ($12) {
       $$038$lcssa79 = $$03866;$$039$lcssa78 = $$03965;$$041$lcssa77 = $$04164;
       break L3;
      }
      $13 = (($$03866) + -1)|0;
      $14 = ((($$03965)) + 1|0);
      $15 = ((($$04164)) + 1|0);
      $16 = $14;
      $17 = $16 & 3;
      $18 = ($17|0)!=(0);
      $19 = ($13|0)!=(0);
      $or$cond = $19 & $18;
      if ($or$cond) {
       $$03866 = $13;$$03965 = $14;$$04164 = $15;
      } else {
       $$038$lcssa = $13;$$039$lcssa = $14;$$041$lcssa = $15;$$lcssa = $19;
       label = 5;
       break;
      }
     }
    } else {
     $$038$lcssa = $2;$$039$lcssa = $1;$$041$lcssa = $0;$$lcssa = $10;
     label = 5;
    }
   } while(0);
   if ((label|0) == 5) {
    if ($$lcssa) {
     $$038$lcssa79 = $$038$lcssa;$$039$lcssa78 = $$039$lcssa;$$041$lcssa77 = $$041$lcssa;
    } else {
     $$243 = $$041$lcssa;$$3 = 0;
     break;
    }
   }
   $20 = HEAP8[$$039$lcssa78>>0]|0;
   $21 = ($20<<24>>24)==(0);
   if ($21) {
    $$243 = $$041$lcssa77;$$3 = $$038$lcssa79;
   } else {
    $22 = ($$038$lcssa79>>>0)>(3);
    L11: do {
     if ($22) {
      $$03753 = $$041$lcssa77;$$054 = $$039$lcssa78;$$152 = $$038$lcssa79;
      while(1) {
       $23 = HEAP32[$$054>>2]|0;
       $24 = (($23) + -16843009)|0;
       $25 = $23 & -2139062144;
       $26 = $25 ^ -2139062144;
       $27 = $26 & $24;
       $28 = ($27|0)==(0);
       if (!($28)) {
        $$0$lcssa = $$054;$$037$lcssa = $$03753;$$1$lcssa = $$152;
        break L11;
       }
       HEAP32[$$03753>>2] = $23;
       $29 = (($$152) + -4)|0;
       $30 = ((($$054)) + 4|0);
       $31 = ((($$03753)) + 4|0);
       $32 = ($29>>>0)>(3);
       if ($32) {
        $$03753 = $31;$$054 = $30;$$152 = $29;
       } else {
        $$0$lcssa = $30;$$037$lcssa = $31;$$1$lcssa = $29;
        break;
       }
      }
     } else {
      $$0$lcssa = $$039$lcssa78;$$037$lcssa = $$041$lcssa77;$$1$lcssa = $$038$lcssa79;
     }
    } while(0);
    $$140$ph = $$0$lcssa;$$142$ph = $$037$lcssa;$$2$ph = $$1$lcssa;
    label = 11;
   }
  } else {
   $$140$ph = $1;$$142$ph = $0;$$2$ph = $2;
   label = 11;
  }
 } while(0);
 L16: do {
  if ((label|0) == 11) {
   $33 = ($$2$ph|0)==(0);
   if ($33) {
    $$243 = $$142$ph;$$3 = 0;
   } else {
    $$14046 = $$140$ph;$$14245 = $$142$ph;$$247 = $$2$ph;
    while(1) {
     $34 = HEAP8[$$14046>>0]|0;
     HEAP8[$$14245>>0] = $34;
     $35 = ($34<<24>>24)==(0);
     if ($35) {
      $$243 = $$14245;$$3 = $$247;
      break L16;
     }
     $36 = (($$247) + -1)|0;
     $37 = ((($$14046)) + 1|0);
     $38 = ((($$14245)) + 1|0);
     $39 = ($36|0)==(0);
     if ($39) {
      $$243 = $38;$$3 = 0;
      break;
     } else {
      $$14046 = $37;$$14245 = $38;$$247 = $36;
     }
    }
   }
  }
 } while(0);
 _memset(($$243|0),0,($$3|0))|0;
 return ($$243|0);
}
function _strcat($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (_strlen($0)|0);
 $3 = (($0) + ($2)|0);
 (_strcpy($3,$1)|0);
 return ($0|0);
}
function _strncpy($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 (___stpncpy($0,$1,$2)|0);
 return ($0|0);
}
function _mkdir($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $2 = (___syscall39(39,($vararg_buffer|0))|0);
 $3 = (___syscall_ret($2)|0);
 STACKTOP = sp;return ($3|0);
}
function _iswpunct($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(131072);
 if ($1) {
  $2 = $0 >>> 8;
  $3 = (24967 + ($2)|0);
  $4 = HEAP8[$3>>0]|0;
  $5 = $4&255;
  $6 = $5 << 5;
  $7 = $0 >>> 3;
  $8 = $7 & 31;
  $9 = $6 | $8;
  $10 = (24967 + ($9)|0);
  $11 = HEAP8[$10>>0]|0;
  $12 = $11&255;
  $13 = $0 & 7;
  $14 = $12 >>> $13;
  $15 = $14 & 1;
  $$0 = $15;
 } else {
  $$0 = 0;
 }
 return ($$0|0);
}
function _towupper($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___towcase($0,0)|0);
 return ($1|0);
}
function _iswxdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $0 | 32;
 $4 = (($3) + -97)|0;
 $5 = ($4>>>0)<(6);
 $6 = $2 | $5;
 $7 = $6&1;
 return ($7|0);
}
function _isalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $isdigit = 0, $isdigittmp = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isalpha($0)|0);
 $isdigittmp = (($0) + -48)|0;
 $isdigit = ($isdigittmp>>>0)<(10);
 $not$ = ($1|0)!=(0);
 $2 = $isdigit | $not$;
 $3 = $2&1;
 return ($3|0);
}
function _isalpha($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = $0 | 32;
 $2 = (($1) + -97)|0;
 $3 = ($2>>>0)<(26);
 $4 = $3&1;
 return ($4|0);
}
function _iswupper($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_towlower($0)|0);
 $2 = ($1|0)!=($0|0);
 $3 = $2&1;
 return ($3|0);
}
function _iswprint($0) {
 $0 = $0|0;
 var $$ = 0, $$0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond11 = 0, $or$cond9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(255);
 if ($1) {
  $2 = (($0) + 1)|0;
  $3 = $2 & 127;
  $4 = ($3>>>0)>(32);
  $5 = $4&1;
  $$0 = $5;
 } else {
  $6 = ($0>>>0)<(8232);
  $7 = (($0) + -8234)|0;
  $8 = ($7>>>0)<(47062);
  $or$cond = $6 | $8;
  $9 = (($0) + -57344)|0;
  $10 = ($9>>>0)<(8185);
  $or$cond9 = $10 | $or$cond;
  if ($or$cond9) {
   $$0 = 1;
  } else {
   $11 = (($0) + -65532)|0;
   $12 = ($11>>>0)>(1048579);
   $13 = $0 & 65534;
   $14 = ($13|0)==(65534);
   $or$cond11 = $12 | $14;
   $15 = $or$cond11&1;
   $$ = $15 ^ 1;
   return ($$|0);
  }
 }
 return ($$0|0);
}
function _iswgraph($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_iswspace($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_iswprint($0)|0);
  $4 = ($3|0)!=(0);
  $6 = $4;
 } else {
  $6 = 0;
 }
 $5 = $6&1;
 return ($5|0);
}
function _iswspace($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0);
 if ($1) {
  $5 = 0;
 } else {
  $2 = (_wcschr(732,$0)|0);
  $3 = ($2|0)!=(0|0);
  $5 = $3;
 }
 $4 = $5&1;
 return ($4|0);
}
function _iswctype($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 do {
  switch ($1|0) {
  case 1:  {
   $2 = (_iswalnum($0)|0);
   $$0 = $2;
   break;
  }
  case 2:  {
   $3 = (_iswalpha($0)|0);
   $$0 = $3;
   break;
  }
  case 3:  {
   $4 = (_iswblank($0)|0);
   $$0 = $4;
   break;
  }
  case 4:  {
   $5 = (_iswcntrl($0)|0);
   $$0 = $5;
   break;
  }
  case 5:  {
   $6 = (_iswdigit($0)|0);
   $$0 = $6;
   break;
  }
  case 6:  {
   $7 = (_iswgraph($0)|0);
   $$0 = $7;
   break;
  }
  case 7:  {
   $8 = (_iswlower($0)|0);
   $$0 = $8;
   break;
  }
  case 8:  {
   $9 = (_iswprint($0)|0);
   $$0 = $9;
   break;
  }
  case 9:  {
   $10 = (_iswpunct($0)|0);
   $$0 = $10;
   break;
  }
  case 10:  {
   $11 = (_iswspace($0)|0);
   $$0 = $11;
   break;
  }
  case 11:  {
   $12 = (_iswupper($0)|0);
   $$0 = $12;
   break;
  }
  case 12:  {
   $13 = (_iswxdigit($0)|0);
   $$0 = $13;
   break;
  }
  default: {
   $$0 = 0;
  }
  }
 } while(0);
 return ($$0|0);
}
function _iswalnum($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_iswdigit($0)|0);
 $2 = ($1|0)==(0);
 if ($2) {
  $3 = (_iswalpha($0)|0);
  $4 = ($3|0)!=(0);
  $6 = $4;
 } else {
  $6 = 1;
 }
 $5 = $6&1;
 return ($5|0);
}
function _iswblank($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_isblank($0)|0);
 return ($1|0);
}
function _iswcntrl($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0>>>0)<(32);
 $2 = (($0) + -127)|0;
 $3 = ($2>>>0)<(33);
 $or$cond = $1 | $3;
 $4 = $0 & -2;
 $5 = ($4|0)==(8232);
 $or$cond6 = $5 | $or$cond;
 if ($or$cond6) {
  $9 = 1;
 } else {
  $6 = (($0) + -65529)|0;
  $7 = ($6>>>0)<(3);
  $9 = $7;
 }
 $8 = $9&1;
 return ($8|0);
}
function _iswdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function _iswlower($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_towupper($0)|0);
 $2 = ($1|0)!=($0|0);
 $3 = ($0|0)==(223);
 $4 = $3 | $2;
 $5 = $4&1;
 return ($5|0);
}
function _isblank($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(32);
 $2 = ($0|0)==(9);
 $3 = $1 | $2;
 $4 = $3&1;
 return ($4|0);
}
function _wctype($0) {
 $0 = $0|0;
 var $$01113 = 0, $$012 = 0, $$014 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP8[$0>>0]|0;
 $$01113 = 1;$$014 = 28135;$3 = 97;
 while(1) {
  $2 = ($1<<24>>24)==($3<<24>>24);
  if ($2) {
   $4 = (_strcmp($0,$$014)|0);
   $5 = ($4|0)==(0);
   if ($5) {
    $$012 = $$01113;
    break;
   }
  }
  $6 = (($$01113) + 1)|0;
  $7 = ((($$014)) + 6|0);
  $8 = HEAP8[$7>>0]|0;
  $9 = ($8<<24>>24)==(0);
  if ($9) {
   $$012 = 0;
   break;
  } else {
   $$01113 = $6;$$014 = $7;$3 = $8;
  }
 }
 return ($$012|0);
}
function _isdigit($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (($0) + -48)|0;
 $2 = ($1>>>0)<(10);
 $3 = $2&1;
 return ($3|0);
}
function ___tre_mem_new_impl($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0$in = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $3 = (_calloc(1,24)|0);
  $$0$in = $3;
 } else {
  ;HEAP32[$1>>2]=0|0;HEAP32[$1+4>>2]=0|0;HEAP32[$1+8>>2]=0|0;HEAP32[$1+12>>2]=0|0;HEAP32[$1+16>>2]=0|0;HEAP32[$1+20>>2]=0|0;
  $$0$in = $1;
 }
 return ($$0$in|0);
}
function ___tre_mem_destroy($0) {
 $0 = $0|0;
 var $$010 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[$0>>2]|0;
 $2 = ($1|0)==(0|0);
 if (!($2)) {
  $$010 = $1;
  while(1) {
   $3 = HEAP32[$$010>>2]|0;
   _free($3);
   $4 = ((($$010)) + 4|0);
   $5 = HEAP32[$4>>2]|0;
   _free($$010);
   $6 = ($5|0)==(0|0);
   if ($6) {
    break;
   } else {
    $$010 = $5;
   }
  }
 }
 _free($0);
 return;
}
function ___tre_mem_alloc_impl($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$3 = 0, $$55 = 0, $$phi$trans$insert = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ((($0)) + 16|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)==(0);
 L1: do {
  if ($7) {
   $8 = ((($0)) + 12|0);
   $9 = HEAP32[$8>>2]|0;
   $10 = ($9>>>0)<($4>>>0);
   do {
    if ($10) {
     $12 = ($1|0)==(0);
     if (!($12)) {
      $13 = ($2|0)==(0|0);
      if ($13) {
       HEAP32[$5>>2] = 1;
       $$3 = 0;
       break L1;
      } else {
       $14 = ((($0)) + 8|0);
       HEAP32[$14>>2] = $2;
       HEAP32[$8>>2] = 1024;
       $15 = $2;
       $$pre$phiZ2D = $14;$32 = $15;$38 = $2;$40 = 1024;
       break;
      }
     }
     $16 = $4 << 3;
     $17 = ($16>>>0)>(1024);
     $$ = $17 ? $16 : 1024;
     $18 = (_malloc(8)|0);
     $19 = ($18|0)==(0|0);
     if ($19) {
      HEAP32[$5>>2] = 1;
      $$3 = 0;
      break L1;
     }
     $20 = (_malloc($$)|0);
     HEAP32[$18>>2] = $20;
     $21 = ($20|0)==(0|0);
     $22 = $20;
     if ($21) {
      _free($18);
      HEAP32[$5>>2] = 1;
      $$3 = 0;
      break L1;
     }
     $23 = ((($18)) + 4|0);
     HEAP32[$23>>2] = 0;
     $24 = ((($0)) + 4|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = ($25|0)==(0|0);
     if (!($26)) {
      $27 = ((($25)) + 4|0);
      HEAP32[$27>>2] = $18;
     }
     $28 = HEAP32[$0>>2]|0;
     $29 = ($28|0)==(0|0);
     if ($29) {
      HEAP32[$0>>2] = $18;
     }
     HEAP32[$24>>2] = $18;
     $30 = ((($0)) + 8|0);
     HEAP32[$30>>2] = $22;
     HEAP32[$8>>2] = $$;
     $$pre$phiZ2D = $30;$32 = $22;$38 = $20;$40 = $$;
    } else {
     $$phi$trans$insert = ((($0)) + 8|0);
     $$pre = HEAP32[$$phi$trans$insert>>2]|0;
     $11 = $$pre;
     $$pre$phiZ2D = $$phi$trans$insert;$32 = $$pre;$38 = $11;$40 = $9;
    }
   } while(0);
   $31 = (($32) + ($4))|0;
   $33 = $31 & 3;
   $34 = ($33|0)==(0);
   $35 = (4 - ($33))|0;
   $$55 = $34 ? 0 : $35;
   $36 = (($$55) + ($4))|0;
   $37 = (($38) + ($36)|0);
   HEAP32[$$pre$phiZ2D>>2] = $37;
   $39 = (($40) - ($36))|0;
   HEAP32[$8>>2] = $39;
   $41 = ($3|0)==(0);
   if ($41) {
    $$3 = $38;
   } else {
    _memset(($38|0),0,($36|0))|0;
    $$3 = $38;
   }
  } else {
   $$3 = 0;
  }
 } while(0);
 return ($$3|0);
}
function _regcomp($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$0167$be$i = 0, $$0167$lcssa$i = 0, $$0167$lcssa$i$ph = 0, $$0180$lcssa$i314 = 0, $$0185$lcssa$i312316322 = 0, $$0185$lcssa$i313 = 0, $$0185243$i247 = 0, $$0188 = 0, $$0189253$i$be = 0, $$0189253$i$lcssa = 0, $$0189253$i$lcssa$ph = 0, $$0189253$i253 = 0, $$0190 = 0, $$0192 = 0, $$0193 = 0, $$0194252$i$be = 0, $$0194252$i254 = 0, $$0195 = 0, $$0196$lcssa = 0;
 var $$0196239 = 0, $$0201 = 0, $$1184248$i = 0, $$1186$i = 0, $$1191 = 0, $$1198238 = 0, $$13$i$ph = 0, $$21$ph$i = 0, $$210$i = 0, $$2182$i = 0, $$2182$i317 = 0, $$2182$i318 = 0, $$2182$i319321 = 0, $$2199 = 0, $$3 = 0, $$3188$i = 0, $$3188217$i = 0, $$3200$lcssa = 0, $$3200236 = 0, $$4$ph$i = 0;
 var $$6$ph$i = 0, $$8$ph$i = 0, $$be = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0;
 var $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0, $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$lcssa226$i315 = 0, $$lobit = 0, $$lobit$not = 0, $$phi$trans$insert = 0;
 var $$pre = 0, $$pre$i = 0, $$pre$i206 = 0, $$pre$phi311Z2D = 0, $$pre$phi389$iZ2D = 0, $$pre$pre$i = 0, $$pre310 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0;
 var $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0;
 var $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0;
 var $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0;
 var $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0;
 var $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0;
 var $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0;
 var $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0;
 var $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0;
 var $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0;
 var $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0;
 var $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0;
 var $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0;
 var $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0;
 var $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0;
 var $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0;
 var $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0;
 var $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0;
 var $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0;
 var $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0;
 var $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0;
 var $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0;
 var $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0;
 var $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0;
 var $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0;
 var $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0;
 var $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond$i = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 336|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(336|0);
 $$byval_copy32 = sp + 332|0;
 $$byval_copy31 = sp + 328|0;
 $$byval_copy30 = sp + 324|0;
 $$byval_copy29 = sp + 320|0;
 $$byval_copy28 = sp + 316|0;
 $$byval_copy27 = sp + 312|0;
 $$byval_copy26 = sp + 308|0;
 $$byval_copy25 = sp + 304|0;
 $$byval_copy24 = sp + 300|0;
 $$byval_copy23 = sp + 296|0;
 $$byval_copy22 = sp + 292|0;
 $$byval_copy21 = sp + 288|0;
 $$byval_copy20 = sp + 284|0;
 $$byval_copy19 = sp + 280|0;
 $$byval_copy18 = sp + 276|0;
 $$byval_copy17 = sp + 272|0;
 $$byval_copy16 = sp + 268|0;
 $$byval_copy15 = sp + 264|0;
 $$byval_copy14 = sp + 260|0;
 $$byval_copy13 = sp + 256|0;
 $$byval_copy12 = sp + 252|0;
 $$byval_copy11 = sp + 248|0;
 $$byval_copy10 = sp + 244|0;
 $$byval_copy9 = sp + 240|0;
 $$byval_copy8 = sp + 236|0;
 $$byval_copy7 = sp + 232|0;
 $$byval_copy6 = sp + 228|0;
 $$byval_copy5 = sp + 224|0;
 $$byval_copy4 = sp + 220|0;
 $$byval_copy3 = sp + 216|0;
 $$byval_copy2 = sp + 212|0;
 $$byval_copy1 = sp + 208|0;
 $$byval_copy = sp + 204|0;
 $3 = sp + 200|0;
 $4 = sp + 196|0;
 $5 = sp + 192|0;
 $6 = sp + 188|0;
 $7 = sp + 184|0;
 $8 = sp + 180|0;
 $9 = sp + 176|0;
 $10 = sp + 172|0;
 $11 = sp + 168|0;
 $12 = sp + 164|0;
 $13 = sp + 160|0;
 $14 = sp + 156|0;
 $15 = sp + 152|0;
 $16 = sp + 148|0;
 $17 = sp + 144|0;
 $18 = sp + 140|0;
 $19 = sp + 136|0;
 $20 = sp + 132|0;
 $21 = sp + 128|0;
 $22 = sp + 124|0;
 $23 = sp + 120|0;
 $24 = sp + 116|0;
 $25 = sp + 112|0;
 $26 = sp + 108|0;
 $27 = sp + 104|0;
 $28 = sp + 100|0;
 $29 = sp + 96|0;
 $30 = sp + 92|0;
 $31 = sp + 88|0;
 $32 = sp + 84|0;
 $33 = sp + 80|0;
 $34 = sp + 76|0;
 $35 = sp + 72|0;
 $36 = sp + 68|0;
 $37 = sp + 64|0;
 $38 = sp + 60|0;
 $39 = sp + 56|0;
 $40 = sp + 52|0;
 $41 = sp + 48|0;
 $42 = sp + 44|0;
 $43 = sp;
 $44 = (_malloc(20)|0);
 $45 = ($44|0)==(0|0);
 L1: do {
  if ($45) {
   $$0188 = 12;
  } else {
   $46 = (_malloc(2048)|0);
   $47 = ((($44)) + 16|0);
   HEAP32[$47>>2] = $46;
   $48 = ($46|0)==(0|0);
   if ($48) {
    _free($44);
    $$0188 = 12;
    break;
   }
   HEAP32[$44>>2] = 512;
   $49 = ((($44)) + 4|0);
   HEAP32[$49>>2] = 10240;
   $50 = ((($44)) + 8|0);
   HEAP32[$50>>2] = 128;
   $51 = ((($44)) + 12|0);
   HEAP32[$51>>2] = 0;
   $52 = (___tre_mem_new_impl(0,0)|0);
   $53 = ($52|0)==(0|0);
   if ($53) {
    $54 = HEAP32[$47>>2]|0;
    _free($54);
    _free($44);
    $$0188 = 12;
    break;
   }
   $55 = ((($43)) + 4|0);
   $56 = ((($55)) + 4|0);
   dest=$56; stop=dest+36|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
   HEAP32[$43>>2] = $52;
   $57 = ((($43)) + 4|0);
   HEAP32[$57>>2] = $44;
   $58 = ((($43)) + 12|0);
   HEAP32[$58>>2] = $1;
   $59 = ((($43)) + 36|0);
   HEAP32[$59>>2] = $2;
   $60 = ((($43)) + 28|0);
   HEAP32[$60>>2] = -1;
   $61 = (_tre_parse($43)|0);
   $62 = ($61|0)==(0);
   L9: do {
    if ($62) {
     $63 = ((($43)) + 20|0);
     $64 = HEAP32[$63>>2]|0;
     $65 = (($64) + -1)|0;
     HEAP32[$0>>2] = $65;
     $66 = ((($43)) + 8|0);
     $67 = HEAP32[$66>>2]|0;
     $68 = HEAP32[$60>>2]|0;
     $69 = ($68|0)>(-1);
     if ($69) {
      $70 = ((($43)) + 32|0);
      $71 = HEAP32[$70>>2]|0;
      $72 = ($71|0)==(0);
      if (!($72)) {
       $$0192 = 0;$$0195 = 0;$$0201 = 0;$$3 = 2;
       break;
      }
     }
     $73 = ($68|0)<($64|0);
     if ($73) {
      $74 = (_calloc(1,68)|0);
      $75 = ($74|0)==(0|0);
      if ($75) {
       $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
      } else {
       $$lobit = $68 >>> 31;
       $$lobit$not = $$lobit ^ 1;
       $76 = ((($74)) + 60|0);
       HEAP32[$76>>2] = $$lobit$not;
       $77 = ((($43)) + 32|0);
       $78 = HEAP32[$77>>2]|0;
       $79 = ((($74)) + 64|0);
       HEAP32[$79>>2] = $78;
       $80 = ((($74)) + 28|0);
       HEAP32[$80>>2] = $64;
       $81 = ($$lobit$not|0)!=(0);
       $82 = $2 & 8;
       $83 = ($82|0)==(0);
       $or$cond = $83 | $81;
       if ($or$cond) {
        $84 = (_tre_add_tags(0,$44,$67,$74)|0);
        $85 = ($84|0)==(0);
        if (!($85)) {
         $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $84;
         break;
        }
        $86 = ((($74)) + 40|0);
        $87 = HEAP32[$86>>2]|0;
        $88 = ($87|0)>(0);
        if ($88) {
         $89 = $87 << 2;
         $90 = (($89) + 4)|0;
         $91 = (_malloc($90)|0);
         $92 = ($91|0)==(0|0);
         if ($92) {
          $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
          break;
         }
         $93 = ((($74)) + 32|0);
         HEAP32[$93>>2] = $91;
         _memset(($91|0),-1,($90|0))|0;
         $$0190 = $91;
        } else {
         $$0190 = 0;
        }
        $94 = $87 << 1;
        $95 = $94 | 1;
        $96 = (_calloc($95,4)|0);
        $97 = ((($74)) + 36|0);
        HEAP32[$97>>2] = $96;
        $98 = ($96|0)==(0|0);
        if ($98) {
         $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
         break;
        }
        $99 = HEAP32[$63>>2]|0;
        $100 = (_calloc($99,12)|0);
        $101 = ($100|0)==(0|0);
        if ($101) {
         $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
         break;
        }
        $102 = ((($74)) + 16|0);
        HEAP32[$102>>2] = $100;
        $103 = (_tre_add_tags($52,$44,$67,$74)|0);
        $104 = ($103|0)==(0);
        if ($104) {
         $$1191 = $$0190;
        } else {
         $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $103;
         break;
        }
       } else {
        $$1191 = 0;
       }
       $105 = ((($43)) + 24|0);
       $106 = HEAP32[$51>>2]|0;
       HEAP32[$38>>2] = 0;
       HEAP32[$39>>2] = 0;
       HEAP32[$37>>2] = $67;
       ;HEAP32[$$byval_copy>>2]=HEAP32[$37>>2]|0;
       $107 = (_tre_stack_push($44,$$byval_copy)|0);
       $108 = ($107|0)==(0);
       L26: do {
        if ($108) {
         HEAP32[$36>>2] = 0;
         ;HEAP32[$$byval_copy1>>2]=HEAP32[$36>>2]|0;
         $109 = (_tre_stack_push($44,$$byval_copy1)|0);
         $110 = ($109|0)==(0);
         if ($110) {
          $111 = HEAP32[$51>>2]|0;
          $112 = ($111|0)>($106|0);
          do {
           if ($112) {
            $$0189253$i253 = 0;$$0194252$i254 = 0;$114 = $111;$132 = 0;
            L30: while(1) {
             $113 = (($114) + -1)|0;
             HEAP32[$51>>2] = $113;
             $115 = HEAP32[$47>>2]|0;
             $116 = (($115) + ($113<<2)|0);
             $117 = HEAP32[$116>>2]|0;
             $118 = (($114) + -2)|0;
             HEAP32[$51>>2] = $118;
             $119 = (($115) + ($118<<2)|0);
             $120 = HEAP32[$119>>2]|0;
             L32: do {
              switch ($117|0) {
              case 0:  {
               $123 = HEAP32[$120>>2]|0;
               switch ($123|0) {
               case 0:  {
                $124 = ((($120)) + 4|0);
                $125 = HEAP32[$124>>2]|0;
                $126 = HEAP32[$125>>2]|0;
                $127 = ($126|0)>(-1);
                $128 = ($126|0)==(-4);
                $or$cond$i = $127 | $128;
                if (!($or$cond$i)) {
                 $$0189253$i$be = $$0189253$i253;$$0194252$i$be = $$0194252$i254;$$be = $132;
                 break L32;
                }
                $129 = ((($125)) + 8|0);
                $130 = HEAP32[$129>>2]|0;
                $131 = (($130) + ($132))|0;
                HEAP32[$129>>2] = $131;
                $133 = HEAP32[$39>>2]|0;
                $134 = ($131|0)>($133|0);
                if (!($134)) {
                 $$0189253$i$be = $$0189253$i253;$$0194252$i$be = $$0194252$i254;$$be = $132;
                 break L32;
                }
                HEAP32[$39>>2] = $131;
                $$0189253$i$be = $$0189253$i253;$$0194252$i$be = $$0194252$i254;$$be = $132;
                break L32;
                break;
               }
               case 3:  {
                $135 = ((($120)) + 4|0);
                $136 = HEAP32[$135>>2]|0;
                $137 = ((($136)) + 4|0);
                $138 = HEAP32[$137>>2]|0;
                HEAP32[$35>>2] = $138;
                ;HEAP32[$$byval_copy2>>2]=HEAP32[$35>>2]|0;
                $139 = (_tre_stack_push($44,$$byval_copy2)|0);
                $140 = ($139|0)==(0);
                if (!($140)) {
                 $$0167$lcssa$i$ph = $139;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                HEAP32[$34>>2] = 0;
                ;HEAP32[$$byval_copy3>>2]=HEAP32[$34>>2]|0;
                $141 = (_tre_stack_push($44,$$byval_copy3)|0);
                $142 = ($141|0)==(0);
                if (!($142)) {
                 $$0167$lcssa$i$ph = $141;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                $143 = HEAP32[$136>>2]|0;
                HEAP32[$33>>2] = $143;
                ;HEAP32[$$byval_copy4>>2]=HEAP32[$33>>2]|0;
                $144 = (_tre_stack_push($44,$$byval_copy4)|0);
                $145 = ($144|0)==(0);
                if (!($145)) {
                 $$0167$lcssa$i$ph = $144;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                HEAP32[$32>>2] = 0;
                ;HEAP32[$$byval_copy5>>2]=HEAP32[$32>>2]|0;
                $146 = (_tre_stack_push($44,$$byval_copy5)|0);
                $$0167$be$i = $146;
                break;
               }
               case 1:  {
                $147 = ((($120)) + 4|0);
                $148 = HEAP32[$147>>2]|0;
                $149 = ((($148)) + 4|0);
                $150 = HEAP32[$149>>2]|0;
                HEAP32[$31>>2] = $150;
                ;HEAP32[$$byval_copy6>>2]=HEAP32[$31>>2]|0;
                $151 = (_tre_stack_push($44,$$byval_copy6)|0);
                $152 = ($151|0)==(0);
                if (!($152)) {
                 $$0167$lcssa$i$ph = $151;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                HEAP32[$30>>2] = 0;
                ;HEAP32[$$byval_copy7>>2]=HEAP32[$30>>2]|0;
                $153 = (_tre_stack_push($44,$$byval_copy7)|0);
                $154 = ($153|0)==(0);
                if (!($154)) {
                 $$0167$lcssa$i$ph = $153;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                $155 = HEAP32[$148>>2]|0;
                HEAP32[$29>>2] = $155;
                ;HEAP32[$$byval_copy8>>2]=HEAP32[$29>>2]|0;
                $156 = (_tre_stack_push($44,$$byval_copy8)|0);
                $157 = ($156|0)==(0);
                if (!($157)) {
                 $$0167$lcssa$i$ph = $156;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                HEAP32[$28>>2] = 0;
                ;HEAP32[$$byval_copy9>>2]=HEAP32[$28>>2]|0;
                $158 = (_tre_stack_push($44,$$byval_copy9)|0);
                $$0167$be$i = $158;
                break;
               }
               case 2:  {
                $159 = ((($120)) + 4|0);
                $160 = HEAP32[$159>>2]|0;
                HEAP32[$27>>2] = $132;
                ;HEAP32[$$byval_copy10>>2]=HEAP32[$27>>2]|0;
                $161 = (_tre_stack_push($44,$$byval_copy10)|0);
                $162 = ($161|0)==(0);
                if (!($162)) {
                 $$0167$lcssa$i$ph = $161;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                HEAP32[$26>>2] = $120;
                ;HEAP32[$$byval_copy11>>2]=HEAP32[$26>>2]|0;
                $163 = (_tre_stack_push($44,$$byval_copy11)|0);
                $164 = ($163|0)==(0);
                if (!($164)) {
                 $$0167$lcssa$i$ph = $163;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                HEAP32[$25>>2] = 1;
                ;HEAP32[$$byval_copy12>>2]=HEAP32[$25>>2]|0;
                $165 = (_tre_stack_push($44,$$byval_copy12)|0);
                $166 = ($165|0)==(0);
                if (!($166)) {
                 $$0167$lcssa$i$ph = $165;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                $167 = HEAP32[$160>>2]|0;
                HEAP32[$24>>2] = $167;
                ;HEAP32[$$byval_copy13>>2]=HEAP32[$24>>2]|0;
                $168 = (_tre_stack_push($44,$$byval_copy13)|0);
                $169 = ($168|0)==(0);
                if (!($169)) {
                 $$0167$lcssa$i$ph = $168;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                HEAP32[$23>>2] = 0;
                ;HEAP32[$$byval_copy14>>2]=HEAP32[$23>>2]|0;
                $170 = (_tre_stack_push($44,$$byval_copy14)|0);
                $171 = ($170|0)==(0);
                if (!($171)) {
                 $$0167$lcssa$i$ph = $170;$$0189253$i$lcssa$ph = $$0189253$i253;
                 label = 81;
                 break L30;
                }
                $172 = ((($160)) + 4|0);
                $173 = HEAP32[$172>>2]|0;
                $174 = ($173|0)>(1);
                if ($174) {
                 label = 43;
                } else {
                 $175 = ((($160)) + 8|0);
                 $176 = HEAP32[$175>>2]|0;
                 $177 = ($176|0)>(1);
                 if ($177) {
                  label = 43;
                 } else {
                  $570 = $132;
                 }
                }
                if ((label|0) == 43) {
                 label = 0;
                 HEAP32[$38>>2] = 0;
                 $570 = 0;
                }
                $178 = (($$0194252$i254) + 1)|0;
                $$0189253$i$be = $$0189253$i253;$$0194252$i$be = $178;$$be = $570;
                break L32;
                break;
               }
               default: {
                $$0189253$i$be = $$0189253$i253;$$0194252$i$be = $$0194252$i254;$$be = $132;
                break L32;
               }
               }
               $179 = ($$0167$be$i|0)==(0);
               if ($179) {
                $$0189253$i$be = $$0189253$i253;$$0194252$i$be = $$0194252$i254;$$be = $132;
               } else {
                $$0167$lcssa$i$ph = $$0167$be$i;$$0189253$i$lcssa$ph = $$0189253$i253;
                label = 81;
                break L30;
               }
               break;
              }
              case 1:  {
               $180 = ((($120)) + 4|0);
               $181 = HEAP32[$180>>2]|0;
               $182 = (($114) + -3)|0;
               HEAP32[$51>>2] = $182;
               $183 = (($115) + ($182<<2)|0);
               $184 = HEAP32[$183>>2]|0;
               HEAP32[$38>>2] = $184;
               $185 = ((($181)) + 4|0);
               $186 = HEAP32[$185>>2]|0;
               $187 = ($186|0)>(1);
               if ($187) {
                HEAP32[$40>>2] = 0;
                label = 50;
               } else {
                $188 = ((($181)) + 8|0);
                $189 = HEAP32[$188>>2]|0;
                $190 = ($189|0)>(1);
                if ($190) {
                 HEAP32[$40>>2] = 0;
                 $191 = ($186|0)>(0);
                 if ($191) {
                  label = 50;
                 } else {
                  $$0180$lcssa$i314 = $184;$$0185$lcssa$i313 = 0;$$lcssa226$i315 = $186;$$pre$phi311Z2D = $188;$211 = $189;
                  label = 58;
                 }
                } else {
                 $253 = $184;
                }
               }
               do {
                if ((label|0) == 50) {
                 label = 0;
                 $192 = $187 ? 1 : 2;
                 $193 = HEAP32[$181>>2]|0;
                 $194 = (_tre_copy_ast($52,$44,$193,$192,$38,$$1191,$41,$39)|0);
                 $195 = ($194|0)==(0);
                 if ($195) {
                  $$0185243$i247 = 0;$201 = 1;$571 = $184;
                 } else {
                  $$4$ph$i = $194;
                  label = 54;
                  break L30;
                 }
                 while(1) {
                  $196 = ($$0185243$i247|0)==(0|0);
                  $197 = HEAP32[$41>>2]|0;
                  if ($196) {
                   $$1186$i = $197;
                  } else {
                   $198 = (_tre_ast_new_catenation($52,$$0185243$i247,$197)|0);
                   $$1186$i = $198;
                  }
                  $199 = ($$1186$i|0)==(0|0);
                  if ($199) {
                   $$4$ph$i = 12;
                   label = 54;
                   break L30;
                  }
                  $200 = HEAP32[$185>>2]|0;
                  $202 = ($201|0)<($200|0);
                  if (!($202)) {
                   break;
                  }
                  $$pre$i = HEAP32[$38>>2]|0;
                  $203 = (($201) + 1)|0;
                  $204 = ($203|0)<($200|0);
                  $205 = $204 ? 1 : 2;
                  $206 = HEAP32[$181>>2]|0;
                  $207 = (_tre_copy_ast($52,$44,$206,$205,$38,$$1191,$41,$39)|0);
                  $208 = ($207|0)==(0);
                  if ($208) {
                   $$0185243$i247 = $$1186$i;$201 = $203;$571 = $$pre$i;
                  } else {
                   $$4$ph$i = $207;
                   label = 54;
                   break L30;
                  }
                 }
                 $$phi$trans$insert = ((($181)) + 8|0);
                 $$pre = HEAP32[$$phi$trans$insert>>2]|0;
                 $209 = ($$pre|0)==(-1);
                 if (!($209)) {
                  $$0180$lcssa$i314 = $571;$$0185$lcssa$i313 = $$1186$i;$$lcssa226$i315 = $200;$$pre$phi311Z2D = $$phi$trans$insert;$211 = $$pre;
                  label = 58;
                  break;
                 }
                 $212 = HEAP32[$38>>2]|0;
                 $213 = HEAP32[$181>>2]|0;
                 $214 = (_tre_copy_ast($52,$44,$213,0,$38,0,$40,$39)|0);
                 $215 = ($214|0)==(0);
                 if (!($215)) {
                  $$8$ph$i = $214;
                  break L30;
                 }
                 $216 = HEAP32[$40>>2]|0;
                 $217 = (_tre_ast_new_iter($52,$216,0,-1,0)|0);
                 HEAP32[$40>>2] = $217;
                 $218 = ($217|0)==(0|0);
                 if ($218) {
                  $$8$ph$i = 12;
                  break L30;
                 }
                 HEAP32[$38>>2] = $212;
                 $$0185$lcssa$i312316322 = $$1186$i;$$2182$i319321 = $212;$245 = $217;
                 label = 74;
                }
               } while(0);
               do {
                if ((label|0) == 58) {
                 label = 0;
                 $210 = ($$lcssa226$i315|0)<($211|0);
                 if ($210) {
                  $$1184248$i = $$lcssa226$i315;$223 = 0;
                  while(1) {
                   $219 = HEAP32[$38>>2]|0;
                   $220 = HEAP32[$181>>2]|0;
                   $221 = (_tre_copy_ast($52,$44,$220,0,$38,0,$42,$39)|0);
                   $222 = ($221|0)==(0);
                   if (!($222)) {
                    $$6$ph$i = $221;
                    label = 70;
                    break L30;
                   }
                   $224 = ($223|0)==(0|0);
                   if ($224) {
                    $227 = HEAP32[$42>>2]|0;
                    HEAP32[$40>>2] = $227;
                    $228 = $227;
                    $229 = $228;
                   } else {
                    $225 = HEAP32[$42>>2]|0;
                    $226 = (_tre_ast_new_catenation($52,$225,$223)|0);
                    HEAP32[$40>>2] = $226;
                    $229 = $226;
                   }
                   $230 = ($229|0)==(0|0);
                   if ($230) {
                    $$6$ph$i = 12;
                    label = 70;
                    break L30;
                   }
                   $231 = (_tre_ast_new_node($52,0,20)|0);
                   $232 = ($231|0)==(0|0);
                   if ($232) {
                    $$6$ph$i = 12;
                    label = 70;
                    break L30;
                   }
                   $233 = ((($231)) + 4|0);
                   $234 = HEAP32[$233>>2]|0;
                   HEAP32[$234>>2] = -1;
                   $235 = ((($234)) + 4|0);
                   HEAP32[$235>>2] = -1;
                   $236 = ((($234)) + 8|0);
                   HEAP32[$236>>2] = -1;
                   $237 = (_tre_ast_new_union($52,$231,$229)|0);
                   HEAP32[$40>>2] = $237;
                   $238 = ($237|0)==(0|0);
                   if ($238) {
                    $$6$ph$i = 12;
                    label = 70;
                    break L30;
                   }
                   $239 = (($$1184248$i) + 1)|0;
                   $240 = HEAP32[$$pre$phi311Z2D>>2]|0;
                   $241 = ($239|0)<($240|0);
                   if ($241) {
                    $$1184248$i = $239;$223 = $237;
                   } else {
                    $$2182$i = $219;$243 = $237;
                    break;
                   }
                  }
                 } else {
                  $$2182$i = $$0180$lcssa$i314;$243 = 0;
                 }
                 HEAP32[$38>>2] = $$2182$i;
                 $242 = ($$0185$lcssa$i313|0)==(0|0);
                 if ($242) {
                  $$2182$i317 = $$2182$i;$$3188$i = $243;
                  label = 75;
                  break;
                 }
                 $244 = ($243|0)==(0|0);
                 if ($244) {
                  $$2182$i318 = $$2182$i;$$3188217$i = $$0185$lcssa$i313;
                  label = 76;
                 } else {
                  $$0185$lcssa$i312316322 = $$0185$lcssa$i313;$$2182$i319321 = $$2182$i;$245 = $243;
                  label = 74;
                 }
                }
               } while(0);
               if ((label|0) == 74) {
                label = 0;
                $246 = (_tre_ast_new_catenation($52,$$0185$lcssa$i312316322,$245)|0);
                $$2182$i317 = $$2182$i319321;$$3188$i = $246;
                label = 75;
               }
               if ((label|0) == 75) {
                label = 0;
                $247 = ($$3188$i|0)==(0|0);
                if ($247) {
                 $$8$ph$i = 12;
                 break L30;
                } else {
                 $$2182$i318 = $$2182$i317;$$3188217$i = $$3188$i;
                 label = 76;
                }
               }
               if ((label|0) == 76) {
                label = 0;
                $248 = ((($$3188217$i)) + 4|0);
                $249 = HEAP32[$248>>2]|0;
                HEAP32[$180>>2] = $249;
                $250 = HEAP32[$$3188217$i>>2]|0;
                HEAP32[$120>>2] = $250;
                $253 = $$2182$i318;
               }
               $251 = (($$0194252$i254) + -1)|0;
               $252 = (($253) - ($184))|0;
               $254 = (($252) + ($$0189253$i253))|0;
               $255 = ($251|0)==(0);
               if ($255) {
                HEAP32[$38>>2] = $254;
                $$0189253$i$be = $254;$$0194252$i$be = 0;$$be = $254;
               } else {
                $$0189253$i$be = $254;$$0194252$i$be = $251;$$be = $253;
               }
               break;
              }
              default: {
               $$0189253$i$be = $$0189253$i253;$$0194252$i$be = $$0194252$i254;$$be = $132;
              }
              }
             } while(0);
             $121 = HEAP32[$51>>2]|0;
             $122 = ($121|0)>($106|0);
             if ($122) {
              $$0189253$i253 = $$0189253$i$be;$$0194252$i254 = $$0194252$i$be;$114 = $121;$132 = $$be;
             } else {
              $$0167$lcssa$i$ph = 0;$$0189253$i$lcssa$ph = $$0189253$i$be;
              label = 81;
              break;
             }
            }
            if ((label|0) == 54) {
             $$8$ph$i = $$4$ph$i;
            }
            else if ((label|0) == 70) {
             $$8$ph$i = $$6$ph$i;
            }
            else if ((label|0) == 81) {
             $$pre310 = HEAP32[$39>>2]|0;
             $$0167$lcssa$i = $$0167$lcssa$i$ph;$$0189253$i$lcssa = $$0189253$i$lcssa$ph;$258 = $$pre310;
             break;
            }
            $$13$i$ph = $$8$ph$i;
            break L26;
           } else {
            $$0167$lcssa$i = 0;$$0189253$i$lcssa = 0;$258 = 0;
           }
          } while(0);
          $256 = HEAP32[$105>>2]|0;
          $257 = (($256) + ($$0189253$i$lcssa))|0;
          $259 = ($258|0)>($257|0);
          $$210$i = $259 ? $258 : $257;
          HEAP32[$105>>2] = $$210$i;
          $260 = ($$0167$lcssa$i|0)==(0);
          if (!($260)) {
           $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $$0167$lcssa$i;
           break L9;
          }
          $261 = (($$210$i) + 1)|0;
          HEAP32[$105>>2] = $261;
          $262 = (_tre_ast_new_node($52,0,20)|0);
          $263 = ($262|0)==(0|0);
          if ($263) {
           $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
           break L9;
          }
          $264 = ((($262)) + 4|0);
          $265 = HEAP32[$264>>2]|0;
          HEAP32[$265>>2] = 0;
          $266 = ((($265)) + 4|0);
          HEAP32[$266>>2] = 0;
          $267 = ((($265)) + 8|0);
          HEAP32[$267>>2] = $$210$i;
          $268 = (_tre_ast_new_catenation($52,$67,$262)|0);
          $269 = ($268|0)==(0|0);
          if ($269) {
           $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
           break L9;
          }
          $270 = HEAP32[$51>>2]|0;
          HEAP32[$20>>2] = $268;
          ;HEAP32[$$byval_copy15>>2]=HEAP32[$20>>2]|0;
          $271 = (_tre_stack_push($44,$$byval_copy15)|0);
          $272 = ($271|0)==(0);
          if (!($272)) {
           $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $271;
           break L9;
          }
          HEAP32[$19>>2] = 0;
          ;HEAP32[$$byval_copy16>>2]=HEAP32[$19>>2]|0;
          $273 = (_tre_stack_push($44,$$byval_copy16)|0);
          $274 = ($273|0)==(0);
          if (!($274)) {
           $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $273;
           break L9;
          }
          $275 = HEAP32[$51>>2]|0;
          $276 = ($275|0)>($270|0);
          L112: do {
           if ($276) {
            $278 = $275;
            L114: while(1) {
             $277 = (($278) + -1)|0;
             HEAP32[$51>>2] = $277;
             $279 = HEAP32[$47>>2]|0;
             $280 = (($279) + ($277<<2)|0);
             $281 = HEAP32[$280>>2]|0;
             $282 = (($278) + -2)|0;
             HEAP32[$51>>2] = $282;
             $283 = (($279) + ($282<<2)|0);
             $284 = HEAP32[$283>>2]|0;
             L116: do {
              switch ($281|0) {
              case 0:  {
               $285 = HEAP32[$284>>2]|0;
               switch ($285|0) {
               case 0:  {
                $286 = ((($284)) + 4|0);
                $287 = HEAP32[$286>>2]|0;
                $288 = HEAP32[$287>>2]|0;
                $289 = ($288|0)==(-4);
                if ($289) {
                 $290 = ((($284)) + 8|0);
                 HEAP32[$290>>2] = 0;
                 $291 = ((($287)) + 8|0);
                 $292 = HEAP32[$291>>2]|0;
                 $293 = (_tre_set_one($52,$292,0,1114111,0,0,-1)|0);
                 $294 = ((($284)) + 24|0);
                 HEAP32[$294>>2] = $293;
                 $295 = ($293|0)==(0|0);
                 if ($295) {
                  $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
                  break L9;
                 }
                 $296 = HEAP32[$291>>2]|0;
                 $297 = ((($287)) + 4|0);
                 $298 = HEAP32[$297>>2]|0;
                 $299 = (_tre_set_one($52,$296,0,1114111,0,0,$298)|0);
                 $300 = ((($284)) + 28|0);
                 HEAP32[$300>>2] = $299;
                 $301 = ($299|0)==(0|0);
                 if ($301) {
                  $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
                  break L9;
                 } else {
                  break L116;
                 }
                }
                $302 = ($288|0)<(0);
                $303 = ((($284)) + 8|0);
                if ($302) {
                 HEAP32[$303>>2] = 1;
                 $304 = (_tre_set_empty($52)|0);
                 $305 = ((($284)) + 24|0);
                 HEAP32[$305>>2] = $304;
                 $306 = ($304|0)==(0|0);
                 if ($306) {
                  $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
                  break L9;
                 }
                 $307 = (_tre_set_empty($52)|0);
                 $308 = ((($284)) + 28|0);
                 HEAP32[$308>>2] = $307;
                 $309 = ($307|0)==(0|0);
                 if ($309) {
                  $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
                  break L9;
                 } else {
                  break L116;
                 }
                } else {
                 HEAP32[$303>>2] = 0;
                 $310 = ((($287)) + 8|0);
                 $311 = HEAP32[$310>>2]|0;
                 $312 = ((($287)) + 4|0);
                 $313 = HEAP32[$312>>2]|0;
                 $314 = (_tre_set_one($52,$311,$288,$313,0,0,-1)|0);
                 $315 = ((($284)) + 24|0);
                 HEAP32[$315>>2] = $314;
                 $316 = ($314|0)==(0|0);
                 if ($316) {
                  $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
                  break L9;
                 }
                 $317 = HEAP32[$310>>2]|0;
                 $318 = HEAP32[$287>>2]|0;
                 $319 = HEAP32[$312>>2]|0;
                 $320 = ((($287)) + 12|0);
                 $321 = HEAP32[$320>>2]|0;
                 $322 = ((($287)) + 16|0);
                 $323 = HEAP32[$322>>2]|0;
                 $324 = (_tre_set_one($52,$317,$318,$319,$321,$323,-1)|0);
                 $325 = ((($284)) + 28|0);
                 HEAP32[$325>>2] = $324;
                 $326 = ($324|0)==(0|0);
                 if ($326) {
                  $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
                  break L9;
                 } else {
                  break L116;
                 }
                }
                break;
               }
               case 3:  {
                HEAP32[$18>>2] = $284;
                ;HEAP32[$$byval_copy17>>2]=HEAP32[$18>>2]|0;
                $327 = (_tre_stack_push($44,$$byval_copy17)|0);
                $328 = ($327|0)==(0);
                if (!($328)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $327;
                 break L9;
                }
                HEAP32[$17>>2] = 1;
                ;HEAP32[$$byval_copy18>>2]=HEAP32[$17>>2]|0;
                $329 = (_tre_stack_push($44,$$byval_copy18)|0);
                $330 = ($329|0)==(0);
                if (!($330)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $329;
                 break L9;
                }
                $331 = ((($284)) + 4|0);
                $332 = HEAP32[$331>>2]|0;
                $333 = ((($332)) + 4|0);
                $334 = HEAP32[$333>>2]|0;
                HEAP32[$16>>2] = $334;
                ;HEAP32[$$byval_copy19>>2]=HEAP32[$16>>2]|0;
                $335 = (_tre_stack_push($44,$$byval_copy19)|0);
                $336 = ($335|0)==(0);
                if (!($336)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $335;
                 break L9;
                }
                HEAP32[$15>>2] = 0;
                ;HEAP32[$$byval_copy20>>2]=HEAP32[$15>>2]|0;
                $337 = (_tre_stack_push($44,$$byval_copy20)|0);
                $338 = ($337|0)==(0);
                if (!($338)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $337;
                 break L9;
                }
                $339 = HEAP32[$331>>2]|0;
                $340 = HEAP32[$339>>2]|0;
                HEAP32[$14>>2] = $340;
                ;HEAP32[$$byval_copy21>>2]=HEAP32[$14>>2]|0;
                $341 = (_tre_stack_push($44,$$byval_copy21)|0);
                $342 = ($341|0)==(0);
                if (!($342)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $341;
                 break L9;
                }
                HEAP32[$13>>2] = 0;
                ;HEAP32[$$byval_copy22>>2]=HEAP32[$13>>2]|0;
                $343 = (_tre_stack_push($44,$$byval_copy22)|0);
                $344 = ($343|0)==(0);
                if ($344) {
                 break L116;
                } else {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $343;
                 break L9;
                }
                break;
               }
               case 1:  {
                HEAP32[$12>>2] = $284;
                ;HEAP32[$$byval_copy23>>2]=HEAP32[$12>>2]|0;
                $345 = (_tre_stack_push($44,$$byval_copy23)|0);
                $346 = ($345|0)==(0);
                if (!($346)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $345;
                 break L9;
                }
                HEAP32[$11>>2] = 2;
                ;HEAP32[$$byval_copy24>>2]=HEAP32[$11>>2]|0;
                $347 = (_tre_stack_push($44,$$byval_copy24)|0);
                $348 = ($347|0)==(0);
                if (!($348)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $347;
                 break L9;
                }
                $349 = ((($284)) + 4|0);
                $350 = HEAP32[$349>>2]|0;
                $351 = ((($350)) + 4|0);
                $352 = HEAP32[$351>>2]|0;
                HEAP32[$10>>2] = $352;
                ;HEAP32[$$byval_copy25>>2]=HEAP32[$10>>2]|0;
                $353 = (_tre_stack_push($44,$$byval_copy25)|0);
                $354 = ($353|0)==(0);
                if (!($354)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $353;
                 break L9;
                }
                HEAP32[$9>>2] = 0;
                ;HEAP32[$$byval_copy26>>2]=HEAP32[$9>>2]|0;
                $355 = (_tre_stack_push($44,$$byval_copy26)|0);
                $356 = ($355|0)==(0);
                if (!($356)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $355;
                 break L9;
                }
                $357 = HEAP32[$349>>2]|0;
                $358 = HEAP32[$357>>2]|0;
                HEAP32[$8>>2] = $358;
                ;HEAP32[$$byval_copy27>>2]=HEAP32[$8>>2]|0;
                $359 = (_tre_stack_push($44,$$byval_copy27)|0);
                $360 = ($359|0)==(0);
                if (!($360)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $359;
                 break L9;
                }
                HEAP32[$7>>2] = 0;
                ;HEAP32[$$byval_copy28>>2]=HEAP32[$7>>2]|0;
                $361 = (_tre_stack_push($44,$$byval_copy28)|0);
                $362 = ($361|0)==(0);
                if ($362) {
                 break L116;
                } else {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $361;
                 break L9;
                }
                break;
               }
               case 2:  {
                HEAP32[$6>>2] = $284;
                ;HEAP32[$$byval_copy29>>2]=HEAP32[$6>>2]|0;
                $363 = (_tre_stack_push($44,$$byval_copy29)|0);
                $364 = ($363|0)==(0);
                if (!($364)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $363;
                 break L9;
                }
                HEAP32[$5>>2] = 3;
                ;HEAP32[$$byval_copy30>>2]=HEAP32[$5>>2]|0;
                $365 = (_tre_stack_push($44,$$byval_copy30)|0);
                $366 = ($365|0)==(0);
                if (!($366)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $365;
                 break L9;
                }
                $367 = ((($284)) + 4|0);
                $368 = HEAP32[$367>>2]|0;
                $369 = HEAP32[$368>>2]|0;
                HEAP32[$4>>2] = $369;
                ;HEAP32[$$byval_copy31>>2]=HEAP32[$4>>2]|0;
                $370 = (_tre_stack_push($44,$$byval_copy31)|0);
                $371 = ($370|0)==(0);
                if (!($371)) {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $370;
                 break L9;
                }
                HEAP32[$3>>2] = 0;
                ;HEAP32[$$byval_copy32>>2]=HEAP32[$3>>2]|0;
                $372 = (_tre_stack_push($44,$$byval_copy32)|0);
                $373 = ($372|0)==(0);
                if ($373) {
                 break L116;
                } else {
                 $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $372;
                 break L9;
                }
                break;
               }
               default: {
                break L116;
               }
               }
               break;
              }
              case 1:  {
               $374 = ((($284)) + 4|0);
               $375 = HEAP32[$374>>2]|0;
               $376 = HEAP32[$375>>2]|0;
               $377 = ((($376)) + 8|0);
               $378 = HEAP32[$377>>2]|0;
               $379 = ($378|0)==(0);
               $380 = ((($375)) + 4|0);
               $381 = HEAP32[$380>>2]|0;
               if ($379) {
                $382 = ((($381)) + 8|0);
                $383 = HEAP32[$382>>2]|0;
                $384 = ($383|0)!=(0);
                $386 = $384;
               } else {
                $386 = 1;
               }
               $385 = $386&1;
               $387 = ((($284)) + 8|0);
               HEAP32[$387>>2] = $385;
               $388 = ((($376)) + 24|0);
               $389 = HEAP32[$388>>2]|0;
               $390 = ((($381)) + 24|0);
               $391 = HEAP32[$390>>2]|0;
               $392 = (_tre_set_union($52,$389,$391,0,0)|0);
               $393 = ((($284)) + 24|0);
               HEAP32[$393>>2] = $392;
               $394 = ($392|0)==(0|0);
               if ($394) {
                $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
                break L9;
               }
               $395 = HEAP32[$375>>2]|0;
               $396 = ((($395)) + 28|0);
               $397 = HEAP32[$396>>2]|0;
               $398 = HEAP32[$380>>2]|0;
               $399 = ((($398)) + 28|0);
               $400 = HEAP32[$399>>2]|0;
               $401 = (_tre_set_union($52,$397,$400,0,0)|0);
               $402 = ((($284)) + 28|0);
               HEAP32[$402>>2] = $401;
               $403 = ($401|0)==(0|0);
               if ($403) {
                $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = 12;
                break L9;
               }
               break;
              }
              case 3:  {
               $404 = ((($284)) + 4|0);
               $405 = HEAP32[$404>>2]|0;
               $406 = ((($405)) + 4|0);
               $407 = HEAP32[$406>>2]|0;
               $408 = ($407|0)==(0);
               $$pre$pre$i = HEAP32[$405>>2]|0;
               do {
                if ($408) {
                 label = 121;
                } else {
                 $409 = ((($$pre$pre$i)) + 8|0);
                 $410 = HEAP32[$409>>2]|0;
                 $411 = ($410|0)==(0);
                 if (!($411)) {
                  label = 121;
                  break;
                 }
                 $413 = ((($284)) + 8|0);
                 HEAP32[$413>>2] = 0;
                }
               } while(0);
               if ((label|0) == 121) {
                label = 0;
                $412 = ((($284)) + 8|0);
                HEAP32[$412>>2] = 1;
               }
               $414 = ((($$pre$pre$i)) + 24|0);
               $415 = HEAP32[$414>>2]|0;
               $416 = ((($284)) + 24|0);
               HEAP32[$416>>2] = $415;
               $417 = ((($$pre$pre$i)) + 28|0);
               $418 = HEAP32[$417>>2]|0;
               $419 = ((($284)) + 28|0);
               HEAP32[$419>>2] = $418;
               break;
              }
              case 2:  {
               $422 = ((($284)) + 4|0);
               $423 = HEAP32[$422>>2]|0;
               $424 = HEAP32[$423>>2]|0;
               $425 = ((($424)) + 8|0);
               $426 = HEAP32[$425>>2]|0;
               $427 = ($426|0)==(0);
               if ($427) {
                $434 = 0;
               } else {
                $428 = ((($423)) + 4|0);
                $429 = HEAP32[$428>>2]|0;
                $430 = ((($429)) + 8|0);
                $431 = HEAP32[$430>>2]|0;
                $432 = ($431|0)!=(0);
                $434 = $432;
               }
               $433 = $434&1;
               $435 = ((($284)) + 8|0);
               HEAP32[$435>>2] = $433;
               $436 = HEAP32[$425>>2]|0;
               $437 = ($436|0)==(0);
               if ($437) {
                $460 = ((($424)) + 24|0);
                $461 = HEAP32[$460>>2]|0;
                $462 = ((($284)) + 24|0);
                HEAP32[$462>>2] = $461;
                $$pre$i206 = ((($423)) + 4|0);
                $$pre$phi389$iZ2D = $$pre$i206;
               } else {
                $438 = (_tre_match_empty($44,$424,0,0,$21)|0);
                $439 = ($438|0)==(0);
                if (!($439)) {
                 $$21$ph$i = $438;
                 break L114;
                }
                $440 = HEAP32[$21>>2]|0;
                $441 = $440 << 2;
                $442 = (($441) + 4)|0;
                $443 = (_malloc($442)|0);
                $444 = ($443|0)==(0|0);
                if ($444) {
                 $$21$ph$i = 12;
                 break L114;
                }
                HEAP32[$443>>2] = -1;
                HEAP32[$22>>2] = 0;
                $445 = HEAP32[$423>>2]|0;
                $446 = (_tre_match_empty($44,$445,$443,$22,0)|0);
                $447 = ($446|0)==(0);
                if (!($447)) {
                 label = 131;
                 break L114;
                }
                $448 = ((($423)) + 4|0);
                $449 = HEAP32[$448>>2]|0;
                $450 = ((($449)) + 24|0);
                $451 = HEAP32[$450>>2]|0;
                $452 = HEAP32[$423>>2]|0;
                $453 = ((($452)) + 24|0);
                $454 = HEAP32[$453>>2]|0;
                $455 = HEAP32[$22>>2]|0;
                $456 = (_tre_set_union($52,$451,$454,$443,$455)|0);
                $457 = ((($284)) + 24|0);
                HEAP32[$457>>2] = $456;
                _free($443);
                $458 = HEAP32[$457>>2]|0;
                $459 = ($458|0)==(0|0);
                if ($459) {
                 $$21$ph$i = 12;
                 break L114;
                } else {
                 $$pre$phi389$iZ2D = $448;
                }
               }
               $463 = HEAP32[$$pre$phi389$iZ2D>>2]|0;
               $464 = ((($463)) + 8|0);
               $465 = HEAP32[$464>>2]|0;
               $466 = ($465|0)==(0);
               if ($466) {
                $488 = ((($463)) + 28|0);
                $489 = HEAP32[$488>>2]|0;
                $490 = ((($284)) + 28|0);
                HEAP32[$490>>2] = $489;
               } else {
                $467 = (_tre_match_empty($44,$463,0,0,$21)|0);
                $468 = ($467|0)==(0);
                if (!($468)) {
                 $$21$ph$i = $467;
                 break L114;
                }
                $469 = HEAP32[$21>>2]|0;
                $470 = $469 << 2;
                $471 = (($470) + 4)|0;
                $472 = (_malloc($471)|0);
                $473 = ($472|0)==(0|0);
                if ($473) {
                 $$21$ph$i = 12;
                 break L114;
                }
                HEAP32[$472>>2] = -1;
                HEAP32[$22>>2] = 0;
                $474 = HEAP32[$$pre$phi389$iZ2D>>2]|0;
                $475 = (_tre_match_empty($44,$474,$472,$22,0)|0);
                $476 = ($475|0)==(0);
                if (!($476)) {
                 label = 138;
                 break L114;
                }
                $477 = HEAP32[$423>>2]|0;
                $478 = ((($477)) + 28|0);
                $479 = HEAP32[$478>>2]|0;
                $480 = HEAP32[$$pre$phi389$iZ2D>>2]|0;
                $481 = ((($480)) + 28|0);
                $482 = HEAP32[$481>>2]|0;
                $483 = HEAP32[$22>>2]|0;
                $484 = (_tre_set_union($52,$479,$482,$472,$483)|0);
                $485 = ((($284)) + 28|0);
                HEAP32[$485>>2] = $484;
                _free($472);
                $486 = HEAP32[$485>>2]|0;
                $487 = ($486|0)==(0|0);
                if ($487) {
                 $$21$ph$i = 12;
                 break L114;
                }
               }
               break;
              }
              default: {
              }
              }
             } while(0);
             $420 = HEAP32[$51>>2]|0;
             $421 = ($420|0)>($270|0);
             if ($421) {
              $278 = $420;
             } else {
              break L112;
             }
            }
            if ((label|0) == 131) {
             _free($443);
             $$21$ph$i = $446;
            }
            else if ((label|0) == 138) {
             _free($472);
             $$21$ph$i = $475;
            }
            $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $$21$ph$i;
            break L9;
           }
          } while(0);
          $491 = HEAP32[$105>>2]|0;
          $492 = $491 << 2;
          $493 = (_malloc($492)|0);
          $494 = ($493|0)==(0|0);
          if ($494) {
           $$0192 = $74;$$0195 = $493;$$0201 = 0;$$3 = 12;
           break L9;
          }
          $495 = (_malloc($492)|0);
          $496 = ($495|0)==(0|0);
          if ($496) {
           $$0192 = $74;$$0195 = $493;$$0201 = $495;$$3 = 12;
           break L9;
          }
          $497 = ($491|0)>(0);
          if ($497) {
           $498 = $491 << 2;
           _memset(($493|0),0,($498|0))|0;
          }
          (_tre_ast_to_tnfa($268,0,$493,0)|0);
          $499 = HEAP32[$105>>2]|0;
          $500 = ($499|0)>(0);
          if ($500) {
           $$0196239 = 0;$$1198238 = 0;
           while(1) {
            $501 = (($495) + ($$1198238<<2)|0);
            HEAP32[$501>>2] = $$0196239;
            $502 = (($493) + ($$1198238<<2)|0);
            $503 = HEAP32[$502>>2]|0;
            $504 = (($$0196239) + 1)|0;
            $505 = (($504) + ($503))|0;
            HEAP32[$502>>2] = 0;
            $506 = (($$1198238) + 1)|0;
            $507 = ($506|0)<($499|0);
            if ($507) {
             $$0196239 = $505;$$1198238 = $506;
            } else {
             $$0196$lcssa = $505;
             break;
            }
           }
          } else {
           $$0196$lcssa = 0;
          }
          $508 = (($$0196$lcssa) + 1)|0;
          $509 = (_calloc($508,32)|0);
          $510 = ($509|0)==(0|0);
          if ($510) {
           $$0192 = $74;$$0195 = $493;$$0201 = $495;$$3 = 12;
           break L9;
          }
          HEAP32[$74>>2] = $509;
          $511 = ((($74)) + 4|0);
          HEAP32[$511>>2] = $$0196$lcssa;
          $512 = (_tre_ast_to_tnfa($268,$509,$493,$495)|0);
          $513 = ($512|0)==(0);
          if (!($513)) {
           $$0192 = $74;$$0195 = $493;$$0201 = $495;$$3 = $512;
           break L9;
          }
          $514 = ((($74)) + 20|0);
          HEAP32[$514>>2] = 0;
          $515 = ((($268)) + 24|0);
          $516 = HEAP32[$515>>2]|0;
          $$0193 = $516;$$2199 = 0;
          while(1) {
           $517 = HEAP32[$$0193>>2]|0;
           $518 = ($517|0)>(-1);
           $519 = (($$2199) + 1)|0;
           $520 = ((($$0193)) + 32|0);
           if ($518) {
            $$0193 = $520;$$2199 = $519;
           } else {
            break;
           }
          }
          $521 = (_calloc($519,32)|0);
          $522 = ($521|0)==(0|0);
          if ($522) {
           $$0192 = $74;$$0195 = $493;$$0201 = $495;$$3 = 12;
           break L9;
          }
          $523 = ((($74)) + 8|0);
          HEAP32[$523>>2] = $521;
          $524 = HEAP32[$515>>2]|0;
          $525 = HEAP32[$524>>2]|0;
          $526 = ($525|0)>(-1);
          if ($526) {
           $$3200236 = 0;$528 = $525;$535 = $524;
           while(1) {
            $527 = (($495) + ($528<<2)|0);
            $529 = HEAP32[$527>>2]|0;
            $530 = (($509) + ($529<<5)|0);
            $531 = (((($521) + ($$3200236<<5)|0)) + 8|0);
            HEAP32[$531>>2] = $530;
            $532 = (((($521) + ($$3200236<<5)|0)) + 12|0);
            HEAP32[$532>>2] = $528;
            $533 = (((($521) + ($$3200236<<5)|0)) + 16|0);
            HEAP32[$533>>2] = 0;
            $534 = ((($535)) + 12|0);
            $536 = HEAP32[$534>>2]|0;
            $537 = ($536|0)==(0|0);
            if (!($537)) {
             $$0 = 0;
             while(1) {
              $538 = (($536) + ($$0<<2)|0);
              $539 = HEAP32[$538>>2]|0;
              $540 = ($539|0)>(-1);
              $541 = (($$0) + 1)|0;
              if ($540) {
               $$0 = $541;
              } else {
               break;
              }
             }
             $542 = $541 << 2;
             $543 = (_malloc($542)|0);
             HEAP32[$533>>2] = $543;
             $544 = ($543|0)==(0|0);
             if ($544) {
              $$0192 = $74;$$0195 = $493;$$0201 = $495;$$3 = 12;
              break L9;
             }
             $545 = HEAP32[$534>>2]|0;
             _memcpy(($543|0),($545|0),($542|0))|0;
            }
            $546 = ((($535)) + 16|0);
            $547 = HEAP32[$546>>2]|0;
            $548 = (((($521) + ($$3200236<<5)|0)) + 20|0);
            HEAP32[$548>>2] = $547;
            $549 = (($$3200236) + 1)|0;
            $550 = ((($535)) + 32|0);
            $551 = HEAP32[$550>>2]|0;
            $552 = ($551|0)>(-1);
            if ($552) {
             $$3200236 = $549;$528 = $551;$535 = $550;
            } else {
             $$3200$lcssa = $549;
             break;
            }
           }
          } else {
           $$3200$lcssa = 0;
          }
          $553 = (((($521) + ($$3200$lcssa<<5)|0)) + 8|0);
          HEAP32[$553>>2] = 0;
          HEAP32[$511>>2] = $$0196$lcssa;
          $554 = ((($268)) + 28|0);
          $555 = HEAP32[$554>>2]|0;
          $556 = HEAP32[$555>>2]|0;
          $557 = (($495) + ($556<<2)|0);
          $558 = HEAP32[$557>>2]|0;
          $559 = (($509) + ($558<<5)|0);
          $560 = ((($74)) + 12|0);
          HEAP32[$560>>2] = $559;
          $561 = HEAP32[$105>>2]|0;
          $562 = ((($74)) + 52|0);
          HEAP32[$562>>2] = $561;
          $563 = ((($74)) + 56|0);
          HEAP32[$563>>2] = $2;
          ___tre_mem_destroy($52);
          $564 = HEAP32[$47>>2]|0;
          _free($564);
          _free($44);
          _free($493);
          _free($495);
          $565 = ((($0)) + 4|0);
          HEAP32[$565>>2] = $74;
          $$0188 = 0;
          break L1;
         } else {
          $$13$i$ph = $109;
         }
        } else {
         $$13$i$ph = $107;
        }
       } while(0);
       $$0192 = $74;$$0195 = 0;$$0201 = 0;$$3 = $$13$i$ph;
      }
     } else {
      $$0192 = 0;$$0195 = 0;$$0201 = 0;$$3 = 6;
     }
    } else {
     $$0192 = 0;$$0195 = 0;$$0201 = 0;$$3 = $61;
    }
   } while(0);
   ___tre_mem_destroy($52);
   $566 = HEAP32[$47>>2]|0;
   _free($566);
   _free($44);
   $567 = ($$0195|0)==(0|0);
   if (!($567)) {
    _free($$0195);
   }
   $568 = ($$0201|0)==(0|0);
   if (!($568)) {
    _free($$0201);
   }
   $569 = ((($0)) + 4|0);
   HEAP32[$569>>2] = $$0192;
   _regfree($0);
   $$0188 = $$3;
  }
 } while(0);
 STACKTOP = sp;return ($$0188|0);
}
function _tre_parse($0) {
 $0 = $0|0;
 var $$ = 0, $$$011$i$i = 0, $$$011$i42$i = 0, $$$0124$i = 0, $$$0316 = 0, $$$036$i = 0, $$$037$i = 0, $$$i$i = 0, $$0$i352 = 0, $$0$i354 = 0, $$0$i356 = 0, $$0$i358 = 0, $$0$i360 = 0, $$0$i362 = 0, $$0$lcssa$i$i = 0, $$0110$i = 0, $$0111$lcssa$i = 0, $$0111191$i = 0, $$01112$i$i = 0, $$01112$i41$i = 0;
 var $$0113$i = 0, $$0118$lcssa$i = 0, $$0118190$i = 0, $$0121189$i = 0, $$0123187$i = 0, $$0124$lcssa$i = 0, $$013$i$i$add = 0, $$013$i$i$idx = 0, $$013$i40$i$add = 0, $$013$i40$i$idx = 0, $$0138$i$i = 0, $$0139$i$i = 0, $$0141$i$i = 0, $$0142$i$i = 0, $$0148$i = 0, $$0152$i$i = 0, $$0178$i$i = 0, $$0316$be = 0, $$0316$lcssa = 0, $$0323$be = 0;
 var $$0323$lcssa = 0, $$0323456 = 0, $$0325 = 0, $$0338 = 0, $$0339$lcssa = 0, $$0339451 = 0, $$036$i = 0, $$03660$i = 0, $$037$i = 0, $$08$i = 0, $$1$i = 0, $$1$lcssa$i$i = 0, $$10$i = 0, $$10$i$i = 0, $$11$i$i = 0, $$1119$i = 0, $$1119154$ph$i = 0, $$1122$i = 0, $$1122152$ph$i = 0, $$1135$i$i = 0;
 var $$1137$i$i = 0, $$1140$i$i = 0, $$1143$i$i = 0, $$1148$$i$i = 0, $$1148$i$i = 0, $$1149$i = 0, $$1153$i$i = 0, $$1185$i$i = 0, $$12$i = 0, $$12$i$i = 0, $$154$i$i = 0, $$17 = 0, $$2$i$i = 0, $$2144$i$i = 0, $$2144$lcssa$i$i = 0, $$2144177$i$i = 0, $$2144179$i$i = 0, $$2149$i$i = 0, $$2150$i = 0, $$3$i$i = 0;
 var $$3145$lcssa$i$i = 0, $$3145184$i$i = 0, $$3150$i$i = 0, $$3151$i = 0, $$3162$i$i = 0, $$343 = 0, $$4$i$i = 0, $$4$ph$i = 0, $$4146$i$i = 0, $$4151$i$i = 0, $$5$i$i = 0, $$501 = 0, $$5129$ph$i = 0, $$6$i$i = 0, $$7$i$i = 0, $$8$i$i = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0;
 var $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$in = 0;
 var $$lcssa$i = 0, $$lcssa432 = 0, $$mux = 0, $$not = 0, $$not345 = 0, $$not452 = 0, $$off$i = 0, $$pn$lcssa = 0, $$pn450 = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$phiZ2D = 0, $$pre204$i = 0, $$pre483 = 0, $$pre485 = 0, $$ptr = 0, $$ptr413 = 0, $$ptr414 = 0, $$ptr415 = 0, $$sroa$0$0$be = 0;
 var $$sroa$0$0$in$i$add = 0, $$sroa$0$0$in$i$idx = 0, $$sroa$0$0$lcssa = 0, $$sroa$0$0454 = 0, $$sroa$0$1$in$i$idx = 0, $$sroa$0$1$in59$i$idx = 0, $$sroa$0$1$in59$i$ptr = 0, $$sroa$0$10 = 0, $$sroa$0$10$in = 0, $$sroa$0$10488 = 0, $$sroa$0$12 = 0, $$sroa$0$12$in = 0, $$sroa$0$15 = 0, $$sroa$0$15$in = 0, $$sroa$0$17 = 0, $$sroa$0$4 = 0, $$sroa$0$4$in = 0, $1 = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $brmerge = 0, $not$$i$i = 0, $notrhs = 0, $or$cond = 0, $or$cond$i = 0, $or$cond$i$i = 0, $or$cond$i350 = 0;
 var $or$cond10 = 0, $or$cond12 = 0, $or$cond14 = 0, $or$cond155$i$i = 0, $or$cond156$i$i = 0, $or$cond18 = 0, $or$cond18453 = 0, $storemerge = 0, $storemerge$i = 0, $storemerge412 = 0, $storemerge449 = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 608|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(608|0);
 $$byval_copy22 = sp + 500|0;
 $$byval_copy21 = sp + 496|0;
 $$byval_copy20 = sp + 492|0;
 $$byval_copy19 = sp + 488|0;
 $$byval_copy18 = sp + 484|0;
 $$byval_copy17 = sp + 480|0;
 $$byval_copy16 = sp + 476|0;
 $$byval_copy15 = sp + 472|0;
 $$byval_copy14 = sp + 468|0;
 $$byval_copy13 = sp + 464|0;
 $$byval_copy12 = sp + 460|0;
 $$byval_copy11 = sp + 456|0;
 $$byval_copy10 = sp + 452|0;
 $$byval_copy9 = sp + 448|0;
 $$byval_copy8 = sp + 444|0;
 $$byval_copy7 = sp + 440|0;
 $$byval_copy6 = sp + 436|0;
 $$byval_copy5 = sp + 432|0;
 $$byval_copy4 = sp + 428|0;
 $$byval_copy3 = sp + 424|0;
 $$byval_copy2 = sp + 420|0;
 $$byval_copy1 = sp + 416|0;
 $$byval_copy = sp + 412|0;
 $1 = sp + 408|0;
 $2 = sp + 404|0;
 $3 = sp + 400|0;
 $4 = sp + 396|0;
 $5 = sp + 544|0;
 $6 = sp + 392|0;
 $7 = sp + 136|0;
 $8 = sp + 132|0;
 $9 = sp + 128|0;
 $10 = sp + 124|0;
 $11 = sp + 120|0;
 $12 = sp + 116|0;
 $13 = sp + 112|0;
 $14 = sp + 108|0;
 $15 = sp + 104|0;
 $16 = sp + 100|0;
 $17 = sp + 96|0;
 $18 = sp + 92|0;
 $19 = sp + 88|0;
 $20 = sp + 84|0;
 $21 = sp + 80|0;
 $22 = sp + 76|0;
 $23 = sp + 72|0;
 $24 = sp + 68|0;
 $25 = sp + 64|0;
 $26 = sp + 60|0;
 $27 = sp + 56|0;
 $28 = sp + 52|0;
 $29 = sp + 48|0;
 $30 = sp + 44|0;
 $31 = sp;
 $32 = sp + 536|0;
 $33 = sp + 504|0;
 $34 = ((($0)) + 4|0);
 $35 = HEAP32[$34>>2]|0;
 $36 = ((($35)) + 12|0);
 $37 = HEAP32[$36>>2]|0;
 $38 = ((($0)) + 40|0);
 $39 = HEAP32[$38>>2]|0;
 $40 = ($39|0)==(0);
 if ($40) {
  $41 = ((($0)) + 20|0);
  $42 = HEAP32[$41>>2]|0;
  HEAP32[$29>>2] = $42;
  ;HEAP32[$$byval_copy>>2]=HEAP32[$29>>2]|0;
  (_tre_stack_push($35,$$byval_copy)|0);
  HEAP32[$28>>2] = 2;
  ;HEAP32[$$byval_copy1>>2]=HEAP32[$28>>2]|0;
  (_tre_stack_push($35,$$byval_copy1)|0);
  $43 = HEAP32[$41>>2]|0;
  $44 = (($43) + 1)|0;
  HEAP32[$41>>2] = $44;
 }
 HEAP32[$27>>2] = 0;
 ;HEAP32[$$byval_copy2>>2]=HEAP32[$27>>2]|0;
 $45 = (_tre_stack_push($35,$$byval_copy2)|0);
 $46 = ((($0)) + 12|0);
 $47 = HEAP32[$46>>2]|0;
 $48 = ((($0)) + 16|0);
 HEAP32[$48>>2] = $47;
 $49 = HEAP32[$36>>2]|0;
 $50 = ($49|0)>($37|0);
 $51 = ($45|0)==(0);
 $52 = $51 & $50;
 $$not452 = $52 ^ 1;
 $53 = ($45|0)!=(0);
 $or$cond18453 = $53 | $$not452;
 L4: do {
  if ($or$cond18453) {
   $$0316$lcssa = $45;$$0323$lcssa = 0;$$lcssa432 = $51;$$sroa$0$0$lcssa = 0;
   label = 230;
  } else {
   $54 = ((($35)) + 16|0);
   $55 = ((($0)) + 36|0);
   $56 = ((($0)) + 24|0);
   $57 = ((($0)) + 20|0);
   $58 = ((($0)) + 28|0);
   $59 = ((($32)) + 1|0);
   $60 = ((($31)) + 12|0);
   $61 = ((($31)) + 40|0);
   $62 = ((($31)) + 24|0);
   $63 = ((($31)) + 8|0);
   $$0323456 = 0;$$sroa$0$0454 = 0;$65 = $49;
   L6: while(1) {
    $64 = (($65) + -1)|0;
    HEAP32[$36>>2] = $64;
    $66 = HEAP32[$54>>2]|0;
    $67 = (($66) + ($64<<2)|0);
    $68 = HEAP32[$67>>2]|0;
    L8: do {
     switch ($68|0) {
     case 0:  {
      $74 = HEAP32[$55>>2]|0;
      $75 = $74 & 1;
      $76 = ($75|0)==(0);
      if (!($76)) {
       HEAP32[$26>>2] = 7;
       ;HEAP32[$$byval_copy3>>2]=HEAP32[$26>>2]|0;
       $77 = (_tre_stack_push($35,$$byval_copy3)|0);
       $78 = ($77|0)==(0);
       if (!($78)) {
        $$0316$be = $77;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
        break L8;
       }
      }
      HEAP32[$25>>2] = 3;
      ;HEAP32[$$byval_copy4>>2]=HEAP32[$25>>2]|0;
      $79 = (_tre_stack_push($35,$$byval_copy4)|0);
      $$0316$be = $79;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
      break;
     }
     case 3:  {
      HEAP32[$24>>2] = 5;
      ;HEAP32[$$byval_copy5>>2]=HEAP32[$24>>2]|0;
      $80 = (_tre_stack_push($35,$$byval_copy5)|0);
      $81 = ($80|0)==(0);
      if ($81) {
       HEAP32[$23>>2] = 4;
       ;HEAP32[$$byval_copy6>>2]=HEAP32[$23>>2]|0;
       $82 = (_tre_stack_push($35,$$byval_copy6)|0);
       $$0316$be = $82;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
      } else {
       $$0316$be = $80;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
      }
      break;
     }
     case 4:  {
      HEAP32[$22>>2] = 9;
      ;HEAP32[$$byval_copy7>>2]=HEAP32[$22>>2]|0;
      $83 = (_tre_stack_push($35,$$byval_copy7)|0);
      $84 = ($83|0)==(0);
      if ($84) {
       HEAP32[$21>>2] = 1;
       ;HEAP32[$$byval_copy8>>2]=HEAP32[$21>>2]|0;
       $85 = (_tre_stack_push($35,$$byval_copy8)|0);
       $$0316$be = $85;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
      } else {
       $$0316$be = $83;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
      }
      break;
     }
     case 5:  {
      $86 = HEAP32[$46>>2]|0;
      $87 = HEAP8[$86>>0]|0;
      $88 = ($87<<24>>24)==(0);
      if ($88) {
       $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
      } else {
       $89 = HEAP32[$55>>2]|0;
       $90 = $89 & 1;
       $91 = ($90|0)!=(0);
       $92 = ($87<<24>>24)==(124);
       $or$cond = $92 & $91;
       if ($or$cond) {
        $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
       } else {
        $93 = ($87<<24>>24)==(41);
        $or$cond10 = $93 & $91;
        $94 = ($$0323456|0)>(0);
        $or$cond12 = $94 & $or$cond10;
        do {
         if (!($or$cond12)) {
          $95 = ($90|0)==(0);
          $96 = ($87<<24>>24)==(92);
          $or$cond14 = $96 & $95;
          if ($or$cond14) {
           $97 = ((($86)) + 1|0);
           $98 = HEAP8[$97>>0]|0;
           $99 = ($98<<24>>24)==(41);
           if ($99) {
            break;
           }
          }
          HEAP32[$20>>2] = 5;
          ;HEAP32[$$byval_copy9>>2]=HEAP32[$20>>2]|0;
          $105 = (_tre_stack_push($35,$$byval_copy9)|0);
          $106 = ($105|0)==(0);
          if (!($106)) {
           $$0316$be = $105;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
           break L8;
          }
          $107 = $$sroa$0$0454;
          HEAP32[$19>>2] = $107;
          ;HEAP32[$$byval_copy10>>2]=HEAP32[$19>>2]|0;
          $108 = (_tre_stack_push($35,$$byval_copy10)|0);
          $109 = ($108|0)==(0);
          if (!($109)) {
           $$0316$be = $108;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
           break L8;
          }
          HEAP32[$18>>2] = 6;
          ;HEAP32[$$byval_copy11>>2]=HEAP32[$18>>2]|0;
          $110 = (_tre_stack_push($35,$$byval_copy11)|0);
          $111 = ($110|0)==(0);
          if (!($111)) {
           $$0316$be = $110;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
           break L8;
          }
          HEAP32[$17>>2] = 4;
          ;HEAP32[$$byval_copy12>>2]=HEAP32[$17>>2]|0;
          $112 = (_tre_stack_push($35,$$byval_copy12)|0);
          $$0316$be = $112;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
          break L8;
         }
        } while(0);
        $100 = $90 | $$0323456;
        $101 = ($100|0)==(0);
        $$$0316 = $101 ? 8 : 0;
        $102 = (($$0323456) + -1)|0;
        $103 = ($90|0)==(0);
        if ($103) {
         $104 = ((($86)) + 2|0);
         HEAP32[$46>>2] = $104;
         $$0316$be = $$$0316;$$0323$be = $102;$$sroa$0$0$be = $$sroa$0$0454;
        } else {
         $$0316$be = $$$0316;$$0323$be = $102;$$sroa$0$0$be = $$sroa$0$0454;
        }
       }
      }
      break;
     }
     case 6:  {
      $113 = (($65) + -2)|0;
      HEAP32[$36>>2] = $113;
      $114 = (($66) + ($113<<2)|0);
      $115 = HEAP32[$114>>2]|0;
      $116 = HEAP32[$0>>2]|0;
      $117 = $$sroa$0$0454;
      $118 = (_tre_ast_new_catenation($116,$115,$117)|0);
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$17 = 12;
       break L4;
      }
      $120 = $118;
      $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $120;
      break;
     }
     case 7:  {
      $121 = HEAP32[$46>>2]|0;
      $122 = HEAP8[$121>>0]|0;
      $123 = $122 << 24 >> 24;
      switch ($123|0) {
      case 124:  {
       break;
      }
      case 41:  {
       $135 = ((($121)) + 1|0);
       HEAP32[$46>>2] = $135;
       $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
       break L8;
       break;
      }
      default: {
       $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
       break L8;
      }
      }
      HEAP32[$16>>2] = 7;
      ;HEAP32[$$byval_copy13>>2]=HEAP32[$16>>2]|0;
      $124 = (_tre_stack_push($35,$$byval_copy13)|0);
      $125 = ($124|0)==(0);
      if ($125) {
       $126 = $$sroa$0$0454;
       HEAP32[$15>>2] = $126;
       ;HEAP32[$$byval_copy14>>2]=HEAP32[$15>>2]|0;
       $127 = (_tre_stack_push($35,$$byval_copy14)|0);
       $128 = ($127|0)==(0);
       if ($128) {
        HEAP32[$14>>2] = 8;
        ;HEAP32[$$byval_copy15>>2]=HEAP32[$14>>2]|0;
        $129 = (_tre_stack_push($35,$$byval_copy15)|0);
        $130 = ($129|0)==(0);
        if ($130) {
         HEAP32[$13>>2] = 3;
         ;HEAP32[$$byval_copy16>>2]=HEAP32[$13>>2]|0;
         $131 = (_tre_stack_push($35,$$byval_copy16)|0);
         $132 = ($131|0)==(0);
         if ($132) {
          $133 = HEAP32[$46>>2]|0;
          $134 = ((($133)) + 1|0);
          HEAP32[$46>>2] = $134;
          $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
         } else {
          $$0316$be = $131;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
         }
        } else {
         $$0316$be = $129;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
        }
       } else {
        $$0316$be = $127;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
       }
      } else {
       $$0316$be = $124;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
      }
      break;
     }
     case 8:  {
      $136 = (($65) + -2)|0;
      HEAP32[$36>>2] = $136;
      $137 = (($66) + ($136<<2)|0);
      $138 = HEAP32[$137>>2]|0;
      $139 = HEAP32[$0>>2]|0;
      $140 = $$sroa$0$0454;
      $141 = (_tre_ast_new_union($139,$138,$140)|0);
      $142 = ($141|0)==(0|0);
      if ($142) {
       $$17 = 12;
       break L4;
      }
      $143 = $141;
      $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $143;
      break;
     }
     case 9:  {
      $144 = HEAP32[$46>>2]|0;
      $145 = HEAP8[$144>>0]|0;
      $146 = $145 << 24 >> 24;
      switch ($146|0) {
      case 63: case 43:  {
       $147 = HEAP32[$55>>2]|0;
       $148 = $147 & 1;
       $149 = ($148|0)==(0);
       if ($149) {
        $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
        break L8;
       } else {
        label = 38;
       }
       break;
      }
      case 42:  {
       label = 38;
       break;
      }
      case 92:  {
       $159 = HEAP32[$55>>2]|0;
       $160 = $159 & 1;
       $161 = ($160|0)==(0);
       if (!($161)) {
        $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
        break L8;
       }
       $162 = ((($144)) + 1|0);
       $163 = HEAP8[$162>>0]|0;
       $164 = ($163<<24>>24)==(123);
       if (!($164)) {
        $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
        break L8;
       }
       HEAP32[$46>>2] = $162;
       $168 = $162;$205 = $159;
       break;
      }
      case 123:  {
       $165 = HEAP32[$55>>2]|0;
       $166 = $165 & 1;
       $167 = ($166|0)==(0);
       if ($167) {
        $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
        break L8;
       } else {
        $168 = $144;$205 = $165;
       }
       break;
      }
      default: {
       $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
       break L8;
      }
      }
      if ((label|0) == 38) {
       label = 0;
       $150 = ($145<<24>>24)==(43);
       $$ = $150&1;
       $151 = ($145<<24>>24)==(63);
       $$0338 = $151 ? 1 : -1;
       $152 = ((($144)) + 1|0);
       HEAP32[$46>>2] = $152;
       $153 = HEAP32[$0>>2]|0;
       $154 = $$sroa$0$0454;
       $155 = (_tre_ast_new_iter($153,$154,$$,$$0338,0)|0);
       $156 = ($155|0)==(0|0);
       if ($156) {
        $$17 = 12;
        break L4;
       }
       $157 = $155;
       HEAP32[$12>>2] = 9;
       ;HEAP32[$$byval_copy17>>2]=HEAP32[$12>>2]|0;
       $158 = (_tre_stack_push($35,$$byval_copy17)|0);
       $$0316$be = $158;$$0323$be = $$0323456;$$sroa$0$0$be = $157;
       break L8;
      }
      $$ptr415 = ((($168)) + 1|0);
      HEAP32[$46>>2] = $$ptr415;
      $169 = HEAP8[$$ptr415>>0]|0;
      $$off$i = (($169) + -48)<<24>>24;
      $170 = ($$off$i&255)<(10);
      if ($170) {
       $171 = $169 << 24 >> 24;
       $172 = (($171) + -48)|0;
       $173 = ($172>>>0)<(10);
       if ($173) {
        $$01112$i$i = -1;$$013$i$i$idx = 1;$177 = $171;
       } else {
        $$17 = 10;
        break L4;
       }
       while(1) {
        $174 = ($$01112$i$i|0)<(0);
        $$$011$i$i = $174 ? 0 : $$01112$i$i;
        $175 = ($$$011$i$i*10)|0;
        $176 = (($177) + -48)|0;
        $178 = (($176) + ($175))|0;
        $$013$i$i$add = (($$013$i$i$idx) + 1)|0;
        $$ptr414 = (($168) + ($$013$i$i$add)|0);
        $179 = HEAP8[$$ptr414>>0]|0;
        $180 = $179 << 24 >> 24;
        $181 = (($180) + -48)|0;
        $182 = ($181>>>0)<(10);
        if ($182) {
         $$01112$i$i = $178;$$013$i$i$idx = $$013$i$i$add;$177 = $180;
        } else {
         $$037$i = $178;$$sroa$0$0$in$i$idx = $$013$i$i$add;$183 = $179;
         break;
        }
       }
      } else {
       $$037$i = -1;$$sroa$0$0$in$i$idx = 1;$183 = $169;
      }
      $184 = ($183<<24>>24)==(44);
      if ($184) {
       $$sroa$0$0$in$i$add = (($$sroa$0$0$in$i$idx) + 1)|0;
       $$ptr = (($168) + ($$sroa$0$0$in$i$add)|0);
       $185 = HEAP8[$$ptr>>0]|0;
       $186 = $185 << 24 >> 24;
       $187 = (($186) + -48)|0;
       $188 = ($187>>>0)<(10);
       if ($188) {
        $$01112$i41$i = -1;$$013$i40$i$idx = $$sroa$0$0$in$i$add;$192 = $186;
        while(1) {
         $189 = ($$01112$i41$i|0)<(0);
         $$$011$i42$i = $189 ? 0 : $$01112$i41$i;
         $190 = ($$$011$i42$i*10)|0;
         $191 = (($192) + -48)|0;
         $193 = (($191) + ($190))|0;
         $$013$i40$i$add = (($$013$i40$i$idx) + 1)|0;
         $$ptr413 = (($168) + ($$013$i40$i$add)|0);
         $194 = HEAP8[$$ptr413>>0]|0;
         $195 = $194 << 24 >> 24;
         $196 = (($195) + -48)|0;
         $197 = ($196>>>0)<(10);
         if ($197) {
          $$01112$i41$i = $193;$$013$i40$i$idx = $$013$i40$i$add;$192 = $195;
         } else {
          $$036$i = $193;$$sroa$0$1$in$i$idx = $$013$i40$i$add;$714 = $194;
          label = 50;
          break;
         }
        }
       } else {
        $$03660$i = -1;$$sroa$0$1$in59$i$idx = $$sroa$0$0$in$i$add;$201 = $185;
       }
      } else {
       $$036$i = $$037$i;$$sroa$0$1$in$i$idx = $$sroa$0$0$in$i$idx;$714 = $183;
       label = 50;
      }
      if ((label|0) == 50) {
       label = 0;
       $198 = ($$036$i|0)>(-1);
       if ($198) {
        $199 = ($$037$i|0)>($$036$i|0);
        $200 = ($$036$i|0)>(255);
        $or$cond$i = $199 | $200;
        if ($or$cond$i) {
         $$17 = 10;
         break L4;
        } else {
         $$03660$i = $$036$i;$$sroa$0$1$in59$i$idx = $$sroa$0$1$in$i$idx;$201 = $714;
        }
       } else {
        $$03660$i = $$036$i;$$sroa$0$1$in59$i$idx = $$sroa$0$1$in$i$idx;$201 = $714;
       }
      }
      $$sroa$0$1$in59$i$ptr = (($168) + ($$sroa$0$1$in59$i$idx)|0);
      $202 = ($201<<24>>24)==(0);
      if ($202) {
       $$17 = 9;
       break L4;
      }
      $203 = ($$sroa$0$1$in59$i$idx|0)==(1);
      if ($203) {
       $$17 = 10;
       break L4;
      }
      $204 = $205 & 1;
      $206 = ($204|0)==(0);
      if ($206) {
       $209 = ($201<<24>>24)==(92);
       if (!($209)) {
        $$17 = 10;
        break L4;
       }
       $210 = ((($$sroa$0$1$in59$i$ptr)) + 1|0);
       $211 = HEAP8[$210>>0]|0;
       $212 = ($211<<24>>24)==(125);
       if (!($212)) {
        $$17 = 10;
        break L4;
       }
       $213 = ((($$sroa$0$1$in59$i$ptr)) + 2|0);
       $storemerge$i = $213;
      } else {
       $207 = ($201<<24>>24)==(125);
       if (!($207)) {
        $$17 = 10;
        break L4;
       }
       $208 = ((($$sroa$0$1$in59$i$ptr)) + 1|0);
       $storemerge$i = $208;
      }
      $214 = $storemerge$i;
      $215 = $$03660$i | $$037$i;
      $216 = ($215|0)==(0);
      if ($216) {
       $217 = HEAP32[$0>>2]|0;
       $218 = (_tre_ast_new_node($217,0,20)|0);
       $219 = ($218|0)==(0|0);
       if ($219) {
        $$17 = 12;
        break L4;
       }
       $220 = ((($218)) + 4|0);
       $221 = HEAP32[$220>>2]|0;
       HEAP32[$221>>2] = -1;
       $222 = ((($221)) + 4|0);
       HEAP32[$222>>2] = -1;
       $223 = ((($221)) + 8|0);
       HEAP32[$223>>2] = -1;
       $$sroa$0$4$in = $218;
      } else {
       $224 = $$03660$i & $$037$i;
       $225 = ($224|0)<(0);
       $$$037$i = $225 ? 1 : $$037$i;
       $$$036$i = $225 ? 1 : $$03660$i;
       $226 = HEAP32[$0>>2]|0;
       $227 = $$sroa$0$0454;
       $228 = (_tre_ast_new_iter($226,$227,$$$037$i,$$$036$i,0)|0);
       $229 = ($228|0)==(0|0);
       if ($229) {
        $$17 = 12;
        break L4;
       } else {
        $$sroa$0$4$in = $228;
       }
      }
      $$sroa$0$4 = $$sroa$0$4$in;
      HEAP32[$46>>2] = $214;
      HEAP32[$11>>2] = 9;
      ;HEAP32[$$byval_copy18>>2]=HEAP32[$11>>2]|0;
      $230 = (_tre_stack_push($35,$$byval_copy18)|0);
      $$0316$be = $230;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$4;
      break;
     }
     case 1:  {
      $231 = HEAP32[$46>>2]|0;
      $232 = HEAP8[$231>>0]|0;
      $233 = $232 << 24 >> 24;
      L81: do {
       switch ($233|0) {
       case 40:  {
        $234 = HEAP32[$55>>2]|0;
        $235 = $234 & 1;
        $236 = ($235|0)==(0);
        if ($236) {
         $631 = $231;
        } else {
         $239 = $231;
         label = 67;
        }
        break;
       }
       case 91:  {
        $249 = ((($231)) + 1|0);
        HEAP32[$46>>2] = $249;
        $250 = (_malloc(128)|0);
        HEAP32[$6>>2] = $250;
        $251 = ($250|0)==(0|0);
        if ($251) {
         label = 72;
         break L6;
        }
        $252 = HEAP8[$249>>0]|0;
        $253 = ($252<<24>>24)==(94);
        if ($253) {
         $254 = ((($231)) + 2|0);
         HEAP32[$46>>2] = $254;
         $$0113$i = 1;$715 = $254;
        } else {
         $$0113$i = 0;$715 = $249;
        }
        HEAP32[$2>>2] = 0;
        HEAP32[$3>>2] = 32;
        $$0148$i = 0;$$1137$i$i = $715;$$1148$i$i = 0;
        L88: while(1) {
         $255 = HEAP8[$$1137$i$i>>0]|0;
         switch ($255<<24>>24) {
         case 0:  {
          $$12$i$i = 7;$$3151$i = $$0148$i;$$4$i$i = $$1137$i$i;
          break L88;
          break;
         }
         case 93:  {
          $256 = HEAP32[$46>>2]|0;
          $257 = ($$1137$i$i>>>0)>($256>>>0);
          if ($257) {
           label = 78;
           break L88;
          }
          break;
         }
         default: {
         }
         }
         $259 = (_mbtowc($4,$$1137$i$i,-1)|0);
         $260 = ($259|0)<(0);
         if ($260) {
          HEAP32[$4>>2] = -1;
          $$0139$i$i = 1;
         } else {
          $$0139$i$i = $259;
         }
         $261 = (($$1137$i$i) + ($$0139$i$i)|0);
         $262 = HEAP8[$261>>0]|0;
         $263 = ($262<<24>>24)==(45);
         if ($263) {
          $264 = ((($261)) + 1|0);
          $265 = HEAP8[$264>>0]|0;
          $266 = ($265<<24>>24)==(93);
          if ($266) {
           label = 87;
          } else {
           $267 = HEAP32[$4>>2]|0;
           $268 = (($$0139$i$i) + 1)|0;
           $269 = (($$1137$i$i) + ($268)|0);
           $270 = (_mbtowc($4,$269,-1)|0);
           $271 = ($270|0)<(0);
           if ($271) {
            HEAP32[$4>>2] = -1;
            $$1140$i$i = 1;$274 = -1;
           } else {
            $$pre$i$i = HEAP32[$4>>2]|0;
            $$1140$i$i = $270;$274 = $$pre$i$i;
           }
           $272 = (($269) + ($$1140$i$i)|0);
           $273 = ($267>>>0)>($274>>>0);
           if ($273) {
            $$11$i$i = 11;$$1135$i$i = 3;$$2150$i = $$0148$i;$$3162$i$i = $272;
           } else {
            $$0141$i$i = $274;$$0142$i$i = $267;$$1153$i$i = 0;$$3$i$i = $272;$$5$i$i = $$1148$i$i;
            label = 97;
           }
          }
         } else {
          label = 87;
         }
         L103: do {
          if ((label|0) == 87) {
           label = 0;
           $275 = HEAP8[$$1137$i$i>>0]|0;
           L105: do {
            switch ($275<<24>>24) {
            case 91:  {
             $276 = ((($$1137$i$i)) + 1|0);
             $277 = HEAP8[$276>>0]|0;
             switch ($277<<24>>24) {
             case 61: case 46:  {
              $$11$i$i = 3;$$1135$i$i = 3;$$2150$i = $$0148$i;$$3162$i$i = $$1137$i$i;
              break L103;
              break;
             }
             case 58:  {
              break;
             }
             default: {
              $$4151$i$i = $$1148$i$i;
              break L105;
             }
             }
             $278 = ((($$1137$i$i)) + 2|0);
             $$0138$i$i = $278;
             while(1) {
              $279 = HEAP8[$$0138$i$i>>0]|0;
              $280 = ($279<<24>>24)==(0);
              $281 = ($279<<24>>24)!=(58);
              $not$$i$i = $280 ^ 1;
              $$$i$i = $281 & $not$$i$i;
              $282 = ((($$0138$i$i)) + 1|0);
              if ($$$i$i) {
               $$0138$i$i = $282;
              } else {
               break;
              }
             }
             if ($280) {
              $$0152$i$i = 0;$$2$i$i = $$1137$i$i;$$3150$i$i = 4;
             } else {
              $283 = $$0138$i$i;
              $284 = $$1137$i$i;
              $285 = (($283) - ($284))|0;
              $286 = (($285) + -2)|0;
              $287 = ($286|0)>(63);
              $$154$i$i = $287 ? 63 : $286;
              (_strncpy($5,$278,$$154$i$i)|0);
              $288 = (($5) + ($$154$i$i)|0);
              HEAP8[$288>>0] = 0;
              $289 = (_wctype($5)|0);
              $290 = ($289|0)==(0);
              $$2149$i$i = $290 ? 4 : $$1148$i$i;
              $291 = ((($$0138$i$i)) + 2|0);
              $$0152$i$i = $289;$$2$i$i = $291;$$3150$i$i = $$2149$i$i;
             }
             $$0141$i$i = 1114111;$$0142$i$i = 0;$$1153$i$i = $$0152$i$i;$$3$i$i = $$2$i$i;$$5$i$i = $$3150$i$i;
             label = 97;
             break L103;
             break;
            }
            case 45:  {
             $292 = ((($$1137$i$i)) + 1|0);
             $293 = HEAP8[$292>>0]|0;
             $294 = ($293<<24>>24)==(93);
             if ($294) {
              $$4151$i$i = $$1148$i$i;
             } else {
              $295 = HEAP32[$46>>2]|0;
              $296 = ($295|0)==($$1137$i$i|0);
              $$1148$$i$i = $296 ? $$1148$i$i : 11;
              $$4151$i$i = $$1148$$i$i;
             }
             break;
            }
            default: {
             $$4151$i$i = $$1148$i$i;
            }
            }
           } while(0);
           $297 = HEAP32[$4>>2]|0;
           $$0141$i$i = $297;$$0142$i$i = $297;$$1153$i$i = 0;$$3$i$i = $261;$$5$i$i = $$4151$i$i;
           label = 97;
          }
         } while(0);
         L117: do {
          if ((label|0) == 97) {
           label = 0;
           $298 = ($$5$i$i|0)==(0);
           if ($298) {
            $299 = ($$1153$i$i|0)!=(0);
            $or$cond$i$i = $$0113$i & $299;
            if ($or$cond$i$i) {
             $300 = ($$0148$i|0)>(63);
             if ($300) {
              $$1149$i = $$0148$i;$$6$i$i = 12;
             } else {
              $301 = (($7) + ($$0148$i<<2)|0);
              $302 = (($$0148$i) + 1)|0;
              HEAP32[$301>>2] = $$1153$i$i;
              $$1149$i = $302;$$6$i$i = 0;
             }
            } else {
             $303 = HEAP32[$0>>2]|0;
             $304 = (_tre_new_item($303,$$0142$i$i,$$0141$i$i,$2,$3,$6)|0);
             $305 = ($304|0)==(0);
             if (!($305)) {
              $$11$i$i = $304;$$1135$i$i = 3;$$2150$i = $$0148$i;$$3162$i$i = $$3$i$i;
              break;
             }
             $306 = HEAP32[$2>>2]|0;
             $307 = (($306) + -1)|0;
             $308 = HEAP32[$6>>2]|0;
             $309 = (($308) + ($307<<2)|0);
             $310 = HEAP32[$309>>2]|0;
             $311 = ((($310)) + 4|0);
             $312 = HEAP32[$311>>2]|0;
             $313 = ((($312)) + 12|0);
             HEAP32[$313>>2] = $$1153$i$i;
             $$1149$i = $$0148$i;$$6$i$i = 0;
            }
            $314 = HEAP32[$55>>2]|0;
            $315 = $314 & 2;
            $316 = ($315|0)==(0);
            $317 = $$6$i$i | $$1153$i$i;
            $318 = ($317|0)!=(0);
            $319 = $318 | $316;
            if ($319) {
             $$10$i$i = $$6$i$i;
            } else {
             $$1143$i$i = $$0142$i$i;$$7$i$i = $$6$i$i;
             while(1) {
              $320 = ($$1143$i$i>>>0)>($$0141$i$i>>>0);
              if ($320) {
               break;
              }
              $321 = (_iswlower($$1143$i$i)|0);
              $322 = ($321|0)==(0);
              do {
               if ($322) {
                $335 = (_iswupper($$1143$i$i)|0);
                $336 = ($335|0)==(0);
                $337 = (($$1143$i$i) + 1)|0;
                if ($336) {
                 $$4146$i$i = $337;$$8$i$i = $$7$i$i;
                 break;
                }
                $338 = (_towlower($$1143$i$i)|0);
                $339 = (_iswupper($337)|0);
                $340 = ($339|0)==(0);
                L133: do {
                 if ($340) {
                  $$1$lcssa$i$i = $338;$$3145$lcssa$i$i = $337;
                 } else {
                  $$1185$i$i = $338;$$3145184$i$i = $337;
                  while(1) {
                   $341 = (_towlower($$3145184$i$i)|0);
                   $342 = (($$1185$i$i) + 1)|0;
                   $343 = ($341|0)!=($342|0);
                   $344 = ($$3145184$i$i>>>0)>($$0141$i$i>>>0);
                   $or$cond156$i$i = $344 | $343;
                   if ($or$cond156$i$i) {
                    $$1$lcssa$i$i = $$1185$i$i;$$3145$lcssa$i$i = $$3145184$i$i;
                    break L133;
                   }
                   $345 = (($$3145184$i$i) + 1)|0;
                   $346 = (_towlower($$3145184$i$i)|0);
                   $347 = (_iswupper($345)|0);
                   $348 = ($347|0)==(0);
                   if ($348) {
                    $$1$lcssa$i$i = $346;$$3145$lcssa$i$i = $345;
                    break;
                   } else {
                    $$1185$i$i = $346;$$3145184$i$i = $345;
                   }
                  }
                 }
                } while(0);
                $349 = HEAP32[$0>>2]|0;
                $350 = (_tre_new_item($349,$338,$$1$lcssa$i$i,$2,$3,$6)|0);
                $$4146$i$i = $$3145$lcssa$i$i;$$8$i$i = $350;
               } else {
                $323 = (_towupper($$1143$i$i)|0);
                $$2144177$i$i = (($$1143$i$i) + 1)|0;
                $324 = (_iswlower($$2144177$i$i)|0);
                $325 = ($324|0)==(0);
                L139: do {
                 if ($325) {
                  $$0$lcssa$i$i = $323;$$2144$lcssa$i$i = $$2144177$i$i;
                 } else {
                  $$0178$i$i = $323;$$2144179$i$i = $$2144177$i$i;
                  while(1) {
                   $326 = (_towupper($$2144179$i$i)|0);
                   $327 = (($$0178$i$i) + 1)|0;
                   $328 = ($326|0)!=($327|0);
                   $329 = ($$2144179$i$i>>>0)>($$0141$i$i>>>0);
                   $or$cond155$i$i = $329 | $328;
                   if ($or$cond155$i$i) {
                    $$0$lcssa$i$i = $$0178$i$i;$$2144$lcssa$i$i = $$2144179$i$i;
                    break L139;
                   }
                   $330 = (_towupper($$2144179$i$i)|0);
                   $$2144$i$i = (($$2144179$i$i) + 1)|0;
                   $331 = (_iswlower($$2144$i$i)|0);
                   $332 = ($331|0)==(0);
                   if ($332) {
                    $$0$lcssa$i$i = $330;$$2144$lcssa$i$i = $$2144$i$i;
                    break;
                   } else {
                    $$0178$i$i = $330;$$2144179$i$i = $$2144$i$i;
                   }
                  }
                 }
                } while(0);
                $333 = HEAP32[$0>>2]|0;
                $334 = (_tre_new_item($333,$323,$$0$lcssa$i$i,$2,$3,$6)|0);
                $$4146$i$i = $$2144$lcssa$i$i;$$8$i$i = $334;
               }
              } while(0);
              $351 = ($$8$i$i|0)==(0);
              if ($351) {
               $$1143$i$i = $$4146$i$i;$$7$i$i = 0;
              } else {
               $$11$i$i = $$8$i$i;$$1135$i$i = 3;$$2150$i = $$1149$i;$$3162$i$i = $$3$i$i;
               break L117;
              }
             }
             $352 = ($$7$i$i|0)==(0);
             if ($352) {
              $$10$i$i = 0;
             } else {
              $$11$i$i = $$7$i$i;$$1135$i$i = 3;$$2150$i = $$1149$i;$$3162$i$i = $$3$i$i;
              break;
             }
            }
            $$11$i$i = $$10$i$i;$$1135$i$i = 0;$$2150$i = $$1149$i;$$3162$i$i = $$3$i$i;
           } else {
            $$11$i$i = $$5$i$i;$$1135$i$i = 3;$$2150$i = $$0148$i;$$3162$i$i = $$3$i$i;
           }
          }
         } while(0);
         $353 = $$1135$i$i | $$11$i$i;
         $354 = ($353|0)==(0);
         if ($354) {
          $$0148$i = $$2150$i;$$1137$i$i = $$3162$i$i;$$1148$i$i = $$11$i$i;
         } else {
          $$12$i$i = $$11$i$i;$$3151$i = $$2150$i;$$4$i$i = $$3162$i$i;
          break;
         }
        }
        if ((label|0) == 78) {
         label = 0;
         $258 = ((($$1137$i$i)) + 1|0);
         $$12$i$i = $$1148$i$i;$$3151$i = $$0148$i;$$4$i$i = $258;
        }
        $355 = HEAP32[$2>>2]|0;
        HEAP32[$46>>2] = $$4$i$i;
        $356 = ($$12$i$i|0)==(0);
        L151: do {
         if ($356) {
          if ($$0113$i) {
           $357 = HEAP32[$6>>2]|0;
           _qsort($357,$355,4,9);
          }
          $358 = ($355|0)>(0);
          if ($358) {
           $359 = HEAP32[$6>>2]|0;
           $360 = ($$3151$i|0)>(0);
           $361 = $$3151$i << 2;
           $362 = (($361) + 4)|0;
           $$0111191$i = 0;$$0118190$i = 0;$$0121189$i = 0;$$0123187$i = 0;
           while(1) {
            $363 = (($359) + ($$0123187$i<<2)|0);
            $364 = HEAP32[$363>>2]|0;
            $365 = ((($364)) + 4|0);
            $366 = HEAP32[$365>>2]|0;
            $367 = HEAP32[$366>>2]|0;
            $368 = ((($366)) + 4|0);
            $369 = HEAP32[$368>>2]|0;
            do {
             if ($$0113$i) {
              $370 = ($367|0)<($$0121189$i|0);
              if ($370) {
               $371 = (($369) + 1)|0;
               $372 = ($371|0)>=($$0121189$i|0);
               $373 = $372 ? $371 : $$0121189$i;
               $$1119154$ph$i = $$0118190$i;$$1122152$ph$i = $373;$$4$ph$i = $$0111191$i;$$5129$ph$i = 0;
               break;
              }
              $374 = ($367|0)>($$0118190$i|0);
              if ($374) {
               $375 = (($367) + -1)|0;
               HEAP32[$366>>2] = $$0118190$i;
               HEAP32[$368>>2] = $375;
               $$0110$i = $366;
              } else {
               $$0110$i = 0;
              }
              $376 = (($369) + 1)|0;
              $$1$i = $$0110$i;$$1119$i = $376;$$1122$i = $376;
              label = 130;
             } else {
              $$1$i = $366;$$1119$i = $$0118190$i;$$1122$i = $$0121189$i;
              label = 130;
             }
            } while(0);
            if ((label|0) == 130) {
             label = 0;
             $377 = ($$1$i|0)==(0|0);
             if ($377) {
              $$1119154$ph$i = $$1119$i;$$1122152$ph$i = $$1122$i;$$4$ph$i = $$0111191$i;$$5129$ph$i = 0;
             } else {
              $378 = HEAP32[$56>>2]|0;
              $379 = ((($$1$i)) + 8|0);
              HEAP32[$379>>2] = $378;
              if ($360) {
               $380 = HEAP32[$0>>2]|0;
               $381 = (___tre_mem_alloc_impl($380,0,0,0,$362)|0);
               $382 = ((($$1$i)) + 16|0);
               HEAP32[$382>>2] = $381;
               $383 = ($381|0)==(0|0);
               if ($383) {
                $$10$i = $$0111191$i;$$12$i = 12;
                break L151;
               }
               _memcpy(($381|0),($7|0),($361|0))|0;
               $$pre$i = HEAP32[$382>>2]|0;
               $384 = (($$pre$i) + ($$3151$i<<2)|0);
               HEAP32[$384>>2] = 0;
              } else {
               $385 = ((($$1$i)) + 16|0);
               HEAP32[$385>>2] = 0;
              }
              $386 = ($$0111191$i|0)==(0|0);
              $387 = HEAP32[$363>>2]|0;
              if ($386) {
               $$1119154$ph$i = $$1119$i;$$1122152$ph$i = $$1122$i;$$4$ph$i = $387;$$5129$ph$i = 0;
              } else {
               $388 = HEAP32[$0>>2]|0;
               $389 = (_tre_ast_new_union($388,$$0111191$i,$387)|0);
               $390 = ($389|0)==(0|0);
               $$$0124$i = $390 ? 12 : 0;
               $$1119154$ph$i = $$1119$i;$$1122152$ph$i = $$1122$i;$$4$ph$i = $389;$$5129$ph$i = $$$0124$i;
              }
             }
            }
            $391 = (($$0123187$i) + 1)|0;
            $392 = ($391|0)<($355|0);
            $393 = ($$5129$ph$i|0)==(0);
            $394 = $392 & $393;
            if ($394) {
             $$0111191$i = $$4$ph$i;$$0118190$i = $$1119154$ph$i;$$0121189$i = $$1122152$ph$i;$$0123187$i = $391;
            } else {
             $$0111$lcssa$i = $$4$ph$i;$$0118$lcssa$i = $$1119154$ph$i;$$0124$lcssa$i = $$5129$ph$i;
             break;
            }
           }
          } else {
           $$0111$lcssa$i = 0;$$0118$lcssa$i = 0;$$0124$lcssa$i = 0;
          }
          $395 = ($$0124$lcssa$i|0)==(0);
          $or$cond$i350 = $$0113$i & $395;
          if ($or$cond$i350) {
           $396 = HEAP32[$0>>2]|0;
           $397 = HEAP32[$56>>2]|0;
           $398 = (_tre_ast_new_node($396,0,20)|0);
           $399 = ($398|0)==(0|0);
           if ($399) {
            $$10$i = $$0111$lcssa$i;$$12$i = 12;
           } else {
            $400 = ((($398)) + 4|0);
            $401 = HEAP32[$400>>2]|0;
            HEAP32[$401>>2] = $$0118$lcssa$i;
            $402 = ((($401)) + 4|0);
            HEAP32[$402>>2] = 1114111;
            $403 = ((($401)) + 8|0);
            HEAP32[$403>>2] = $397;
            $404 = ($$3151$i|0)>(0);
            if ($404) {
             $405 = HEAP32[$0>>2]|0;
             $406 = $$3151$i << 2;
             $407 = (($406) + 4)|0;
             $408 = (___tre_mem_alloc_impl($405,0,0,0,$407)|0);
             $409 = ((($401)) + 16|0);
             HEAP32[$409>>2] = $408;
             $410 = ($408|0)==(0|0);
             if ($410) {
              $$10$i = $$0111$lcssa$i;$$12$i = 12;
              break;
             }
             _memcpy(($408|0),($7|0),($406|0))|0;
             $$pre204$i = HEAP32[$409>>2]|0;
             $411 = (($$pre204$i) + ($$3151$i<<2)|0);
             HEAP32[$411>>2] = 0;
            } else {
             $412 = ((($401)) + 16|0);
             HEAP32[$412>>2] = 0;
            }
            $413 = ($$0111$lcssa$i|0)==(0|0);
            if ($413) {
             $$10$i = $398;$$12$i = 0;
            } else {
             $414 = HEAP32[$0>>2]|0;
             $415 = (_tre_ast_new_union($414,$$0111$lcssa$i,$398)|0);
             $416 = ($415|0)==(0|0);
             $$501 = $416 ? 12 : 0;
             $$10$i = $415;$$12$i = $$501;
            }
           }
          } else {
           $$10$i = $$0111$lcssa$i;$$12$i = $$0124$lcssa$i;
          }
         } else {
          $$10$i = 0;$$12$i = $$12$i$i;
         }
        } while(0);
        $417 = HEAP32[$6>>2]|0;
        _free($417);
        $418 = HEAP32[$56>>2]|0;
        $419 = (($418) + 1)|0;
        HEAP32[$56>>2] = $419;
        $420 = $$10$i;
        $421 = ($$12$i|0)==(0);
        if ($421) {
         $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $420;
         break L8;
        } else {
         $$17 = $$12$i;
         break L4;
        }
        break;
       }
       case 92:  {
        $422 = HEAP32[$55>>2]|0;
        $423 = $422 & 1;
        $424 = ($423|0)==(0);
        $425 = ((($231)) + 1|0);
        $426 = HEAP8[$425>>0]|0;
        do {
         if ($424) {
          $427 = ($426<<24>>24)==(40);
          if ($427) {
           HEAP32[$46>>2] = $425;
           $239 = $425;
           label = 67;
           break L81;
          } else {
           $428 = ((($231)) + 1|0);
           $429 = HEAP8[$428>>0]|0;
           $430 = ($429<<24>>24)==(41);
           if ($430) {
            label = 211;
            break L81;
           } else {
            $$pre$phiZ2D = $428;$431 = $429;
            break;
           }
          }
         } else {
          $$pre$phiZ2D = $425;$431 = $426;
         }
        } while(0);
        $432 = ($431<<24>>24)==(0);
        if ($432) {
         $$17 = 5;
         break L4;
        } else {
         $$08$i = 0;$716 = (824);
        }
        while(1) {
         $436 = (820 + ($$08$i<<3)|0);
         $437 = HEAP8[$436>>0]|0;
         $438 = ($437<<24>>24)==($431<<24>>24);
         $434 = (($$08$i) + 1)|0;
         if ($438) {
          $$lcssa$i = $716;
          break;
         }
         $433 = (((820 + ($434<<3)|0)) + 4|0);
         $435 = ($434|0)==(12);
         if ($435) {
          $$lcssa$i = $433;
          break;
         } else {
          $$08$i = $434;$716 = $433;
         }
        }
        $439 = HEAP32[$$lcssa$i>>2]|0;
        $440 = ($439|0)==(0|0);
        if (!($440)) {
         dest=$31; src=$0; stop=dest+40|0; do { HEAP32[dest>>2]=HEAP32[src>>2]|0; dest=dest+4|0; src=src+4|0; } while ((dest|0) < (stop|0));
         HEAP32[$60>>2] = $439;
         HEAP32[$61>>2] = 1;
         $441 = (_tre_parse($31)|0);
         $442 = ($441|0)==(0);
         if (!($442)) {
          label = 156;
          break L6;
         }
         $443 = HEAP32[$46>>2]|0;
         $444 = ((($443)) + 2|0);
         HEAP32[$46>>2] = $444;
         $445 = HEAP32[$62>>2]|0;
         HEAP32[$56>>2] = $445;
         $446 = HEAP32[$63>>2]|0;
         $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $446;
         break L8;
        }
        if ($432) {
         $$17 = 5;
         break L4;
        }
        HEAP32[$46>>2] = $$pre$phiZ2D;
        $447 = HEAP8[$$pre$phiZ2D>>0]|0;
        $448 = $447 << 24 >> 24;
        L204: do {
         switch ($448|0) {
         case 98:  {
          $449 = HEAP32[$0>>2]|0;
          $450 = (_tre_ast_new_node($449,0,20)|0);
          $451 = ($450|0)==(0|0);
          if ($451) {
           $$0$i352 = 0;
          } else {
           $452 = ((($450)) + 4|0);
           $453 = HEAP32[$452>>2]|0;
           HEAP32[$453>>2] = -2;
           $454 = ((($453)) + 4|0);
           HEAP32[$454>>2] = 64;
           $455 = ((($453)) + 8|0);
           HEAP32[$455>>2] = -1;
           $$0$i352 = $450;
          }
          $456 = HEAP32[$46>>2]|0;
          $457 = ((($456)) + 1|0);
          HEAP32[$46>>2] = $457;
          $$sroa$0$10$in = $$0$i352;
          break;
         }
         case 66:  {
          $458 = HEAP32[$0>>2]|0;
          $459 = (_tre_ast_new_node($458,0,20)|0);
          $460 = ($459|0)==(0|0);
          if ($460) {
           $$0$i354 = 0;
          } else {
           $461 = ((($459)) + 4|0);
           $462 = HEAP32[$461>>2]|0;
           HEAP32[$462>>2] = -2;
           $463 = ((($462)) + 4|0);
           HEAP32[$463>>2] = 128;
           $464 = ((($462)) + 8|0);
           HEAP32[$464>>2] = -1;
           $$0$i354 = $459;
          }
          $465 = HEAP32[$46>>2]|0;
          $466 = ((($465)) + 1|0);
          HEAP32[$46>>2] = $466;
          $$sroa$0$10$in = $$0$i354;
          break;
         }
         case 60:  {
          $467 = HEAP32[$0>>2]|0;
          $468 = (_tre_ast_new_node($467,0,20)|0);
          $469 = ($468|0)==(0|0);
          if ($469) {
           $$0$i356 = 0;
          } else {
           $470 = ((($468)) + 4|0);
           $471 = HEAP32[$470>>2]|0;
           HEAP32[$471>>2] = -2;
           $472 = ((($471)) + 4|0);
           HEAP32[$472>>2] = 16;
           $473 = ((($471)) + 8|0);
           HEAP32[$473>>2] = -1;
           $$0$i356 = $468;
          }
          $474 = HEAP32[$46>>2]|0;
          $475 = ((($474)) + 1|0);
          HEAP32[$46>>2] = $475;
          $$sroa$0$10$in = $$0$i356;
          break;
         }
         case 62:  {
          $476 = HEAP32[$0>>2]|0;
          $477 = (_tre_ast_new_node($476,0,20)|0);
          $478 = ($477|0)==(0|0);
          if ($478) {
           $$0$i358 = 0;
          } else {
           $479 = ((($477)) + 4|0);
           $480 = HEAP32[$479>>2]|0;
           HEAP32[$480>>2] = -2;
           $481 = ((($480)) + 4|0);
           HEAP32[$481>>2] = 32;
           $482 = ((($480)) + 8|0);
           HEAP32[$482>>2] = -1;
           $$0$i358 = $477;
          }
          $483 = HEAP32[$46>>2]|0;
          $484 = ((($483)) + 1|0);
          HEAP32[$46>>2] = $484;
          $$sroa$0$10$in = $$0$i358;
          break;
         }
         case 120:  {
          $485 = ((($231)) + 2|0);
          HEAP32[$46>>2] = $485;
          $486 = HEAP8[$485>>0]|0;
          $487 = ($486<<24>>24)==(123);
          if ($487) {
           $storemerge449 = ((($231)) + 3|0);
           HEAP32[$46>>2] = $storemerge449;
           $$0339451 = 0;$$in = $storemerge449;$$pn450 = $485;
           L227: while(1) {
            $512 = HEAP8[$$in>>0]|0;
            switch ($512<<24>>24) {
            case 0: case 125:  {
             $$0339$lcssa = $$0339451;$$pn$lcssa = $$pn450;
             break L227;
             break;
            }
            default: {
            }
            }
            $513 = $512 << 24 >> 24;
            $514 = (_iswxdigit($513)|0);
            $515 = ($514|0)==(0);
            if ($515) {
             label = 187;
             break L6;
            }
            $516 = HEAP32[$46>>2]|0;
            $517 = HEAP8[$516>>0]|0;
            $518 = (($33) + ($$0339451)|0);
            HEAP8[$518>>0] = $517;
            $519 = (($$0339451) + 1)|0;
            $storemerge = ((($516)) + 1|0);
            HEAP32[$46>>2] = $storemerge;
            $notrhs = ($519>>>0)>(31);
            if ($notrhs) {
             $$0339$lcssa = $519;$$pn$lcssa = $516;
             break;
            } else {
             $$0339451 = $519;$$in = $storemerge;$$pn450 = $516;
            }
           }
           $520 = ((($$pn$lcssa)) + 2|0);
           HEAP32[$46>>2] = $520;
           $521 = (($33) + ($$0339$lcssa)|0);
           HEAP8[$521>>0] = 0;
           $522 = (_strtol($33,0,16)|0);
           $523 = HEAP32[$0>>2]|0;
           $524 = HEAP32[$56>>2]|0;
           $525 = (_tre_ast_new_node($523,0,20)|0);
           $526 = ($525|0)==(0|0);
           if ($526) {
            $$0$i362 = 0;
           } else {
            $527 = ((($525)) + 4|0);
            $528 = HEAP32[$527>>2]|0;
            HEAP32[$528>>2] = $522;
            $529 = ((($528)) + 4|0);
            HEAP32[$529>>2] = $522;
            $530 = ((($528)) + 8|0);
            HEAP32[$530>>2] = $524;
            $$0$i362 = $525;
           }
           $531 = HEAP32[$56>>2]|0;
           $532 = (($531) + 1)|0;
           HEAP32[$56>>2] = $532;
           $$sroa$0$10$in = $$0$i362;
           break L204;
          } else {
           ;HEAP8[$32>>0]=0|0;HEAP8[$32+1>>0]=0|0;HEAP8[$32+2>>0]=0|0;
           $488 = $486 << 24 >> 24;
           $489 = (_iswxdigit($488)|0);
           $490 = ($489|0)==(0);
           $$pre483 = HEAP32[$46>>2]|0;
           if ($490) {
            $494 = $$pre483;
           } else {
            $491 = HEAP8[$$pre483>>0]|0;
            HEAP8[$32>>0] = $491;
            $492 = ((($$pre483)) + 1|0);
            HEAP32[$46>>2] = $492;
            $494 = $492;
           }
           $493 = HEAP8[$494>>0]|0;
           $495 = $493 << 24 >> 24;
           $496 = (_iswxdigit($495)|0);
           $497 = ($496|0)==(0);
           if (!($497)) {
            $498 = HEAP32[$46>>2]|0;
            $499 = HEAP8[$498>>0]|0;
            HEAP8[$59>>0] = $499;
            $500 = ((($498)) + 1|0);
            HEAP32[$46>>2] = $500;
           }
           $501 = (_strtol($32,0,16)|0);
           $502 = HEAP32[$0>>2]|0;
           $503 = HEAP32[$56>>2]|0;
           $504 = (_tre_ast_new_node($502,0,20)|0);
           $505 = ($504|0)==(0|0);
           if ($505) {
            $$0$i360 = 0;
           } else {
            $506 = ((($504)) + 4|0);
            $507 = HEAP32[$506>>2]|0;
            HEAP32[$507>>2] = $501;
            $508 = ((($507)) + 4|0);
            HEAP32[$508>>2] = $501;
            $509 = ((($507)) + 8|0);
            HEAP32[$509>>2] = $503;
            $$0$i360 = $504;
           }
           $510 = HEAP32[$56>>2]|0;
           $511 = (($510) + 1)|0;
           HEAP32[$56>>2] = $511;
           $$sroa$0$10$in = $$0$i360;
           break L204;
          }
          break;
         }
         default: {
          $533 = (_iswdigit($448)|0);
          $534 = ($533|0)==(0);
          $$pre485 = HEAP32[$46>>2]|0;
          if ($534) {
           $631 = $$pre485;
           break L81;
          }
          $535 = HEAP8[$$pre485>>0]|0;
          $536 = $535 << 24 >> 24;
          $537 = (($536) + -48)|0;
          $538 = HEAP32[$0>>2]|0;
          $539 = HEAP32[$56>>2]|0;
          $540 = (_tre_ast_new_node($538,0,20)|0);
          $541 = ($540|0)==(0|0);
          if ($541) {
           $$17 = 12;
           break L4;
          }
          $542 = ((($540)) + 4|0);
          $543 = HEAP32[$542>>2]|0;
          HEAP32[$543>>2] = -4;
          $544 = ((($543)) + 4|0);
          HEAP32[$544>>2] = $537;
          $545 = ((($543)) + 8|0);
          HEAP32[$545>>2] = $539;
          $546 = HEAP32[$56>>2]|0;
          $547 = (($546) + 1)|0;
          HEAP32[$56>>2] = $547;
          $548 = HEAP32[$58>>2]|0;
          $549 = ($537|0)<($548|0);
          $$343 = $549 ? $548 : $537;
          HEAP32[$58>>2] = $$343;
          $550 = HEAP32[$46>>2]|0;
          $551 = ((($550)) + 1|0);
          HEAP32[$46>>2] = $551;
          $$sroa$0$10488 = $540;
          $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$10488;
          break L8;
         }
         }
        } while(0);
        $$sroa$0$10 = $$sroa$0$10$in;
        $552 = ($$sroa$0$10$in|0)==(0|0);
        if ($552) {
         $$17 = 12;
         break L4;
        } else {
         $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$10;
         break L8;
        }
        break;
       }
       case 46:  {
        $553 = HEAP32[$55>>2]|0;
        $554 = $553 & 4;
        $555 = ($554|0)==(0);
        $556 = HEAP32[$0>>2]|0;
        $557 = HEAP32[$56>>2]|0;
        $558 = (_tre_ast_new_node($556,0,20)|0);
        $559 = ($558|0)==(0|0);
        if ($555) {
         if ($559) {
          $$17 = 12;
          break L4;
         }
         $578 = ((($558)) + 4|0);
         $579 = HEAP32[$578>>2]|0;
         HEAP32[$579>>2] = 0;
         $580 = ((($579)) + 4|0);
         HEAP32[$580>>2] = 1114111;
         $581 = ((($579)) + 8|0);
         HEAP32[$581>>2] = $557;
         $582 = HEAP32[$56>>2]|0;
         $583 = (($582) + 1)|0;
         $$sroa$0$12$in = $558;$storemerge412 = $583;
        } else {
         if ($559) {
          $$17 = 12;
          break L4;
         }
         $560 = ((($558)) + 4|0);
         $561 = HEAP32[$560>>2]|0;
         HEAP32[$561>>2] = 0;
         $562 = ((($561)) + 4|0);
         HEAP32[$562>>2] = 9;
         $563 = ((($561)) + 8|0);
         HEAP32[$563>>2] = $557;
         $564 = HEAP32[$0>>2]|0;
         $565 = HEAP32[$56>>2]|0;
         $566 = (_tre_ast_new_node($564,0,20)|0);
         $567 = ($566|0)==(0|0);
         if ($567) {
          $$17 = 12;
          break L4;
         }
         $568 = (($565) + 1)|0;
         $569 = ((($566)) + 4|0);
         $570 = HEAP32[$569>>2]|0;
         HEAP32[$570>>2] = 11;
         $571 = ((($570)) + 4|0);
         HEAP32[$571>>2] = 1114111;
         $572 = ((($570)) + 8|0);
         HEAP32[$572>>2] = $568;
         $573 = HEAP32[$0>>2]|0;
         $574 = (_tre_ast_new_union($573,$558,$566)|0);
         $575 = ($574|0)==(0|0);
         if ($575) {
          $$17 = 12;
          break L4;
         }
         $576 = HEAP32[$56>>2]|0;
         $577 = (($576) + 2)|0;
         $$sroa$0$12$in = $574;$storemerge412 = $577;
        }
        $$sroa$0$12 = $$sroa$0$12$in;
        HEAP32[$56>>2] = $storemerge412;
        $584 = HEAP32[$46>>2]|0;
        $585 = ((($584)) + 1|0);
        HEAP32[$46>>2] = $585;
        $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$12;
        break L8;
        break;
       }
       case 94:  {
        $586 = HEAP32[$55>>2]|0;
        $587 = $586 & 1;
        $588 = ($587|0)==(0);
        if ($588) {
         $589 = HEAP32[$48>>2]|0;
         $590 = ($231|0)==($589|0);
         if (!($590)) {
          $631 = $231;
          break L81;
         }
         HEAP32[$1>>2] = 5;
         ;HEAP32[$$byval_copy22>>2]=HEAP32[$1>>2]|0;
         $591 = (_tre_stack_push($35,$$byval_copy22)|0);
         $592 = ($591|0)==(0);
         if (!($592)) {
          $$0316$be = $591;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
          break L8;
         }
        }
        $593 = HEAP32[$0>>2]|0;
        $594 = (_tre_ast_new_node($593,0,20)|0);
        $595 = ($594|0)==(0|0);
        if ($595) {
         $$17 = 12;
         break L4;
        }
        $596 = ((($594)) + 4|0);
        $597 = HEAP32[$596>>2]|0;
        HEAP32[$597>>2] = -2;
        $598 = ((($597)) + 4|0);
        HEAP32[$598>>2] = 1;
        $599 = ((($597)) + 8|0);
        HEAP32[$599>>2] = -1;
        $600 = $594;
        $601 = HEAP32[$46>>2]|0;
        $602 = ((($601)) + 1|0);
        HEAP32[$46>>2] = $602;
        $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $600;
        break L8;
        break;
       }
       case 36:  {
        $603 = HEAP32[$55>>2]|0;
        $604 = $603 & 1;
        $605 = ($604|0)==(0);
        if ($605) {
         $606 = ((($231)) + 1|0);
         $607 = HEAP8[$606>>0]|0;
         $608 = ($607<<24>>24)==(0);
         if (!($608)) {
          $631 = $231;
          break L81;
         }
        }
        $609 = HEAP32[$0>>2]|0;
        $610 = (_tre_ast_new_node($609,0,20)|0);
        $611 = ($610|0)==(0|0);
        if ($611) {
         $$17 = 12;
         break L4;
        }
        $612 = ((($610)) + 4|0);
        $613 = HEAP32[$612>>2]|0;
        HEAP32[$613>>2] = -2;
        $614 = ((($613)) + 4|0);
        HEAP32[$614>>2] = 2;
        $615 = ((($613)) + 8|0);
        HEAP32[$615>>2] = -1;
        $616 = $610;
        $617 = HEAP32[$46>>2]|0;
        $618 = ((($617)) + 1|0);
        HEAP32[$46>>2] = $618;
        $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $616;
        break L8;
        break;
       }
       case 41:  {
        $619 = ($$0323456|0)==(0);
        if ($619) {
         $631 = $231;
        } else {
         label = 210;
        }
        break;
       }
       case 63: case 43: case 123: case 124: case 42:  {
        label = 210;
        break;
       }
       case 0:  {
        label = 211;
        break;
       }
       default: {
        $631 = $231;
       }
       }
      } while(0);
      if ((label|0) == 67) {
       label = 0;
       $237 = (($$0323456) + 1)|0;
       $238 = ((($239)) + 1|0);
       HEAP32[$46>>2] = $238;
       $240 = HEAP32[$57>>2]|0;
       HEAP32[$10>>2] = $240;
       ;HEAP32[$$byval_copy19>>2]=HEAP32[$10>>2]|0;
       $241 = (_tre_stack_push($35,$$byval_copy19)|0);
       $242 = ($241|0)==(0);
       if (!($242)) {
        $$0316$be = $241;$$0323$be = $237;$$sroa$0$0$be = $$sroa$0$0454;
        break L8;
       }
       HEAP32[$9>>2] = 2;
       ;HEAP32[$$byval_copy20>>2]=HEAP32[$9>>2]|0;
       $243 = (_tre_stack_push($35,$$byval_copy20)|0);
       $244 = ($243|0)==(0);
       if (!($244)) {
        $$0316$be = $243;$$0323$be = $237;$$sroa$0$0$be = $$sroa$0$0454;
        break L8;
       }
       HEAP32[$8>>2] = 0;
       ;HEAP32[$$byval_copy21>>2]=HEAP32[$8>>2]|0;
       $245 = (_tre_stack_push($35,$$byval_copy21)|0);
       $246 = ($245|0)==(0);
       if (!($246)) {
        $$0316$be = $245;$$0323$be = $237;$$sroa$0$0$be = $$sroa$0$0454;
        break L8;
       }
       $247 = HEAP32[$57>>2]|0;
       $248 = (($247) + 1)|0;
       HEAP32[$57>>2] = $248;
       $$0316$be = 0;$$0323$be = $237;$$sroa$0$0$be = $$sroa$0$0454;
       break L8;
      }
      else if ((label|0) == 210) {
       label = 0;
       $620 = HEAP32[$55>>2]|0;
       $621 = $620 & 1;
       $622 = ($621|0)==(0);
       if ($622) {
        $631 = $231;
       } else {
        label = 211;
       }
      }
      if ((label|0) == 211) {
       label = 0;
       $623 = HEAP32[$0>>2]|0;
       $624 = (_tre_ast_new_node($623,0,20)|0);
       $625 = ($624|0)==(0|0);
       if ($625) {
        $$17 = 12;
        break L4;
       }
       $626 = ((($624)) + 4|0);
       $627 = HEAP32[$626>>2]|0;
       HEAP32[$627>>2] = -1;
       $628 = ((($627)) + 4|0);
       HEAP32[$628>>2] = -1;
       $629 = ((($627)) + 8|0);
       HEAP32[$629>>2] = -1;
       $630 = $624;
       $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $630;
       break L8;
      }
      $632 = (_mbtowc($30,$631,-1)|0);
      $633 = ($632|0)<(0);
      if ($633) {
       HEAP32[$30>>2] = -1;
       $$0325 = 1;
      } else {
       $$0325 = $632;
      }
      $634 = HEAP32[$55>>2]|0;
      $635 = $634 & 2;
      $636 = ($635|0)==(0);
      do {
       if ($636) {
        label = 221;
       } else {
        $637 = HEAP32[$30>>2]|0;
        $638 = (_iswupper($637)|0);
        $639 = ($638|0)==(0);
        if ($639) {
         $640 = HEAP32[$30>>2]|0;
         $641 = (_iswlower($640)|0);
         $642 = ($641|0)==(0);
         if ($642) {
          label = 221;
          break;
         }
        }
        $643 = HEAP32[$0>>2]|0;
        $644 = HEAP32[$30>>2]|0;
        $645 = (_towupper($644)|0);
        $646 = HEAP32[$30>>2]|0;
        $647 = (_towupper($646)|0);
        $648 = HEAP32[$56>>2]|0;
        $649 = (_tre_ast_new_node($643,0,20)|0);
        $650 = ($649|0)==(0|0);
        if ($650) {
         $$17 = 12;
         break L4;
        }
        $651 = ((($649)) + 4|0);
        $652 = HEAP32[$651>>2]|0;
        HEAP32[$652>>2] = $645;
        $653 = ((($652)) + 4|0);
        HEAP32[$653>>2] = $647;
        $654 = ((($652)) + 8|0);
        HEAP32[$654>>2] = $648;
        $655 = HEAP32[$0>>2]|0;
        $656 = HEAP32[$30>>2]|0;
        $657 = (_towlower($656)|0);
        $658 = HEAP32[$30>>2]|0;
        $659 = (_towlower($658)|0);
        $660 = HEAP32[$56>>2]|0;
        $661 = (_tre_ast_new_node($655,0,20)|0);
        $662 = ($661|0)==(0|0);
        if ($662) {
         $$17 = 12;
         break L4;
        }
        $663 = ((($661)) + 4|0);
        $664 = HEAP32[$663>>2]|0;
        HEAP32[$664>>2] = $657;
        $665 = ((($664)) + 4|0);
        HEAP32[$665>>2] = $659;
        $666 = ((($664)) + 8|0);
        HEAP32[$666>>2] = $660;
        $667 = HEAP32[$0>>2]|0;
        $668 = (_tre_ast_new_union($667,$649,$661)|0);
        $669 = ($668|0)==(0|0);
        if ($669) {
         $$17 = 12;
         break L4;
        } else {
         $$sroa$0$15$in = $668;
        }
       }
      } while(0);
      if ((label|0) == 221) {
       label = 0;
       $670 = HEAP32[$0>>2]|0;
       $671 = HEAP32[$30>>2]|0;
       $672 = HEAP32[$56>>2]|0;
       $673 = (_tre_ast_new_node($670,0,20)|0);
       $674 = ($673|0)==(0|0);
       if ($674) {
        $$17 = 12;
        break L4;
       }
       $675 = ((($673)) + 4|0);
       $676 = HEAP32[$675>>2]|0;
       HEAP32[$676>>2] = $671;
       $677 = ((($676)) + 4|0);
       HEAP32[$677>>2] = $671;
       $678 = ((($676)) + 8|0);
       HEAP32[$678>>2] = $672;
       $$sroa$0$15$in = $673;
      }
      $$sroa$0$15 = $$sroa$0$15$in;
      $679 = HEAP32[$56>>2]|0;
      $680 = (($679) + 1)|0;
      HEAP32[$56>>2] = $680;
      $681 = HEAP32[$46>>2]|0;
      $682 = (($681) + ($$0325)|0);
      HEAP32[$46>>2] = $682;
      $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$15;
      break;
     }
     case 2:  {
      $683 = (($65) + -2)|0;
      HEAP32[$36>>2] = $683;
      $684 = (($66) + ($683<<2)|0);
      $685 = HEAP32[$684>>2]|0;
      $686 = $$sroa$0$0454;
      $687 = ((($686)) + 12|0);
      $688 = HEAP32[$687>>2]|0;
      $689 = ($688|0)>(-1);
      if ($689) {
       $690 = HEAP32[$0>>2]|0;
       $691 = (_tre_ast_new_node($690,0,20)|0);
       $692 = ($691|0)==(0|0);
       if ($692) {
        $$17 = 12;
        break L4;
       }
       $693 = ((($691)) + 4|0);
       $694 = HEAP32[$693>>2]|0;
       HEAP32[$694>>2] = -1;
       $695 = ((($694)) + 4|0);
       HEAP32[$695>>2] = -1;
       $696 = ((($694)) + 8|0);
       HEAP32[$696>>2] = -1;
       $697 = HEAP32[$0>>2]|0;
       $698 = (_tre_ast_new_catenation($697,$691,$686)|0);
       $699 = ($698|0)==(0|0);
       if ($699) {
        $$17 = 12;
        break L4;
       }
       $700 = ((($686)) + 16|0);
       $701 = HEAP32[$700>>2]|0;
       $702 = ((($698)) + 16|0);
       HEAP32[$702>>2] = $701;
       $703 = $698;
       $$sroa$0$17 = $703;
      } else {
       $$sroa$0$17 = $$sroa$0$0454;
      }
      $704 = $$sroa$0$17;
      $705 = ((($704)) + 12|0);
      HEAP32[$705>>2] = $685;
      $706 = ((($704)) + 16|0);
      $707 = HEAP32[$706>>2]|0;
      $708 = (($707) + 1)|0;
      HEAP32[$706>>2] = $708;
      $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$17;
      break;
     }
     case 10:  {
      $709 = (($65) + -2)|0;
      HEAP32[$36>>2] = $709;
      $710 = (($66) + ($709<<2)|0);
      $711 = HEAP32[$710>>2]|0;
      HEAP32[$55>>2] = $711;
      $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
      break;
     }
     default: {
      $$0316$be = 0;$$0323$be = $$0323456;$$sroa$0$0$be = $$sroa$0$0454;
     }
     }
    } while(0);
    $69 = HEAP32[$36>>2]|0;
    $70 = ($69|0)>($37|0);
    $71 = ($$0316$be|0)==(0);
    $72 = $71 & $70;
    $$not = $72 ^ 1;
    $73 = ($$0316$be|0)!=(0);
    $or$cond18 = $73 | $$not;
    if ($or$cond18) {
     $$0316$lcssa = $$0316$be;$$0323$lcssa = $$0323$be;$$lcssa432 = $71;$$sroa$0$0$lcssa = $$sroa$0$0$be;
     label = 230;
     break L4;
    } else {
     $$0323456 = $$0323$be;$$sroa$0$0454 = $$sroa$0$0$be;$65 = $69;
    }
   }
   if ((label|0) == 72) {
    $$17 = 12;
    break;
   }
   else if ((label|0) == 156) {
    $$17 = $441;
    break;
   }
   else if ((label|0) == 187) {
    $$17 = 9;
    break;
   }
  }
 } while(0);
 if ((label|0) == 230) {
  $712 = ($$0323$lcssa|0)>(0);
  $$not345 = $$lcssa432 ^ 1;
  $brmerge = $712 | $$not345;
  $$mux = $712 ? 8 : $$0316$lcssa;
  if ($brmerge) {
   $$17 = $$mux;
  } else {
   $713 = ((($0)) + 8|0);
   HEAP32[$713>>2] = $$sroa$0$0$lcssa;
   $$17 = $$0316$lcssa;
  }
 }
 STACKTOP = sp;return ($$17|0);
}
function _tre_add_tags($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$$0482 = 0, $$$0497 = 0, $$0 = 0, $$0454 = 0, $$0455$be = 0, $$0455$lcssa = 0, $$0456$be = 0, $$0456$lcssa = 0, $$0456583 = 0, $$0458$be = 0, $$0458$lcssa = 0, $$0458580 = 0, $$0467$be = 0, $$0467$lcssa = 0, $$0467577 = 0, $$0482$be = 0, $$0482$lcssa = 0, $$0482574 = 0, $$0492 = 0, $$0493 = 0;
 var $$0494 = 0, $$0495 = 0, $$0496 = 0, $$0497$ = 0, $$0497$be = 0, $$0497571 = 0, $$0508$ = 0, $$0508$be = 0, $$0508$lcssa = 0, $$0508568 = 0, $$0523$ = 0, $$0523$be = 0, $$0523565 = 0, $$0527 = 0, $$0530 = 0, $$0531 = 0, $$0532 = 0, $$0534 = 0, $$0537 = 0, $$10477 = 0;
 var $$10507 = 0, $$10518 = 0, $$11 = 0, $$11478 = 0, $$11519 = 0, $$12 = 0, $$13480 = 0, $$13521 = 0, $$14 = 0, $$14481 = 0, $$14522 = 0, $$1457 = 0, $$1468 = 0, $$15 = 0, $$1509 = 0, $$1533 = 0, $$1535 = 0, $$2469 = 0, $$2510 = 0, $$2525 = 0;
 var $$2536563 = 0, $$3500 = 0, $$3526 = 0, $$4 = 0, $$539 = 0, $$5463 = 0, $$5472 = 0, $$5487 = 0, $$5513 = 0, $$6473 = 0, $$6488 = 0, $$6514 = 0, $$7465 = 0, $$7504 = 0, $$8 = 0, $$8490 = 0, $$8505 = 0, $$9476 = 0, $$9517 = 0, $$byval_copy = 0;
 var $$byval_copy1 = 0, $$byval_copy10 = 0, $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy16 = 0, $$byval_copy17 = 0, $$byval_copy18 = 0, $$byval_copy19 = 0, $$byval_copy2 = 0, $$byval_copy20 = 0, $$byval_copy21 = 0, $$byval_copy22 = 0, $$byval_copy23 = 0, $$byval_copy24 = 0, $$byval_copy25 = 0, $$byval_copy26 = 0, $$byval_copy27 = 0;
 var $$byval_copy28 = 0, $$byval_copy29 = 0, $$byval_copy3 = 0, $$byval_copy30 = 0, $$byval_copy31 = 0, $$byval_copy32 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$lcssa554 = 0, $$lobit = 0, $$lobit$not = 0, $$phi$trans$insert = 0, $$pre = 0, $10 = 0, $100 = 0, $101 = 0;
 var $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0;
 var $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0;
 var $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0;
 var $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0;
 var $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0;
 var $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0;
 var $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0;
 var $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0;
 var $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0;
 var $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0;
 var $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0;
 var $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond5 = 0, $or$cond538 = 0, $or$cond5564 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 272|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(272|0);
 $$byval_copy32 = sp + 260|0;
 $$byval_copy31 = sp + 256|0;
 $$byval_copy30 = sp + 252|0;
 $$byval_copy29 = sp + 248|0;
 $$byval_copy28 = sp + 244|0;
 $$byval_copy27 = sp + 240|0;
 $$byval_copy26 = sp + 236|0;
 $$byval_copy25 = sp + 232|0;
 $$byval_copy24 = sp + 228|0;
 $$byval_copy23 = sp + 224|0;
 $$byval_copy22 = sp + 220|0;
 $$byval_copy21 = sp + 216|0;
 $$byval_copy20 = sp + 212|0;
 $$byval_copy19 = sp + 208|0;
 $$byval_copy18 = sp + 204|0;
 $$byval_copy17 = sp + 200|0;
 $$byval_copy16 = sp + 196|0;
 $$byval_copy15 = sp + 192|0;
 $$byval_copy14 = sp + 188|0;
 $$byval_copy13 = sp + 184|0;
 $$byval_copy12 = sp + 180|0;
 $$byval_copy11 = sp + 176|0;
 $$byval_copy10 = sp + 172|0;
 $$byval_copy9 = sp + 168|0;
 $$byval_copy8 = sp + 164|0;
 $$byval_copy7 = sp + 160|0;
 $$byval_copy6 = sp + 156|0;
 $$byval_copy5 = sp + 152|0;
 $$byval_copy4 = sp + 148|0;
 $$byval_copy3 = sp + 144|0;
 $$byval_copy2 = sp + 140|0;
 $$byval_copy1 = sp + 136|0;
 $$byval_copy = sp + 132|0;
 $4 = sp + 128|0;
 $5 = sp + 124|0;
 $6 = sp + 120|0;
 $7 = sp + 116|0;
 $8 = sp + 112|0;
 $9 = sp + 108|0;
 $10 = sp + 104|0;
 $11 = sp + 100|0;
 $12 = sp + 96|0;
 $13 = sp + 92|0;
 $14 = sp + 88|0;
 $15 = sp + 84|0;
 $16 = sp + 80|0;
 $17 = sp + 76|0;
 $18 = sp + 72|0;
 $19 = sp + 68|0;
 $20 = sp + 64|0;
 $21 = sp + 60|0;
 $22 = sp + 56|0;
 $23 = sp + 52|0;
 $24 = sp + 48|0;
 $25 = sp + 44|0;
 $26 = sp + 40|0;
 $27 = sp + 36|0;
 $28 = sp + 32|0;
 $29 = sp + 28|0;
 $30 = sp + 24|0;
 $31 = sp + 20|0;
 $32 = sp + 16|0;
 $33 = sp + 12|0;
 $34 = sp + 8|0;
 $35 = sp + 4|0;
 $36 = sp;
 $37 = ((($1)) + 12|0);
 $38 = HEAP32[$37>>2]|0;
 $39 = ($0|0)==(0|0);
 $40 = ($3|0)==(0|0);
 $41 = $39 | $40;
 if (!($41)) {
  $42 = ((($3)) + 48|0);
  HEAP32[$42>>2] = 0;
  $43 = ((($3)) + 36|0);
  $44 = HEAP32[$43>>2]|0;
  HEAP32[$44>>2] = -1;
 }
 $45 = ((($3)) + 28|0);
 $46 = HEAP32[$45>>2]|0;
 $47 = $46 << 3;
 $48 = (($47) + 8)|0;
 $49 = (_malloc($48)|0);
 $50 = ($49|0)==(0|0);
 do {
  if ($50) {
   $$0454 = 12;
  } else {
   HEAP32[$49>>2] = -1;
   $51 = $46 << 2;
   $52 = (($51) + 4)|0;
   $53 = (_malloc($52)|0);
   $54 = ($53|0)==(0|0);
   if ($54) {
    _free($49);
    $$0454 = 12;
    break;
   }
   HEAP32[$53>>2] = -1;
   $$0531 = 0;
   while(1) {
    $55 = ($$0531>>>0)>($46>>>0);
    $56 = (($$0531) + 1)|0;
    if ($55) {
     break;
    } else {
     $$0531 = $56;
    }
   }
   HEAP32[$36>>2] = $2;
   ;HEAP32[$$byval_copy>>2]=HEAP32[$36>>2]|0;
   (_tre_stack_push($1,$$byval_copy)|0);
   HEAP32[$35>>2] = 0;
   ;HEAP32[$$byval_copy1>>2]=HEAP32[$35>>2]|0;
   $57 = (_tre_stack_push($1,$$byval_copy1)|0);
   $58 = HEAP32[$37>>2]|0;
   $59 = ($58|0)<=($38|0);
   $60 = ($57|0)!=(0);
   $or$cond5564 = $60 | $59;
   L12: do {
    if ($or$cond5564) {
     $$0455$lcssa = $57;$$0456$lcssa = $49;$$0458$lcssa = 0;$$0467$lcssa = 0;$$0482$lcssa = 0;$$0508$lcssa = -1;
    } else {
     $61 = ((($1)) + 16|0);
     $62 = ((($3)) + 32|0);
     $63 = ((($3)) + 36|0);
     $64 = ((($3)) + 16|0);
     $$0456583 = $49;$$0458580 = 0;$$0467577 = 0;$$0482574 = 0;$$0497571 = 1;$$0508568 = -1;$$0523565 = 0;$66 = $58;
     while(1) {
      $65 = (($66) + -1)|0;
      HEAP32[$37>>2] = $65;
      $67 = HEAP32[$61>>2]|0;
      $68 = (($67) + ($65<<2)|0);
      $69 = HEAP32[$68>>2]|0;
      switch ($69|0) {
      case 6:  {
       $73 = (($66) + -2)|0;
       HEAP32[$37>>2] = $73;
       $74 = (($67) + ($73<<2)|0);
       $75 = HEAP32[$74>>2]|0;
       $$0532 = 0;
       while(1) {
        $76 = (($$0456583) + ($$0532<<2)|0);
        $77 = HEAP32[$76>>2]|0;
        $78 = ($77|0)>(-1);
        $79 = (($$0532) + 1)|0;
        if ($78) {
         $$0532 = $79;
        } else {
         break;
        }
       }
       $80 = $75 << 1;
       $81 = $80 | 1;
       HEAP32[$76>>2] = $81;
       $82 = (($$0456583) + ($79<<2)|0);
       HEAP32[$82>>2] = -1;
       $$1533 = 0;
       while(1) {
        $83 = (($53) + ($$1533<<2)|0);
        $84 = HEAP32[$83>>2]|0;
        $85 = ($84|0)>(-1);
        $86 = (($$1533) + 1)|0;
        if ($85) {
         $$1533 = $86;
        } else {
         break;
        }
       }
       $87 = (($$1533) + -1)|0;
       $88 = (($53) + ($87<<2)|0);
       HEAP32[$88>>2] = -1;
       $$0455$be = 0;$$0456$be = $$0456583;$$0458$be = $$0458580;$$0467$be = $$0467577;$$0482$be = $$0482574;$$0497$be = $$0497571;$$0508$be = $$0508568;$$0523$be = $$0523565;
       break;
      }
      case 0:  {
       $89 = (($66) + -2)|0;
       HEAP32[$37>>2] = $89;
       $90 = (($67) + ($89<<2)|0);
       $91 = HEAP32[$90>>2]|0;
       $92 = ((($91)) + 12|0);
       $93 = HEAP32[$92>>2]|0;
       $94 = ($93|0)>(-1);
       if ($94) {
        $$0534 = 0;
        while(1) {
         $95 = (($$0456583) + ($$0534<<2)|0);
         $96 = HEAP32[$95>>2]|0;
         $97 = ($96|0)>(-1);
         $98 = (($$0534) + 1)|0;
         if ($97) {
          $$0534 = $98;
         } else {
          break;
         }
        }
        $99 = $93 << 1;
        HEAP32[$95>>2] = $99;
        $100 = (($$0456583) + ($98<<2)|0);
        HEAP32[$100>>2] = -1;
        if (!($41)) {
         $$1535 = 0;
         while(1) {
          $101 = (($53) + ($$1535<<2)|0);
          $102 = HEAP32[$101>>2]|0;
          $103 = ($102|0)>(-1);
          $104 = (($$1535) + 1)|0;
          if ($103) {
           $$1535 = $104;
          } else {
           break;
          }
         }
         $105 = HEAP32[$64>>2]|0;
         $106 = (((($105) + (($93*12)|0)|0)) + 8|0);
         HEAP32[$106>>2] = 0;
         $107 = ($$1535|0)>(0);
         if ($107) {
          $108 = $$1535 << 2;
          $109 = (($108) + 4)|0;
          $110 = (_malloc($109)|0);
          $111 = ($110|0)==(0|0);
          if ($111) {
           $$0455$lcssa = 12;$$0456$lcssa = $$0456583;$$0458$lcssa = $$0458580;$$0467$lcssa = $$0467577;$$0482$lcssa = $$0482574;$$0508$lcssa = $$0508568;
           break L12;
          }
          HEAP32[$106>>2] = $110;
          $112 = HEAP32[$53>>2]|0;
          $113 = ($112|0)>(-1);
          if ($113) {
           $$2536563 = 0;$114 = $112;$115 = $110;
           while(1) {
            HEAP32[$115>>2] = $114;
            $116 = (($$2536563) + 1)|0;
            $117 = (($53) + ($116<<2)|0);
            $118 = HEAP32[$117>>2]|0;
            $119 = ($118|0)>(-1);
            $120 = (($110) + ($116<<2)|0);
            if ($119) {
             $$2536563 = $116;$114 = $118;$115 = $120;
            } else {
             $$lcssa554 = $120;
             break;
            }
           }
          } else {
           $$lcssa554 = $110;
          }
          HEAP32[$$lcssa554>>2] = -1;
         }
        }
        $121 = HEAP32[$92>>2]|0;
        HEAP32[$34>>2] = $121;
        ;HEAP32[$$byval_copy2>>2]=HEAP32[$34>>2]|0;
        $122 = (_tre_stack_push($1,$$byval_copy2)|0);
        $123 = ($122|0)==(0);
        if (!($123)) {
         $$0455$lcssa = $122;$$0456$lcssa = $$0456583;$$0458$lcssa = $$0458580;$$0467$lcssa = $$0467577;$$0482$lcssa = $$0482574;$$0508$lcssa = $$0508568;
         break L12;
        }
        HEAP32[$33>>2] = 6;
        ;HEAP32[$$byval_copy3>>2]=HEAP32[$33>>2]|0;
        $124 = (_tre_stack_push($1,$$byval_copy3)|0);
        $125 = ($124|0)==(0);
        if (!($125)) {
         $$0455$lcssa = $124;$$0456$lcssa = $$0456583;$$0458$lcssa = $$0458580;$$0467$lcssa = $$0467577;$$0482$lcssa = $$0482574;$$0508$lcssa = $$0508568;
         break L12;
        }
       }
       $126 = HEAP32[$91>>2]|0;
       L42: do {
        switch ($126|0) {
        case 0:  {
         $127 = ((($91)) + 4|0);
         $128 = HEAP32[$127>>2]|0;
         $129 = HEAP32[$128>>2]|0;
         $130 = ($129|0)>(-1);
         $131 = ($129|0)==(-4);
         $or$cond538 = $130 | $131;
         if ($or$cond538) {
          $132 = HEAP32[$$0456583>>2]|0;
          $133 = ($132|0)>(-1);
          if ($133) {
           if ($41) {
            $147 = ((($91)) + 20|0);
            HEAP32[$147>>2] = 1;
            $$2469 = $$0467577;$$2510 = $$0508568;$$4 = 0;
           } else {
            $134 = (_tre_add_tag_left($0,$91,$$0482574)|0);
            $135 = HEAP32[$62>>2]|0;
            $136 = (($135) + ($$0482574<<2)|0);
            HEAP32[$136>>2] = $$0523565;
            $137 = ($$0508568|0)>(-1);
            if ($137) {
             $138 = HEAP32[$63>>2]|0;
             $$0537 = 0;
             while(1) {
              $139 = (($138) + ($$0537<<2)|0);
              $140 = HEAP32[$139>>2]|0;
              $141 = ($140|0)>(-1);
              $142 = (($$0537) + 1)|0;
              if ($141) {
               $$0537 = $142;
              } else {
               break;
              }
             }
             HEAP32[$139>>2] = $$0482574;
             $143 = (($138) + ($142<<2)|0);
             HEAP32[$143>>2] = $$0508568;
             $144 = (($$0537) + 2)|0;
             $145 = (($138) + ($144<<2)|0);
             HEAP32[$145>>2] = -1;
             $146 = (($$0467577) + 1)|0;
             $$1468 = $146;$$1509 = -1;
            } else {
             $$1468 = $$0467577;$$1509 = $$0508568;
            }
            _tre_purge_regset($$0456583,$3,$$0482574);
            $$2469 = $$1468;$$2510 = $$1509;$$4 = $134;
           }
           HEAP32[$$0456583>>2] = -1;
           $148 = (($$0458580) + 1)|0;
           $149 = (($$0497571) + 1)|0;
           $$10507 = $149;$$13480 = $$2469;$$13521 = $$2510;$$14 = $$4;$$2525 = $$0523565;$$7465 = $148;$$8490 = $$0497571;
          } else {
           $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = 0;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
          }
         } else {
          $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = 0;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
         }
         break;
        }
        case 1:  {
         $150 = ((($91)) + 4|0);
         $151 = HEAP32[$150>>2]|0;
         $152 = HEAP32[$151>>2]|0;
         $153 = ((($151)) + 4|0);
         $154 = HEAP32[$153>>2]|0;
         HEAP32[$32>>2] = $91;
         ;HEAP32[$$byval_copy4>>2]=HEAP32[$32>>2]|0;
         $155 = (_tre_stack_push($1,$$byval_copy4)|0);
         $156 = ($155|0)==(0);
         if ($156) {
          HEAP32[$31>>2] = 5;
          ;HEAP32[$$byval_copy5>>2]=HEAP32[$31>>2]|0;
          $157 = (_tre_stack_push($1,$$byval_copy5)|0);
          $158 = ($157|0)==(0);
          if ($158) {
           HEAP32[$30>>2] = $154;
           ;HEAP32[$$byval_copy6>>2]=HEAP32[$30>>2]|0;
           $159 = (_tre_stack_push($1,$$byval_copy6)|0);
           $160 = ($159|0)==(0);
           if ($160) {
            HEAP32[$29>>2] = 0;
            ;HEAP32[$$byval_copy7>>2]=HEAP32[$29>>2]|0;
            $161 = (_tre_stack_push($1,$$byval_copy7)|0);
            $162 = ($161|0)==(0);
            if ($162) {
             $163 = ((($152)) + 20|0);
             $164 = HEAP32[$163>>2]|0;
             $165 = (($164) + ($$0497571))|0;
             HEAP32[$28>>2] = $165;
             ;HEAP32[$$byval_copy8>>2]=HEAP32[$28>>2]|0;
             $166 = (_tre_stack_push($1,$$byval_copy8)|0);
             $167 = ($166|0)==(0);
             if ($167) {
              $168 = HEAP32[$163>>2]|0;
              $169 = ($168|0)>(0);
              if ($169) {
               $170 = ((($154)) + 20|0);
               $171 = HEAP32[$170>>2]|0;
               $172 = ($171|0)>(0);
               $$0497$ = $172 ? $$0497571 : -1;
               $173 = $172&1;
               $$$0497 = (($173) + ($$0497571))|0;
               $$0530 = $$0497$;$$3500 = $$$0497;
              } else {
               $$0530 = -1;$$3500 = $$0497571;
              }
              HEAP32[$27>>2] = $$0530;
              ;HEAP32[$$byval_copy9>>2]=HEAP32[$27>>2]|0;
              $174 = (_tre_stack_push($1,$$byval_copy9)|0);
              $175 = ($174|0)==(0);
              if ($175) {
               HEAP32[$26>>2] = 4;
               ;HEAP32[$$byval_copy10>>2]=HEAP32[$26>>2]|0;
               $176 = (_tre_stack_push($1,$$byval_copy10)|0);
               $177 = ($176|0)==(0);
               if ($177) {
                HEAP32[$25>>2] = $152;
                ;HEAP32[$$byval_copy11>>2]=HEAP32[$25>>2]|0;
                $178 = (_tre_stack_push($1,$$byval_copy11)|0);
                $179 = ($178|0)==(0);
                if ($179) {
                 HEAP32[$24>>2] = 0;
                 ;HEAP32[$$byval_copy12>>2]=HEAP32[$24>>2]|0;
                 $180 = (_tre_stack_push($1,$$byval_copy12)|0);
                 $$10507 = $$3500;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $180;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
                } else {
                 $$10507 = $$3500;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $178;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
                }
               } else {
                $$10507 = $$3500;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $176;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
               }
              } else {
               $$10507 = $$3500;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $174;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
              }
             } else {
              $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $166;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
             }
            } else {
             $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $161;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
            }
           } else {
            $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $159;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
           }
          } else {
           $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $157;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
          }
         } else {
          $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $155;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
         }
         break;
        }
        case 2:  {
         $181 = ((($91)) + 4|0);
         $182 = HEAP32[$181>>2]|0;
         if ($41) {
          $183 = HEAP32[$$0456583>>2]|0;
          $184 = ($183|0)>(-1);
          if ($184) {
           $190 = 1;
          } else {
           $185 = ((($182)) + 12|0);
           $186 = HEAP8[$185>>0]|0;
           $187 = $186 & 1;
           $188 = ($187<<24>>24)!=(0);
           $190 = $188;
          }
          $189 = $190&1;
          HEAP32[$23>>2] = $189;
          ;HEAP32[$$byval_copy13>>2]=HEAP32[$23>>2]|0;
          $191 = (_tre_stack_push($1,$$byval_copy13)|0);
          $192 = ($191|0)==(0);
          if (!($192)) {
           $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $191;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
           break L42;
          }
         } else {
          HEAP32[$22>>2] = $$0482574;
          ;HEAP32[$$byval_copy14>>2]=HEAP32[$22>>2]|0;
          $193 = (_tre_stack_push($1,$$byval_copy14)|0);
          $194 = ($193|0)==(0);
          if (!($194)) {
           $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $193;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
           break L42;
          }
          $195 = ((($182)) + 12|0);
          $196 = HEAP8[$195>>0]|0;
          $197 = $196 & 1;
          $198 = $197&255;
          HEAP32[$21>>2] = $198;
          ;HEAP32[$$byval_copy15>>2]=HEAP32[$21>>2]|0;
          $199 = (_tre_stack_push($1,$$byval_copy15)|0);
          $200 = ($199|0)==(0);
          if (!($200)) {
           $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $199;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
           break L42;
          }
         }
         HEAP32[$20>>2] = $91;
         ;HEAP32[$$byval_copy16>>2]=HEAP32[$20>>2]|0;
         $201 = (_tre_stack_push($1,$$byval_copy16)|0);
         $202 = ($201|0)==(0);
         if ($202) {
          HEAP32[$19>>2] = 1;
          ;HEAP32[$$byval_copy17>>2]=HEAP32[$19>>2]|0;
          $203 = (_tre_stack_push($1,$$byval_copy17)|0);
          $204 = ($203|0)==(0);
          if ($204) {
           $205 = HEAP32[$182>>2]|0;
           HEAP32[$18>>2] = $205;
           ;HEAP32[$$byval_copy18>>2]=HEAP32[$18>>2]|0;
           $206 = (_tre_stack_push($1,$$byval_copy18)|0);
           $207 = ($206|0)==(0);
           if ($207) {
            HEAP32[$17>>2] = 0;
            ;HEAP32[$$byval_copy19>>2]=HEAP32[$17>>2]|0;
            $208 = (_tre_stack_push($1,$$byval_copy19)|0);
            $209 = ($208|0)==(0);
            if ($209) {
             $210 = HEAP32[$$0456583>>2]|0;
             $211 = ($210|0)>(-1);
             if (!($211)) {
              $212 = ((($182)) + 12|0);
              $213 = HEAP8[$212>>0]|0;
              $214 = $213 & 1;
              $215 = ($214<<24>>24)==(0);
              if ($215) {
               $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = 0;$$2525 = 0;$$7465 = $$0458580;$$8490 = $$0482574;
               break L42;
              }
             }
             if ($41) {
              $$6473 = $$0467577;$$6514 = $$0508568;$$8 = 0;
             } else {
              $216 = (_tre_add_tag_left($0,$91,$$0482574)|0);
              $217 = ((($182)) + 12|0);
              $218 = HEAP8[$217>>0]|0;
              $219 = $218 & 1;
              $220 = ($219<<24>>24)==(0);
              $221 = HEAP32[$62>>2]|0;
              $222 = (($221) + ($$0482574<<2)|0);
              $$0523$ = $220 ? $$0523565 : 1;
              HEAP32[$222>>2] = $$0523$;
              $223 = ($$0508568|0)>(-1);
              if ($223) {
               $224 = HEAP32[$63>>2]|0;
               $$0527 = 0;
               while(1) {
                $225 = (($224) + ($$0527<<2)|0);
                $226 = HEAP32[$225>>2]|0;
                $227 = ($226|0)>(-1);
                $228 = (($$0527) + 1)|0;
                if ($227) {
                 $$0527 = $228;
                } else {
                 break;
                }
               }
               HEAP32[$225>>2] = $$0482574;
               $229 = (($224) + ($228<<2)|0);
               HEAP32[$229>>2] = $$0508568;
               $230 = (($$0527) + 2)|0;
               $231 = (($224) + ($230<<2)|0);
               HEAP32[$231>>2] = -1;
               $232 = (($$0467577) + 1)|0;
               $$5472 = $232;$$5513 = -1;
              } else {
               $$5472 = $$0467577;$$5513 = $$0508568;
              }
              _tre_purge_regset($$0456583,$3,$$0482574);
              $$6473 = $$5472;$$6514 = $$5513;$$8 = $216;
             }
             HEAP32[$$0456583>>2] = -1;
             $233 = (($$0458580) + 1)|0;
             $234 = (($$0497571) + 1)|0;
             $$10507 = $234;$$13480 = $$6473;$$13521 = $$6514;$$14 = $$8;$$2525 = 0;$$7465 = $233;$$8490 = $$0497571;
            } else {
             $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $208;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
            }
           } else {
            $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $206;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
           }
          } else {
           $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $203;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
          }
         } else {
          $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $201;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
         }
         break;
        }
        case 3:  {
         $235 = ((($91)) + 4|0);
         $236 = HEAP32[$235>>2]|0;
         $237 = HEAP32[$236>>2]|0;
         $238 = ((($236)) + 4|0);
         $239 = HEAP32[$238>>2]|0;
         $240 = HEAP32[$$0456583>>2]|0;
         $241 = ($240|0)>(-1);
         $242 = (($$0497571) + 1)|0;
         $$0495 = $241 ? $242 : $$0497571;
         HEAP32[$16>>2] = $$0495;
         ;HEAP32[$$byval_copy20>>2]=HEAP32[$16>>2]|0;
         $243 = (_tre_stack_push($1,$$byval_copy20)|0);
         $244 = ($243|0)==(0);
         if ($244) {
          $$0496 = $241 ? $$0497571 : $$0482574;
          HEAP32[$15>>2] = $$0496;
          ;HEAP32[$$byval_copy21>>2]=HEAP32[$15>>2]|0;
          $245 = (_tre_stack_push($1,$$byval_copy21)|0);
          $246 = ($245|0)==(0);
          if ($246) {
           HEAP32[$14>>2] = $$0456583;
           ;HEAP32[$$byval_copy22>>2]=HEAP32[$14>>2]|0;
           $247 = (_tre_stack_push($1,$$byval_copy22)|0);
           $248 = ($247|0)==(0);
           if ($248) {
            $249 = HEAP32[$$0456583>>2]|0;
            $$lobit = $249 >>> 31;
            $$lobit$not = $$lobit ^ 1;
            HEAP32[$13>>2] = $$lobit$not;
            ;HEAP32[$$byval_copy23>>2]=HEAP32[$13>>2]|0;
            $250 = (_tre_stack_push($1,$$byval_copy23)|0);
            $251 = ($250|0)==(0);
            if ($251) {
             HEAP32[$12>>2] = $91;
             ;HEAP32[$$byval_copy24>>2]=HEAP32[$12>>2]|0;
             $252 = (_tre_stack_push($1,$$byval_copy24)|0);
             $253 = ($252|0)==(0);
             if ($253) {
              HEAP32[$11>>2] = $239;
              ;HEAP32[$$byval_copy25>>2]=HEAP32[$11>>2]|0;
              $254 = (_tre_stack_push($1,$$byval_copy25)|0);
              $255 = ($254|0)==(0);
              if ($255) {
               HEAP32[$10>>2] = $237;
               ;HEAP32[$$byval_copy26>>2]=HEAP32[$10>>2]|0;
               $256 = (_tre_stack_push($1,$$byval_copy26)|0);
               $257 = ($256|0)==(0);
               if ($257) {
                HEAP32[$9>>2] = 3;
                ;HEAP32[$$byval_copy27>>2]=HEAP32[$9>>2]|0;
                $258 = (_tre_stack_push($1,$$byval_copy27)|0);
                $259 = ($258|0)==(0);
                if ($259) {
                 HEAP32[$8>>2] = $239;
                 ;HEAP32[$$byval_copy28>>2]=HEAP32[$8>>2]|0;
                 $260 = (_tre_stack_push($1,$$byval_copy28)|0);
                 $261 = ($260|0)==(0);
                 if ($261) {
                  HEAP32[$7>>2] = 0;
                  ;HEAP32[$$byval_copy29>>2]=HEAP32[$7>>2]|0;
                  $262 = (_tre_stack_push($1,$$byval_copy29)|0);
                  $263 = ($262|0)==(0);
                  if ($263) {
                   HEAP32[$6>>2] = 2;
                   ;HEAP32[$$byval_copy30>>2]=HEAP32[$6>>2]|0;
                   $264 = (_tre_stack_push($1,$$byval_copy30)|0);
                   $265 = ($264|0)==(0);
                   if (!($265)) {
                    $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $264;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
                    break L42;
                   }
                   HEAP32[$5>>2] = $237;
                   ;HEAP32[$$byval_copy31>>2]=HEAP32[$5>>2]|0;
                   $266 = (_tre_stack_push($1,$$byval_copy31)|0);
                   $267 = ($266|0)==(0);
                   if (!($267)) {
                    $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $266;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
                    break L42;
                   }
                   HEAP32[$4>>2] = 0;
                   ;HEAP32[$$byval_copy32>>2]=HEAP32[$4>>2]|0;
                   $268 = (_tre_stack_push($1,$$byval_copy32)|0);
                   $269 = ($268|0)==(0);
                   if (!($269)) {
                    $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $268;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
                    break L42;
                   }
                   $270 = HEAP32[$$0456583>>2]|0;
                   $271 = ($270|0)>(-1);
                   if ($271) {
                    if ($41) {
                     $$10477 = $$0467577;$$10518 = $$0508568;$$11 = 0;
                    } else {
                     $272 = (_tre_add_tag_left($0,$91,$$0482574)|0);
                     $273 = HEAP32[$62>>2]|0;
                     $274 = (($273) + ($$0482574<<2)|0);
                     HEAP32[$274>>2] = $$0523565;
                     $275 = ($$0508568|0)>(-1);
                     if ($275) {
                      $276 = HEAP32[$63>>2]|0;
                      $$0494 = 0;
                      while(1) {
                       $277 = (($276) + ($$0494<<2)|0);
                       $278 = HEAP32[$277>>2]|0;
                       $279 = ($278|0)>(-1);
                       $280 = (($$0494) + 1)|0;
                       if ($279) {
                        $$0494 = $280;
                       } else {
                        break;
                       }
                      }
                      HEAP32[$277>>2] = $$0482574;
                      $281 = (($276) + ($280<<2)|0);
                      HEAP32[$281>>2] = $$0508568;
                      $282 = (($$0494) + 2)|0;
                      $283 = (($276) + ($282<<2)|0);
                      HEAP32[$283>>2] = -1;
                      $284 = (($$0467577) + 1)|0;
                      $$9476 = $284;$$9517 = -1;
                     } else {
                      $$9476 = $$0467577;$$9517 = $$0508568;
                     }
                     _tre_purge_regset($$0456583,$3,$$0482574);
                     $$10477 = $$9476;$$10518 = $$9517;$$11 = $272;
                    }
                    HEAP32[$$0456583>>2] = -1;
                    $285 = (($$0458580) + 1)|0;
                    $$11478 = $$10477;$$11519 = $$10518;$$12 = $$11;$$5463 = $285;$$5487 = $$0497571;$$7504 = $242;
                   } else {
                    $$11478 = $$0467577;$$11519 = $$0508568;$$12 = 0;$$5463 = $$0458580;$$5487 = $$0482574;$$7504 = $$0497571;
                   }
                   $286 = ((($91)) + 16|0);
                   $287 = HEAP32[$286>>2]|0;
                   $288 = ($287|0)>(0);
                   $289 = (($$7504) + 1)|0;
                   $290 = (($$7504) + 2)|0;
                   $$8505 = $288 ? $290 : $$7504;
                   $$6488 = $288 ? $289 : $$5487;
                   $$10507 = $$8505;$$13480 = $$11478;$$13521 = $$11519;$$14 = $$12;$$2525 = $$0523565;$$7465 = $$5463;$$8490 = $$6488;
                  } else {
                   $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $262;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
                  }
                 } else {
                  $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $260;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
                 }
                } else {
                 $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $258;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
                }
               } else {
                $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $256;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
               }
              } else {
               $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $254;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
              }
             } else {
              $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $252;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
             }
            } else {
             $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $250;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
            }
           } else {
            $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $247;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
           }
          } else {
           $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $245;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
          }
         } else {
          $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = $243;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
         }
         break;
        }
        default: {
         $$10507 = $$0497571;$$13480 = $$0467577;$$13521 = $$0508568;$$14 = 0;$$2525 = $$0523565;$$7465 = $$0458580;$$8490 = $$0482574;
        }
        }
       } while(0);
       $291 = HEAP32[$92>>2]|0;
       $292 = ($291|0)>(-1);
       if ($292) {
        $$0493 = 0;
        while(1) {
         $293 = (($53) + ($$0493<<2)|0);
         $294 = HEAP32[$293>>2]|0;
         $295 = ($294|0)>(-1);
         $296 = (($$0493) + 1)|0;
         if ($295) {
          $$0493 = $296;
         } else {
          break;
         }
        }
        HEAP32[$293>>2] = $291;
        $297 = (($53) + ($296<<2)|0);
        HEAP32[$297>>2] = -1;
        $$0455$be = $$14;$$0456$be = $$0456583;$$0458$be = $$7465;$$0467$be = $$13480;$$0482$be = $$8490;$$0497$be = $$10507;$$0508$be = $$13521;$$0523$be = $$2525;
       } else {
        $$0455$be = $$14;$$0456$be = $$0456583;$$0458$be = $$7465;$$0467$be = $$13480;$$0482$be = $$8490;$$0497$be = $$10507;$$0508$be = $$13521;$$0523$be = $$2525;
       }
       break;
      }
      case 1:  {
       $298 = (($66) + -2)|0;
       HEAP32[$37>>2] = $298;
       $299 = (($67) + ($298<<2)|0);
       $300 = HEAP32[$299>>2]|0;
       if ($41) {
        $301 = ((($300)) + 4|0);
        $302 = HEAP32[$301>>2]|0;
        $303 = HEAP32[$302>>2]|0;
        $304 = ((($303)) + 20|0);
        $305 = HEAP32[$304>>2]|0;
        $306 = (($66) + -3)|0;
        HEAP32[$37>>2] = $306;
        $307 = (($67) + ($306<<2)|0);
        $308 = HEAP32[$307>>2]|0;
        $309 = (($308) + ($305))|0;
        $310 = ((($300)) + 20|0);
        HEAP32[$310>>2] = $309;
        $$0492 = 0;$$14522 = -1;
       } else {
        $311 = (($66) + -3)|0;
        HEAP32[$37>>2] = $311;
        $312 = (($67) + ($311<<2)|0);
        $313 = HEAP32[$312>>2]|0;
        $314 = (($66) + -4)|0;
        HEAP32[$37>>2] = $314;
        $315 = (($67) + ($314<<2)|0);
        $316 = HEAP32[$315>>2]|0;
        $317 = ($313|0)==(0);
        $$0508$ = $317 ? $$0508568 : $316;
        $$0492 = $313;$$14522 = $$0508$;
       }
       $318 = ($$0492|0)==(0);
       $$539 = $318&1;
       $$3526 = $41 ? $$0523565 : $$539;
       $$0455$be = 0;$$0456$be = $$0456583;$$0458$be = $$0458580;$$0467$be = $$0467577;$$0482$be = $$0482574;$$0497$be = $$0497571;$$0508$be = $$14522;$$0523$be = $$3526;
       break;
      }
      case 4:  {
       $319 = (($66) + -2)|0;
       HEAP32[$37>>2] = $319;
       $320 = (($67) + ($319<<2)|0);
       $321 = HEAP32[$320>>2]|0;
       $322 = (($66) + -3)|0;
       HEAP32[$37>>2] = $322;
       $323 = (($67) + ($322<<2)|0);
       $324 = HEAP32[$323>>2]|0;
       $325 = ($321|0)>(-1);
       $$$0482 = $325 ? $321 : $$0482574;
       $$0455$be = 0;$$0456$be = $$0456583;$$0458$be = $$0458580;$$0467$be = $$0467577;$$0482$be = $$$0482;$$0497$be = $324;$$0508$be = $$0508568;$$0523$be = $$0523565;
       break;
      }
      case 5:  {
       $326 = (($66) + -2)|0;
       HEAP32[$37>>2] = $326;
       $327 = (($67) + ($326<<2)|0);
       $328 = HEAP32[$327>>2]|0;
       if ($41) {
        $329 = ((($328)) + 4|0);
        $330 = HEAP32[$329>>2]|0;
        $331 = HEAP32[$330>>2]|0;
        $332 = ((($331)) + 20|0);
        $333 = HEAP32[$332>>2]|0;
        $334 = ((($330)) + 4|0);
        $335 = HEAP32[$334>>2]|0;
        $336 = ((($335)) + 20|0);
        $337 = HEAP32[$336>>2]|0;
        $338 = (($337) + ($333))|0;
        $339 = ((($328)) + 20|0);
        HEAP32[$339>>2] = $338;
        $$0455$be = 0;$$0456$be = $$0456583;$$0458$be = $$0458580;$$0467$be = $$0467577;$$0482$be = $$0482574;$$0497$be = $$0497571;$$0508$be = $$0508568;$$0523$be = $$0523565;
       } else {
        $$0455$be = 0;$$0456$be = $$0456583;$$0458$be = $$0458580;$$0467$be = $$0467577;$$0482$be = $$0482574;$$0497$be = $$0497571;$$0508$be = $$0508568;$$0523$be = $$0523565;
       }
       break;
      }
      case 2:  {
       $$1457 = $$0456583;
       while(1) {
        $340 = HEAP32[$$1457>>2]|0;
        $341 = ($340|0)>(-1);
        $342 = ((($$1457)) + 4|0);
        if ($341) {
         $$1457 = $342;
        } else {
         $$0455$be = 0;$$0456$be = $$1457;$$0458$be = $$0458580;$$0467$be = $$0467577;$$0482$be = $$0482574;$$0497$be = $$0497571;$$0508$be = $$0508568;$$0523$be = $$0523565;
         break;
        }
       }
       break;
      }
      case 3:  {
       $343 = (($66) + -2)|0;
       $344 = (($67) + ($343<<2)|0);
       $345 = HEAP32[$344>>2]|0;
       $346 = (($66) + -3)|0;
       $347 = (($67) + ($346<<2)|0);
       $348 = HEAP32[$347>>2]|0;
       $349 = (($66) + -4)|0;
       $350 = (($67) + ($349<<2)|0);
       $351 = HEAP32[$350>>2]|0;
       $352 = (($66) + -5)|0;
       HEAP32[$37>>2] = $352;
       if ($41) {
        $353 = (($67) + ($352<<2)|0);
        $354 = HEAP32[$353>>2]|0;
        $355 = ((($351)) + 4|0);
        $356 = HEAP32[$355>>2]|0;
        $357 = HEAP32[$356>>2]|0;
        $358 = ((($357)) + 20|0);
        $359 = HEAP32[$358>>2]|0;
        $360 = ((($356)) + 4|0);
        $361 = HEAP32[$360>>2]|0;
        $362 = ((($361)) + 20|0);
        $363 = HEAP32[$362>>2]|0;
        $364 = ((($351)) + 16|0);
        $365 = HEAP32[$364>>2]|0;
        $366 = ($365|0)>(0);
        $367 = $366 ? 2 : 0;
        $368 = (($359) + ($354))|0;
        $369 = (($368) + ($363))|0;
        $370 = (($369) + ($367))|0;
        $371 = ((($351)) + 20|0);
        HEAP32[$371>>2] = $370;
        $381 = $365;
       } else {
        $$phi$trans$insert = ((($351)) + 16|0);
        $$pre = HEAP32[$$phi$trans$insert>>2]|0;
        $381 = $$pre;
       }
       $372 = (($66) + -6)|0;
       $373 = (($67) + ($372<<2)|0);
       $374 = HEAP32[$373>>2]|0;
       $375 = (($66) + -7)|0;
       HEAP32[$37>>2] = $375;
       $376 = (($67) + ($375<<2)|0);
       $377 = HEAP32[$376>>2]|0;
       $378 = (($66) + -8)|0;
       HEAP32[$37>>2] = $378;
       $379 = (($67) + ($378<<2)|0);
       $380 = HEAP32[$379>>2]|0;
       $382 = ($381|0)>(0);
       if ($382) {
        if ($41) {
         $$15 = 0;
        } else {
         (_tre_add_tag_right($0,$345,$377)|0);
         $383 = HEAP32[$62>>2]|0;
         $384 = (($383) + ($377<<2)|0);
         HEAP32[$384>>2] = 1;
         $385 = (_tre_add_tag_right($0,$348,$380)|0);
         $386 = HEAP32[$62>>2]|0;
         $387 = (($386) + ($380<<2)|0);
         HEAP32[$387>>2] = 1;
         $$15 = $385;
        }
        $388 = (($$0458580) + 2)|0;
        $$0455$be = $$15;$$0456$be = $374;$$0458$be = $388;$$0467$be = $$0467577;$$0482$be = $$0482574;$$0497$be = $$0497571;$$0508$be = $$0508568;$$0523$be = 1;
       } else {
        $$0455$be = 0;$$0456$be = $374;$$0458$be = $$0458580;$$0467$be = $$0467577;$$0482$be = $$0482574;$$0497$be = $$0497571;$$0508$be = $$0508568;$$0523$be = 1;
       }
       break;
      }
      default: {
       $$0455$be = 0;$$0456$be = $$0456583;$$0458$be = $$0458580;$$0467$be = $$0467577;$$0482$be = $$0482574;$$0497$be = $$0497571;$$0508$be = $$0508568;$$0523$be = $$0523565;
      }
      }
      $70 = HEAP32[$37>>2]|0;
      $71 = ($70|0)<=($38|0);
      $72 = ($$0455$be|0)!=(0);
      $or$cond5 = $72 | $71;
      if ($or$cond5) {
       $$0455$lcssa = $$0455$be;$$0456$lcssa = $$0456$be;$$0458$lcssa = $$0458$be;$$0467$lcssa = $$0467$be;$$0482$lcssa = $$0482$be;$$0508$lcssa = $$0508$be;
       break L12;
      } else {
       $$0456583 = $$0456$be;$$0458580 = $$0458$be;$$0467577 = $$0467$be;$$0482574 = $$0482$be;$$0497571 = $$0497$be;$$0508568 = $$0508$be;$$0523565 = $$0523$be;$66 = $70;
      }
     }
    }
   } while(0);
   if ($41) {
    $$14481 = $$0467$lcssa;
   } else {
    _tre_purge_regset($$0456$lcssa,$3,$$0482$lcssa);
    $389 = ($$0508$lcssa|0)>(-1);
    if ($389) {
     $390 = ((($3)) + 36|0);
     $391 = HEAP32[$390>>2]|0;
     $$0 = 0;
     while(1) {
      $392 = (($391) + ($$0<<2)|0);
      $393 = HEAP32[$392>>2]|0;
      $394 = ($393|0)>(-1);
      $395 = (($$0) + 1)|0;
      if ($394) {
       $$0 = $395;
      } else {
       break;
      }
     }
     HEAP32[$392>>2] = $$0482$lcssa;
     $396 = (($391) + ($395<<2)|0);
     HEAP32[$396>>2] = $$0508$lcssa;
     $397 = (($$0) + 2)|0;
     $398 = (($391) + ($397<<2)|0);
     HEAP32[$398>>2] = -1;
     $399 = (($$0467$lcssa) + 1)|0;
     $$14481 = $399;
    } else {
     $$14481 = $$0467$lcssa;
    }
   }
   $400 = ((($3)) + 48|0);
   HEAP32[$400>>2] = $$0458$lcssa;
   $401 = ((($3)) + 40|0);
   HEAP32[$401>>2] = $$0458$lcssa;
   $402 = ((($3)) + 44|0);
   HEAP32[$402>>2] = $$14481;
   _free($49);
   _free($53);
   $$0454 = $$0455$lcssa;
  }
 } while(0);
 STACKTOP = sp;return ($$0454|0);
}
function _tre_stack_push($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$1 = 0, $$byval_copy = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $$byval_copy = sp;
 $2 = ((($0)) + 12|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = HEAP32[$0>>2]|0;
 $5 = ($3|0)<($4|0);
 if ($5) {
  $6 = ((($0)) + 16|0);
  $7 = HEAP32[$6>>2]|0;
  $8 = (($7) + ($3<<2)|0);
  $9 = HEAP32[$1>>2]|0;
  HEAP32[$8>>2] = $9;
  $10 = HEAP32[$2>>2]|0;
  $11 = (($10) + 1)|0;
  HEAP32[$2>>2] = $11;
  $$1 = 0;
 } else {
  $12 = ((($0)) + 4|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ($4|0)<($13|0);
  if ($14) {
   $15 = ((($0)) + 8|0);
   $16 = HEAP32[$15>>2]|0;
   $17 = (($16) + ($4))|0;
   $18 = ($17|0)>($13|0);
   $$ = $18 ? $13 : $17;
   $19 = ((($0)) + 16|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = $$ << 2;
   $22 = (_realloc($20,$21)|0);
   $23 = ($22|0)==(0|0);
   if ($23) {
    $$1 = 12;
   } else {
    HEAP32[$0>>2] = $$;
    HEAP32[$19>>2] = $22;
    ;HEAP32[$$byval_copy>>2]=HEAP32[$1>>2]|0;
    (_tre_stack_push($0,$$byval_copy)|0);
    $$1 = 0;
   }
  } else {
   $$1 = 12;
  }
 }
 STACKTOP = sp;return ($$1|0);
}
function _tre_copy_ast($0,$1,$2,$3,$4,$5,$6,$7) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 $7 = $7|0;
 var $$0146$ph$ph = 0, $$0151$ph$ph = 0, $$0155$ph$be = 0, $$0155$ph$ph = 0, $$0155$ph217 = 0, $$0162 = 0, $$0163 = 0, $$0164 = 0, $$1 = 0, $$1147 = 0, $$1152 = 0, $$3149 = 0, $$3154 = 0, $$4150 = 0, $$5160 = 0, $$6 = 0, $$7 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy10 = 0;
 var $$byval_copy11 = 0, $$byval_copy12 = 0, $$byval_copy13 = 0, $$byval_copy14 = 0, $$byval_copy15 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$byval_copy6 = 0, $$byval_copy7 = 0, $$byval_copy8 = 0, $$byval_copy9 = 0, $$old2 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $or$cond = 0, $or$cond165 = 0, $or$cond167 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(128|0);
 $$byval_copy15 = sp + 124|0;
 $$byval_copy14 = sp + 120|0;
 $$byval_copy13 = sp + 116|0;
 $$byval_copy12 = sp + 112|0;
 $$byval_copy11 = sp + 108|0;
 $$byval_copy10 = sp + 104|0;
 $$byval_copy9 = sp + 100|0;
 $$byval_copy8 = sp + 96|0;
 $$byval_copy7 = sp + 92|0;
 $$byval_copy6 = sp + 88|0;
 $$byval_copy5 = sp + 84|0;
 $$byval_copy4 = sp + 80|0;
 $$byval_copy3 = sp + 76|0;
 $$byval_copy2 = sp + 72|0;
 $$byval_copy1 = sp + 68|0;
 $$byval_copy = sp + 64|0;
 $8 = sp + 60|0;
 $9 = sp + 56|0;
 $10 = sp + 52|0;
 $11 = sp + 48|0;
 $12 = sp + 44|0;
 $13 = sp + 40|0;
 $14 = sp + 36|0;
 $15 = sp + 32|0;
 $16 = sp + 28|0;
 $17 = sp + 24|0;
 $18 = sp + 20|0;
 $19 = sp + 16|0;
 $20 = sp + 12|0;
 $21 = sp + 8|0;
 $22 = sp + 4|0;
 $23 = sp;
 $24 = ((($1)) + 12|0);
 $25 = HEAP32[$24>>2]|0;
 HEAP32[$23>>2] = $2;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$23>>2]|0;
 (_tre_stack_push($1,$$byval_copy)|0);
 HEAP32[$22>>2] = 0;
 ;HEAP32[$$byval_copy1>>2]=HEAP32[$22>>2]|0;
 $26 = (_tre_stack_push($1,$$byval_copy1)|0);
 $$old2 = ($26|0)==(0);
 L1: do {
  if ($$old2) {
   $27 = ((($1)) + 16|0);
   $28 = $3 & 1;
   $29 = ($28|0)==(0);
   $30 = $3 & 2;
   $31 = ($30|0)!=(0);
   $$0146$ph$ph = 0;$$0151$ph$ph = 1;$$0155$ph$ph = $6;
   while(1) {
    $32 = HEAP32[$24>>2]|0;
    $33 = ($32|0)>($25|0);
    if ($33) {
     $$0155$ph217 = $$0155$ph$ph;$150 = $32;
    } else {
     $$4150 = $$0146$ph$ph;$$7 = 0;
     break L1;
    }
    L5: while(1) {
     $34 = HEAP32[$27>>2]|0;
     $36 = $150;
     L7: while(1) {
      $35 = (($36) + -1)|0;
      HEAP32[$24>>2] = $35;
      $37 = (($34) + ($35<<2)|0);
      $38 = HEAP32[$37>>2]|0;
      switch ($38|0) {
      case 1:  {
       label = 7;
       break L7;
       break;
      }
      case 0:  {
       $44 = (($36) + -2)|0;
       HEAP32[$24>>2] = $44;
       $45 = (($34) + ($44<<2)|0);
       $46 = HEAP32[$45>>2]|0;
       $47 = HEAP32[$46>>2]|0;
       switch ($47|0) {
       case 0:  {
        label = 9;
        break L5;
        break;
       }
       case 3:  {
        label = 20;
        break L5;
        break;
       }
       case 1:  {
        label = 27;
        break L5;
        break;
       }
       case 2:  {
        label = 34;
        break L7;
        break;
       }
       default: {
       }
       }
       break;
      }
      default: {
      }
      }
      $39 = HEAP32[$24>>2]|0;
      $40 = ($39|0)>($25|0);
      if ($40) {
       $36 = $39;
      } else {
       $$4150 = $$0146$ph$ph;$$7 = 0;
       break L1;
      }
     }
     if ((label|0) == 7) {
      label = 0;
      $41 = (($36) + -2)|0;
      HEAP32[$24>>2] = $41;
      $42 = (($34) + ($41<<2)|0);
      $43 = HEAP32[$42>>2]|0;
      $$0155$ph$be = $43;
     }
     else if ((label|0) == 34) {
      label = 0;
      $125 = ((($46)) + 4|0);
      $126 = HEAP32[$125>>2]|0;
      $127 = HEAP32[$126>>2]|0;
      HEAP32[$20>>2] = $127;
      ;HEAP32[$$byval_copy14>>2]=HEAP32[$20>>2]|0;
      $128 = (_tre_stack_push($1,$$byval_copy14)|0);
      $129 = ($128|0)==(0);
      if (!($129)) {
       $$4150 = $$0146$ph$ph;$$7 = $128;
       break L1;
      }
      HEAP32[$21>>2] = 0;
      ;HEAP32[$$byval_copy15>>2]=HEAP32[$21>>2]|0;
      $130 = (_tre_stack_push($1,$$byval_copy15)|0);
      $131 = ($130|0)==(0);
      if (!($131)) {
       $$4150 = $$0146$ph$ph;$$7 = $130;
       break L1;
      }
      $132 = HEAP32[$126>>2]|0;
      $133 = ((($126)) + 4|0);
      $134 = HEAP32[$133>>2]|0;
      $135 = ((($126)) + 8|0);
      $136 = HEAP32[$135>>2]|0;
      $137 = ((($126)) + 12|0);
      $138 = HEAP8[$137>>0]|0;
      $139 = $138 & 1;
      $140 = $139&255;
      $141 = (_tre_ast_new_iter($0,$132,$134,$136,$140)|0);
      HEAP32[$$0155$ph217>>2] = $141;
      $142 = ($141|0)==(0|0);
      if ($142) {
       $$4150 = $$0146$ph$ph;$$7 = 12;
       break L1;
      }
      $143 = ((($141)) + 4|0);
      $144 = HEAP32[$143>>2]|0;
      $$0155$ph$be = $144;
     }
     $145 = HEAP32[$24>>2]|0;
     $146 = ($145|0)>($25|0);
     if ($146) {
      $$0155$ph217 = $$0155$ph$be;$150 = $145;
     } else {
      $$4150 = $$0146$ph$ph;$$7 = 0;
      break L1;
     }
    }
    if ((label|0) == 9) {
     label = 0;
     $48 = ((($46)) + 4|0);
     $49 = HEAP32[$48>>2]|0;
     $50 = ((($49)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = HEAP32[$49>>2]|0;
     $53 = ((($49)) + 4|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($52|0)>(-1);
     $56 = ($52|0)==(-4);
     $or$cond165 = $55 | $56;
     if ($or$cond165) {
      $57 = HEAP32[$4>>2]|0;
      $58 = (($57) + ($51))|0;
      $59 = (($$0146$ph$ph) + 1)|0;
      $$0162 = $54;$$0163 = $52;$$0164 = $58;$$1147 = $59;$$1152 = $$0151$ph$ph;
     } else {
      $60 = ($52|0)!=(-3);
      $or$cond167 = $29 | $60;
      if ($or$cond167) {
       $61 = ($52|0)==(-3);
       if ($61) {
        $62 = ($$0151$ph$ph|0)!=(0);
        $or$cond = $31 & $62;
        if ($or$cond) {
         $63 = (($5) + ($54<<2)|0);
         HEAP32[$63>>2] = 1;
         $$0162 = $54;$$0163 = -3;$$0164 = $51;$$1147 = $$0146$ph$ph;$$1152 = 0;
        } else {
         $$0162 = $54;$$0163 = -3;$$0164 = $51;$$1147 = $$0146$ph$ph;$$1152 = $$0151$ph$ph;
        }
       } else {
        $$0162 = $54;$$0163 = $52;$$0164 = $51;$$1147 = $$0146$ph$ph;$$1152 = $$0151$ph$ph;
       }
      } else {
       $$0162 = -1;$$0163 = -1;$$0164 = -1;$$1147 = $$0146$ph$ph;$$1152 = $$0151$ph$ph;
      }
     }
     $64 = (_tre_ast_new_node($0,0,20)|0);
     $65 = ($64|0)==(0|0);
     if ($65) {
      HEAP32[$$0155$ph217>>2] = 0;
      $$1 = 12;
     } else {
      $66 = ((($64)) + 4|0);
      $67 = HEAP32[$66>>2]|0;
      HEAP32[$67>>2] = $$0163;
      $68 = ((($67)) + 4|0);
      HEAP32[$68>>2] = $$0162;
      $69 = ((($67)) + 8|0);
      HEAP32[$69>>2] = $$0164;
      HEAP32[$$0155$ph217>>2] = $64;
      $70 = HEAP32[$66>>2]|0;
      $71 = ((($49)) + 12|0);
      $72 = HEAP32[$71>>2]|0;
      $73 = ((($70)) + 12|0);
      HEAP32[$73>>2] = $72;
      $74 = ((($49)) + 16|0);
      $75 = HEAP32[$74>>2]|0;
      $76 = ((($70)) + 16|0);
      HEAP32[$76>>2] = $75;
      $$1 = 0;
     }
     $77 = HEAP32[$7>>2]|0;
     $78 = ($$0164|0)>($77|0);
     if ($78) {
      HEAP32[$7>>2] = $$0164;
      $$3149 = $$1147;$$3154 = $$1152;$$5160 = $$0155$ph217;$$6 = $$1;
     } else {
      $$3149 = $$1147;$$3154 = $$1152;$$5160 = $$0155$ph217;$$6 = $$1;
     }
    }
    else if ((label|0) == 20) {
     label = 0;
     $79 = ((($46)) + 4|0);
     $80 = HEAP32[$79>>2]|0;
     $81 = HEAP32[$80>>2]|0;
     $82 = ((($80)) + 4|0);
     $83 = HEAP32[$82>>2]|0;
     $84 = (_tre_ast_new_union($0,$81,$83)|0);
     HEAP32[$$0155$ph217>>2] = $84;
     $85 = ($84|0)==(0|0);
     if ($85) {
      $$4150 = $$0146$ph$ph;$$7 = 12;
      break L1;
     }
     $86 = ((($84)) + 4|0);
     $87 = HEAP32[$86>>2]|0;
     $88 = HEAP32[$82>>2]|0;
     HEAP32[$17>>2] = $88;
     ;HEAP32[$$byval_copy2>>2]=HEAP32[$17>>2]|0;
     $89 = (_tre_stack_push($1,$$byval_copy2)|0);
     $90 = ($89|0)==(0);
     if (!($90)) {
      $$4150 = $$0146$ph$ph;$$7 = $89;
      break L1;
     }
     HEAP32[$16>>2] = 0;
     ;HEAP32[$$byval_copy3>>2]=HEAP32[$16>>2]|0;
     $91 = (_tre_stack_push($1,$$byval_copy3)|0);
     $92 = ($91|0)==(0);
     if (!($92)) {
      $$4150 = $$0146$ph$ph;$$7 = $91;
      break L1;
     }
     $93 = ((($87)) + 4|0);
     HEAP32[$15>>2] = $93;
     ;HEAP32[$$byval_copy4>>2]=HEAP32[$15>>2]|0;
     $94 = (_tre_stack_push($1,$$byval_copy4)|0);
     $95 = ($94|0)==(0);
     if (!($95)) {
      $$4150 = $$0146$ph$ph;$$7 = $94;
      break L1;
     }
     HEAP32[$14>>2] = 1;
     ;HEAP32[$$byval_copy5>>2]=HEAP32[$14>>2]|0;
     $96 = (_tre_stack_push($1,$$byval_copy5)|0);
     $97 = ($96|0)==(0);
     if (!($97)) {
      $$4150 = $$0146$ph$ph;$$7 = $96;
      break L1;
     }
     $98 = HEAP32[$80>>2]|0;
     HEAP32[$13>>2] = $98;
     ;HEAP32[$$byval_copy6>>2]=HEAP32[$13>>2]|0;
     $99 = (_tre_stack_push($1,$$byval_copy6)|0);
     $100 = ($99|0)==(0);
     if (!($100)) {
      $$4150 = $$0146$ph$ph;$$7 = $99;
      break L1;
     }
     HEAP32[$12>>2] = 0;
     ;HEAP32[$$byval_copy7>>2]=HEAP32[$12>>2]|0;
     $101 = (_tre_stack_push($1,$$byval_copy7)|0);
     $$3149 = $$0146$ph$ph;$$3154 = $$0151$ph$ph;$$5160 = $87;$$6 = $101;
    }
    else if ((label|0) == 27) {
     label = 0;
     $102 = ((($46)) + 4|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = HEAP32[$103>>2]|0;
     $105 = ((($103)) + 4|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = (_tre_ast_new_catenation($0,$104,$106)|0);
     HEAP32[$$0155$ph217>>2] = $107;
     $108 = ($107|0)==(0|0);
     if ($108) {
      $$4150 = $$0146$ph$ph;$$7 = 12;
      break L1;
     }
     $109 = ((($107)) + 4|0);
     $110 = HEAP32[$109>>2]|0;
     HEAP32[$110>>2] = 0;
     $111 = ((($110)) + 4|0);
     HEAP32[$111>>2] = 0;
     $112 = HEAP32[$105>>2]|0;
     HEAP32[$11>>2] = $112;
     ;HEAP32[$$byval_copy8>>2]=HEAP32[$11>>2]|0;
     $113 = (_tre_stack_push($1,$$byval_copy8)|0);
     $114 = ($113|0)==(0);
     if (!($114)) {
      $$4150 = $$0146$ph$ph;$$7 = $113;
      break L1;
     }
     HEAP32[$10>>2] = 0;
     ;HEAP32[$$byval_copy9>>2]=HEAP32[$10>>2]|0;
     $115 = (_tre_stack_push($1,$$byval_copy9)|0);
     $116 = ($115|0)==(0);
     if (!($116)) {
      $$4150 = $$0146$ph$ph;$$7 = $115;
      break L1;
     }
     HEAP32[$9>>2] = $111;
     ;HEAP32[$$byval_copy10>>2]=HEAP32[$9>>2]|0;
     $117 = (_tre_stack_push($1,$$byval_copy10)|0);
     $118 = ($117|0)==(0);
     if (!($118)) {
      $$4150 = $$0146$ph$ph;$$7 = $117;
      break L1;
     }
     HEAP32[$8>>2] = 1;
     ;HEAP32[$$byval_copy11>>2]=HEAP32[$8>>2]|0;
     $119 = (_tre_stack_push($1,$$byval_copy11)|0);
     $120 = ($119|0)==(0);
     if (!($120)) {
      $$4150 = $$0146$ph$ph;$$7 = $119;
      break L1;
     }
     $121 = HEAP32[$103>>2]|0;
     HEAP32[$18>>2] = $121;
     ;HEAP32[$$byval_copy12>>2]=HEAP32[$18>>2]|0;
     $122 = (_tre_stack_push($1,$$byval_copy12)|0);
     $123 = ($122|0)==(0);
     if (!($123)) {
      $$4150 = $$0146$ph$ph;$$7 = $122;
      break L1;
     }
     HEAP32[$19>>2] = 0;
     ;HEAP32[$$byval_copy13>>2]=HEAP32[$19>>2]|0;
     $124 = (_tre_stack_push($1,$$byval_copy13)|0);
     $$3149 = $$0146$ph$ph;$$3154 = $$0151$ph$ph;$$5160 = $110;$$6 = $124;
    }
    $147 = ($$6|0)==(0);
    if ($147) {
     $$0146$ph$ph = $$3149;$$0151$ph$ph = $$3154;$$0155$ph$ph = $$5160;
    } else {
     $$4150 = $$3149;$$7 = $$6;
     break;
    }
   }
  } else {
   $$4150 = 0;$$7 = $26;
  }
 } while(0);
 $148 = HEAP32[$4>>2]|0;
 $149 = (($148) + ($$4150))|0;
 HEAP32[$4>>2] = $149;
 STACKTOP = sp;return ($$7|0);
}
function _tre_ast_new_catenation($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_tre_ast_new_node($0,1,8)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = ((($3)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$6>>2] = $1;
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($2)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($9))|0;
  $13 = ((($3)) + 16|0);
  HEAP32[$13>>2] = $12;
  $$0 = $3;
 }
 return ($$0|0);
}
function _tre_ast_new_iter($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = (_tre_ast_new_node($0,2,16)|0);
 $6 = ($5|0)==(0|0);
 if ($6) {
  $$0 = 0;
 } else {
  $7 = ((($5)) + 4|0);
  $8 = HEAP32[$7>>2]|0;
  HEAP32[$8>>2] = $1;
  $9 = ((($8)) + 4|0);
  HEAP32[$9>>2] = $2;
  $10 = ((($8)) + 8|0);
  HEAP32[$10>>2] = $3;
  $11 = ((($8)) + 12|0);
  $12 = $4&255;
  $13 = HEAP8[$11>>0]|0;
  $14 = $12 & 1;
  $15 = $13 & -2;
  $16 = $15 | $14;
  HEAP8[$11>>0] = $16;
  $17 = ((($1)) + 16|0);
  $18 = HEAP32[$17>>2]|0;
  $19 = ((($5)) + 16|0);
  HEAP32[$19>>2] = $18;
  $$0 = $5;
 }
 return ($$0|0);
}
function _tre_ast_new_node($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___tre_mem_alloc_impl($0,0,0,1,32)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = (___tre_mem_alloc_impl($0,0,0,1,$2)|0);
  $6 = ((($3)) + 4|0);
  HEAP32[$6>>2] = $5;
  $7 = ($5|0)==(0|0);
  if ($7) {
   $$0 = 0;
  } else {
   HEAP32[$3>>2] = $1;
   $8 = ((($3)) + 8|0);
   HEAP32[$8>>2] = -1;
   $9 = ((($3)) + 12|0);
   HEAP32[$9>>2] = -1;
   $$0 = $3;
  }
 }
 return ($$0|0);
}
function _tre_ast_new_union($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_tre_ast_new_node($0,3,8)|0);
 $4 = ($3|0)==(0|0);
 if ($4) {
  $$0 = 0;
 } else {
  $5 = ((($3)) + 4|0);
  $6 = HEAP32[$5>>2]|0;
  HEAP32[$6>>2] = $1;
  $7 = ((($6)) + 4|0);
  HEAP32[$7>>2] = $2;
  $8 = ((($1)) + 16|0);
  $9 = HEAP32[$8>>2]|0;
  $10 = ((($2)) + 16|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = (($11) + ($9))|0;
  $13 = ((($3)) + 16|0);
  HEAP32[$13>>2] = $12;
  $$0 = $3;
 }
 return ($$0|0);
}
function _tre_set_one($0,$1,$2,$3,$4,$5,$6) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 $6 = $6|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $7 = (___tre_mem_alloc_impl($0,0,0,1,64)|0);
 $8 = ($7|0)==(0|0);
 if ($8) {
  $$0 = 0;
 } else {
  HEAP32[$7>>2] = $1;
  $9 = ((($7)) + 4|0);
  HEAP32[$9>>2] = $2;
  $10 = ((($7)) + 8|0);
  HEAP32[$10>>2] = $3;
  $11 = ((($7)) + 20|0);
  HEAP32[$11>>2] = $4;
  $12 = ((($7)) + 24|0);
  HEAP32[$12>>2] = $5;
  $13 = ((($7)) + 28|0);
  HEAP32[$13>>2] = $6;
  $14 = ((($7)) + 32|0);
  HEAP32[$14>>2] = -1;
  $15 = ((($7)) + 36|0);
  HEAP32[$15>>2] = -1;
  $16 = ((($7)) + 40|0);
  HEAP32[$16>>2] = -1;
  $$0 = $7;
 }
 return ($$0|0);
}
function _tre_set_empty($0) {
 $0 = $0|0;
 var $$0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (___tre_mem_alloc_impl($0,0,0,1,32)|0);
 $2 = ($1|0)==(0|0);
 if ($2) {
  $$0 = 0;
 } else {
  HEAP32[$1>>2] = -1;
  $3 = ((($1)) + 4|0);
  HEAP32[$3>>2] = -1;
  $4 = ((($1)) + 8|0);
  HEAP32[$4>>2] = -1;
  $$0 = $1;
 }
 return ($$0|0);
}
function _tre_set_union($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$lcssa = 0, $$0165 = 0, $$0166$lcssa = 0, $$0166194 = 0, $$0167$lcssa = 0, $$0167189 = 0, $$0169 = 0, $$0171 = 0, $$0205 = 0, $$1$lcssa = 0, $$1168$lcssa = 0, $$1168197 = 0, $$1170185 = 0, $$1172$lcssa = 0, $$1172201 = 0, $$1184 = 0, $$2 = 0, $$lcssa = 0, $10 = 0, $100 = 0;
 var $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $exitcond = 0, $exitcond219 = 0, $exitcond220 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($3|0)==(0|0);
 if ($5) {
  $$0$lcssa = 0;
 } else {
  $$0205 = 0;
  while(1) {
   $6 = (($3) + ($$0205<<2)|0);
   $7 = HEAP32[$6>>2]|0;
   $8 = ($7|0)>(-1);
   $9 = (($$0205) + 1)|0;
   if ($8) {
    $$0205 = $9;
   } else {
    $$0$lcssa = $$0205;
    break;
   }
  }
 }
 $$0171 = 0;
 while(1) {
  $10 = (($1) + ($$0171<<5)|0);
  $11 = HEAP32[$10>>2]|0;
  $12 = ($11|0)>(-1);
  $13 = (($$0171) + 1)|0;
  if ($12) {
   $$0171 = $13;
  } else {
   $$0169 = 0;
   break;
  }
 }
 while(1) {
  $14 = (($2) + ($$0169<<5)|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)>(-1);
  $17 = (($$0169) + 1)|0;
  if ($16) {
   $$0169 = $17;
  } else {
   break;
  }
 }
 $18 = (($$0169) + ($$0171))|0;
 $19 = $18 << 5;
 $20 = (($19) + 32)|0;
 $21 = (___tre_mem_alloc_impl($0,0,0,1,$20)|0);
 $22 = ($21|0)==(0|0);
 L10: do {
  if ($22) {
   $$0165 = 0;
  } else {
   $23 = HEAP32[$1>>2]|0;
   $24 = ($23|0)>(-1);
   if ($24) {
    $25 = ($$0$lcssa|0)>(0);
    $$1172201 = 0;$30 = $23;
    while(1) {
     $29 = (($21) + ($$1172201<<5)|0);
     HEAP32[$29>>2] = $30;
     $31 = (((($1) + ($$1172201<<5)|0)) + 4|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = (((($21) + ($$1172201<<5)|0)) + 4|0);
     HEAP32[$33>>2] = $32;
     $34 = (((($1) + ($$1172201<<5)|0)) + 8|0);
     $35 = HEAP32[$34>>2]|0;
     $36 = (((($21) + ($$1172201<<5)|0)) + 8|0);
     HEAP32[$36>>2] = $35;
     $37 = (((($1) + ($$1172201<<5)|0)) + 16|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = $38 | $4;
     $40 = (((($21) + ($$1172201<<5)|0)) + 16|0);
     HEAP32[$40>>2] = $39;
     $41 = (((($1) + ($$1172201<<5)|0)) + 20|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = (((($21) + ($$1172201<<5)|0)) + 20|0);
     HEAP32[$43>>2] = $42;
     $44 = (((($1) + ($$1172201<<5)|0)) + 24|0);
     $45 = HEAP32[$44>>2]|0;
     $46 = (((($21) + ($$1172201<<5)|0)) + 24|0);
     HEAP32[$46>>2] = $45;
     $47 = (((($1) + ($$1172201<<5)|0)) + 28|0);
     $48 = HEAP32[$47>>2]|0;
     $49 = (((($21) + ($$1172201<<5)|0)) + 28|0);
     HEAP32[$49>>2] = $48;
     $50 = (((($1) + ($$1172201<<5)|0)) + 12|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51|0)==(0|0);
     $or$cond = $5 & $52;
     if ($or$cond) {
      $53 = (((($21) + ($$1172201<<5)|0)) + 12|0);
      HEAP32[$53>>2] = 0;
     } else {
      if ($52) {
       $$0167$lcssa = 0;
      } else {
       $$0167189 = 0;
       while(1) {
        $54 = (($51) + ($$0167189<<2)|0);
        $55 = HEAP32[$54>>2]|0;
        $56 = ($55|0)>(-1);
        $57 = (($$0167189) + 1)|0;
        if ($56) {
         $$0167189 = $57;
        } else {
         $$0167$lcssa = $$0167189;
         break;
        }
       }
      }
      $58 = (($$0167$lcssa) + ($$0$lcssa))|0;
      $59 = $58 << 2;
      $60 = (($59) + 4)|0;
      $61 = (___tre_mem_alloc_impl($0,0,0,0,$60)|0);
      $62 = ($61|0)==(0|0);
      if ($62) {
       $$0165 = 0;
       break L10;
      }
      $63 = ($$0167$lcssa|0)>(0);
      if ($63) {
       $64 = HEAP32[$50>>2]|0;
       $$0166194 = 0;
       while(1) {
        $65 = (($64) + ($$0166194<<2)|0);
        $66 = HEAP32[$65>>2]|0;
        $67 = (($61) + ($$0166194<<2)|0);
        HEAP32[$67>>2] = $66;
        $68 = (($$0166194) + 1)|0;
        $exitcond219 = ($68|0)==($$0167$lcssa|0);
        if ($exitcond219) {
         $$0166$lcssa = $$0167$lcssa;
         break;
        } else {
         $$0166194 = $68;
        }
       }
      } else {
       $$0166$lcssa = 0;
      }
      if ($25) {
       $$1168197 = 0;
       while(1) {
        $69 = (($3) + ($$1168197<<2)|0);
        $70 = HEAP32[$69>>2]|0;
        $71 = (($$1168197) + ($$0166$lcssa))|0;
        $72 = (($61) + ($71<<2)|0);
        HEAP32[$72>>2] = $70;
        $73 = (($$1168197) + 1)|0;
        $exitcond220 = ($73|0)==($$0$lcssa|0);
        if ($exitcond220) {
         $$1168$lcssa = $$0$lcssa;
         break;
        } else {
         $$1168197 = $73;
        }
       }
      } else {
       $$1168$lcssa = 0;
      }
      $74 = (($$1168$lcssa) + ($$0166$lcssa))|0;
      $75 = (($61) + ($74<<2)|0);
      HEAP32[$75>>2] = -1;
      $76 = (((($21) + ($$1172201<<5)|0)) + 12|0);
      HEAP32[$76>>2] = $61;
     }
     $77 = (($$1172201) + 1)|0;
     $78 = (($1) + ($77<<5)|0);
     $79 = HEAP32[$78>>2]|0;
     $80 = ($79|0)>(-1);
     if ($80) {
      $$1172201 = $77;$30 = $79;
     } else {
      $$1172$lcssa = $77;
      break;
     }
    }
   } else {
    $$1172$lcssa = 0;
   }
   $26 = HEAP32[$2>>2]|0;
   $27 = ($26|0)>(-1);
   $28 = (($21) + ($$1172$lcssa<<5)|0);
   if ($27) {
    $$1170185 = 0;$81 = $26;$82 = $28;$86 = $$1172$lcssa;
    while(1) {
     HEAP32[$82>>2] = $81;
     $83 = (((($2) + ($$1170185<<5)|0)) + 4|0);
     $84 = HEAP32[$83>>2]|0;
     $85 = (((($21) + ($86<<5)|0)) + 4|0);
     HEAP32[$85>>2] = $84;
     $87 = (((($2) + ($$1170185<<5)|0)) + 8|0);
     $88 = HEAP32[$87>>2]|0;
     $89 = (((($21) + ($86<<5)|0)) + 8|0);
     HEAP32[$89>>2] = $88;
     $90 = (((($2) + ($$1170185<<5)|0)) + 16|0);
     $91 = HEAP32[$90>>2]|0;
     $92 = (((($21) + ($86<<5)|0)) + 16|0);
     HEAP32[$92>>2] = $91;
     $93 = (((($2) + ($$1170185<<5)|0)) + 20|0);
     $94 = HEAP32[$93>>2]|0;
     $95 = (((($21) + ($86<<5)|0)) + 20|0);
     HEAP32[$95>>2] = $94;
     $96 = (((($2) + ($$1170185<<5)|0)) + 24|0);
     $97 = HEAP32[$96>>2]|0;
     $98 = (((($21) + ($86<<5)|0)) + 24|0);
     HEAP32[$98>>2] = $97;
     $99 = (((($2) + ($$1170185<<5)|0)) + 28|0);
     $100 = HEAP32[$99>>2]|0;
     $101 = (((($21) + ($86<<5)|0)) + 28|0);
     HEAP32[$101>>2] = $100;
     $102 = (((($2) + ($$1170185<<5)|0)) + 12|0);
     $103 = HEAP32[$102>>2]|0;
     $104 = ($103|0)==(0|0);
     if ($104) {
      $105 = (((($21) + ($86<<5)|0)) + 12|0);
      HEAP32[$105>>2] = 0;
     } else {
      $$2 = 0;
      while(1) {
       $106 = (($103) + ($$2<<2)|0);
       $107 = HEAP32[$106>>2]|0;
       $108 = ($107|0)>(-1);
       $109 = (($$2) + 1)|0;
       if ($108) {
        $$2 = $109;
       } else {
        break;
       }
      }
      $110 = $$2 << 2;
      $111 = (($110) + 4)|0;
      $112 = (___tre_mem_alloc_impl($0,0,0,0,$111)|0);
      $113 = ($112|0)==(0|0);
      if ($113) {
       $$0165 = 0;
       break L10;
      }
      $114 = ($$2|0)>(0);
      if ($114) {
       $115 = HEAP32[$102>>2]|0;
       $$1184 = 0;
       while(1) {
        $116 = (($115) + ($$1184<<2)|0);
        $117 = HEAP32[$116>>2]|0;
        $118 = (($112) + ($$1184<<2)|0);
        HEAP32[$118>>2] = $117;
        $119 = (($$1184) + 1)|0;
        $exitcond = ($119|0)==($$2|0);
        if ($exitcond) {
         $$1$lcssa = $$2;
         break;
        } else {
         $$1184 = $119;
        }
       }
      } else {
       $$1$lcssa = 0;
      }
      $120 = (($112) + ($$1$lcssa<<2)|0);
      HEAP32[$120>>2] = -1;
      $121 = (((($21) + ($86<<5)|0)) + 12|0);
      HEAP32[$121>>2] = $112;
     }
     $122 = (($$1170185) + 1)|0;
     $123 = (($2) + ($122<<5)|0);
     $124 = HEAP32[$123>>2]|0;
     $125 = ($124|0)>(-1);
     $126 = (($122) + ($$1172$lcssa))|0;
     $127 = (($21) + ($126<<5)|0);
     if ($125) {
      $$1170185 = $122;$81 = $124;$82 = $127;$86 = $126;
     } else {
      $$lcssa = $127;
      break;
     }
    }
   } else {
    $$lcssa = $28;
   }
   HEAP32[$$lcssa>>2] = -1;
   $$0165 = $21;
  }
 } while(0);
 return ($$0165|0);
}
function _tre_match_empty($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$be = 0, $$0$lcssa = 0, $$06265 = 0, $$06266 = 0, $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $$byval_copy3 = 0, $$byval_copy4 = 0, $$byval_copy5 = 0, $$pn = 0, $$pr = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(48|0);
 $$byval_copy5 = sp + 44|0;
 $$byval_copy4 = sp + 40|0;
 $$byval_copy3 = sp + 36|0;
 $$byval_copy2 = sp + 32|0;
 $$byval_copy1 = sp + 28|0;
 $$byval_copy = sp + 24|0;
 $5 = sp + 20|0;
 $6 = sp + 16|0;
 $7 = sp + 12|0;
 $8 = sp + 8|0;
 $9 = sp + 4|0;
 $10 = sp;
 $11 = ((($0)) + 12|0);
 $12 = HEAP32[$11>>2]|0;
 $13 = ($4|0)!=(0|0);
 if ($13) {
  HEAP32[$4>>2] = 0;
 }
 HEAP32[$9>>2] = $1;
 ;HEAP32[$$byval_copy>>2]=HEAP32[$9>>2]|0;
 $14 = (_tre_stack_push($0,$$byval_copy)|0);
 $15 = ($14|0)==(0);
 L4: do {
  if ($15) {
   $16 = ((($0)) + 16|0);
   $17 = ($2|0)==(0|0);
   $18 = ($3|0)==(0|0);
   $19 = HEAP32[$11>>2]|0;
   $20 = ($19|0)>($12|0);
   if ($20) {
    $22 = $19;
    while(1) {
     $21 = (($22) + -1)|0;
     HEAP32[$11>>2] = $21;
     $23 = HEAP32[$16>>2]|0;
     $24 = (($23) + ($21<<2)|0);
     $25 = HEAP32[$24>>2]|0;
     $26 = HEAP32[$25>>2]|0;
     L8: do {
      switch ($26|0) {
      case 0:  {
       $30 = ((($25)) + 4|0);
       $31 = HEAP32[$30>>2]|0;
       $32 = HEAP32[$31>>2]|0;
       switch ($32|0) {
       case -3:  {
        break;
       }
       case -2:  {
        if ($18) {
         break L8;
        }
        $48 = ((($31)) + 4|0);
        $49 = HEAP32[$48>>2]|0;
        $50 = HEAP32[$3>>2]|0;
        $51 = $50 | $49;
        HEAP32[$3>>2] = $51;
        break L8;
        break;
       }
       default: {
        break L8;
       }
       }
       $33 = ((($31)) + 4|0);
       $34 = HEAP32[$33>>2]|0;
       $35 = ($34|0)>(-1);
       if ($35) {
        L15: do {
         if (!($17)) {
          $36 = HEAP32[$2>>2]|0;
          $37 = ($36|0)>(-1);
          L17: do {
           if ($37) {
            $$06266 = 0;$$pr = $36;$80 = $2;
            while(1) {
             $38 = ($$pr|0)==($34|0);
             if ($38) {
              break;
             }
             $39 = (($$06266) + 1)|0;
             $40 = (($2) + ($39<<2)|0);
             $41 = HEAP32[$40>>2]|0;
             $42 = ($41|0)>(-1);
             if ($42) {
              $$06266 = $39;$$pr = $41;$80 = $40;
             } else {
              $$06265 = $39;$45 = $40;
              break L17;
             }
            }
            $43 = ($34|0)<(0);
            if ($43) {
             $$06265 = $$06266;$45 = $80;
            } else {
             break L15;
            }
           } else {
            $$06265 = 0;$45 = $2;
           }
          } while(0);
          $$pn = (($$06265) + 1)|0;
          $44 = (($2) + ($$pn<<2)|0);
          HEAP32[$45>>2] = $34;
          HEAP32[$44>>2] = -1;
         }
        } while(0);
        if ($13) {
         $46 = HEAP32[$4>>2]|0;
         $47 = (($46) + 1)|0;
         HEAP32[$4>>2] = $47;
        }
       }
       break;
      }
      case 3:  {
       $52 = ((($25)) + 4|0);
       $53 = HEAP32[$52>>2]|0;
       $54 = HEAP32[$53>>2]|0;
       $55 = ((($54)) + 8|0);
       $56 = HEAP32[$55>>2]|0;
       $57 = ($56|0)==(0);
       if (!($57)) {
        HEAP32[$6>>2] = $54;
        ;HEAP32[$$byval_copy1>>2]=HEAP32[$6>>2]|0;
        $58 = (_tre_stack_push($0,$$byval_copy1)|0);
        $$0$be = $58;
        label = 6;
        break L8;
       }
       $59 = ((($53)) + 4|0);
       $60 = HEAP32[$59>>2]|0;
       $61 = ((($60)) + 8|0);
       $62 = HEAP32[$61>>2]|0;
       $63 = ($62|0)==(0);
       if (!($63)) {
        HEAP32[$5>>2] = $60;
        ;HEAP32[$$byval_copy2>>2]=HEAP32[$5>>2]|0;
        $64 = (_tre_stack_push($0,$$byval_copy2)|0);
        $$0$be = $64;
        label = 6;
       }
       break;
      }
      case 1:  {
       $65 = ((($25)) + 4|0);
       $66 = HEAP32[$65>>2]|0;
       $67 = HEAP32[$66>>2]|0;
       HEAP32[$7>>2] = $67;
       ;HEAP32[$$byval_copy3>>2]=HEAP32[$7>>2]|0;
       $68 = (_tre_stack_push($0,$$byval_copy3)|0);
       $69 = ($68|0)==(0);
       if (!($69)) {
        $$0$lcssa = $68;
        break L4;
       }
       $70 = ((($66)) + 4|0);
       $71 = HEAP32[$70>>2]|0;
       HEAP32[$8>>2] = $71;
       ;HEAP32[$$byval_copy4>>2]=HEAP32[$8>>2]|0;
       $72 = (_tre_stack_push($0,$$byval_copy4)|0);
       $$0$be = $72;
       label = 6;
       break;
      }
      case 2:  {
       $73 = ((($25)) + 4|0);
       $74 = HEAP32[$73>>2]|0;
       $75 = HEAP32[$74>>2]|0;
       $76 = ((($75)) + 8|0);
       $77 = HEAP32[$76>>2]|0;
       $78 = ($77|0)==(0);
       if (!($78)) {
        HEAP32[$10>>2] = $75;
        ;HEAP32[$$byval_copy5>>2]=HEAP32[$10>>2]|0;
        $79 = (_tre_stack_push($0,$$byval_copy5)|0);
        $$0$be = $79;
        label = 6;
       }
       break;
      }
      default: {
      }
      }
     } while(0);
     if ((label|0) == 6) {
      label = 0;
      $27 = ($$0$be|0)==(0);
      if (!($27)) {
       $$0$lcssa = $$0$be;
       break L4;
      }
     }
     $28 = HEAP32[$11>>2]|0;
     $29 = ($28|0)>($12|0);
     if ($29) {
      $22 = $28;
     } else {
      $$0$lcssa = 0;
      break L4;
     }
    }
   } else {
    $$0$lcssa = 0;
   }
  } else {
   $$0$lcssa = $14;
  }
 } while(0);
 STACKTOP = sp;return ($$0$lcssa|0);
}
function _tre_ast_to_tnfa($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$051 = 0, $$tr = 0, $$tr$be = 0, $$tr$be$in = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$tr = $0;
 L1: while(1) {
  $4 = HEAP32[$$tr>>2]|0;
  switch ($4|0) {
  case 2:  {
   $25 = ((($$tr)) + 4|0);
   $26 = HEAP32[$25>>2]|0;
   $27 = ((($26)) + 8|0);
   $28 = HEAP32[$27>>2]|0;
   $29 = ($28|0)==(-1);
   if ($29) {
    $30 = HEAP32[$26>>2]|0;
    $31 = ((($30)) + 28|0);
    $32 = HEAP32[$31>>2]|0;
    $33 = ((($30)) + 24|0);
    $34 = HEAP32[$33>>2]|0;
    $35 = (_tre_make_trans($32,$34,$1,$2,$3)|0);
    $36 = ($35|0)==(0);
    if ($36) {
     $$tr$be$in = $26;
    } else {
     $$051 = $35;
     break L1;
    }
   } else {
    $$tr$be$in = $26;
   }
   break;
  }
  case 3:  {
   $5 = ((($$tr)) + 4|0);
   $6 = HEAP32[$5>>2]|0;
   $7 = HEAP32[$6>>2]|0;
   $8 = (_tre_ast_to_tnfa($7,$1,$2,$3)|0);
   $9 = ($8|0)==(0);
   if (!($9)) {
    $$051 = $8;
    break L1;
   }
   $10 = ((($6)) + 4|0);
   $$tr$be$in = $10;
   break;
  }
  case 1:  {
   $11 = ((($$tr)) + 4|0);
   $12 = HEAP32[$11>>2]|0;
   $13 = HEAP32[$12>>2]|0;
   $14 = ((($13)) + 28|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ((($12)) + 4|0);
   $17 = HEAP32[$16>>2]|0;
   $18 = ((($17)) + 24|0);
   $19 = HEAP32[$18>>2]|0;
   $20 = (_tre_make_trans($15,$19,$1,$2,$3)|0);
   $21 = ($20|0)==(0);
   if (!($21)) {
    $$051 = $20;
    break L1;
   }
   $22 = HEAP32[$12>>2]|0;
   $23 = (_tre_ast_to_tnfa($22,$1,$2,$3)|0);
   $24 = ($23|0)==(0);
   if ($24) {
    $$tr$be$in = $16;
   } else {
    $$051 = $23;
    break L1;
   }
   break;
  }
  default: {
   $$051 = 0;
   break L1;
  }
  }
  $$tr$be = HEAP32[$$tr$be$in>>2]|0;
  $$tr = $$tr$be;
 }
 return ($$051|0);
}
function _regfree($0) {
 $0 = $0|0;
 var $$04451 = 0, $$048 = 0, $$147 = 0, $$lcssa = 0, $$pre = 0, $$pre56 = 0, $$pre57 = 0, $$pre58 = 0, $$pre59 = 0, $$pre61 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0;
 var $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 4|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)==(0|0);
 if (!($3)) {
  $4 = ((($2)) + 4|0);
  $5 = HEAP32[$4>>2]|0;
  $6 = ($5|0)==(0);
  $7 = HEAP32[$2>>2]|0;
  if ($6) {
   $$lcssa = $7;
  } else {
   $$04451 = 0;$9 = $7;
   while(1) {
    $8 = (((($9) + ($$04451<<5)|0)) + 8|0);
    $10 = HEAP32[$8>>2]|0;
    $11 = ($10|0)==(0|0);
    if ($11) {
     $60 = $9;
    } else {
     $12 = (((($9) + ($$04451<<5)|0)) + 16|0);
     $13 = HEAP32[$12>>2]|0;
     $14 = ($13|0)==(0|0);
     if ($14) {
      $16 = $9;
     } else {
      _free($13);
      $$pre = HEAP32[$2>>2]|0;
      $16 = $$pre;
     }
     $15 = (((($16) + ($$04451<<5)|0)) + 28|0);
     $17 = HEAP32[$15>>2]|0;
     $18 = ($17|0)==(0|0);
     if ($18) {
      $60 = $16;
     } else {
      _free($17);
      $$pre56 = HEAP32[$2>>2]|0;
      $60 = $$pre56;
     }
    }
    $19 = (($$04451) + 1)|0;
    $20 = HEAP32[$4>>2]|0;
    $21 = ($19>>>0)<($20>>>0);
    if ($21) {
     $$04451 = $19;$9 = $60;
    } else {
     $$lcssa = $60;
     break;
    }
   }
  }
  $22 = ($$lcssa|0)==(0|0);
  if (!($22)) {
   _free($$lcssa);
  }
  $23 = ((($2)) + 8|0);
  $24 = HEAP32[$23>>2]|0;
  $25 = ($24|0)==(0|0);
  if (!($25)) {
   $26 = ((($24)) + 8|0);
   $27 = HEAP32[$26>>2]|0;
   $28 = ($27|0)==(0|0);
   if ($28) {
    $36 = $24;
   } else {
    $$048 = $24;
    while(1) {
     $29 = ((($$048)) + 16|0);
     $30 = HEAP32[$29>>2]|0;
     $31 = ($30|0)==(0|0);
     if (!($31)) {
      _free($30);
     }
     $32 = ((($$048)) + 32|0);
     $33 = ((($$048)) + 40|0);
     $34 = HEAP32[$33>>2]|0;
     $35 = ($34|0)==(0|0);
     if ($35) {
      break;
     } else {
      $$048 = $32;
     }
    }
    $$pre57 = HEAP32[$23>>2]|0;
    $36 = $$pre57;
   }
   _free($36);
  }
  $37 = ((($2)) + 16|0);
  $38 = HEAP32[$37>>2]|0;
  $39 = ($38|0)==(0|0);
  if (!($39)) {
   $40 = ((($2)) + 28|0);
   $41 = HEAP32[$40>>2]|0;
   $42 = ($41|0)==(0);
   if ($42) {
    $50 = $38;
   } else {
    $$147 = 0;$44 = $38;$61 = $41;
    while(1) {
     $43 = (((($44) + (($$147*12)|0)|0)) + 8|0);
     $45 = HEAP32[$43>>2]|0;
     $46 = ($45|0)==(0|0);
     if ($46) {
      $49 = $61;
     } else {
      _free($45);
      $$pre59 = HEAP32[$40>>2]|0;
      $49 = $$pre59;
     }
     $47 = (($$147) + 1)|0;
     $48 = ($47>>>0)<($49>>>0);
     if (!($48)) {
      break;
     }
     $$pre58 = HEAP32[$37>>2]|0;
     $$147 = $47;$44 = $$pre58;$61 = $49;
    }
    $$pre61 = HEAP32[$37>>2]|0;
    $50 = $$pre61;
   }
   _free($50);
  }
  $51 = ((($2)) + 32|0);
  $52 = HEAP32[$51>>2]|0;
  $53 = ($52|0)==(0|0);
  if (!($53)) {
   _free($52);
  }
  $54 = ((($2)) + 20|0);
  $55 = HEAP32[$54>>2]|0;
  $56 = ($55|0)==(0|0);
  if (!($56)) {
   _free($55);
  }
  $57 = ((($2)) + 36|0);
  $58 = HEAP32[$57>>2]|0;
  $59 = ($58|0)==(0|0);
  if (!($59)) {
   _free($58);
  }
  _free($2);
 }
 return;
}
function _tre_make_trans($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$0$ph173 = 0, $$0117169 = 0, $$0118165 = 0, $$0119 = 0, $$0122 = 0, $$0125 = 0, $$0126 = 0, $$0129$ph172 = 0, $$0129156 = 0, $$1 = 0, $$1120 = 0, $$1123159 = 0, $$2 = 0, $$2121167 = 0, $$2124 = 0, $$3 = 0, $$4162 = 0, $$5 = 0, $$lcssa153 = 0, $$pre187 = 0;
 var $$sink = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0;
 var $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0;
 var $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0;
 var $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $5 = ($2|0)==(0|0);
 $6 = HEAP32[$0>>2]|0;
 $7 = ($6|0)>(-1);
 L1: do {
  if ($5) {
   if ($7) {
    $8 = ((($1)) + 32|0);
    $137 = $6;$142 = $0;
    while(1) {
     $134 = HEAP32[$1>>2]|0;
     $135 = ($134|0)>(-1);
     if ($135) {
      $136 = (($3) + ($137<<2)|0);
      $138 = HEAP32[$136>>2]|0;
      $139 = (($138) + 1)|0;
      HEAP32[$136>>2] = $139;
      $140 = HEAP32[$8>>2]|0;
      $141 = ($140|0)>(-1);
      if ($141) {
       $147 = $8;
       while(1) {
        $$pre187 = HEAP32[$142>>2]|0;
        $143 = (($3) + ($$pre187<<2)|0);
        $144 = HEAP32[$143>>2]|0;
        $145 = (($144) + 1)|0;
        HEAP32[$143>>2] = $145;
        $146 = ((($147)) + 32|0);
        $148 = HEAP32[$146>>2]|0;
        $149 = ($148|0)>(-1);
        if ($149) {
         $147 = $146;
        } else {
         break;
        }
       }
      }
     }
     $150 = ((($142)) + 32|0);
     $151 = HEAP32[$150>>2]|0;
     $152 = ($151|0)>(-1);
     if ($152) {
      $137 = $151;$142 = $150;
     } else {
      $$0126 = 0;
      break;
     }
    }
   } else {
    $$0126 = 0;
   }
  } else {
   if ($7) {
    $12 = $0;
    while(1) {
     $9 = HEAP32[$1>>2]|0;
     $10 = ($9|0)>(-1);
     L15: do {
      if ($10) {
       $11 = ((($12)) + 4|0);
       $13 = ((($12)) + 8|0);
       $14 = ((($12)) + 16|0);
       $15 = ((($12)) + 20|0);
       $16 = ((($12)) + 24|0);
       $17 = ((($12)) + 28|0);
       $18 = ((($12)) + 12|0);
       $$0$ph173 = -1;$$0129$ph172 = $1;$153 = $9;
       while(1) {
        $$0129156 = $$0129$ph172;$19 = $153;
        while(1) {
         $20 = ($19|0)==($$0$ph173|0);
         if (!($20)) {
          break;
         }
         $21 = ((($$0129156)) + 32|0);
         $22 = HEAP32[$21>>2]|0;
         $23 = ($22|0)>(-1);
         if ($23) {
          $$0129156 = $21;$19 = $22;
         } else {
          break L15;
         }
        }
        $24 = HEAP32[$12>>2]|0;
        $25 = (($4) + ($24<<2)|0);
        $26 = HEAP32[$25>>2]|0;
        $27 = (($2) + ($26<<5)|0);
        $$0125 = $27;
        while(1) {
         $28 = ((($$0125)) + 8|0);
         $29 = HEAP32[$28>>2]|0;
         $30 = ($29|0)==(0|0);
         $31 = ((($$0125)) + 32|0);
         if ($30) {
          break;
         } else {
          $$0125 = $31;
         }
        }
        $32 = ((($$0125)) + 40|0);
        HEAP32[$32>>2] = 0;
        $33 = HEAP32[$11>>2]|0;
        HEAP32[$$0125>>2] = $33;
        $34 = HEAP32[$13>>2]|0;
        $35 = ((($$0125)) + 4|0);
        HEAP32[$35>>2] = $34;
        $36 = (($4) + ($19<<2)|0);
        $37 = HEAP32[$36>>2]|0;
        $38 = (($2) + ($37<<5)|0);
        HEAP32[$28>>2] = $38;
        $39 = ((($$0125)) + 12|0);
        HEAP32[$39>>2] = $19;
        $40 = HEAP32[$14>>2]|0;
        $41 = ((($$0129156)) + 16|0);
        $42 = HEAP32[$41>>2]|0;
        $43 = $42 | $40;
        $44 = HEAP32[$15>>2]|0;
        $45 = ($44|0)!=(0);
        $46 = $45 ? 4 : 0;
        $47 = $43 | $46;
        $48 = HEAP32[$16>>2]|0;
        $49 = ($48|0)!=(0|0);
        $50 = $49 ? 8 : 0;
        $51 = $47 | $50;
        $52 = ((($$0125)) + 20|0);
        HEAP32[$52>>2] = $51;
        $53 = HEAP32[$17>>2]|0;
        $54 = ($53|0)>(-1);
        if ($54) {
         $55 = $51 | 256;
         HEAP32[$52>>2] = $55;
         $$sink = $53;
        } else {
         $$sink = $44;
        }
        $56 = ((($$0125)) + 24|0);
        HEAP32[$56>>2] = $$sink;
        $57 = HEAP32[$16>>2]|0;
        $58 = ($57|0)==(0|0);
        if ($58) {
         $77 = ((($$0125)) + 28|0);
         HEAP32[$77>>2] = 0;
        } else {
         $$0122 = 0;
         while(1) {
          $59 = (($57) + ($$0122<<2)|0);
          $60 = HEAP32[$59>>2]|0;
          $61 = ($60|0)==(0);
          $62 = (($$0122) + 1)|0;
          if ($61) {
           break;
          } else {
           $$0122 = $62;
          }
         }
         $63 = $62 << 2;
         $64 = (_malloc($63)|0);
         $65 = ((($$0125)) + 28|0);
         HEAP32[$65>>2] = $64;
         $66 = ($64|0)==(0|0);
         if ($66) {
          $$0126 = 12;
          break L1;
         }
         $67 = HEAP32[$16>>2]|0;
         $68 = HEAP32[$67>>2]|0;
         $69 = ($68|0)==(0);
         if ($69) {
          $$lcssa153 = $64;
         } else {
          $$1123159 = 0;$70 = $68;$71 = $64;
          while(1) {
           HEAP32[$71>>2] = $70;
           $72 = (($$1123159) + 1)|0;
           $73 = (($67) + ($72<<2)|0);
           $74 = HEAP32[$73>>2]|0;
           $75 = ($74|0)==(0);
           $76 = (($64) + ($72<<2)|0);
           if ($75) {
            $$lcssa153 = $76;
            break;
           } else {
            $$1123159 = $72;$70 = $74;$71 = $76;
           }
          }
         }
         HEAP32[$$lcssa153>>2] = 0;
        }
        $78 = HEAP32[$18>>2]|0;
        $79 = ($78|0)==(0|0);
        if ($79) {
         $$3 = 0;
        } else {
         $$2124 = 0;
         while(1) {
          $80 = (($78) + ($$2124<<2)|0);
          $81 = HEAP32[$80>>2]|0;
          $82 = ($81|0)>(-1);
          $83 = (($$2124) + 1)|0;
          if ($82) {
           $$2124 = $83;
          } else {
           $$3 = $$2124;
           break;
          }
         }
        }
        $84 = ((($$0129156)) + 12|0);
        $85 = HEAP32[$84>>2]|0;
        $86 = ($85|0)==(0|0);
        if ($86) {
         $$1120 = 0;
        } else {
         $$0119 = 0;
         while(1) {
          $87 = (($85) + ($$0119<<2)|0);
          $88 = HEAP32[$87>>2]|0;
          $89 = ($88|0)>(-1);
          $90 = (($$0119) + 1)|0;
          if ($89) {
           $$0119 = $90;
          } else {
           $$1120 = $$0119;
           break;
          }
         }
        }
        $91 = ((($$0125)) + 16|0);
        $92 = HEAP32[$91>>2]|0;
        $93 = ($92|0)==(0|0);
        if (!($93)) {
         _free($92);
        }
        HEAP32[$91>>2] = 0;
        $94 = (($$1120) + ($$3))|0;
        $95 = ($94|0)>(0);
        if ($95) {
         $96 = $94 << 2;
         $97 = (($96) + 4)|0;
         $98 = (_malloc($97)|0);
         HEAP32[$91>>2] = $98;
         $99 = ($98|0)==(0|0);
         if ($99) {
          $$0126 = 12;
          break L1;
         }
         $100 = HEAP32[$18>>2]|0;
         $101 = ($100|0)==(0|0);
         if ($101) {
          $$5 = 0;
         } else {
          $102 = HEAP32[$100>>2]|0;
          $103 = ($102|0)>(-1);
          if ($103) {
           $$4162 = 0;$105 = $102;
           while(1) {
            $104 = (($98) + ($$4162<<2)|0);
            HEAP32[$104>>2] = $105;
            $106 = (($$4162) + 1)|0;
            $107 = (($100) + ($106<<2)|0);
            $108 = HEAP32[$107>>2]|0;
            $109 = ($108|0)>(-1);
            if ($109) {
             $$4162 = $106;$105 = $108;
            } else {
             $$5 = $106;
             break;
            }
           }
          } else {
           $$5 = 0;
          }
         }
         $110 = HEAP32[$84>>2]|0;
         $111 = ($110|0)==(0|0);
         if ($111) {
          $$2 = $$5;
         } else {
          $112 = HEAP32[$110>>2]|0;
          $113 = ($112|0)>(-1);
          if ($113) {
           $114 = ($$5|0)>(0);
           $$0117169 = $$5;$$2121167 = 0;$120 = $112;
           while(1) {
            L64: do {
             if ($114) {
              $$0118165 = 0;
              while(1) {
               $117 = (($98) + ($$0118165<<2)|0);
               $118 = HEAP32[$117>>2]|0;
               $119 = ($118|0)==($120|0);
               $115 = (($$0118165) + 1)|0;
               if ($119) {
                $$1 = $$0117169;
                break L64;
               }
               $116 = ($115|0)<($$5|0);
               if ($116) {
                $$0118165 = $115;
               } else {
                label = 39;
                break;
               }
              }
             } else {
              label = 39;
             }
            } while(0);
            if ((label|0) == 39) {
             label = 0;
             $121 = (($$0117169) + 1)|0;
             $122 = (($98) + ($$0117169<<2)|0);
             HEAP32[$122>>2] = $120;
             $$1 = $121;
            }
            $123 = (($$2121167) + 1)|0;
            $124 = (($110) + ($123<<2)|0);
            $125 = HEAP32[$124>>2]|0;
            $126 = ($125|0)>(-1);
            if ($126) {
             $$0117169 = $$1;$$2121167 = $123;$120 = $125;
            } else {
             $$2 = $$1;
             break;
            }
           }
          } else {
           $$2 = $$5;
          }
         }
         $127 = (($98) + ($$2<<2)|0);
         HEAP32[$127>>2] = -1;
        }
        $128 = ((($$0129156)) + 32|0);
        $129 = HEAP32[$128>>2]|0;
        $130 = ($129|0)>(-1);
        if ($130) {
         $$0$ph173 = $19;$$0129$ph172 = $128;$153 = $129;
        } else {
         break;
        }
       }
      }
     } while(0);
     $131 = ((($12)) + 32|0);
     $132 = HEAP32[$131>>2]|0;
     $133 = ($132|0)>(-1);
     if ($133) {
      $12 = $131;
     } else {
      $$0126 = 0;
      break;
     }
    }
   } else {
    $$0126 = 0;
   }
  }
 } while(0);
 return ($$0126|0);
}
function _tre_add_tag_left($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___tre_mem_alloc_impl($0,0,0,0,8)|0);
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $$0 = 12;
  } else {
   $5 = (_tre_ast_new_node($0,0,20)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    HEAP32[$3>>2] = 0;
    $$0 = 12;
    break;
   }
   $7 = ((($5)) + 4|0);
   $8 = HEAP32[$7>>2]|0;
   HEAP32[$8>>2] = -3;
   $9 = ((($8)) + 4|0);
   HEAP32[$9>>2] = $2;
   $10 = ((($8)) + 8|0);
   HEAP32[$10>>2] = -1;
   HEAP32[$3>>2] = $5;
   $11 = (___tre_mem_alloc_impl($0,0,0,0,32)|0);
   $12 = ((($3)) + 4|0);
   HEAP32[$12>>2] = $11;
   $13 = ($11|0)==(0|0);
   if ($13) {
    $$0 = 12;
   } else {
    $14 = ((($1)) + 4|0);
    $15 = HEAP32[$14>>2]|0;
    $16 = ((($11)) + 4|0);
    HEAP32[$16>>2] = $15;
    $17 = HEAP32[$1>>2]|0;
    HEAP32[$11>>2] = $17;
    $18 = ((($11)) + 8|0);
    HEAP32[$18>>2] = -1;
    $19 = ((($11)) + 12|0);
    HEAP32[$19>>2] = -1;
    $20 = ((($11)) + 24|0);
    HEAP32[$20>>2] = 0;
    $21 = ((($11)) + 28|0);
    HEAP32[$21>>2] = 0;
    $22 = ((($11)) + 20|0);
    HEAP32[$22>>2] = 0;
    HEAP32[$14>>2] = $3;
    HEAP32[$1>>2] = 1;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function _tre_purge_regset($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$016 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)>(-1);
 if ($4) {
  $5 = ((($1)) + 16|0);
  $6 = HEAP32[$5>>2]|0;
  $$016 = 0;$8 = $3;
  while(1) {
   $7 = $8 >>> 1;
   $9 = $8 & 1;
   $10 = ($9|0)==(0);
   if ($10) {
    $11 = (($6) + (($7*12)|0)|0);
    HEAP32[$11>>2] = $2;
   } else {
    $12 = (((($6) + (($7*12)|0)|0)) + 4|0);
    HEAP32[$12>>2] = $2;
   }
   $13 = (($$016) + 1)|0;
   $14 = (($0) + ($13<<2)|0);
   $15 = HEAP32[$14>>2]|0;
   $16 = ($15|0)>(-1);
   if ($16) {
    $$016 = $13;$8 = $15;
   } else {
    break;
   }
  }
 }
 HEAP32[$0>>2] = -1;
 return;
}
function _tre_add_tag_right($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (___tre_mem_alloc_impl($0,0,0,0,8)|0);
 $4 = ($3|0)==(0|0);
 do {
  if ($4) {
   $$0 = 12;
  } else {
   $5 = (_tre_ast_new_node($0,0,20)|0);
   $6 = ($5|0)==(0|0);
   if ($6) {
    $7 = ((($3)) + 4|0);
    HEAP32[$7>>2] = 0;
    $$0 = 12;
    break;
   }
   $8 = ((($5)) + 4|0);
   $9 = HEAP32[$8>>2]|0;
   HEAP32[$9>>2] = -3;
   $10 = ((($9)) + 4|0);
   HEAP32[$10>>2] = $2;
   $11 = ((($9)) + 8|0);
   HEAP32[$11>>2] = -1;
   $12 = ((($3)) + 4|0);
   HEAP32[$12>>2] = $5;
   $13 = (___tre_mem_alloc_impl($0,0,0,0,32)|0);
   HEAP32[$3>>2] = $13;
   $14 = ($13|0)==(0|0);
   if ($14) {
    $$0 = 12;
   } else {
    $15 = ((($1)) + 4|0);
    $16 = HEAP32[$15>>2]|0;
    $17 = ((($13)) + 4|0);
    HEAP32[$17>>2] = $16;
    $18 = HEAP32[$1>>2]|0;
    HEAP32[$13>>2] = $18;
    $19 = ((($13)) + 8|0);
    HEAP32[$19>>2] = -1;
    $20 = ((($13)) + 12|0);
    HEAP32[$20>>2] = -1;
    $21 = ((($13)) + 24|0);
    HEAP32[$21>>2] = 0;
    $22 = ((($13)) + 28|0);
    HEAP32[$22>>2] = 0;
    $23 = ((($13)) + 20|0);
    HEAP32[$23>>2] = 0;
    HEAP32[$15>>2] = $3;
    HEAP32[$1>>2] = 1;
    $$0 = 0;
   }
  }
 } while(0);
 return ($$0|0);
}
function _tre_new_item($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$0$i = 0, $$1 = 0, $$127 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = HEAP32[$5>>2]|0;
 $7 = HEAP32[$3>>2]|0;
 $8 = HEAP32[$4>>2]|0;
 $9 = ($7|0)<($8|0);
 if ($9) {
  $$127 = $6;
  label = 5;
 } else {
  $10 = ($8|0)>(1024);
  if ($10) {
   $$1 = 12;
  } else {
   $11 = $8 << 1;
   HEAP32[$4>>2] = $11;
   $12 = $8 << 3;
   $13 = (_realloc($6,$12)|0);
   $14 = ($13|0)==(0|0);
   if ($14) {
    $$1 = 12;
   } else {
    HEAP32[$5>>2] = $13;
    $$127 = $13;
    label = 5;
   }
  }
 }
 if ((label|0) == 5) {
  $15 = (_tre_ast_new_node($0,0,20)|0);
  $16 = ($15|0)==(0|0);
  if ($16) {
   $$0$i = 0;
  } else {
   $17 = ((($15)) + 4|0);
   $18 = HEAP32[$17>>2]|0;
   HEAP32[$18>>2] = $1;
   $19 = ((($18)) + 4|0);
   HEAP32[$19>>2] = $2;
   $20 = ((($18)) + 8|0);
   HEAP32[$20>>2] = -1;
   $$0$i = $15;
  }
  $21 = HEAP32[$3>>2]|0;
  $22 = (($$127) + ($21<<2)|0);
  HEAP32[$22>>2] = $$0$i;
  $23 = ($$0$i|0)==(0|0);
  $24 = $23 ? 12 : 0;
  $25 = (($21) + 1)|0;
  HEAP32[$3>>2] = $25;
  $$1 = $24;
 }
 return ($$1|0);
}
function _tre_compare_items($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = HEAP32[$0>>2]|0;
 $3 = HEAP32[$1>>2]|0;
 $4 = ((($2)) + 4|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ((($3)) + 4|0);
 $7 = HEAP32[$6>>2]|0;
 $8 = HEAP32[$5>>2]|0;
 $9 = HEAP32[$7>>2]|0;
 $10 = ($8|0)<($9|0);
 $11 = ($8|0)>($9|0);
 $$ = $11&1;
 $$0 = $10 ? -1 : $$;
 return ($$0|0);
}
function _strtol($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_strtox_414($0,$1,$2,-2147483648,0)|0);
 $4 = tempRet0;
 return ($3|0);
}
function _strtox_414($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$sink = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $5 = sp;
 HEAP32[$5>>2] = 0;
 $6 = ((($5)) + 4|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($5)) + 44|0);
 HEAP32[$7>>2] = $0;
 $8 = ($0|0)<(0|0);
 $9 = ((($0)) + 2147483647|0);
 $$sink = $8 ? (-1) : $9;
 $10 = ((($5)) + 8|0);
 HEAP32[$10>>2] = $$sink;
 $11 = ((($5)) + 76|0);
 HEAP32[$11>>2] = -1;
 ___shlim($5,0);
 $12 = (___intscan($5,$2,1,$3,$4)|0);
 $13 = tempRet0;
 $14 = ($1|0)==(0|0);
 if (!($14)) {
  $15 = ((($5)) + 108|0);
  $16 = HEAP32[$15>>2]|0;
  $17 = HEAP32[$6>>2]|0;
  $18 = HEAP32[$10>>2]|0;
  $19 = (($17) + ($16))|0;
  $20 = (($19) - ($18))|0;
  $21 = (($0) + ($20)|0);
  HEAP32[$1>>2] = $21;
 }
 tempRet0 = ($13);
 STACKTOP = sp;return ($12|0);
}
function _regexec($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $$ = 0, $$$i = 0, $$$i30 = 0, $$0 = 0, $$026 = 0, $$027 = 0, $$0415$i = 0, $$0420587$i = 0, $$0421$i = 0, $$0422$i = 0, $$0423$i = 0, $$0426$i = 0, $$0427$ph533$i = 0, $$0427511$i = 0, $$0432$i = 0, $$0437$i = 0, $$0448586$i = 0, $$0453634$i73 = 0, $$0455630$i = 0, $$0456$i = 0;
 var $$0456$i29 = 0, $$0457523$i = 0, $$0460$i = 0, $$0462$i = 0, $$0468540$i = 0, $$0469$i = 0, $$0475$i = 0, $$0485$i = 0, $$0486653$i = 0, $$0488643$i = 0, $$0490610$i = 0, $$0491$i = 0, $$0496606$i = 0, $$0497601$i = 0, $$0513$i = 0, $$0515616$i = 0, $$0517$i = 0, $$052 = 0, $$0532613$i = 0, $$0543$ph$i = 0;
 var $$0545612$i = 0, $$0551$i = 0, $$0626$i = 0, $$1 = 0, $$1$i = 0, $$10$i = 0, $$10447$i = 0, $$10447$lobit$i = 0, $$10542$i = 0, $$11528$i = 0, $$12529$i = 0, $$1424$i = 0, $$1428565$i = 0, $$1430$i = 0, $$1433$ph$lcssa$i = 0, $$1433$ph531$i = 0, $$1433$ph532$mux$i = 0, $$1438$ph$lcssa$i = 0, $$1438$ph529$i = 0, $$1438$ph530$mux$i = 0;
 var $$1449584$i = 0, $$14531$i = 0, $$1457$i = 0, $$1458549$i = 0, $$1461$ph$lcssa$i = 0, $$1461$ph527$i = 0, $$1463$i = 0, $$1469574$i = 0, $$1470$i = 0, $$1471$i = 0, $$1474$i = 0, $$1476$i = 0, $$1489$i = 0, $$1492$i = 0, $$15$i = 0, $$1514$i = 0, $$1516640$i = 0, $$1518614$i = 0, $$1533$i = 0, $$1544$i = 0;
 var $$1546$i = 0, $$1552$i = 0, $$2 = 0, $$2425$i = 0, $$2431$lcssa$i = 0, $$2431578$i = 0, $$2434$i = 0, $$2439$i = 0, $$2458$i = 0, $$2462$i = 0, $$2464$i = 0, $$2471$i = 0, $$2472$i = 0, $$2475$i = 0, $$2477$i = 0, $$2493$i = 0, $$2501$i = 0, $$2534623$i = 0, $$2547$i = 0, $$3 = 0;
 var $$3$lcssa$i = 0, $$3435$i = 0, $$3440$i = 0, $$3451525$i = 0, $$3459$i = 0, $$3463$lcssa$i = 0, $$3463542$i = 0, $$3465$i = 0, $$3472$i = 0, $$3478$i = 0, $$3520$i = 0, $$3535$i = 0, $$3548$i = 0, $$4 = 0, $$4$i = 0, $$4436$i = 0, $$4441$i = 0, $$4452537$i = 0, $$4464$i = 0, $$4466$i = 0;
 var $$4479$i = 0, $$4495$i = 0, $$4495$lobit$i = 0, $$4536$i = 0, $$477$i = 0, $$5$i = 0, $$5442$lcssa$i = 0, $$5442576$i = 0, $$5453546$i = 0, $$5461$i = 0, $$5465$lcssa$i = 0, $$5465575$i = 0, $$5474$i = 0, $$5480$i = 0, $$5504$i = 0, $$5522$i = 0, $$5537638$i = 0, $$5550$i = 0, $$6$lcssa$i = 0, $$6443$lcssa$i = 0;
 var $$6443556$i = 0, $$6454553$i = 0, $$6466$lcssa$i = 0, $$6466555$i = 0, $$6468$i = 0, $$6481$i = 0, $$6523$i = 0, $$6538$i = 0, $$6577$i = 0, $$7$lcssa$i = 0, $$7444$i = 0, $$7455551$i = 0, $$7467$i = 0, $$7482$i = 0, $$7512$i = 0, $$7524639$i = 0, $$7539650$i = 0, $$7559$i = 0, $$8$i = 0, $$8540$i = 0;
 var $$9446$i = 0, $$9484$i = 0, $$9526$i = 0, $$not$i = 0, $$not597$i = 0, $$old$i = 0, $$old$i35 = 0, $$old11$i = 0, $$old34$i = 0, $$old35$i = 0, $$old37$i = 0, $$old38$i = 0, $$old46$i = 0, $$old47$i = 0, $$old8$i = 0, $$pre$i = 0, $$pre$i36 = 0, $$pre$phi630$iZ2D = 0, $$pre$phi632$iZ2D = 0, $$pre619$i = 0;
 var $$pre620$i = 0, $$pre622$i = 0, $$pre624$i = 0, $$pre625$i = 0, $$pre626$i = 0, $$pre628$i = 0, $$pre631$i = 0, $$pre670$i = 0, $$pre672$i = 0, $$pre673$i = 0, $$pre674$i = 0, $$pre678$i = 0, $$pre679$i = 0, $$pre680$i = 0, $$pre682$i = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0;
 var $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0;
 var $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0;
 var $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0;
 var $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0;
 var $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0;
 var $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0;
 var $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0;
 var $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0;
 var $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0;
 var $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0;
 var $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0;
 var $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0;
 var $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0;
 var $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0;
 var $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0;
 var $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0;
 var $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0;
 var $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0;
 var $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0;
 var $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0;
 var $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0;
 var $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0;
 var $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0;
 var $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0;
 var $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0;
 var $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0;
 var $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0;
 var $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0;
 var $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0;
 var $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0;
 var $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0;
 var $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0;
 var $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0;
 var $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0;
 var $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0;
 var $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $brmerge$i = 0, $brmerge$i34 = 0, $brmerge590$i = 0, $brmerge593$i = 0, $brmerge594$i = 0, $brmerge598$i = 0, $brmerge655$i = 0, $brmerge658$i = 0, $brmerge659$i = 0, $exitcond = 0, $exitcond$i = 0, $exitcond615$i = 0, $exitcond617$i = 0, $exitcond94 = 0, $exitcond95 = 0, $notlhs601$i = 0, $notlhs662$i = 0;
 var $notrhs$i = 0, $notrhs$i43 = 0, $notrhs602$i = 0, $notrhs663$i = 0, $or$cond = 0, $or$cond$not$i = 0, $or$cond$not$i32 = 0, $or$cond10$i = 0, $or$cond12$i = 0, $or$cond12$i37 = 0, $or$cond15$i = 0, $or$cond15$i38 = 0, $or$cond18$i = 0, $or$cond18$i40 = 0, $or$cond21$i = 0, $or$cond21$i42 = 0, $or$cond24$i = 0, $or$cond24$not$i = 0, $or$cond27$i = 0, $or$cond27$not$i = 0;
 var $or$cond3$i = 0, $or$cond30$i = 0, $or$cond33$i = 0, $or$cond36$i = 0, $or$cond36$i44 = 0, $or$cond39$i = 0, $or$cond39$i45 = 0, $or$cond42$i = 0, $or$cond42$i46 = 0, $or$cond45$i = 0, $or$cond45$i48 = 0, $or$cond48$i = 0, $or$cond48$i41 = 0, $or$cond556$i = 0, $or$cond592$i = 0, $or$cond596$i = 0, $or$cond6$i = 0, $or$cond657$i = 0, $or$cond661$i = 0, $or$cond7$i = 0;
 var $or$cond9$i = 0, $tmp$i = 0, $tmp$i47 = 0, $tmp476$i = 0, $tmp553$i = 0, $trunc$i = 0, $trunc$i$clear = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $5 = sp + 4|0;
 $6 = sp;
 $7 = ((($0)) + 4|0);
 $8 = HEAP32[$7>>2]|0;
 $9 = ((($8)) + 56|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 8;
 $12 = ($11|0)==(0);
 $$ = $12 ? $2 : 0;
 $13 = ((($8)) + 40|0);
 $14 = HEAP32[$13>>2]|0;
 $15 = ($14|0)>(0);
 $16 = ($$|0)!=(0);
 $or$cond = $15 & $16;
 if ($or$cond) {
  $17 = $14 << 2;
  $18 = (_malloc($17)|0);
  $19 = ($18|0)==(0|0);
  if ($19) {
   $$027 = 12;
  } else {
   $$0 = $18;
   label = 3;
  }
 } else {
  $$0 = 0;
  label = 3;
 }
 if ((label|0) == 3) {
  $20 = ((($8)) + 60|0);
  $21 = HEAP32[$20>>2]|0;
  $22 = ($21|0)==(0);
  if ($22) {
   HEAP32[$5>>2] = 0;
   $447 = $4 & 1;
   $448 = $4 & 2;
   $449 = HEAP32[$9>>2]|0;
   $450 = $449 & 4;
   $451 = ($$0|0)==(0|0);
   if ($451) {
    $$0456$i29 = 0;
   } else {
    $452 = HEAP32[$13>>2]|0;
    $$0456$i29 = $452;
   }
   $453 = $$0456$i29 << 2;
   $454 = ((($8)) + 52|0);
   $455 = HEAP32[$454>>2]|0;
   $456 = $455 << 3;
   $457 = (($456) + 8)|0;
   $458 = Math_imul($453, $455)|0;
   $459 = (($457) + ($458))|0;
   $460 = $459 << 1;
   $461 = (($453) + 12)|0;
   $462 = (($461) + ($456))|0;
   $463 = (($462) + ($460))|0;
   $464 = (_malloc($463)|0);
   $465 = ($464|0)==(0|0);
   if ($465) {
    $$1$i = 12;$$3 = 0;
   } else {
    _memset(($464|0),0,($463|0))|0;
    $466 = (($464) + ($453)|0);
    $467 = $466;
    $468 = $467 & 3;
    $469 = ($468|0)==(0);
    $470 = (4 - ($468))|0;
    $$$i30 = $469 ? 0 : $470;
    $471 = (($466) + ($$$i30)|0);
    $472 = (($471) + ($457)|0);
    $473 = $472;
    $474 = $473 & 3;
    $475 = ($474|0)==(0);
    $476 = (4 - ($474))|0;
    $477 = $475 ? 0 : $476;
    $478 = (($472) + ($477)|0);
    $479 = (($478) + ($457)|0);
    $480 = $479;
    $481 = $480 & 3;
    $482 = ($481|0)==(0);
    $483 = (4 - ($481))|0;
    $$477$i = $482 ? 0 : $483;
    $484 = (($479) + ($$477$i)|0);
    $485 = (($484) + ($456)|0);
    $486 = $485;
    $487 = $486 & 3;
    $488 = ($455|0)>(0);
    if ($488) {
     $489 = ($487|0)==(0);
     $490 = (4 - ($487))|0;
     $491 = $489 ? 0 : $490;
     $492 = (($485) + ($491)|0);
     $$0420587$i = $492;$$0448586$i = 0;
     while(1) {
      $493 = (((($478) + ($$0448586$i<<3)|0)) + 4|0);
      HEAP32[$493>>2] = $$0420587$i;
      $494 = (($$0420587$i) + ($453)|0);
      $495 = (((($471) + ($$0448586$i<<3)|0)) + 4|0);
      HEAP32[$495>>2] = $494;
      $496 = (($494) + ($453)|0);
      $497 = (($$0448586$i) + 1)|0;
      $exitcond94 = ($497|0)==($455|0);
      if ($exitcond94) {
       $$1449584$i = 0;
       break;
      } else {
       $$0420587$i = $496;$$0448586$i = $497;
      }
     }
     while(1) {
      $498 = (($484) + ($$1449584$i<<3)|0);
      HEAP32[$498>>2] = -1;
      $499 = (($$1449584$i) + 1)|0;
      $exitcond = ($499|0)==($455|0);
      if ($exitcond) {
       break;
      } else {
       $$1449584$i = $499;
      }
     }
    }
    $500 = (_mbtowc($5,$1,4)|0);
    $501 = ($500|0)<(1);
    if ($501) {
     $502 = ($500|0)<(0);
     if ($502) {
      $$0426$i = 1;$$2 = 0;
     } else {
      $$0423$i = 1;
      label = 201;
     }
    } else {
     $$0423$i = $500;
     label = 201;
    }
    L21: do {
     if ((label|0) == 201) {
      $503 = (($1) + ($$0423$i)|0);
      $504 = ((($8)) + 8|0);
      $505 = ($450|0)!=(0);
      $506 = ($$0456$i29|0)>(0);
      $507 = ((($8)) + 12|0);
      $508 = ((($8)) + 44|0);
      $509 = ((($8)) + 32|0);
      $510 = ((($8)) + 36|0);
      $511 = ($$0456$i29|0)==(0);
      $notlhs601$i = ($447|0)==(0);
      $$not597$i = ($$0456$i29|0)<(1);
      $$0415$i = 0;$$0421$i = $503;$$0422$i = 0;$$0432$i = 0;$$0437$i = -1;$$0460$i = $471;$$1424$i = $$0423$i;$$1430$i = $464;$$1471$i = $471;$$1474$i = $478;
      while(1) {
       $512 = ($$0437$i|0)<(0);
       if ($512) {
        $513 = HEAP32[$504>>2]|0;
        $514 = ((($513)) + 8|0);
        $515 = HEAP32[$514>>2]|0;
        $516 = ($515|0)==(0|0);
        L27: do {
         if ($516) {
          $$1433$ph$lcssa$i = $$0432$i;$$1438$ph$lcssa$i = $$0437$i;$$1461$ph$lcssa$i = $$0460$i;
         } else {
          $517 = ($$0422$i|0)!=(0);
          $518 = ($$0415$i|0)==(95);
          $519 = ($$0422$i|0)==(0);
          $520 = ($$0415$i|0)==(10);
          $or$cond3$i = $505 & $520;
          $notrhs602$i = ($$0422$i|0)<(1);
          $or$cond$not$i32 = $notlhs601$i & $notrhs602$i;
          $$0427$ph533$i = $513;$$1433$ph531$i = $$0432$i;$$1438$ph529$i = $$0437$i;$$1461$ph527$i = $$0460$i;$832 = $514;
          while(1) {
           $$0427511$i = $$0427$ph533$i;$585 = $832;
           L31: while(1) {
            $521 = ((($$0427511$i)) + 12|0);
            $522 = HEAP32[$521>>2]|0;
            $523 = (($484) + ($522<<3)|0);
            $524 = HEAP32[$523>>2]|0;
            $525 = ($524|0)<($$0422$i|0);
            if (!($525)) {
             $$2462$i = $$1461$ph527$i;$$3435$i = $$1433$ph531$i;$$3440$i = $$1438$ph529$i;
             break;
            }
            $526 = ((($$0427511$i)) + 20|0);
            $527 = HEAP32[$526>>2]|0;
            $528 = ($527|0)==(0);
            if ($528) {
             label = 236;
             break;
            }
            $529 = $527 & 1;
            $530 = ($529|0)==(0);
            $brmerge$i34 = $or$cond$not$i32 | $530;
            $brmerge590$i = $or$cond3$i | $brmerge$i34;
            L35: do {
             if ($brmerge590$i) {
              $531 = $527 & 2;
              $532 = ($531|0)==(0);
              if (!($532)) {
               $533 = HEAP32[$5>>2]|0;
               $534 = $533 | $448;
               $535 = ($534|0)==(0);
               $536 = ($533|0)==(10);
               $or$cond7$i = $505 & $536;
               $or$cond592$i = $535 | $or$cond7$i;
               if (!($or$cond592$i)) {
                break;
               }
              }
              $537 = $527 & 16;
              $538 = ($537|0)==(0);
              do {
               if (!($538)) {
                if ($518) {
                 break L35;
                }
                $539 = (_iswalnum($$0415$i)|0);
                $540 = ($539|0)==(0);
                if (!($540)) {
                 break L35;
                }
                $541 = HEAP32[$5>>2]|0;
                $542 = ($541|0)==(95);
                if ($542) {
                 break;
                }
                $543 = (_iswalnum($541)|0);
                $544 = ($543|0)==(0);
                if ($544) {
                 break L35;
                }
               }
              } while(0);
              $545 = HEAP32[$526>>2]|0;
              $546 = $545 & 32;
              $547 = ($546|0)==(0);
              if ($547) {
               $556 = $545;
              } else {
               if ($518) {
                $$old$i35 = HEAP32[$5>>2]|0;
                $$old8$i = ($$old$i35|0)==(95);
                if ($$old8$i) {
                 break;
                } else {
                 $552 = $$old$i35;
                }
               } else {
                $548 = (_iswalnum($$0415$i)|0);
                $549 = ($548|0)==(0);
                $550 = HEAP32[$5>>2]|0;
                $551 = ($550|0)==(95);
                $or$cond9$i = $549 | $551;
                if ($or$cond9$i) {
                 break;
                } else {
                 $552 = $550;
                }
               }
               $553 = (_iswalnum($552)|0);
               $554 = ($553|0)==(0);
               if (!($554)) {
                break;
               }
               $$pre$i36 = HEAP32[$526>>2]|0;
               $556 = $$pre$i36;
              }
              $555 = $556 & 64;
              $557 = ($555|0)!=(0);
              $or$cond12$i37 = $517 & $557;
              $558 = HEAP32[$5>>2]|0;
              $559 = ($558|0)!=(0);
              $or$cond15$i38 = $559 & $or$cond12$i37;
              do {
               if ($or$cond15$i38) {
                if ($518) {
                 $562 = $558;$566 = 1;
                } else {
                 $560 = (_iswalnum($$0415$i)|0);
                 $561 = ($560|0)!=(0);
                 $$pre619$i = HEAP32[$5>>2]|0;
                 $562 = $$pre619$i;$566 = $561;
                }
                $563 = ($562|0)==(95);
                if ($563) {
                 if ($566) {
                  break L35;
                 } else {
                  break;
                 }
                } else {
                 $564 = (_iswalnum($562)|0);
                 $565 = ($564|0)!=(0);
                 $tmp476$i = $566 ^ $565;
                 if ($tmp476$i) {
                  break;
                 } else {
                  break L35;
                 }
                }
               }
              } while(0);
              $567 = HEAP32[$526>>2]|0;
              $568 = $567 & 128;
              $569 = ($568|0)==(0);
              if ($569) {
               label = 236;
               break L31;
              }
              $570 = HEAP32[$5>>2]|0;
              $571 = ($570|0)==(0);
              $or$cond18$i40 = $519 | $571;
              if ($or$cond18$i40) {
               break;
              }
              if ($518) {
               $574 = $570;$579 = 1;
              } else {
               $572 = (_iswalnum($$0415$i)|0);
               $573 = ($572|0)!=(0);
               $$pre620$i = HEAP32[$5>>2]|0;
               $574 = $$pre620$i;$579 = $573;
              }
              $575 = ($574|0)==(95);
              if ($575) {
               if ($579) {
                label = 236;
                break L31;
               } else {
                break;
               }
              } else {
               $576 = (_iswalnum($574)|0);
               $577 = ($576|0)!=(0);
               $578 = $579 ^ $577;
               if ($578) {
                break;
               } else {
                label = 236;
                break L31;
               }
              }
             }
            } while(0);
            $580 = ((($$0427511$i)) + 32|0);
            $581 = ((($$0427511$i)) + 40|0);
            $582 = HEAP32[$581>>2]|0;
            $583 = ($582|0)==(0|0);
            if ($583) {
             $$1433$ph$lcssa$i = $$1433$ph531$i;$$1438$ph$lcssa$i = $$1438$ph529$i;$$1461$ph$lcssa$i = $$1461$ph527$i;
             break L27;
            } else {
             $$0427511$i = $580;$585 = $581;
            }
           }
           if ((label|0) == 236) {
            label = 0;
            $584 = HEAP32[$585>>2]|0;
            HEAP32[$$1461$ph527$i>>2] = $584;
            if ($506) {
             $586 = ((($$1461$ph527$i)) + 4|0);
             $587 = HEAP32[$586>>2]|0;
             _memset(($587|0),-1,($453|0))|0;
            }
            $588 = ((($$0427511$i)) + 16|0);
            $589 = HEAP32[$588>>2]|0;
            $590 = ($589|0)==(0|0);
            do {
             if (!($590)) {
              $591 = HEAP32[$589>>2]|0;
              $592 = ($591|0)>(-1);
              if (!($592)) {
               break;
              }
              $593 = ((($$1461$ph527$i)) + 4|0);
              $$0457523$i = $589;$594 = $591;
              while(1) {
               $595 = ($594|0)<($$0456$i29|0);
               if ($595) {
                $596 = HEAP32[$593>>2]|0;
                $597 = (($596) + ($594<<2)|0);
                HEAP32[$597>>2] = $$0422$i;
               }
               $598 = ((($$0457523$i)) + 4|0);
               $599 = HEAP32[$598>>2]|0;
               $600 = ($599|0)>(-1);
               if ($600) {
                $$0457523$i = $598;$594 = $599;
               } else {
                break;
               }
              }
             }
            } while(0);
            $601 = HEAP32[$$1461$ph527$i>>2]|0;
            $602 = HEAP32[$507>>2]|0;
            $$not$i = ($601|0)!=($602|0);
            $brmerge598$i = $$not597$i | $$not$i;
            if ($brmerge598$i) {
             $$1433$ph532$mux$i = $$not$i ? $$1433$ph531$i : 1;
             $$1438$ph530$mux$i = $$not$i ? $$1438$ph529$i : $$0422$i;
             $$pre631$i = ((($$1461$ph527$i)) + 4|0);
             $$2434$i = $$1433$ph532$mux$i;$$2439$i = $$1438$ph530$mux$i;$$pre$phi632$iZ2D = $$pre631$i;
            } else {
             $603 = ((($$1461$ph527$i)) + 4|0);
             $604 = HEAP32[$603>>2]|0;
             $$3451525$i = 0;
             while(1) {
              $605 = (($604) + ($$3451525$i<<2)|0);
              $606 = HEAP32[$605>>2]|0;
              $607 = (($$0) + ($$3451525$i<<2)|0);
              HEAP32[$607>>2] = $606;
              $608 = (($$3451525$i) + 1)|0;
              $exitcond$i = ($608|0)==($$0456$i29|0);
              if ($exitcond$i) {
               $$2434$i = 1;$$2439$i = $$0422$i;$$pre$phi632$iZ2D = $603;
               break;
              } else {
               $$3451525$i = $608;
              }
             }
            }
            $609 = HEAP32[$521>>2]|0;
            $610 = (($484) + ($609<<3)|0);
            HEAP32[$610>>2] = $$0422$i;
            $611 = (((($484) + ($609<<3)|0)) + 4|0);
            HEAP32[$611>>2] = $$pre$phi632$iZ2D;
            $612 = ((($$1461$ph527$i)) + 8|0);
            $$2462$i = $612;$$3435$i = $$2434$i;$$3440$i = $$2439$i;
           }
           $613 = ((($$0427511$i)) + 32|0);
           $614 = ((($$0427511$i)) + 40|0);
           $615 = HEAP32[$614>>2]|0;
           $616 = ($615|0)==(0|0);
           if ($616) {
            $$1433$ph$lcssa$i = $$3435$i;$$1438$ph$lcssa$i = $$3440$i;$$1461$ph$lcssa$i = $$2462$i;
            break;
           } else {
            $$0427$ph533$i = $613;$$1433$ph531$i = $$3435$i;$$1438$ph529$i = $$3440$i;$$1461$ph527$i = $$2462$i;$832 = $614;
           }
          }
         }
        } while(0);
        HEAP32[$$1461$ph$lcssa$i>>2] = 0;
        $$old46$i = HEAP32[$5>>2]|0;
        $$old47$i = ($$old46$i|0)==(0);
        if ($$old47$i) {
         $$10447$i = $$1438$ph$lcssa$i;
         break;
        } else {
         $$4436$i = $$1433$ph$lcssa$i;$$4441$i = $$1438$ph$lcssa$i;$666 = $$old46$i;
        }
       } else {
        if ($511) {
         $$10447$i = $$0437$i;
         break;
        }
        $617 = ($$0460$i|0)!=($$1471$i|0);
        $618 = HEAP32[$5>>2]|0;
        $619 = ($618|0)!=(0);
        $or$cond48$i41 = $617 & $619;
        if ($or$cond48$i41) {
         $$4436$i = $$0432$i;$$4441$i = $$0437$i;$666 = $618;
        } else {
         $$10447$i = $$0437$i;
         break;
        }
       }
       $620 = (($$0422$i) + ($$1424$i))|0;
       $621 = (_mbtowc($5,$$0421$i,4)|0);
       $622 = ($621|0)<(1);
       if ($622) {
        $623 = ($621|0)<(0);
        if ($623) {
         $$0426$i = 1;$$2 = 0;
         break L21;
        } else {
         $$2425$i = 1;
        }
       } else {
        $$2425$i = $621;
       }
       $624 = (($$0421$i) + ($$2425$i)|0);
       $625 = HEAP32[$508>>2]|0;
       $626 = ($625|0)!=(0);
       $627 = ($$4436$i|0)!=(0);
       $or$cond21$i42 = $627 & $626;
       if ($or$cond21$i42) {
        $628 = HEAP32[$$1471$i>>2]|0;
        $629 = ($628|0)==(0|0);
        if ($629) {
         $$3463$lcssa$i = $$1474$i;
        } else {
         $630 = HEAP32[$510>>2]|0;
         $631 = HEAP32[$630>>2]|0;
         $632 = ($631|0)>(-1);
         $$0468540$i = $$1471$i;$$3463542$i = $$1474$i;
         while(1) {
          $633 = ((($$0468540$i)) + 4|0);
          L106: do {
           if ($632) {
            $$4452537$i = 0;$637 = $631;
            while(1) {
             $634 = $$4452537$i | 1;
             $635 = (($630) + ($634<<2)|0);
             $636 = HEAP32[$635>>2]|0;
             $638 = ($637|0)<($$0456$i29|0);
             if (!($638)) {
              $$4464$i = $$3463542$i;
              break L106;
             }
             $639 = HEAP32[$633>>2]|0;
             $640 = (($639) + ($636<<2)|0);
             $641 = HEAP32[$640>>2]|0;
             $642 = (($$0) + ($636<<2)|0);
             $643 = HEAP32[$642>>2]|0;
             $644 = ($641|0)==($643|0);
             if ($644) {
              $645 = (($639) + ($637<<2)|0);
              $646 = HEAP32[$645>>2]|0;
              $647 = (($$0) + ($637<<2)|0);
              $648 = HEAP32[$647>>2]|0;
              $649 = ($646|0)<($648|0);
              if ($649) {
               $$4464$i = $$3463542$i;
               break L106;
              }
             }
             $650 = (($$4452537$i) + 2)|0;
             $651 = (($630) + ($650<<2)|0);
             $652 = HEAP32[$651>>2]|0;
             $653 = ($652|0)>(-1);
             if ($653) {
              $$4452537$i = $650;$637 = $652;
             } else {
              break;
             }
            }
            $654 = $639;
            $$pre$phi630$iZ2D = $633;$658 = $654;
            label = 265;
           } else {
            $$pre622$i = HEAP32[$633>>2]|0;
            $$pre$phi630$iZ2D = $633;$658 = $$pre622$i;
            label = 265;
           }
          } while(0);
          if ((label|0) == 265) {
           label = 0;
           $655 = HEAP32[$$0468540$i>>2]|0;
           HEAP32[$$3463542$i>>2] = $655;
           $656 = ((($$3463542$i)) + 4|0);
           $657 = HEAP32[$656>>2]|0;
           HEAP32[$656>>2] = $658;
           HEAP32[$$pre$phi630$iZ2D>>2] = $657;
           $659 = ((($$3463542$i)) + 8|0);
           $$4464$i = $659;
          }
          $660 = ((($$0468540$i)) + 8|0);
          $661 = HEAP32[$660>>2]|0;
          $662 = ($661|0)==(0|0);
          if ($662) {
           $$3463$lcssa$i = $$4464$i;
           break;
          } else {
           $$0468540$i = $660;$$3463542$i = $$4464$i;
          }
         }
        }
        HEAP32[$$3463$lcssa$i>>2] = 0;
        $$2472$i = $$1471$i;$$2475$i = $$1474$i;$$5$i = 0;
       } else {
        $$2472$i = $$1474$i;$$2475$i = $$1471$i;$$5$i = $$4436$i;
       }
       $663 = HEAP32[$$2475$i>>2]|0;
       $664 = ($663|0)==(0|0);
       if ($664) {
        $$2431$lcssa$i = $$1430$i;$$5442$lcssa$i = $$4441$i;$$5465$lcssa$i = $$2472$i;$$6$lcssa$i = $$5$i;
       } else {
        $665 = ($620|0)!=(0);
        $667 = ($666|0)==(95);
        $668 = ($620|0)==(0);
        $669 = ($666|0)==(10);
        $or$cond27$i = $505 & $669;
        $notrhs$i43 = ($620|0)<(1);
        $or$cond24$not$i = $notlhs601$i & $notrhs$i43;
        $$1469574$i = $$2475$i;$$2431578$i = $$1430$i;$$5442576$i = $$4441$i;$$5465575$i = $$2472$i;$$6577$i = $$5$i;$671 = $663;
        while(1) {
         $670 = ((($671)) + 8|0);
         $672 = HEAP32[$670>>2]|0;
         $673 = ($672|0)==(0|0);
         if ($673) {
          $$3$lcssa$i = $$2431578$i;$$6443$lcssa$i = $$5442576$i;$$6466$lcssa$i = $$5465575$i;$$7$lcssa$i = $$6577$i;
         } else {
          $674 = ((($$1469574$i)) + 4|0);
          $$1428565$i = $671;$$6443556$i = $$5442576$i;$$6466555$i = $$5465575$i;$$7559$i = $$6577$i;$772 = $$2431578$i;$791 = $670;
          while(1) {
           $675 = HEAP32[$$1428565$i>>2]|0;
           $676 = ($675>>>0)>($666>>>0);
           L128: do {
            if ($676) {
             $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
            } else {
             $677 = ((($$1428565$i)) + 4|0);
             $678 = HEAP32[$677>>2]|0;
             $679 = ($678>>>0)<($666>>>0);
             if ($679) {
              $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
              break;
             }
             $680 = ((($$1428565$i)) + 20|0);
             $681 = HEAP32[$680>>2]|0;
             $682 = ($681|0)==(0);
             do {
              if (!($682)) {
               $683 = $681 & 1;
               $684 = ($683|0)==(0);
               $brmerge593$i = $or$cond24$not$i | $684;
               $brmerge594$i = $or$cond27$i | $brmerge593$i;
               if (!($brmerge594$i)) {
                $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                break L128;
               }
               $685 = $681 & 2;
               $686 = ($685|0)==(0);
               if (!($686)) {
                $687 = HEAP32[$5>>2]|0;
                $688 = $687 | $448;
                $689 = ($688|0)==(0);
                $690 = ($687|0)==(10);
                $or$cond33$i = $505 & $690;
                $or$cond596$i = $689 | $or$cond33$i;
                if (!($or$cond596$i)) {
                 $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                 break L128;
                }
               }
               $691 = $681 & 16;
               $692 = ($691|0)==(0);
               do {
                if (!($692)) {
                 if ($667) {
                  $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                  break L128;
                 }
                 $693 = (_iswalnum($666)|0);
                 $694 = ($693|0)==(0);
                 if (!($694)) {
                  $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                  break L128;
                 }
                 $695 = HEAP32[$5>>2]|0;
                 $696 = ($695|0)==(95);
                 if ($696) {
                  break;
                 }
                 $697 = (_iswalnum($695)|0);
                 $698 = ($697|0)==(0);
                 if ($698) {
                  $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                  break L128;
                 }
                }
               } while(0);
               $699 = HEAP32[$680>>2]|0;
               $700 = $699 & 32;
               $701 = ($700|0)==(0);
               if ($701) {
                $710 = $699;
               } else {
                if ($667) {
                 $$old34$i = HEAP32[$5>>2]|0;
                 $$old35$i = ($$old34$i|0)==(95);
                 if ($$old35$i) {
                  $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                  break L128;
                 } else {
                  $706 = $$old34$i;
                 }
                } else {
                 $702 = (_iswalnum($666)|0);
                 $703 = ($702|0)==(0);
                 $704 = HEAP32[$5>>2]|0;
                 $705 = ($704|0)==(95);
                 $or$cond36$i44 = $703 | $705;
                 if ($or$cond36$i44) {
                  $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                  break L128;
                 } else {
                  $706 = $704;
                 }
                }
                $707 = (_iswalnum($706)|0);
                $708 = ($707|0)==(0);
                if (!($708)) {
                 $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                 break L128;
                }
                $$pre624$i = HEAP32[$680>>2]|0;
                $710 = $$pre624$i;
               }
               $709 = $710 & 64;
               $711 = ($709|0)!=(0);
               $or$cond39$i45 = $665 & $711;
               $712 = HEAP32[$5>>2]|0;
               $713 = ($712|0)!=(0);
               $or$cond42$i46 = $713 & $or$cond39$i45;
               do {
                if ($or$cond42$i46) {
                 if ($667) {
                  $716 = $712;$720 = 1;
                 } else {
                  $714 = (_iswalnum($666)|0);
                  $715 = ($714|0)!=(0);
                  $$pre625$i = HEAP32[$5>>2]|0;
                  $716 = $$pre625$i;$720 = $715;
                 }
                 $717 = ($716|0)==(95);
                 if ($717) {
                  if ($720) {
                   $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                   break L128;
                  } else {
                   break;
                  }
                 } else {
                  $718 = (_iswalnum($716)|0);
                  $719 = ($718|0)!=(0);
                  $tmp$i47 = $720 ^ $719;
                  if ($tmp$i47) {
                   break;
                  } else {
                   $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                   break L128;
                  }
                 }
                }
               } while(0);
               $721 = HEAP32[$680>>2]|0;
               $722 = $721 & 128;
               $723 = ($722|0)==(0);
               do {
                if (!($723)) {
                 $724 = HEAP32[$5>>2]|0;
                 $725 = ($724|0)==(0);
                 $or$cond45$i48 = $668 | $725;
                 if ($or$cond45$i48) {
                  $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                  break L128;
                 }
                 if ($667) {
                  $728 = $724;$733 = 1;
                 } else {
                  $726 = (_iswalnum($666)|0);
                  $727 = ($726|0)!=(0);
                  $$pre626$i = HEAP32[$5>>2]|0;
                  $728 = $$pre626$i;$733 = $727;
                 }
                 $729 = ($728|0)==(95);
                 if ($729) {
                  if ($733) {
                   break;
                  } else {
                   $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                   break L128;
                  }
                 } else {
                  $730 = (_iswalnum($728)|0);
                  $731 = ($730|0)!=(0);
                  $732 = $733 ^ $731;
                  if ($732) {
                   $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                   break L128;
                  } else {
                   break;
                  }
                 }
                }
               } while(0);
               $734 = HEAP32[$680>>2]|0;
               $735 = $734 & 4;
               $736 = ($735|0)==(0);
               do {
                if ($736) {
                 $745 = $734;
                } else {
                 $737 = HEAP32[$9>>2]|0;
                 $738 = $737 & 2;
                 $739 = ($738|0)==(0);
                 if (!($739)) {
                  $745 = $734;
                  break;
                 }
                 $740 = ((($$1428565$i)) + 24|0);
                 $741 = HEAP32[$740>>2]|0;
                 $742 = (_iswctype($666,$741)|0);
                 $743 = ($742|0)==(0);
                 if ($743) {
                  $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                  break L128;
                 }
                 $$pre628$i = HEAP32[$680>>2]|0;
                 $745 = $$pre628$i;
                }
               } while(0);
               $744 = $745 & 4;
               $746 = ($744|0)==(0);
               do {
                if (!($746)) {
                 $747 = HEAP32[$9>>2]|0;
                 $748 = $747 & 2;
                 $749 = ($748|0)==(0);
                 if ($749) {
                  break;
                 }
                 $750 = (_towlower($666)|0);
                 $751 = ((($$1428565$i)) + 24|0);
                 $752 = HEAP32[$751>>2]|0;
                 $753 = (_iswctype($750,$752)|0);
                 $754 = ($753|0)==(0);
                 if (!($754)) {
                  break;
                 }
                 $755 = (_towupper($666)|0);
                 $756 = HEAP32[$751>>2]|0;
                 $757 = (_iswctype($755,$756)|0);
                 $758 = ($757|0)==(0);
                 if ($758) {
                  $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                  break L128;
                 }
                }
               } while(0);
               $759 = HEAP32[$680>>2]|0;
               $760 = $759 & 8;
               $761 = ($760|0)==(0);
               if ($761) {
                break;
               }
               $762 = ((($$1428565$i)) + 28|0);
               $763 = HEAP32[$762>>2]|0;
               $764 = HEAP32[$9>>2]|0;
               $765 = $764 & 2;
               $766 = (_tre_neg_char_classes_match($763,$666,$765)|0);
               $767 = ($766|0)==(0);
               if (!($767)) {
                $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
                break L128;
               }
              }
             } while(0);
             if ($506) {
              $768 = HEAP32[$674>>2]|0;
              $$5453546$i = 0;
              while(1) {
               $769 = (($768) + ($$5453546$i<<2)|0);
               $770 = HEAP32[$769>>2]|0;
               $771 = (($772) + ($$5453546$i<<2)|0);
               HEAP32[$771>>2] = $770;
               $773 = (($$5453546$i) + 1)|0;
               $exitcond615$i = ($773|0)==($$0456$i29|0);
               if ($exitcond615$i) {
                break;
               } else {
                $$5453546$i = $773;
               }
              }
             }
             $774 = ((($$1428565$i)) + 16|0);
             $775 = HEAP32[$774>>2]|0;
             $776 = ($775|0)==(0|0);
             do {
              if (!($776)) {
               $777 = HEAP32[$775>>2]|0;
               $778 = ($777|0)>(-1);
               if ($778) {
                $$1458549$i = $775;$779 = $777;
               } else {
                break;
               }
               while(1) {
                $780 = ($779|0)<($$0456$i29|0);
                if ($780) {
                 $781 = (($772) + ($779<<2)|0);
                 HEAP32[$781>>2] = $620;
                }
                $782 = ((($$1458549$i)) + 4|0);
                $783 = HEAP32[$782>>2]|0;
                $784 = ($783|0)>(-1);
                if ($784) {
                 $$1458549$i = $782;$779 = $783;
                } else {
                 break;
                }
               }
              }
             } while(0);
             $785 = ((($$1428565$i)) + 12|0);
             $786 = HEAP32[$785>>2]|0;
             $787 = (($484) + ($786<<3)|0);
             $788 = HEAP32[$787>>2]|0;
             $789 = ($788|0)<($620|0);
             if (!($789)) {
              $808 = HEAP32[$509>>2]|0;
              $809 = (((($484) + ($786<<3)|0)) + 4|0);
              $810 = HEAP32[$809>>2]|0;
              $811 = HEAP32[$810>>2]|0;
              $812 = (_tre_tag_order($$0456$i29,$808,$772,$811)|0);
              $813 = ($812|0)==(0);
              if ($813) {
               $$10$i = $$7559$i;$$4$i = $772;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
               break;
              }
              HEAP32[$810>>2] = $772;
              $814 = HEAP32[$791>>2]|0;
              $815 = HEAP32[$507>>2]|0;
              $816 = ($814|0)==($815|0);
              if (!($816)) {
               $$10$i = $$7559$i;$$4$i = $811;$$7467$i = $$6466555$i;$$9446$i = $$6443556$i;
               break;
              }
              if ($506) {
               $$7455551$i = 0;
              } else {
               $$10$i = 1;$$4$i = $811;$$7467$i = $$6466555$i;$$9446$i = $620;
               break;
              }
              while(1) {
               $817 = (($772) + ($$7455551$i<<2)|0);
               $818 = HEAP32[$817>>2]|0;
               $819 = (($$0) + ($$7455551$i<<2)|0);
               HEAP32[$819>>2] = $818;
               $820 = (($$7455551$i) + 1)|0;
               $exitcond617$i = ($820|0)==($$0456$i29|0);
               if ($exitcond617$i) {
                $$10$i = 1;$$4$i = $811;$$7467$i = $$6466555$i;$$9446$i = $620;
                break L128;
               } else {
                $$7455551$i = $820;
               }
              }
             }
             $790 = HEAP32[$791>>2]|0;
             HEAP32[$$6466555$i>>2] = $790;
             $792 = ((($$6466555$i)) + 4|0);
             $793 = HEAP32[$792>>2]|0;
             HEAP32[$792>>2] = $772;
             HEAP32[$787>>2] = $620;
             $794 = (((($484) + ($786<<3)|0)) + 4|0);
             HEAP32[$794>>2] = $792;
             $795 = $790;
             $796 = HEAP32[$507>>2]|0;
             $797 = ($795|0)==($796|0);
             do {
              if ($797) {
               $798 = ($$6443556$i|0)==(-1);
               if ($798) {
                if ($506) {
                 $$6454553$i = 0;
                } else {
                 $$7444$i = $620;$$8$i = 1;
                 break;
                }
               } else {
                if (!($506)) {
                 $$7444$i = $$6443556$i;$$8$i = $$7559$i;
                 break;
                }
                $799 = HEAP32[$772>>2]|0;
                $800 = HEAP32[$$0>>2]|0;
                $801 = ($799|0)>($800|0);
                if ($801) {
                 $$7444$i = $$6443556$i;$$8$i = $$7559$i;
                 break;
                } else {
                 $$6454553$i = 0;
                }
               }
               while(1) {
                $802 = (($772) + ($$6454553$i<<2)|0);
                $803 = HEAP32[$802>>2]|0;
                $804 = (($$0) + ($$6454553$i<<2)|0);
                HEAP32[$804>>2] = $803;
                $805 = (($$6454553$i) + 1)|0;
                $806 = ($805|0)<($$0456$i29|0);
                if ($806) {
                 $$6454553$i = $805;
                } else {
                 $$7444$i = $620;$$8$i = 1;
                 break;
                }
               }
              } else {
               $$7444$i = $$6443556$i;$$8$i = $$7559$i;
              }
             } while(0);
             $807 = ((($$6466555$i)) + 8|0);
             $$10$i = $$8$i;$$4$i = $793;$$7467$i = $807;$$9446$i = $$7444$i;
            }
           } while(0);
           $821 = ((($$1428565$i)) + 32|0);
           $822 = ((($$1428565$i)) + 40|0);
           $823 = HEAP32[$822>>2]|0;
           $824 = ($823|0)==(0|0);
           if ($824) {
            $$3$lcssa$i = $$4$i;$$6443$lcssa$i = $$9446$i;$$6466$lcssa$i = $$7467$i;$$7$lcssa$i = $$10$i;
            break;
           } else {
            $$1428565$i = $821;$$6443556$i = $$9446$i;$$6466555$i = $$7467$i;$$7559$i = $$10$i;$772 = $$4$i;$791 = $822;
           }
          }
         }
         $825 = ((($$1469574$i)) + 8|0);
         $826 = HEAP32[$825>>2]|0;
         $827 = ($826|0)==(0|0);
         if ($827) {
          $$2431$lcssa$i = $$3$lcssa$i;$$5442$lcssa$i = $$6443$lcssa$i;$$5465$lcssa$i = $$6466$lcssa$i;$$6$lcssa$i = $$7$lcssa$i;
          break;
         } else {
          $$1469574$i = $825;$$2431578$i = $$3$lcssa$i;$$5442576$i = $$6443$lcssa$i;$$5465575$i = $$6466$lcssa$i;$$6577$i = $$7$lcssa$i;$671 = $826;
         }
        }
       }
       HEAP32[$$5465$lcssa$i>>2] = 0;
       $$0415$i = $666;$$0421$i = $624;$$0422$i = $620;$$0432$i = $$6$lcssa$i;$$0437$i = $$5442$lcssa$i;$$0460$i = $$5465$lcssa$i;$$1424$i = $$2425$i;$$1430$i = $$2431$lcssa$i;$$1471$i = $$2472$i;$$1474$i = $$2475$i;
      }
      $$10447$lobit$i = $$10447$i >>> 31;
      $$0426$i = $$10447$lobit$i;$$2 = $$10447$i;
     }
    } while(0);
    _free($464);
    $$1$i = $$0426$i;$$3 = $$2;
   }
   $$026 = $$1$i;$$4 = $$3;
  } else {
   HEAP32[$6>>2] = 0;
   $23 = $4 & 1;
   $24 = $4 & 2;
   $25 = HEAP32[$9>>2]|0;
   $26 = $25 & 4;
   $27 = (___tre_mem_new_impl(0,0)|0);
   $28 = ($27|0)==(0|0);
   L218: do {
    if ($28) {
     $$1 = 0;$$15$i = 12;
    } else {
     $29 = (___tre_mem_alloc_impl($27,0,0,0,32)|0);
     $30 = ($29|0)==(0|0);
     if ($30) {
      ___tre_mem_destroy($27);
      $$1 = 0;$$15$i = 12;
      break;
     }
     $31 = ((($29)) + 24|0);
     HEAP32[$31>>2] = 0;
     $32 = ((($29)) + 28|0);
     HEAP32[$32>>2] = 0;
     $33 = HEAP32[$13>>2]|0;
     $34 = ($33|0)==(0);
     if ($34) {
      $$0551$i = 0;
      label = 9;
     } else {
      $35 = $33 << 2;
      $36 = (_malloc($35)|0);
      $37 = ($36|0)==(0|0);
      if ($37) {
       $$052 = 0;$$1514$i = 0;$$1544$i = 0;$$1552$i = $36;$$7512$i = 12;
      } else {
       $$0551$i = $36;
       label = 9;
      }
     }
     L225: do {
      if ((label|0) == 9) {
       $38 = ((($8)) + 28|0);
       $39 = HEAP32[$38>>2]|0;
       $40 = ($39|0)==(0);
       if ($40) {
        $$0513$i = 0;
       } else {
        $41 = $39 << 3;
        $42 = (_malloc($41)|0);
        $43 = ($42|0)==(0|0);
        if ($43) {
         $$052 = 0;$$1514$i = $42;$$1544$i = 0;$$1552$i = $$0551$i;$$7512$i = 12;
         break;
        } else {
         $$0513$i = $42;
        }
       }
       $44 = ((($8)) + 52|0);
       $45 = HEAP32[$44>>2]|0;
       $46 = ($45|0)==(0);
       if ($46) {
        $$0543$ph$i = 0;
       } else {
        $47 = $45 << 2;
        $48 = (_malloc($47)|0);
        $49 = ($48|0)==(0|0);
        if ($49) {
         $$052 = 0;$$1514$i = $$0513$i;$$1544$i = $48;$$1552$i = $$0551$i;$$7512$i = 12;
         break;
        } else {
         $$0543$ph$i = $48;
        }
       }
       $50 = ((($8)) + 8|0);
       $51 = ((($8)) + 12|0);
       $52 = ($$0|0)==(0|0);
       $53 = ($$0|0)!=(0|0);
       $54 = ((($8)) + 32|0);
       $55 = ($26|0)!=(0);
       $56 = ($$0551$i|0)==(0|0);
       $57 = ($$0513$i|0)==(0|0);
       $58 = ($$0543$ph$i|0)==(0|0);
       $notlhs662$i = ($23|0)==(0);
       $$0462$i = $1;$$0475$i = 1;$$0485$i = -1;$$0491$i = -1;$$0517$i = $29;$59 = $33;
       L233: while(1) {
        $60 = ($59|0)>(0);
        if ($60) {
         $$0497601$i = 0;$831 = $59;
         while(1) {
          $64 = (($$0551$i) + ($$0497601$i<<2)|0);
          HEAP32[$64>>2] = -1;
          if ($52) {
           $68 = $831;
          } else {
           $65 = (($$0) + ($$0497601$i<<2)|0);
           HEAP32[$65>>2] = -1;
           $$pre670$i = HEAP32[$13>>2]|0;
           $68 = $$pre670$i;
          }
          $66 = (($$0497601$i) + 1)|0;
          $67 = ($66|0)<($68|0);
          if ($67) {
           $$0497601$i = $66;$831 = $68;
          } else {
           break;
          }
         }
        }
        $61 = HEAP32[$44>>2]|0;
        $62 = ($61|0)>(0);
        if ($62) {
         $63 = $61 << 2;
         _memset(($$0543$ph$i|0),0,($63|0))|0;
        }
        $69 = HEAP32[$6>>2]|0;
        $70 = (($$0475$i) + ($$0485$i))|0;
        $71 = (_mbtowc($6,$$0462$i,4)|0);
        $72 = ($71|0)<(1);
        if ($72) {
         $73 = ($71|0)<(0);
         if ($73) {
          $$052 = 0;$$1514$i = $$0513$i;$$1544$i = $$0543$ph$i;$$1552$i = $$0551$i;$$7512$i = 1;
          break L225;
         } else {
          $$1476$i = 1;
         }
        } else {
         $$1476$i = $71;
        }
        $74 = (($$0462$i) + ($$1476$i)|0);
        $75 = HEAP32[$6>>2]|0;
        $76 = HEAP32[$50>>2]|0;
        $77 = ((($76)) + 8|0);
        $78 = HEAP32[$77>>2]|0;
        $79 = ($78|0)==(0|0);
        if ($79) {
         $$12529$i = $$0517$i;$$2493$i = $$0491$i;$$3459$i = $69;$$3472$i = $70;$$3548$i = 0;$$4466$i = $74;$$7482$i = $$1476$i;$$8540$i = 0;
         label = 174;
        } else {
         $80 = ($70|0)!=(0);
         $81 = ($69|0)==(95);
         $82 = ($70|0)==(0);
         $83 = ($69|0)==(10);
         $or$cond6$i = $55 & $83;
         $notrhs$i = ($70|0)<(1);
         $or$cond$not$i = $notlhs662$i & $notrhs$i;
         $$0515616$i = $76;$$0532613$i = 0;$$0545612$i = 0;$$1518614$i = $$0517$i;$140 = $77;
         while(1) {
          $84 = ((($$0515616$i)) + 20|0);
          $85 = HEAP32[$84>>2]|0;
          $86 = ($85|0)==(0);
          L252: do {
           if ($86) {
            label = 52;
           } else {
            $87 = $85 & 1;
            $88 = ($87|0)==(0);
            $brmerge$i = $or$cond$not$i | $88;
            $brmerge655$i = $or$cond6$i | $brmerge$i;
            if (!($brmerge655$i)) {
             $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
             break;
            }
            $89 = $85 & 2;
            $90 = ($89|0)==(0);
            if (!($90)) {
             $91 = HEAP32[$6>>2]|0;
             $92 = $91 | $24;
             $93 = ($92|0)==(0);
             $94 = ($91|0)==(10);
             $or$cond10$i = $55 & $94;
             $or$cond657$i = $93 | $or$cond10$i;
             if (!($or$cond657$i)) {
              $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
              break;
             }
            }
            $95 = $85 & 16;
            $96 = ($95|0)==(0);
            do {
             if (!($96)) {
              if ($81) {
               $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
               break L252;
              }
              $97 = (_iswalnum($69)|0);
              $98 = ($97|0)==(0);
              if (!($98)) {
               $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
               break L252;
              }
              $99 = HEAP32[$6>>2]|0;
              $100 = ($99|0)==(95);
              if ($100) {
               break;
              }
              $101 = (_iswalnum($99)|0);
              $102 = ($101|0)==(0);
              if ($102) {
               $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
               break L252;
              }
             }
            } while(0);
            $103 = HEAP32[$84>>2]|0;
            $104 = $103 & 32;
            $105 = ($104|0)==(0);
            if ($105) {
             $114 = $103;
            } else {
             if ($81) {
              $$old$i = HEAP32[$6>>2]|0;
              $$old11$i = ($$old$i|0)==(95);
              if ($$old11$i) {
               $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
               break;
              } else {
               $110 = $$old$i;
              }
             } else {
              $106 = (_iswalnum($69)|0);
              $107 = ($106|0)==(0);
              $108 = HEAP32[$6>>2]|0;
              $109 = ($108|0)==(95);
              $or$cond12$i = $107 | $109;
              if ($or$cond12$i) {
               $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
               break;
              } else {
               $110 = $108;
              }
             }
             $111 = (_iswalnum($110)|0);
             $112 = ($111|0)==(0);
             if (!($112)) {
              $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
              break;
             }
             $$pre672$i = HEAP32[$84>>2]|0;
             $114 = $$pre672$i;
            }
            $113 = $114 & 64;
            $115 = ($113|0)!=(0);
            $or$cond15$i = $80 & $115;
            $116 = HEAP32[$6>>2]|0;
            $117 = ($116|0)!=(0);
            $or$cond18$i = $117 & $or$cond15$i;
            do {
             if ($or$cond18$i) {
              if ($81) {
               $120 = $116;$124 = 1;
              } else {
               $118 = (_iswalnum($69)|0);
               $119 = ($118|0)!=(0);
               $$pre673$i = HEAP32[$6>>2]|0;
               $120 = $$pre673$i;$124 = $119;
              }
              $121 = ($120|0)==(95);
              if ($121) {
               if ($124) {
                $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
                break L252;
               } else {
                break;
               }
              } else {
               $122 = (_iswalnum($120)|0);
               $123 = ($122|0)!=(0);
               $tmp553$i = $124 ^ $123;
               if ($tmp553$i) {
                break;
               } else {
                $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
                break L252;
               }
              }
             }
            } while(0);
            $125 = HEAP32[$84>>2]|0;
            $126 = $125 & 128;
            $127 = ($126|0)==(0);
            if ($127) {
             label = 52;
             break;
            }
            $128 = HEAP32[$6>>2]|0;
            $129 = ($128|0)==(0);
            $or$cond21$i = $82 | $129;
            if ($or$cond21$i) {
             $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
             break;
            }
            if ($81) {
             $132 = $128;$137 = 1;
            } else {
             $130 = (_iswalnum($69)|0);
             $131 = ($130|0)!=(0);
             $$pre674$i = HEAP32[$6>>2]|0;
             $132 = $$pre674$i;$137 = $131;
            }
            $133 = ($132|0)==(95);
            if ($133) {
             if ($137) {
              label = 52;
              break;
             } else {
              $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
              break;
             }
            } else {
             $134 = (_iswalnum($132)|0);
             $135 = ($134|0)!=(0);
             $136 = $137 ^ $135;
             if ($136) {
              $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$1518614$i;
              break;
             } else {
              label = 52;
              break;
             }
            }
           }
          } while(0);
          do {
           if ((label|0) == 52) {
            label = 0;
            $138 = ($$0545612$i|0)==(0|0);
            if ($138) {
             $139 = HEAP32[$140>>2]|0;
             $141 = ((($$0515616$i)) + 16|0);
             $142 = HEAP32[$141>>2]|0;
             $$1533$i = $142;$$1546$i = $139;$$5522$i = $$1518614$i;
             break;
            }
            $143 = ((($$1518614$i)) + 28|0);
            $144 = HEAP32[$143>>2]|0;
            $145 = ($144|0)==(0|0);
            if ($145) {
             $146 = (___tre_mem_alloc_impl($27,0,0,0,32)|0);
             $147 = ($146|0)==(0|0);
             if ($147) {
              label = 56;
              break L233;
             }
             $148 = ((($146)) + 24|0);
             HEAP32[$148>>2] = $$1518614$i;
             $149 = ((($146)) + 28|0);
             HEAP32[$149>>2] = 0;
             $150 = HEAP32[$13>>2]|0;
             $151 = $150 << 2;
             $152 = (___tre_mem_alloc_impl($27,0,0,0,$151)|0);
             $153 = ((($146)) + 20|0);
             HEAP32[$153>>2] = $152;
             $154 = ($152|0)==(0|0);
             if ($154) {
              label = 63;
              break L233;
             }
             HEAP32[$143>>2] = $146;
             $$3520$i = $146;
            } else {
             $$3520$i = $144;
            }
            HEAP32[$$3520$i>>2] = $70;
            $155 = ((($$3520$i)) + 4|0);
            HEAP32[$155>>2] = $74;
            $156 = HEAP32[$140>>2]|0;
            $157 = ((($$3520$i)) + 8|0);
            HEAP32[$157>>2] = $156;
            $158 = ((($$0515616$i)) + 12|0);
            $159 = HEAP32[$158>>2]|0;
            $160 = ((($$3520$i)) + 12|0);
            HEAP32[$160>>2] = $159;
            $161 = HEAP32[$6>>2]|0;
            $162 = ((($$3520$i)) + 16|0);
            HEAP32[$162>>2] = $161;
            $163 = HEAP32[$13>>2]|0;
            $164 = ($163|0)>(0);
            if ($164) {
             $165 = ((($$3520$i)) + 20|0);
             $166 = HEAP32[$165>>2]|0;
             $$0496606$i = 0;
             while(1) {
              $167 = (($$0551$i) + ($$0496606$i<<2)|0);
              $168 = HEAP32[$167>>2]|0;
              $169 = (($166) + ($$0496606$i<<2)|0);
              HEAP32[$169>>2] = $168;
              $170 = (($$0496606$i) + 1)|0;
              $171 = HEAP32[$13>>2]|0;
              $172 = ($170|0)<($171|0);
              if ($172) {
               $$0496606$i = $170;
              } else {
               break;
              }
             }
            }
            $173 = ((($$0515616$i)) + 16|0);
            $174 = HEAP32[$173>>2]|0;
            $175 = ($174|0)==(0|0);
            if ($175) {
             $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$3520$i;
             break;
            }
            $176 = HEAP32[$174>>2]|0;
            $177 = ($176|0)>(-1);
            if (!($177)) {
             $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$3520$i;
             break;
            }
            $178 = ((($$3520$i)) + 20|0);
            $179 = HEAP32[$178>>2]|0;
            $$0490610$i = $174;$182 = $176;
            while(1) {
             $180 = ((($$0490610$i)) + 4|0);
             $181 = (($179) + ($182<<2)|0);
             HEAP32[$181>>2] = $70;
             $183 = HEAP32[$180>>2]|0;
             $184 = ($183|0)>(-1);
             if ($184) {
              $$0490610$i = $180;$182 = $183;
             } else {
              $$1533$i = $$0532613$i;$$1546$i = $$0545612$i;$$5522$i = $$3520$i;
              break;
             }
            }
           }
          } while(0);
          $185 = ((($$0515616$i)) + 32|0);
          $186 = ((($$0515616$i)) + 40|0);
          $187 = HEAP32[$186>>2]|0;
          $188 = ($187|0)==(0|0);
          if ($188) {
           break;
          } else {
           $$0515616$i = $185;$$0532613$i = $$1533$i;$$0545612$i = $$1546$i;$$1518614$i = $$5522$i;$140 = $186;
          }
         }
         $189 = ($$1533$i|0)==(0|0);
         if ($189) {
          $$3535$i = 0;
         } else {
          $190 = HEAP32[$$1533$i>>2]|0;
          $191 = ($190|0)>(-1);
          if ($191) {
           $$2534623$i = $$1533$i;$193 = $190;
           while(1) {
            $192 = (($$0551$i) + ($193<<2)|0);
            HEAP32[$192>>2] = $70;
            $194 = ((($$2534623$i)) + 4|0);
            $195 = HEAP32[$194>>2]|0;
            $196 = ($195|0)>(-1);
            if ($196) {
             $$2534623$i = $194;$193 = $195;
            } else {
             $$3535$i = $194;
             break;
            }
           }
          } else {
           $$3535$i = $$1533$i;
          }
         }
         $197 = ($$1546$i|0)==(0|0);
         if ($197) {
          $$12529$i = $$5522$i;$$2493$i = $$0491$i;$$3459$i = $69;$$3472$i = $70;$$3548$i = 0;$$4466$i = $74;$$7482$i = $$1476$i;$$8540$i = $$3535$i;
          label = 174;
         } else {
          $$0456$i = $69;$$0469$i = $70;$$1463$i = $74;$$1492$i = $$0491$i;$$2477$i = $$1476$i;$$2547$i = $$1546$i;$$4536$i = $$3535$i;$$6523$i = $$5522$i;
          label = 82;
         }
        }
        L315: while(1) {
         L316: do {
          if ((label|0) == 82) {
           label = 0;
           $198 = HEAP32[$51>>2]|0;
           $199 = ($$2547$i|0)==($198|0);
           if ($199) {
            $200 = ($$1492$i|0)<($$0469$i|0);
            if (!($200)) {
             $201 = ($$1492$i|0)==($$0469$i|0);
             $or$cond24$i = $53 & $201;
             if (!($or$cond24$i)) {
              $$12529$i = $$6523$i;$$2493$i = $$1492$i;$$3459$i = $$0456$i;$$3472$i = $$0469$i;$$3548$i = $$2547$i;$$4466$i = $$1463$i;$$7482$i = $$2477$i;$$8540$i = $$4536$i;
              label = 174;
              continue L315;
             }
             $202 = HEAP32[$13>>2]|0;
             $203 = HEAP32[$54>>2]|0;
             $204 = (_tre_tag_order($202,$203,$$0551$i,$$0)|0);
             $205 = ($204|0)==(0);
             if ($205) {
              $$12529$i = $$6523$i;$$2493$i = $$1492$i;$$3459$i = $$0456$i;$$3472$i = $$1492$i;$$3548$i = $$2547$i;$$4466$i = $$1463$i;$$7482$i = $$2477$i;$$8540$i = $$4536$i;
              label = 174;
              continue L315;
             }
            }
            if ($52) {
             $$12529$i = $$6523$i;$$2493$i = $$0469$i;$$3459$i = $$0456$i;$$3472$i = $$0469$i;$$3548$i = $$2547$i;$$4466$i = $$1463$i;$$7482$i = $$2477$i;$$8540$i = $$4536$i;
             label = 174;
             continue L315;
            }
            $206 = HEAP32[$13>>2]|0;
            $207 = ($206|0)>(0);
            if ($207) {
             $$0486653$i = 0;
            } else {
             $$12529$i = $$6523$i;$$2493$i = $$0469$i;$$3459$i = $$0456$i;$$3472$i = $$0469$i;$$3548$i = $$2547$i;$$4466$i = $$1463$i;$$7482$i = $$2477$i;$$8540$i = $$4536$i;
             label = 174;
             continue L315;
            }
            while(1) {
             $208 = (($$0551$i) + ($$0486653$i<<2)|0);
             $209 = HEAP32[$208>>2]|0;
             $210 = (($$0) + ($$0486653$i<<2)|0);
             HEAP32[$210>>2] = $209;
             $211 = (($$0486653$i) + 1)|0;
             $212 = HEAP32[$13>>2]|0;
             $213 = ($211|0)<($212|0);
             if ($213) {
              $$0486653$i = $211;
             } else {
              $$12529$i = $$6523$i;$$2493$i = $$0469$i;$$3459$i = $$0456$i;$$3472$i = $$0469$i;$$3548$i = $$2547$i;$$4466$i = $$1463$i;$$7482$i = $$2477$i;$$8540$i = $$4536$i;
              label = 174;
              continue L315;
             }
            }
           }
           $214 = ((($$2547$i)) + 8|0);
           $215 = HEAP32[$214>>2]|0;
           $216 = ($215|0)==(0|0);
           do {
            if ($216) {
             label = 98;
            } else {
             $217 = ((($$2547$i)) + 20|0);
             $218 = HEAP32[$217>>2]|0;
             $219 = $218 & 256;
             $220 = ($219|0)==(0);
             if ($220) {
              label = 98;
              break;
             }
             $221 = ((($$2547$i)) + 24|0);
             $222 = HEAP32[$221>>2]|0;
             $223 = (($222) + 1)|0;
             $224 = HEAP32[$9>>2]|0;
             $225 = $224 & -9;
             _tre_fill_pmatch($223,$$0513$i,$225,$8,$$0551$i,$$0469$i);
             $226 = (($$0513$i) + ($222<<3)|0);
             $227 = HEAP32[$226>>2]|0;
             $228 = (((($$0513$i) + ($222<<3)|0)) + 4|0);
             $229 = HEAP32[$228>>2]|0;
             $230 = (($229) - ($227))|0;
             $231 = (($1) + ($227)|0);
             $232 = ((($$1463$i)) + -1|0);
             $233 = (_strncmp($231,$232,$230)|0);
             $234 = ($233|0)==(0);
             do {
              if ($234) {
               $235 = ($230|0)==(0);
               $$$i = $235&1;
               $236 = ((($$2547$i)) + 12|0);
               $237 = HEAP32[$236>>2]|0;
               $238 = (($$0543$ph$i) + ($237<<2)|0);
               if ($235) {
                $239 = HEAP32[$238>>2]|0;
                $240 = ($239|0)==(0);
                if (!($240)) {
                 $$1457$i = $$0456$i;$$1470$i = $$0469$i;$$2464$i = $$1463$i;$$2501$i = 25;$$4479$i = $$2477$i;
                 break;
                }
               }
               HEAP32[$238>>2] = $$$i;
               $241 = (($230) + -1)|0;
               $242 = (($$1463$i) + ($241)|0);
               $243 = HEAP32[$6>>2]|0;
               $244 = (($$0469$i) + ($$2477$i))|0;
               $245 = (($244) + ($241))|0;
               $246 = (_mbtowc($6,$242,4)|0);
               $247 = ($246|0)<(1);
               if ($247) {
                $248 = ($246|0)<(0);
                if ($248) {
                 $$1457$i = $243;$$1470$i = $245;$$2464$i = $242;$$2501$i = 2;$$4479$i = $246;
                 break;
                } else {
                 $$3478$i = 1;
                }
               } else {
                $$3478$i = $246;
               }
               $249 = (($242) + ($$3478$i)|0);
               $$1457$i = $243;$$1470$i = $245;$$2464$i = $249;$$2501$i = 0;$$4479$i = $$3478$i;
              } else {
               $$1457$i = $$0456$i;$$1470$i = $$0469$i;$$2464$i = $$1463$i;$$2501$i = 25;$$4479$i = $$2477$i;
              }
             } while(0);
             $trunc$i = $$2501$i&255;
             $trunc$i$clear = $trunc$i & 31;
             switch ($trunc$i$clear<<24>>24) {
             case 25:  {
              $$12529$i = $$6523$i;$$2493$i = $$1492$i;$$3459$i = $$1457$i;$$3472$i = $$1470$i;$$3548$i = $$2547$i;$$4466$i = $$2464$i;$$7482$i = $$4479$i;$$8540$i = $$4536$i;
              label = 174;
              continue L315;
              break;
             }
             case 0:  {
              $$2458$i = $$1457$i;$$2471$i = $$1470$i;$$3465$i = $$2464$i;$$6481$i = $$4479$i;
              break;
             }
             default: {
              $$10542$i = $$4536$i;$$14531$i = $$6523$i;$$4495$i = $$1492$i;$$5461$i = $$1457$i;$$5474$i = $$1470$i;$$5504$i = $$2501$i;$$5550$i = $$2547$i;$$6468$i = $$2464$i;$$9484$i = $$4479$i;
              break L316;
             }
             }
            }
           } while(0);
           if ((label|0) == 98) {
            label = 0;
            $250 = HEAP32[$6>>2]|0;
            $251 = ($250|0)==(0);
            if ($251) {
             $$12529$i = $$6523$i;$$2493$i = $$1492$i;$$3459$i = $$0456$i;$$3472$i = $$0469$i;$$3548$i = $$2547$i;$$4466$i = $$1463$i;$$7482$i = $$2477$i;$$8540$i = $$4536$i;
             label = 174;
             continue L315;
            }
            $252 = (($$0469$i) + ($$2477$i))|0;
            $253 = (_mbtowc($6,$$1463$i,4)|0);
            $254 = ($253|0)<(1);
            if ($254) {
             $255 = ($253|0)<(0);
             if ($255) {
              $$10542$i = $$4536$i;$$14531$i = $$6523$i;$$4495$i = $$1492$i;$$5461$i = $250;$$5474$i = $252;$$5504$i = 2;$$5550$i = $$2547$i;$$6468$i = $$1463$i;$$9484$i = $253;
              break;
             } else {
              $$5480$i = 1;
             }
            } else {
             $$5480$i = $253;
            }
            $256 = (($$1463$i) + ($$5480$i)|0);
            $$2458$i = $250;$$2471$i = $252;$$3465$i = $256;$$6481$i = $$5480$i;
           }
           $257 = HEAP32[$214>>2]|0;
           $258 = ($257|0)==(0|0);
           if ($258) {
            $$12529$i = $$6523$i;$$2493$i = $$1492$i;$$3459$i = $$2458$i;$$3472$i = $$2471$i;$$3548$i = $$2547$i;$$4466$i = $$3465$i;$$7482$i = $$6481$i;$$8540$i = $$4536$i;
            label = 174;
            continue L315;
           }
           $259 = ($$2471$i|0)!=(0);
           $260 = ($$2458$i|0)==(95);
           $261 = ($$2471$i|0)==(0);
           $262 = ($$2458$i|0)==(10);
           $or$cond30$i = $55 & $262;
           $notrhs663$i = ($$2471$i|0)<(1);
           $or$cond27$not$i = $notlhs662$i & $notrhs663$i;
           $$0488643$i = 0;$$1516640$i = $$2547$i;$$5537638$i = $$4536$i;$$7524639$i = $$6523$i;$358 = $214;
           L359: while(1) {
            $263 = HEAP32[$$1516640$i>>2]|0;
            $264 = ($263>>>0)>($$2458$i>>>0);
            L361: do {
             if ($264) {
              $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
             } else {
              $265 = ((($$1516640$i)) + 4|0);
              $266 = HEAP32[$265>>2]|0;
              $267 = ($266>>>0)<($$2458$i>>>0);
              if ($267) {
               $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
               break;
              }
              $268 = ((($$1516640$i)) + 20|0);
              $269 = HEAP32[$268>>2]|0;
              $270 = ($269|0)==(0);
              do {
               if (!($270)) {
                $271 = $269 & 1;
                $272 = ($271|0)==(0);
                $brmerge658$i = $or$cond27$not$i | $272;
                $brmerge659$i = $or$cond30$i | $brmerge658$i;
                if (!($brmerge659$i)) {
                 $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                 break L361;
                }
                $273 = $269 & 2;
                $274 = ($273|0)==(0);
                if (!($274)) {
                 $275 = HEAP32[$6>>2]|0;
                 $276 = $275 | $24;
                 $277 = ($276|0)==(0);
                 $278 = ($275|0)==(10);
                 $or$cond36$i = $55 & $278;
                 $or$cond661$i = $277 | $or$cond36$i;
                 if (!($or$cond661$i)) {
                  $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                  break L361;
                 }
                }
                $279 = $269 & 16;
                $280 = ($279|0)==(0);
                do {
                 if (!($280)) {
                  if ($260) {
                   $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                   break L361;
                  }
                  $281 = (_iswalnum($$2458$i)|0);
                  $282 = ($281|0)==(0);
                  if (!($282)) {
                   $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                   break L361;
                  }
                  $283 = HEAP32[$6>>2]|0;
                  $284 = ($283|0)==(95);
                  if ($284) {
                   break;
                  }
                  $285 = (_iswalnum($283)|0);
                  $286 = ($285|0)==(0);
                  if ($286) {
                   $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                   break L361;
                  }
                 }
                } while(0);
                $287 = HEAP32[$268>>2]|0;
                $288 = $287 & 32;
                $289 = ($288|0)==(0);
                if ($289) {
                 $298 = $287;
                } else {
                 if ($260) {
                  $$old37$i = HEAP32[$6>>2]|0;
                  $$old38$i = ($$old37$i|0)==(95);
                  if ($$old38$i) {
                   $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                   break L361;
                  } else {
                   $294 = $$old37$i;
                  }
                 } else {
                  $290 = (_iswalnum($$2458$i)|0);
                  $291 = ($290|0)==(0);
                  $292 = HEAP32[$6>>2]|0;
                  $293 = ($292|0)==(95);
                  $or$cond39$i = $291 | $293;
                  if ($or$cond39$i) {
                   $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                   break L361;
                  } else {
                   $294 = $292;
                  }
                 }
                 $295 = (_iswalnum($294)|0);
                 $296 = ($295|0)==(0);
                 if (!($296)) {
                  $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                  break L361;
                 }
                 $$pre678$i = HEAP32[$268>>2]|0;
                 $298 = $$pre678$i;
                }
                $297 = $298 & 64;
                $299 = ($297|0)!=(0);
                $or$cond42$i = $259 & $299;
                $300 = HEAP32[$6>>2]|0;
                $301 = ($300|0)!=(0);
                $or$cond45$i = $301 & $or$cond42$i;
                do {
                 if ($or$cond45$i) {
                  if ($260) {
                   $304 = $300;$308 = 1;
                  } else {
                   $302 = (_iswalnum($$2458$i)|0);
                   $303 = ($302|0)!=(0);
                   $$pre679$i = HEAP32[$6>>2]|0;
                   $304 = $$pre679$i;$308 = $303;
                  }
                  $305 = ($304|0)==(95);
                  if ($305) {
                   if ($308) {
                    $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                    break L361;
                   } else {
                    break;
                   }
                  } else {
                   $306 = (_iswalnum($304)|0);
                   $307 = ($306|0)!=(0);
                   $tmp$i = $308 ^ $307;
                   if ($tmp$i) {
                    break;
                   } else {
                    $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                    break L361;
                   }
                  }
                 }
                } while(0);
                $309 = HEAP32[$268>>2]|0;
                $310 = $309 & 128;
                $311 = ($310|0)==(0);
                do {
                 if (!($311)) {
                  $312 = HEAP32[$6>>2]|0;
                  $313 = ($312|0)==(0);
                  $or$cond48$i = $261 | $313;
                  if ($or$cond48$i) {
                   $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                   break L361;
                  }
                  if ($260) {
                   $316 = $312;$321 = 1;
                  } else {
                   $314 = (_iswalnum($$2458$i)|0);
                   $315 = ($314|0)!=(0);
                   $$pre680$i = HEAP32[$6>>2]|0;
                   $316 = $$pre680$i;$321 = $315;
                  }
                  $317 = ($316|0)==(95);
                  if ($317) {
                   if ($321) {
                    break;
                   } else {
                    $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                    break L361;
                   }
                  } else {
                   $318 = (_iswalnum($316)|0);
                   $319 = ($318|0)!=(0);
                   $320 = $321 ^ $319;
                   if ($320) {
                    $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                    break L361;
                   } else {
                    break;
                   }
                  }
                 }
                } while(0);
                $322 = HEAP32[$268>>2]|0;
                $323 = $322 & 4;
                $324 = ($323|0)==(0);
                do {
                 if ($324) {
                  $333 = $322;
                 } else {
                  $325 = HEAP32[$9>>2]|0;
                  $326 = $325 & 2;
                  $327 = ($326|0)==(0);
                  if (!($327)) {
                   $333 = $322;
                   break;
                  }
                  $328 = ((($$1516640$i)) + 24|0);
                  $329 = HEAP32[$328>>2]|0;
                  $330 = (_iswctype($$2458$i,$329)|0);
                  $331 = ($330|0)==(0);
                  if ($331) {
                   $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                   break L361;
                  }
                  $$pre682$i = HEAP32[$268>>2]|0;
                  $333 = $$pre682$i;
                 }
                } while(0);
                $332 = $333 & 4;
                $334 = ($332|0)==(0);
                do {
                 if (!($334)) {
                  $335 = HEAP32[$9>>2]|0;
                  $336 = $335 & 2;
                  $337 = ($336|0)==(0);
                  if ($337) {
                   break;
                  }
                  $338 = (_towlower($$2458$i)|0);
                  $339 = ((($$1516640$i)) + 24|0);
                  $340 = HEAP32[$339>>2]|0;
                  $341 = (_iswctype($338,$340)|0);
                  $342 = ($341|0)==(0);
                  if (!($342)) {
                   break;
                  }
                  $343 = (_towupper($$2458$i)|0);
                  $344 = HEAP32[$339>>2]|0;
                  $345 = (_iswctype($343,$344)|0);
                  $346 = ($345|0)==(0);
                  if ($346) {
                   $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                   break L361;
                  }
                 }
                } while(0);
                $347 = HEAP32[$268>>2]|0;
                $348 = $347 & 8;
                $349 = ($348|0)==(0);
                if ($349) {
                 break;
                }
                $350 = ((($$1516640$i)) + 28|0);
                $351 = HEAP32[$350>>2]|0;
                $352 = HEAP32[$9>>2]|0;
                $353 = $352 & 2;
                $354 = (_tre_neg_char_classes_match($351,$$2458$i,$353)|0);
                $355 = ($354|0)==(0);
                if (!($355)) {
                 $$11528$i = $$7524639$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                 break L361;
                }
               }
              } while(0);
              $356 = ($$0488643$i|0)==(0|0);
              if ($356) {
               $357 = HEAP32[$358>>2]|0;
               $359 = ((($$1516640$i)) + 16|0);
               $360 = HEAP32[$359>>2]|0;
               $$11528$i = $$7524639$i;$$1489$i = $357;$$6538$i = $360;
               break;
              }
              $361 = ((($$7524639$i)) + 28|0);
              $362 = HEAP32[$361>>2]|0;
              $363 = ($362|0)==(0|0);
              if ($363) {
               $364 = (___tre_mem_alloc_impl($27,0,0,0,32)|0);
               $365 = ($364|0)==(0|0);
               if ($365) {
                label = 148;
                break L359;
               }
               $366 = ((($364)) + 24|0);
               HEAP32[$366>>2] = $$7524639$i;
               $367 = ((($364)) + 28|0);
               HEAP32[$367>>2] = 0;
               $368 = HEAP32[$13>>2]|0;
               $369 = $368 << 2;
               $370 = (___tre_mem_alloc_impl($27,0,0,0,$369)|0);
               $371 = ((($364)) + 20|0);
               HEAP32[$371>>2] = $370;
               $372 = ($370|0)==(0|0);
               if ($372) {
                label = 155;
                break L359;
               }
               HEAP32[$361>>2] = $364;
               $$9526$i = $364;
              } else {
               $$9526$i = $362;
              }
              HEAP32[$$9526$i>>2] = $$2471$i;
              $373 = ((($$9526$i)) + 4|0);
              HEAP32[$373>>2] = $$3465$i;
              $374 = HEAP32[$358>>2]|0;
              $375 = ((($$9526$i)) + 8|0);
              HEAP32[$375>>2] = $374;
              $376 = ((($$1516640$i)) + 12|0);
              $377 = HEAP32[$376>>2]|0;
              $378 = ((($$9526$i)) + 12|0);
              HEAP32[$378>>2] = $377;
              $379 = HEAP32[$6>>2]|0;
              $380 = ((($$9526$i)) + 16|0);
              HEAP32[$380>>2] = $379;
              $381 = HEAP32[$13>>2]|0;
              $382 = ($381|0)>(0);
              if ($382) {
               $383 = ((($$9526$i)) + 20|0);
               $384 = HEAP32[$383>>2]|0;
               $$0455630$i = 0;
               while(1) {
                $385 = (($$0551$i) + ($$0455630$i<<2)|0);
                $386 = HEAP32[$385>>2]|0;
                $387 = (($384) + ($$0455630$i<<2)|0);
                HEAP32[$387>>2] = $386;
                $388 = (($$0455630$i) + 1)|0;
                $389 = HEAP32[$13>>2]|0;
                $390 = ($388|0)<($389|0);
                if ($390) {
                 $$0455630$i = $388;
                } else {
                 break;
                }
               }
              }
              $391 = ((($$1516640$i)) + 16|0);
              $392 = HEAP32[$391>>2]|0;
              $393 = ($392|0)==(0|0);
              if ($393) {
               $$11528$i = $$9526$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
               break;
              }
              $394 = HEAP32[$392>>2]|0;
              $395 = ($394|0)>(-1);
              if (!($395)) {
               $$11528$i = $$9526$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
               break;
              }
              $396 = ((($$9526$i)) + 20|0);
              $397 = HEAP32[$396>>2]|0;
              $$0453634$i73 = $392;$399 = $394;
              while(1) {
               $398 = (($397) + ($399<<2)|0);
               HEAP32[$398>>2] = $$2471$i;
               $400 = ((($$0453634$i73)) + 4|0);
               $401 = HEAP32[$400>>2]|0;
               $402 = ($401|0)>(-1);
               if ($402) {
                $$0453634$i73 = $400;$399 = $401;
               } else {
                $$11528$i = $$9526$i;$$1489$i = $$0488643$i;$$6538$i = $$5537638$i;
                break;
               }
              }
             }
            } while(0);
            $403 = ((($$1516640$i)) + 32|0);
            $404 = ((($$1516640$i)) + 40|0);
            $405 = HEAP32[$404>>2]|0;
            $406 = ($405|0)==(0|0);
            if ($406) {
             label = 170;
             break;
            } else {
             $$0488643$i = $$1489$i;$$1516640$i = $403;$$5537638$i = $$6538$i;$$7524639$i = $$11528$i;$358 = $404;
            }
           }
           if ((label|0) == 148) {
            label = 0;
            ___tre_mem_destroy($27);
            if (!($56)) {
             _free($$0551$i);
            }
            if (!($57)) {
             _free($$0513$i);
            }
            if ($58) {
             $$10542$i = $$5537638$i;$$14531$i = $$7524639$i;$$4495$i = $$1492$i;$$5461$i = $$2458$i;$$5474$i = $$2471$i;$$5504$i = 1;$$5550$i = $$2547$i;$$6468$i = $$3465$i;$$9484$i = $$6481$i;
             break;
            }
            _free($$0543$ph$i);
            $$10542$i = $$5537638$i;$$14531$i = $$7524639$i;$$4495$i = $$1492$i;$$5461$i = $$2458$i;$$5474$i = $$2471$i;$$5504$i = 1;$$5550$i = $$2547$i;$$6468$i = $$3465$i;$$9484$i = $$6481$i;
            break;
           }
           else if ((label|0) == 155) {
            label = 0;
            ___tre_mem_destroy($27);
            if (!($56)) {
             _free($$0551$i);
            }
            if (!($57)) {
             _free($$0513$i);
            }
            if ($58) {
             $$10542$i = $$5537638$i;$$14531$i = $$7524639$i;$$4495$i = $$1492$i;$$5461$i = $$2458$i;$$5474$i = $$2471$i;$$5504$i = 1;$$5550$i = $$2547$i;$$6468$i = $$3465$i;$$9484$i = $$6481$i;
             break;
            }
            _free($$0543$ph$i);
            $$10542$i = $$5537638$i;$$14531$i = $$7524639$i;$$4495$i = $$1492$i;$$5461$i = $$2458$i;$$5474$i = $$2471$i;$$5504$i = 1;$$5550$i = $$2547$i;$$6468$i = $$3465$i;$$9484$i = $$6481$i;
            break;
           }
           else if ((label|0) == 170) {
            label = 0;
            $407 = ($$1489$i|0)==(0|0);
            if ($407) {
             $$12529$i = $$11528$i;$$2493$i = $$1492$i;$$3459$i = $$2458$i;$$3472$i = $$2471$i;$$3548$i = $$2547$i;$$4466$i = $$3465$i;$$7482$i = $$6481$i;$$8540$i = $$6538$i;
             label = 174;
             continue L315;
            }
            $408 = ($$6538$i|0)==(0|0);
            if ($408) {
             $$10542$i = 0;$$14531$i = $$11528$i;$$4495$i = $$1492$i;$$5461$i = $$2458$i;$$5474$i = $$2471$i;$$5504$i = 0;$$5550$i = $$1489$i;$$6468$i = $$3465$i;$$9484$i = $$6481$i;
             break;
            }
            $409 = HEAP32[$$6538$i>>2]|0;
            $410 = ($409|0)>(-1);
            if ($410) {
             $$7539650$i = $$6538$i;$413 = $409;
            } else {
             $$10542$i = $$6538$i;$$14531$i = $$11528$i;$$4495$i = $$1492$i;$$5461$i = $$2458$i;$$5474$i = $$2471$i;$$5504$i = 0;$$5550$i = $$1489$i;$$6468$i = $$3465$i;$$9484$i = $$6481$i;
             break;
            }
            while(1) {
             $411 = ((($$7539650$i)) + 4|0);
             $412 = (($$0551$i) + ($413<<2)|0);
             HEAP32[$412>>2] = $$2471$i;
             $414 = HEAP32[$411>>2]|0;
             $415 = ($414|0)>(-1);
             if ($415) {
              $$7539650$i = $411;$413 = $414;
             } else {
              $$10542$i = $411;$$14531$i = $$11528$i;$$4495$i = $$1492$i;$$5461$i = $$2458$i;$$5474$i = $$2471$i;$$5504$i = 0;$$5550$i = $$1489$i;$$6468$i = $$3465$i;$$9484$i = $$6481$i;
              break;
             }
            }
           }
          }
          else if ((label|0) == 174) {
           label = 0;
           $416 = ((($$12529$i)) + 24|0);
           $417 = HEAP32[$416>>2]|0;
           $418 = ($417|0)==(0|0);
           if ($418) {
            $441 = ($$2493$i|0)>(-1);
            $442 = HEAP32[$6>>2]|0;
            $443 = ($442|0)==(0);
            $or$cond556$i = $441 | $443;
            if ($or$cond556$i) {
             $$10542$i = $$8540$i;$$14531$i = $$12529$i;$$4495$i = $$2493$i;$$5461$i = $$3459$i;$$5474$i = $$3472$i;$$5504$i = 27;$$5550$i = $$3548$i;$$6468$i = $$4466$i;$$9484$i = $$7482$i;
             break;
            }
            HEAP32[$6>>2] = $75;
            $$10542$i = $$8540$i;$$14531$i = $$12529$i;$$4495$i = $$2493$i;$$5461$i = $$3459$i;$$5474$i = $$3472$i;$$5504$i = 3;$$5550$i = $$3548$i;$$6468$i = $74;$$9484$i = $$7482$i;
            break;
           }
           $419 = ((($$12529$i)) + 8|0);
           $420 = HEAP32[$419>>2]|0;
           $421 = ((($420)) + 20|0);
           $422 = HEAP32[$421>>2]|0;
           $423 = $422 & 256;
           $424 = ($423|0)==(0);
           if (!($424)) {
            $425 = ((($$12529$i)) + 12|0);
            $426 = HEAP32[$425>>2]|0;
            $427 = (($$0543$ph$i) + ($426<<2)|0);
            HEAP32[$427>>2] = 0;
           }
           $428 = HEAP32[$$12529$i>>2]|0;
           $429 = ((($$12529$i)) + 4|0);
           $430 = HEAP32[$429>>2]|0;
           $431 = ((($$12529$i)) + 16|0);
           $432 = HEAP32[$431>>2]|0;
           HEAP32[$6>>2] = $432;
           $433 = HEAP32[$13>>2]|0;
           $434 = ($433|0)>(0);
           if (!($434)) {
            $$10542$i = $$8540$i;$$14531$i = $417;$$4495$i = $$2493$i;$$5461$i = $$3459$i;$$5474$i = $428;$$5504$i = 0;$$5550$i = $420;$$6468$i = $430;$$9484$i = $$7482$i;
            break;
           }
           $435 = ((($$12529$i)) + 20|0);
           $436 = HEAP32[$435>>2]|0;
           $$0626$i = 0;
           while(1) {
            $437 = (($436) + ($$0626$i<<2)|0);
            $438 = HEAP32[$437>>2]|0;
            $439 = (($$0551$i) + ($$0626$i<<2)|0);
            HEAP32[$439>>2] = $438;
            $440 = (($$0626$i) + 1)|0;
            $exitcond95 = ($440|0)==($433|0);
            if ($exitcond95) {
             $$10542$i = $$8540$i;$$14531$i = $417;$$4495$i = $$2493$i;$$5461$i = $$3459$i;$$5474$i = $428;$$5504$i = 0;$$5550$i = $420;$$6468$i = $430;$$9484$i = $$7482$i;
             break;
            } else {
             $$0626$i = $440;
            }
           }
          }
         } while(0);
         switch ($$5504$i|0) {
         case 2:  {
          $$052 = 0;$$1514$i = $$0513$i;$$1544$i = $$0543$ph$i;$$1552$i = $$0551$i;$$7512$i = 1;
          break L225;
          break;
         }
         case 27:  {
          label = 184;
          break L233;
          break;
         }
         case 0:  {
          $$0456$i = $$5461$i;$$0469$i = $$5474$i;$$1463$i = $$6468$i;$$1492$i = $$4495$i;$$2477$i = $$9484$i;$$2547$i = $$5550$i;$$4536$i = $$10542$i;$$6523$i = $$14531$i;
          label = 82;
          break;
         }
         case 3:  {
          break L315;
          break;
         }
         default: {
          $$1 = 0;$$15$i = 12;
          break L218;
         }
         }
        }
        $$pre$i = HEAP32[$13>>2]|0;
        $$0462$i = $$6468$i;$$0475$i = $$9484$i;$$0485$i = $70;$$0491$i = $$4495$i;$$0517$i = $$14531$i;$59 = $$pre$i;
       }
       if ((label|0) == 56) {
        ___tre_mem_destroy($27);
        if (!($56)) {
         _free($$0551$i);
        }
        if (!($57)) {
         _free($$0513$i);
        }
        if ($58) {
         $$1 = 0;$$15$i = 12;
         break L218;
        }
        _free($$0543$ph$i);
        $$1 = 0;$$15$i = 12;
        break L218;
       }
       else if ((label|0) == 63) {
        ___tre_mem_destroy($27);
        if (!($56)) {
         _free($$0551$i);
        }
        if (!($57)) {
         _free($$0513$i);
        }
        if ($58) {
         $$1 = 0;$$15$i = 12;
         break L218;
        }
        _free($$0543$ph$i);
        $$1 = 0;$$15$i = 12;
        break L218;
       }
       else if ((label|0) == 184) {
        $$4495$lobit$i = $$4495$i >>> 31;
        $$052 = $$4495$i;$$1514$i = $$0513$i;$$1544$i = $$0543$ph$i;$$1552$i = $$0551$i;$$7512$i = $$4495$lobit$i;
        break;
       }
      }
     } while(0);
     ___tre_mem_destroy($27);
     $444 = ($$1552$i|0)==(0|0);
     if (!($444)) {
      _free($$1552$i);
     }
     $445 = ($$1514$i|0)==(0|0);
     if (!($445)) {
      _free($$1514$i);
     }
     $446 = ($$1544$i|0)==(0|0);
     if ($446) {
      $$1 = $$052;$$15$i = $$7512$i;
     } else {
      _free($$1544$i);
      $$1 = $$052;$$15$i = $$7512$i;
     }
    }
   } while(0);
   $$026 = $$15$i;$$4 = $$1;
  }
  $828 = ($$026|0)==(0);
  if ($828) {
   $829 = HEAP32[$9>>2]|0;
   _tre_fill_pmatch($$,$3,$829,$8,$$0,$$4);
  }
  $830 = ($$0|0)==(0|0);
  if ($830) {
   $$027 = $$026;
  } else {
   _free($$0);
   $$027 = $$026;
  }
 }
 STACKTOP = sp;return ($$027|0);
}
function _tre_tag_order($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$018 = 0, $$019 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = ($0|0)>(0);
 L1: do {
  if ($4) {
   $$019 = 0;
   while(1) {
    $5 = (($1) + ($$019<<2)|0);
    $6 = HEAP32[$5>>2]|0;
    $7 = ($6|0)==(0);
    $8 = (($2) + ($$019<<2)|0);
    $9 = HEAP32[$8>>2]|0;
    $10 = (($3) + ($$019<<2)|0);
    $11 = HEAP32[$10>>2]|0;
    if ($7) {
     $12 = ($9|0)<($11|0);
     if ($12) {
      $$018 = 1;
      break L1;
     }
     $13 = ($9|0)>($11|0);
     if ($13) {
      $$018 = 0;
      break L1;
     }
    } else {
     $14 = ($9|0)>($11|0);
     if ($14) {
      $$018 = 1;
      break L1;
     }
     $15 = ($9|0)<($11|0);
     if ($15) {
      $$018 = 0;
      break L1;
     }
    }
    $16 = (($$019) + 1)|0;
    $17 = ($16|0)<($0|0);
    if ($17) {
     $$019 = $16;
    } else {
     $$018 = 0;
     break;
    }
   }
  } else {
   $$018 = 0;
  }
 } while(0);
 return ($$018|0);
}
function _tre_fill_pmatch($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $$07984 = 0, $$090 = 0, $$187 = 0, $$2$ph = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond81 = 0, $or$cond8189 = 0, $or$cond82 = 0, $or$cond8286 = 0, $or$cond98 = 0, $scevgep = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $6 = ($5|0)>(-1);
 $7 = $2 & 8;
 $8 = ($7|0)==(0);
 $or$cond = $8 & $6;
 if ($or$cond) {
  $12 = ((($3)) + 16|0);
  $13 = HEAP32[$12>>2]|0;
  $14 = ((($3)) + 28|0);
  $15 = HEAP32[$14>>2]|0;
  $16 = ($15|0)!=(0);
  $17 = ($0|0)!=(0);
  $or$cond8189 = $17 & $16;
  if ($or$cond8189) {
   $18 = ((($3)) + 48|0);
   $$090 = 0;
   while(1) {
    $21 = (($13) + (($$090*12)|0)|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = HEAP32[$18>>2]|0;
    $24 = ($22|0)==($23|0);
    if ($24) {
     $28 = $5;
    } else {
     $25 = (($4) + ($22<<2)|0);
     $26 = HEAP32[$25>>2]|0;
     $28 = $26;
    }
    $27 = (($1) + ($$090<<3)|0);
    HEAP32[$27>>2] = $28;
    $29 = (((($13) + (($$090*12)|0)|0)) + 4|0);
    $30 = HEAP32[$29>>2]|0;
    $31 = HEAP32[$18>>2]|0;
    $32 = ($30|0)==($31|0);
    if ($32) {
     $36 = $5;
    } else {
     $33 = (($4) + ($30<<2)|0);
     $34 = HEAP32[$33>>2]|0;
     $36 = $34;
    }
    $35 = (((($1) + ($$090<<3)|0)) + 4|0);
    HEAP32[$35>>2] = $36;
    $37 = ($28|0)==(-1);
    $38 = ($36|0)==(-1);
    $or$cond98 = $37 | $38;
    if ($or$cond98) {
     HEAP32[$35>>2] = -1;
     HEAP32[$27>>2] = -1;
    }
    $39 = (($$090) + 1)|0;
    $40 = HEAP32[$14>>2]|0;
    $41 = ($39>>>0)<($40>>>0);
    $42 = ($39>>>0)<($0>>>0);
    $or$cond81 = $42 & $41;
    if ($or$cond81) {
     $$090 = $39;
    } else {
     $19 = $40;
     break;
    }
   }
  } else {
   $19 = $15;
  }
  $20 = ($19|0)!=(0);
  $or$cond8286 = $17 & $20;
  if ($or$cond8286) {
   $$187 = 0;
   while(1) {
    $43 = (((($1) + ($$187<<3)|0)) + 4|0);
    $44 = (((($13) + (($$187*12)|0)|0)) + 8|0);
    $45 = HEAP32[$44>>2]|0;
    $46 = ($45|0)==(0|0);
    if (!($46)) {
     $47 = HEAP32[$45>>2]|0;
     $48 = ($47|0)>(-1);
     if ($48) {
      $49 = (($1) + ($$187<<3)|0);
      $$pre = HEAP32[$49>>2]|0;
      $$07984 = 0;$51 = $47;$53 = $$pre;
      while(1) {
       $50 = (($1) + ($51<<3)|0);
       $52 = HEAP32[$50>>2]|0;
       $54 = ($53|0)<($52|0);
       if ($54) {
        label = 19;
       } else {
        $55 = HEAP32[$43>>2]|0;
        $56 = (((($1) + ($51<<3)|0)) + 4|0);
        $57 = HEAP32[$56>>2]|0;
        $58 = ($55|0)>($57|0);
        if ($58) {
         label = 19;
        } else {
         $66 = $53;
        }
       }
       if ((label|0) == 19) {
        label = 0;
        HEAP32[$43>>2] = -1;
        HEAP32[$49>>2] = -1;
        $66 = -1;
       }
       $59 = (($$07984) + 1)|0;
       $60 = (($45) + ($59<<2)|0);
       $61 = HEAP32[$60>>2]|0;
       $62 = ($61|0)>(-1);
       if ($62) {
        $$07984 = $59;$51 = $61;$53 = $66;
       } else {
        break;
       }
      }
     }
    }
    $63 = (($$187) + 1)|0;
    $64 = ($63>>>0)<($19>>>0);
    $65 = ($63>>>0)<($0>>>0);
    $or$cond82 = $65 & $64;
    if ($or$cond82) {
     $$187 = $63;
    } else {
     $$2$ph = $63;
     break;
    }
   }
  } else {
   $$2$ph = 0;
  }
 } else {
  $$2$ph = 0;
 }
 $9 = ($$2$ph>>>0)<($0>>>0);
 if ($9) {
  $scevgep = (($1) + ($$2$ph<<3)|0);
  $10 = (($0) - ($$2$ph))|0;
  $11 = $10 << 3;
  _memset(($scevgep|0),-1,($11|0))|0;
 }
 return;
}
function _tre_neg_char_classes_match($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $$0 = 0, $$01011 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 $3 = HEAP32[$0>>2]|0;
 $4 = ($3|0)==(0);
 L1: do {
  if ($4) {
   $$0 = 0;
  } else {
   $5 = ($2|0)==(0);
   $$01011 = $0;$6 = $3;
   while(1) {
    if ($5) {
     $7 = (_iswctype($1,$6)|0);
     $8 = ($7|0)==(0);
     if (!($8)) {
      $$0 = 1;
      break L1;
     }
    } else {
     $9 = (_towupper($1)|0);
     $10 = HEAP32[$$01011>>2]|0;
     $11 = (_iswctype($9,$10)|0);
     $12 = ($11|0)==(0);
     if (!($12)) {
      $$0 = 1;
      break L1;
     }
     $13 = (_towlower($1)|0);
     $14 = HEAP32[$$01011>>2]|0;
     $15 = (_iswctype($13,$14)|0);
     $16 = ($15|0)==(0);
     if (!($16)) {
      $$0 = 1;
      break L1;
     }
    }
    $17 = ((($$01011)) + 4|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ($18|0)==(0);
    if ($19) {
     $$0 = 0;
     break;
    } else {
     $$01011 = $17;$6 = $18;
    }
   }
  }
 } while(0);
 return ($$0|0);
}
function _fwrite($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $9 = (___lockfile($3)|0);
  $phitmp = ($9|0)==(0);
  $10 = (___fwritex($0,$4,$3)|0);
  if ($phitmp) {
   $11 = $10;
  } else {
   ___unlockfile($3);
   $11 = $10;
  }
 } else {
  $8 = (___fwritex($0,$4,$3)|0);
  $11 = $8;
 }
 $12 = ($11|0)==($4|0);
 if ($12) {
  $14 = $2;
 } else {
  $13 = (($11>>>0) / ($1>>>0))&-1;
  $14 = $13;
 }
 return ($14|0);
}
function _fputc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($1)) + 76|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = ($3|0)<(0);
 if ($4) {
  label = 3;
 } else {
  $5 = (___lockfile($1)|0);
  $6 = ($5|0)==(0);
  if ($6) {
   label = 3;
  } else {
   $20 = ((($1)) + 75|0);
   $21 = HEAP8[$20>>0]|0;
   $22 = $21 << 24 >> 24;
   $23 = ($22|0)==($0|0);
   if ($23) {
    label = 10;
   } else {
    $24 = ((($1)) + 20|0);
    $25 = HEAP32[$24>>2]|0;
    $26 = ((($1)) + 16|0);
    $27 = HEAP32[$26>>2]|0;
    $28 = ($25>>>0)<($27>>>0);
    if ($28) {
     $29 = $0&255;
     $30 = ((($25)) + 1|0);
     HEAP32[$24>>2] = $30;
     HEAP8[$25>>0] = $29;
     $31 = $0 & 255;
     $33 = $31;
    } else {
     label = 10;
    }
   }
   if ((label|0) == 10) {
    $32 = (___overflow($1,$0)|0);
    $33 = $32;
   }
   ___unlockfile($1);
   $$0 = $33;
  }
 }
 do {
  if ((label|0) == 3) {
   $7 = ((($1)) + 75|0);
   $8 = HEAP8[$7>>0]|0;
   $9 = $8 << 24 >> 24;
   $10 = ($9|0)==($0|0);
   if (!($10)) {
    $11 = ((($1)) + 20|0);
    $12 = HEAP32[$11>>2]|0;
    $13 = ((($1)) + 16|0);
    $14 = HEAP32[$13>>2]|0;
    $15 = ($12>>>0)<($14>>>0);
    if ($15) {
     $16 = $0&255;
     $17 = ((($12)) + 1|0);
     HEAP32[$11>>2] = $17;
     HEAP8[$12>>0] = $16;
     $18 = $0 & 255;
     $$0 = $18;
     break;
    }
   }
   $19 = (___overflow($1,$0)|0);
   $$0 = $19;
  }
 } while(0);
 return ($$0|0);
}
function ___overflow($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0 = 0, $$pre = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 $3 = $1&255;
 HEAP8[$2>>0] = $3;
 $4 = ((($0)) + 16|0);
 $5 = HEAP32[$4>>2]|0;
 $6 = ($5|0)==(0|0);
 if ($6) {
  $7 = (___towrite($0)|0);
  $8 = ($7|0)==(0);
  if ($8) {
   $$pre = HEAP32[$4>>2]|0;
   $12 = $$pre;
   label = 4;
  } else {
   $$0 = -1;
  }
 } else {
  $12 = $5;
  label = 4;
 }
 do {
  if ((label|0) == 4) {
   $9 = ((($0)) + 20|0);
   $10 = HEAP32[$9>>2]|0;
   $11 = ($10>>>0)<($12>>>0);
   if ($11) {
    $13 = $1 & 255;
    $14 = ((($0)) + 75|0);
    $15 = HEAP8[$14>>0]|0;
    $16 = $15 << 24 >> 24;
    $17 = ($13|0)==($16|0);
    if (!($17)) {
     $18 = ((($10)) + 1|0);
     HEAP32[$9>>2] = $18;
     HEAP8[$10>>0] = $3;
     $$0 = $13;
     break;
    }
   }
   $19 = ((($0)) + 36|0);
   $20 = HEAP32[$19>>2]|0;
   $21 = (FUNCTION_TABLE_iiii[$20 & 7]($0,$2,1)|0);
   $22 = ($21|0)==(1);
   if ($22) {
    $23 = HEAP8[$2>>0]|0;
    $24 = $23&255;
    $$0 = $24;
   } else {
    $$0 = -1;
   }
  }
 } while(0);
 STACKTOP = sp;return ($$0|0);
}
function _rewind($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $phitmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ((($0)) + 76|0);
 $2 = HEAP32[$1>>2]|0;
 $3 = ($2|0)>(-1);
 if ($3) {
  $4 = (___lockfile($0)|0);
  $phitmp = ($4|0)==(0);
  (___fseeko_unlocked($0,0,0)|0);
  $5 = HEAP32[$0>>2]|0;
  $6 = $5 & -33;
  HEAP32[$0>>2] = $6;
  if (!($phitmp)) {
   ___unlockfile($0);
  }
 } else {
  (___fseeko_unlocked($0,0,0)|0);
  $7 = HEAP32[$0>>2]|0;
  $8 = $7 & -33;
  HEAP32[$0>>2] = $8;
 }
 return;
}
function _fread($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $$ = 0, $$0 = 0, $$053$ph = 0, $$05357 = 0, $$054$ph = 0, $$05456 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = Math_imul($2, $1)|0;
 $5 = ((($3)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($3)|0);
  $34 = $8;
 } else {
  $34 = 0;
 }
 $9 = ((($3)) + 74|0);
 $10 = HEAP8[$9>>0]|0;
 $11 = $10 << 24 >> 24;
 $12 = (($11) + 255)|0;
 $13 = $12 | $11;
 $14 = $13&255;
 HEAP8[$9>>0] = $14;
 $15 = ((($3)) + 8|0);
 $16 = HEAP32[$15>>2]|0;
 $17 = ((($3)) + 4|0);
 $18 = HEAP32[$17>>2]|0;
 $19 = (($16) - ($18))|0;
 $20 = ($19|0)>(0);
 $21 = $18;
 if ($20) {
  $22 = ($19>>>0)<($4>>>0);
  $$ = $22 ? $19 : $4;
  _memcpy(($0|0),($21|0),($$|0))|0;
  $23 = (($21) + ($$)|0);
  HEAP32[$17>>2] = $23;
  $24 = (($0) + ($$)|0);
  $25 = (($4) - ($$))|0;
  $$053$ph = $25;$$054$ph = $24;
 } else {
  $$053$ph = $4;$$054$ph = $0;
 }
 $26 = ($$053$ph|0)==(0);
 L7: do {
  if ($26) {
   label = 13;
  } else {
   $27 = ((($3)) + 32|0);
   $$05357 = $$053$ph;$$05456 = $$054$ph;
   while(1) {
    $28 = (___toread($3)|0);
    $29 = ($28|0)==(0);
    if (!($29)) {
     break;
    }
    $30 = HEAP32[$27>>2]|0;
    $31 = (FUNCTION_TABLE_iiii[$30 & 7]($3,$$05456,$$05357)|0);
    $32 = (($31) + 1)|0;
    $33 = ($32>>>0)<(2);
    if ($33) {
     break;
    }
    $38 = (($$05357) - ($31))|0;
    $39 = (($$05456) + ($31)|0);
    $40 = ($38|0)==(0);
    if ($40) {
     label = 13;
     break L7;
    } else {
     $$05357 = $38;$$05456 = $39;
    }
   }
   $35 = ($34|0)==(0);
   if (!($35)) {
    ___unlockfile($3);
   }
   $36 = (($4) - ($$05357))|0;
   $37 = (($36>>>0) / ($1>>>0))&-1;
   $$0 = $37;
  }
 } while(0);
 if ((label|0) == 13) {
  $41 = ($34|0)==(0);
  if ($41) {
   $$0 = $2;
  } else {
   ___unlockfile($3);
   $$0 = $2;
  }
 }
 return ($$0|0);
}
function _perror($0) {
 $0 = $0|0;
 var $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = HEAP32[35]|0;
 $2 = (___errno_location()|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = (_strerror($3)|0);
 $5 = ((($1)) + 76|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = ($6|0)>(-1);
 if ($7) {
  $8 = (___lockfile($1)|0);
  $14 = $8;
 } else {
  $14 = 0;
 }
 $9 = ($0|0)==(0|0);
 if (!($9)) {
  $10 = HEAP8[$0>>0]|0;
  $11 = ($10<<24>>24)==(0);
  if (!($11)) {
   $12 = (_strlen($0)|0);
   (_fwrite($0,$12,1,$1)|0);
   (_fputc(58,$1)|0);
   (_fputc(32,$1)|0);
  }
 }
 $13 = (_strlen($4)|0);
 (_fwrite($4,$13,1,$1)|0);
 (_fputc(10,$1)|0);
 $15 = ($14|0)==(0);
 if (!($15)) {
  ___unlockfile($1);
 }
 return;
}
function _sprintf($0,$1,$varargs) {
 $0 = $0|0;
 $1 = $1|0;
 $varargs = $varargs|0;
 var $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $2 = sp;
 HEAP32[$2>>2] = $varargs;
 $3 = (_vsprintf($0,$1,$2)|0);
 STACKTOP = sp;return ($3|0);
}
function _vsprintf($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $3 = (_vsnprintf($0,2147483647,$1,$2)|0);
 return ($3|0);
}
function _printf($0,$varargs) {
 $0 = $0|0;
 $varargs = $varargs|0;
 var $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 HEAP32[$1>>2] = $varargs;
 $2 = HEAP32[64]|0;
 $3 = (_vfprintf($2,$0,$1)|0);
 STACKTOP = sp;return ($3|0);
}
function _atof($0) {
 $0 = $0|0;
 var $1 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (+_strtod($0,0));
 return (+$1);
}
function _strtod($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0.0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (+_strtox($0,$1,1));
 return (+$2);
}
function _strtox($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0.0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(112|0);
 $3 = sp;
 dest=$3; stop=dest+112|0; do { HEAP32[dest>>2]=0|0; dest=dest+4|0; } while ((dest|0) < (stop|0));
 $4 = ((($3)) + 4|0);
 HEAP32[$4>>2] = $0;
 $5 = ((($3)) + 8|0);
 HEAP32[$5>>2] = (-1);
 $6 = ((($3)) + 44|0);
 HEAP32[$6>>2] = $0;
 $7 = ((($3)) + 76|0);
 HEAP32[$7>>2] = -1;
 ___shlim($3,0);
 $8 = (+___floatscan($3,$2,1));
 $9 = ((($3)) + 108|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = HEAP32[$4>>2]|0;
 $12 = HEAP32[$5>>2]|0;
 $13 = (($11) - ($12))|0;
 $14 = (($13) + ($10))|0;
 $15 = ($1|0)==(0|0);
 if (!($15)) {
  $16 = ($14|0)!=(0);
  $17 = (($0) + ($14)|0);
  $18 = $16 ? $17 : $0;
  HEAP32[$1>>2] = $18;
 }
 STACKTOP = sp;return (+$8);
}
function _atoi($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _atol($0) {
 $0 = $0|0;
 var $$0 = 0, $$010$lcssa = 0, $$01016 = 0, $$011 = 0, $$1$ph = 0, $$112$ph = 0, $$11215 = 0, $$pre = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $isdigit = 0, $isdigit14 = 0, $isdigittmp = 0, $isdigittmp13 = 0, $isdigittmp17 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $$011 = $0;
 while(1) {
  $1 = HEAP8[$$011>>0]|0;
  $2 = $1 << 24 >> 24;
  $3 = (_isspace($2)|0);
  $4 = ($3|0)==(0);
  $5 = ((($$011)) + 1|0);
  if ($4) {
   break;
  } else {
   $$011 = $5;
  }
 }
 switch ($2|0) {
 case 45:  {
  $$0 = 1;
  label = 5;
  break;
 }
 case 43:  {
  $$0 = 0;
  label = 5;
  break;
 }
 default: {
  $$1$ph = 0;$$112$ph = $$011;$7 = $1;
 }
 }
 if ((label|0) == 5) {
  $$pre = HEAP8[$5>>0]|0;
  $$1$ph = $$0;$$112$ph = $5;$7 = $$pre;
 }
 $6 = $7 << 24 >> 24;
 $isdigittmp13 = (($6) + -48)|0;
 $isdigit14 = ($isdigittmp13>>>0)<(10);
 if ($isdigit14) {
  $$01016 = 0;$$11215 = $$112$ph;$isdigittmp17 = $isdigittmp13;
  while(1) {
   $8 = ($$01016*10)|0;
   $9 = ((($$11215)) + 1|0);
   $10 = (($8) - ($isdigittmp17))|0;
   $11 = HEAP8[$9>>0]|0;
   $12 = $11 << 24 >> 24;
   $isdigittmp = (($12) + -48)|0;
   $isdigit = ($isdigittmp>>>0)<(10);
   if ($isdigit) {
    $$01016 = $10;$$11215 = $9;$isdigittmp17 = $isdigittmp;
   } else {
    $$010$lcssa = $10;
    break;
   }
  }
 } else {
  $$010$lcssa = 0;
 }
 $13 = ($$1$ph|0)!=(0);
 $14 = (0 - ($$010$lcssa))|0;
 $15 = $13 ? $$010$lcssa : $14;
 return ($15|0);
}
function _select($0,$1,$2,$3,$4) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 var $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 HEAP32[$vararg_buffer>>2] = $0;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $1;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $2;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $3;
 $vararg_ptr4 = ((($vararg_buffer)) + 16|0);
 HEAP32[$vararg_ptr4>>2] = $4;
 $5 = (___syscall142(142,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _recvfrom($0,$1,$2,$3,$4,$5) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 $4 = $4|0;
 $5 = $5|0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $6 = sp + 8|0;
 HEAP32[$6>>2] = $0;
 $7 = ((($6)) + 4|0);
 $8 = $1;
 HEAP32[$7>>2] = $8;
 $9 = ((($6)) + 8|0);
 HEAP32[$9>>2] = $2;
 $10 = ((($6)) + 12|0);
 HEAP32[$10>>2] = $3;
 $11 = ((($6)) + 16|0);
 $12 = $4;
 HEAP32[$11>>2] = $12;
 $13 = ((($6)) + 20|0);
 $14 = $5;
 HEAP32[$13>>2] = $14;
 HEAP32[$vararg_buffer>>2] = 12;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $6;
 $15 = (___syscall102(102,($vararg_buffer|0))|0);
 $16 = (___syscall_ret($15)|0);
 STACKTOP = sp;return ($16|0);
}
function _htons($0) {
 $0 = $0|0;
 var $rev$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev$i = (_llvm_bswap_i16(($0|0))|0);
 return ($rev$i|0);
}
function _htonl($0) {
 $0 = $0|0;
 var $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = (_llvm_bswap_i32(($0|0))|0);
 return ($1|0);
}
function _bind($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 HEAP32[$6>>2] = $2;
 $7 = ((($3)) + 12|0);
 HEAP32[$7>>2] = 0;
 $8 = ((($3)) + 16|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 20|0);
 HEAP32[$9>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $10 = (___syscall102(102,($vararg_buffer|0))|0);
 $11 = (___syscall_ret($10)|0);
 STACKTOP = sp;return ($11|0);
}
function _accept($0,$1,$2) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 var $10 = 0, $11 = 0, $12 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $3 = sp + 8|0;
 HEAP32[$3>>2] = $0;
 $4 = ((($3)) + 4|0);
 $5 = $1;
 HEAP32[$4>>2] = $5;
 $6 = ((($3)) + 8|0);
 $7 = $2;
 HEAP32[$6>>2] = $7;
 $8 = ((($3)) + 12|0);
 HEAP32[$8>>2] = 0;
 $9 = ((($3)) + 16|0);
 HEAP32[$9>>2] = 0;
 $10 = ((($3)) + 20|0);
 HEAP32[$10>>2] = 0;
 HEAP32[$vararg_buffer>>2] = 5;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $3;
 $11 = (___syscall102(102,($vararg_buffer|0))|0);
 $12 = (___syscall_ret($11)|0);
 STACKTOP = sp;return ($12|0);
}
function _inet_ntoa($0) {
 $0 = $0|0;
 var $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $vararg_buffer = sp;
 $1 = HEAP32[$0>>2]|0;
 $2 = $1 & 255;
 $3 = $1 >>> 8;
 $4 = $3 & 255;
 $5 = $1 >>> 16;
 $6 = $5 & 255;
 $7 = $1 >>> 24;
 HEAP32[$vararg_buffer>>2] = $2;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $4;
 $vararg_ptr2 = ((($vararg_buffer)) + 8|0);
 HEAP32[$vararg_ptr2>>2] = $6;
 $vararg_ptr3 = ((($vararg_buffer)) + 12|0);
 HEAP32[$vararg_ptr3>>2] = $7;
 (_snprintf(1360198,16,28297,$vararg_buffer)|0);
 STACKTOP = sp;return (1360198|0);
}
function _listen($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(32|0);
 $vararg_buffer = sp;
 $2 = sp + 8|0;
 HEAP32[$2>>2] = $0;
 $3 = ((($2)) + 4|0);
 HEAP32[$3>>2] = $1;
 $4 = ((($2)) + 8|0);
 ;HEAP32[$4>>2]=0|0;HEAP32[$4+4>>2]=0|0;HEAP32[$4+8>>2]=0|0;HEAP32[$4+12>>2]=0|0;
 HEAP32[$vararg_buffer>>2] = 4;
 $vararg_ptr1 = ((($vararg_buffer)) + 4|0);
 HEAP32[$vararg_ptr1>>2] = $2;
 $5 = (___syscall102(102,($vararg_buffer|0))|0);
 $6 = (___syscall_ret($5)|0);
 STACKTOP = sp;return ($6|0);
}
function _ntohs($0) {
 $0 = $0|0;
 var $rev$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $rev$i = (_llvm_bswap_i16(($0|0))|0);
 return ($rev$i|0);
}
function _recv($0,$1,$2,$3) {
 $0 = $0|0;
 $1 = $1|0;
 $2 = $2|0;
 $3 = $3|0;
 var $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $4 = (_recvfrom($0,$1,$2,$3,0,0)|0);
 return ($4|0);
}
function _malloc($0) {
 $0 = $0|0;
 var $$$0190$i = 0, $$$0191$i = 0, $$$4349$i = 0, $$$i = 0, $$0 = 0, $$0$i$i = 0, $$0$i$i$i = 0, $$0$i17$i = 0, $$0$i18$i = 0, $$01$i$i = 0, $$0187$i = 0, $$0189$i = 0, $$0190$i = 0, $$0191$i = 0, $$0197 = 0, $$0199 = 0, $$0206$i$i = 0, $$0207$i$i = 0, $$0211$i$i = 0, $$0212$i$i = 0;
 var $$024370$i = 0, $$0286$i$i = 0, $$0287$i$i = 0, $$0288$i$i = 0, $$0294$i$i = 0, $$0295$i$i = 0, $$0340$i = 0, $$0342$i = 0, $$0343$i = 0, $$0345$i = 0, $$0351$i = 0, $$0356$i = 0, $$0357$$i = 0, $$0357$i = 0, $$0359$i = 0, $$0360$i = 0, $$0366$i = 0, $$1194$i = 0, $$1196$i = 0, $$124469$i = 0;
 var $$1290$i$i = 0, $$1292$i$i = 0, $$1341$i = 0, $$1346$i = 0, $$1361$i = 0, $$1368$i = 0, $$1372$i = 0, $$2247$ph$i = 0, $$2253$ph$i = 0, $$2353$i = 0, $$3$i = 0, $$3$i$i = 0, $$3$i201 = 0, $$3348$i = 0, $$3370$i = 0, $$4$lcssa$i = 0, $$413$i = 0, $$4349$lcssa$i = 0, $$434912$i = 0, $$4355$$4$i = 0;
 var $$4355$ph$i = 0, $$435511$i = 0, $$5256$i = 0, $$723947$i = 0, $$748$i = 0, $$not$i = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i19$i = 0, $$pre$i205 = 0, $$pre$i208 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i20$iZ2D = 0, $$pre$phi$i206Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi10$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre9$i$i = 0, $1 = 0;
 var $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0, $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0;
 var $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0, $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0;
 var $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0, $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0;
 var $1053 = 0, $1054 = 0, $1055 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0;
 var $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0;
 var $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0;
 var $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0;
 var $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0;
 var $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0;
 var $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0;
 var $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0;
 var $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0;
 var $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0;
 var $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0;
 var $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0;
 var $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0;
 var $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0, $354 = 0, $355 = 0;
 var $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0, $372 = 0, $373 = 0;
 var $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0, $390 = 0, $391 = 0;
 var $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0, $408 = 0, $409 = 0;
 var $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0, $426 = 0, $427 = 0;
 var $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0, $444 = 0, $445 = 0;
 var $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0, $462 = 0, $463 = 0;
 var $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0, $480 = 0, $481 = 0;
 var $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0, $499 = 0, $5 = 0;
 var $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0, $516 = 0, $517 = 0;
 var $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0, $534 = 0, $535 = 0;
 var $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0, $552 = 0, $553 = 0;
 var $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0, $570 = 0, $571 = 0;
 var $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0, $589 = 0, $59 = 0;
 var $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0, $606 = 0, $607 = 0;
 var $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0, $624 = 0, $625 = 0;
 var $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0, $642 = 0, $643 = 0;
 var $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0, $660 = 0, $661 = 0;
 var $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0, $679 = 0, $68 = 0;
 var $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0, $697 = 0, $698 = 0;
 var $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0, $714 = 0, $715 = 0;
 var $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0, $732 = 0, $733 = 0;
 var $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0, $750 = 0, $751 = 0;
 var $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0, $769 = 0, $77 = 0;
 var $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0, $787 = 0, $788 = 0;
 var $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0, $804 = 0, $805 = 0;
 var $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0, $822 = 0, $823 = 0;
 var $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0, $840 = 0, $841 = 0;
 var $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0, $859 = 0, $86 = 0;
 var $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0, $877 = 0, $878 = 0;
 var $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0, $895 = 0, $896 = 0;
 var $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0, $912 = 0, $913 = 0;
 var $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0, $930 = 0, $931 = 0;
 var $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0, $949 = 0, $95 = 0;
 var $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0, $967 = 0, $968 = 0;
 var $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0, $985 = 0, $986 = 0;
 var $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $cond$i = 0, $cond$i$i = 0, $cond$i204 = 0, $exitcond$i$i = 0, $not$$i$i = 0, $not$$i22$i = 0;
 var $not$7$i = 0, $or$cond$i = 0, $or$cond$i211 = 0, $or$cond1$i = 0, $or$cond1$i210 = 0, $or$cond10$i = 0, $or$cond11$i = 0, $or$cond12$i = 0, $or$cond2$i = 0, $or$cond5$i = 0, $or$cond50$i = 0, $or$cond7$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16|0; if ((STACKTOP|0) >= (STACK_MAX|0)) abortStackOverflow(16|0);
 $1 = sp;
 $2 = ($0>>>0)<(245);
 do {
  if ($2) {
   $3 = ($0>>>0)<(11);
   $4 = (($0) + 11)|0;
   $5 = $4 & -8;
   $6 = $3 ? 16 : $5;
   $7 = $6 >>> 3;
   $8 = HEAP32[31821]|0;
   $9 = $8 >>> $7;
   $10 = $9 & 3;
   $11 = ($10|0)==(0);
   if (!($11)) {
    $12 = $9 & 1;
    $13 = $12 ^ 1;
    $14 = (($13) + ($7))|0;
    $15 = $14 << 1;
    $16 = (127324 + ($15<<2)|0);
    $17 = ((($16)) + 8|0);
    $18 = HEAP32[$17>>2]|0;
    $19 = ((($18)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ($16|0)==($20|0);
    do {
     if ($21) {
      $22 = 1 << $14;
      $23 = $22 ^ -1;
      $24 = $8 & $23;
      HEAP32[31821] = $24;
     } else {
      $25 = HEAP32[(127300)>>2]|0;
      $26 = ($20>>>0)<($25>>>0);
      if ($26) {
       _abort();
       // unreachable;
      }
      $27 = ((($20)) + 12|0);
      $28 = HEAP32[$27>>2]|0;
      $29 = ($28|0)==($18|0);
      if ($29) {
       HEAP32[$27>>2] = $16;
       HEAP32[$17>>2] = $20;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $30 = $14 << 3;
    $31 = $30 | 3;
    $32 = ((($18)) + 4|0);
    HEAP32[$32>>2] = $31;
    $33 = (($18) + ($30)|0);
    $34 = ((($33)) + 4|0);
    $35 = HEAP32[$34>>2]|0;
    $36 = $35 | 1;
    HEAP32[$34>>2] = $36;
    $$0 = $19;
    STACKTOP = sp;return ($$0|0);
   }
   $37 = HEAP32[(127292)>>2]|0;
   $38 = ($6>>>0)>($37>>>0);
   if ($38) {
    $39 = ($9|0)==(0);
    if (!($39)) {
     $40 = $9 << $7;
     $41 = 2 << $7;
     $42 = (0 - ($41))|0;
     $43 = $41 | $42;
     $44 = $40 & $43;
     $45 = (0 - ($44))|0;
     $46 = $44 & $45;
     $47 = (($46) + -1)|0;
     $48 = $47 >>> 12;
     $49 = $48 & 16;
     $50 = $47 >>> $49;
     $51 = $50 >>> 5;
     $52 = $51 & 8;
     $53 = $52 | $49;
     $54 = $50 >>> $52;
     $55 = $54 >>> 2;
     $56 = $55 & 4;
     $57 = $53 | $56;
     $58 = $54 >>> $56;
     $59 = $58 >>> 1;
     $60 = $59 & 2;
     $61 = $57 | $60;
     $62 = $58 >>> $60;
     $63 = $62 >>> 1;
     $64 = $63 & 1;
     $65 = $61 | $64;
     $66 = $62 >>> $64;
     $67 = (($65) + ($66))|0;
     $68 = $67 << 1;
     $69 = (127324 + ($68<<2)|0);
     $70 = ((($69)) + 8|0);
     $71 = HEAP32[$70>>2]|0;
     $72 = ((($71)) + 8|0);
     $73 = HEAP32[$72>>2]|0;
     $74 = ($69|0)==($73|0);
     do {
      if ($74) {
       $75 = 1 << $67;
       $76 = $75 ^ -1;
       $77 = $8 & $76;
       HEAP32[31821] = $77;
       $98 = $77;
      } else {
       $78 = HEAP32[(127300)>>2]|0;
       $79 = ($73>>>0)<($78>>>0);
       if ($79) {
        _abort();
        // unreachable;
       }
       $80 = ((($73)) + 12|0);
       $81 = HEAP32[$80>>2]|0;
       $82 = ($81|0)==($71|0);
       if ($82) {
        HEAP32[$80>>2] = $69;
        HEAP32[$70>>2] = $73;
        $98 = $8;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $83 = $67 << 3;
     $84 = (($83) - ($6))|0;
     $85 = $6 | 3;
     $86 = ((($71)) + 4|0);
     HEAP32[$86>>2] = $85;
     $87 = (($71) + ($6)|0);
     $88 = $84 | 1;
     $89 = ((($87)) + 4|0);
     HEAP32[$89>>2] = $88;
     $90 = (($87) + ($84)|0);
     HEAP32[$90>>2] = $84;
     $91 = ($37|0)==(0);
     if (!($91)) {
      $92 = HEAP32[(127304)>>2]|0;
      $93 = $37 >>> 3;
      $94 = $93 << 1;
      $95 = (127324 + ($94<<2)|0);
      $96 = 1 << $93;
      $97 = $98 & $96;
      $99 = ($97|0)==(0);
      if ($99) {
       $100 = $98 | $96;
       HEAP32[31821] = $100;
       $$pre = ((($95)) + 8|0);
       $$0199 = $95;$$pre$phiZ2D = $$pre;
      } else {
       $101 = ((($95)) + 8|0);
       $102 = HEAP32[$101>>2]|0;
       $103 = HEAP32[(127300)>>2]|0;
       $104 = ($102>>>0)<($103>>>0);
       if ($104) {
        _abort();
        // unreachable;
       } else {
        $$0199 = $102;$$pre$phiZ2D = $101;
       }
      }
      HEAP32[$$pre$phiZ2D>>2] = $92;
      $105 = ((($$0199)) + 12|0);
      HEAP32[$105>>2] = $92;
      $106 = ((($92)) + 8|0);
      HEAP32[$106>>2] = $$0199;
      $107 = ((($92)) + 12|0);
      HEAP32[$107>>2] = $95;
     }
     HEAP32[(127292)>>2] = $84;
     HEAP32[(127304)>>2] = $87;
     $$0 = $72;
     STACKTOP = sp;return ($$0|0);
    }
    $108 = HEAP32[(127288)>>2]|0;
    $109 = ($108|0)==(0);
    if ($109) {
     $$0197 = $6;
    } else {
     $110 = (0 - ($108))|0;
     $111 = $108 & $110;
     $112 = (($111) + -1)|0;
     $113 = $112 >>> 12;
     $114 = $113 & 16;
     $115 = $112 >>> $114;
     $116 = $115 >>> 5;
     $117 = $116 & 8;
     $118 = $117 | $114;
     $119 = $115 >>> $117;
     $120 = $119 >>> 2;
     $121 = $120 & 4;
     $122 = $118 | $121;
     $123 = $119 >>> $121;
     $124 = $123 >>> 1;
     $125 = $124 & 2;
     $126 = $122 | $125;
     $127 = $123 >>> $125;
     $128 = $127 >>> 1;
     $129 = $128 & 1;
     $130 = $126 | $129;
     $131 = $127 >>> $129;
     $132 = (($130) + ($131))|0;
     $133 = (127588 + ($132<<2)|0);
     $134 = HEAP32[$133>>2]|0;
     $135 = ((($134)) + 4|0);
     $136 = HEAP32[$135>>2]|0;
     $137 = $136 & -8;
     $138 = (($137) - ($6))|0;
     $$0189$i = $134;$$0190$i = $134;$$0191$i = $138;
     while(1) {
      $139 = ((($$0189$i)) + 16|0);
      $140 = HEAP32[$139>>2]|0;
      $141 = ($140|0)==(0|0);
      if ($141) {
       $142 = ((($$0189$i)) + 20|0);
       $143 = HEAP32[$142>>2]|0;
       $144 = ($143|0)==(0|0);
       if ($144) {
        break;
       } else {
        $146 = $143;
       }
      } else {
       $146 = $140;
      }
      $145 = ((($146)) + 4|0);
      $147 = HEAP32[$145>>2]|0;
      $148 = $147 & -8;
      $149 = (($148) - ($6))|0;
      $150 = ($149>>>0)<($$0191$i>>>0);
      $$$0191$i = $150 ? $149 : $$0191$i;
      $$$0190$i = $150 ? $146 : $$0190$i;
      $$0189$i = $146;$$0190$i = $$$0190$i;$$0191$i = $$$0191$i;
     }
     $151 = HEAP32[(127300)>>2]|0;
     $152 = ($$0190$i>>>0)<($151>>>0);
     if ($152) {
      _abort();
      // unreachable;
     }
     $153 = (($$0190$i) + ($6)|0);
     $154 = ($$0190$i>>>0)<($153>>>0);
     if (!($154)) {
      _abort();
      // unreachable;
     }
     $155 = ((($$0190$i)) + 24|0);
     $156 = HEAP32[$155>>2]|0;
     $157 = ((($$0190$i)) + 12|0);
     $158 = HEAP32[$157>>2]|0;
     $159 = ($158|0)==($$0190$i|0);
     do {
      if ($159) {
       $169 = ((($$0190$i)) + 20|0);
       $170 = HEAP32[$169>>2]|0;
       $171 = ($170|0)==(0|0);
       if ($171) {
        $172 = ((($$0190$i)) + 16|0);
        $173 = HEAP32[$172>>2]|0;
        $174 = ($173|0)==(0|0);
        if ($174) {
         $$3$i = 0;
         break;
        } else {
         $$1194$i = $173;$$1196$i = $172;
        }
       } else {
        $$1194$i = $170;$$1196$i = $169;
       }
       while(1) {
        $175 = ((($$1194$i)) + 20|0);
        $176 = HEAP32[$175>>2]|0;
        $177 = ($176|0)==(0|0);
        if (!($177)) {
         $$1194$i = $176;$$1196$i = $175;
         continue;
        }
        $178 = ((($$1194$i)) + 16|0);
        $179 = HEAP32[$178>>2]|0;
        $180 = ($179|0)==(0|0);
        if ($180) {
         break;
        } else {
         $$1194$i = $179;$$1196$i = $178;
        }
       }
       $181 = ($$1196$i>>>0)<($151>>>0);
       if ($181) {
        _abort();
        // unreachable;
       } else {
        HEAP32[$$1196$i>>2] = 0;
        $$3$i = $$1194$i;
        break;
       }
      } else {
       $160 = ((($$0190$i)) + 8|0);
       $161 = HEAP32[$160>>2]|0;
       $162 = ($161>>>0)<($151>>>0);
       if ($162) {
        _abort();
        // unreachable;
       }
       $163 = ((($161)) + 12|0);
       $164 = HEAP32[$163>>2]|0;
       $165 = ($164|0)==($$0190$i|0);
       if (!($165)) {
        _abort();
        // unreachable;
       }
       $166 = ((($158)) + 8|0);
       $167 = HEAP32[$166>>2]|0;
       $168 = ($167|0)==($$0190$i|0);
       if ($168) {
        HEAP32[$163>>2] = $158;
        HEAP32[$166>>2] = $161;
        $$3$i = $158;
        break;
       } else {
        _abort();
        // unreachable;
       }
      }
     } while(0);
     $182 = ($156|0)==(0|0);
     do {
      if (!($182)) {
       $183 = ((($$0190$i)) + 28|0);
       $184 = HEAP32[$183>>2]|0;
       $185 = (127588 + ($184<<2)|0);
       $186 = HEAP32[$185>>2]|0;
       $187 = ($$0190$i|0)==($186|0);
       if ($187) {
        HEAP32[$185>>2] = $$3$i;
        $cond$i = ($$3$i|0)==(0|0);
        if ($cond$i) {
         $188 = 1 << $184;
         $189 = $188 ^ -1;
         $190 = $108 & $189;
         HEAP32[(127288)>>2] = $190;
         break;
        }
       } else {
        $191 = HEAP32[(127300)>>2]|0;
        $192 = ($156>>>0)<($191>>>0);
        if ($192) {
         _abort();
         // unreachable;
        }
        $193 = ((($156)) + 16|0);
        $194 = HEAP32[$193>>2]|0;
        $195 = ($194|0)==($$0190$i|0);
        if ($195) {
         HEAP32[$193>>2] = $$3$i;
        } else {
         $196 = ((($156)) + 20|0);
         HEAP32[$196>>2] = $$3$i;
        }
        $197 = ($$3$i|0)==(0|0);
        if ($197) {
         break;
        }
       }
       $198 = HEAP32[(127300)>>2]|0;
       $199 = ($$3$i>>>0)<($198>>>0);
       if ($199) {
        _abort();
        // unreachable;
       }
       $200 = ((($$3$i)) + 24|0);
       HEAP32[$200>>2] = $156;
       $201 = ((($$0190$i)) + 16|0);
       $202 = HEAP32[$201>>2]|0;
       $203 = ($202|0)==(0|0);
       do {
        if (!($203)) {
         $204 = ($202>>>0)<($198>>>0);
         if ($204) {
          _abort();
          // unreachable;
         } else {
          $205 = ((($$3$i)) + 16|0);
          HEAP32[$205>>2] = $202;
          $206 = ((($202)) + 24|0);
          HEAP32[$206>>2] = $$3$i;
          break;
         }
        }
       } while(0);
       $207 = ((($$0190$i)) + 20|0);
       $208 = HEAP32[$207>>2]|0;
       $209 = ($208|0)==(0|0);
       if (!($209)) {
        $210 = HEAP32[(127300)>>2]|0;
        $211 = ($208>>>0)<($210>>>0);
        if ($211) {
         _abort();
         // unreachable;
        } else {
         $212 = ((($$3$i)) + 20|0);
         HEAP32[$212>>2] = $208;
         $213 = ((($208)) + 24|0);
         HEAP32[$213>>2] = $$3$i;
         break;
        }
       }
      }
     } while(0);
     $214 = ($$0191$i>>>0)<(16);
     if ($214) {
      $215 = (($$0191$i) + ($6))|0;
      $216 = $215 | 3;
      $217 = ((($$0190$i)) + 4|0);
      HEAP32[$217>>2] = $216;
      $218 = (($$0190$i) + ($215)|0);
      $219 = ((($218)) + 4|0);
      $220 = HEAP32[$219>>2]|0;
      $221 = $220 | 1;
      HEAP32[$219>>2] = $221;
     } else {
      $222 = $6 | 3;
      $223 = ((($$0190$i)) + 4|0);
      HEAP32[$223>>2] = $222;
      $224 = $$0191$i | 1;
      $225 = ((($153)) + 4|0);
      HEAP32[$225>>2] = $224;
      $226 = (($153) + ($$0191$i)|0);
      HEAP32[$226>>2] = $$0191$i;
      $227 = ($37|0)==(0);
      if (!($227)) {
       $228 = HEAP32[(127304)>>2]|0;
       $229 = $37 >>> 3;
       $230 = $229 << 1;
       $231 = (127324 + ($230<<2)|0);
       $232 = 1 << $229;
       $233 = $8 & $232;
       $234 = ($233|0)==(0);
       if ($234) {
        $235 = $8 | $232;
        HEAP32[31821] = $235;
        $$pre$i = ((($231)) + 8|0);
        $$0187$i = $231;$$pre$phi$iZ2D = $$pre$i;
       } else {
        $236 = ((($231)) + 8|0);
        $237 = HEAP32[$236>>2]|0;
        $238 = HEAP32[(127300)>>2]|0;
        $239 = ($237>>>0)<($238>>>0);
        if ($239) {
         _abort();
         // unreachable;
        } else {
         $$0187$i = $237;$$pre$phi$iZ2D = $236;
        }
       }
       HEAP32[$$pre$phi$iZ2D>>2] = $228;
       $240 = ((($$0187$i)) + 12|0);
       HEAP32[$240>>2] = $228;
       $241 = ((($228)) + 8|0);
       HEAP32[$241>>2] = $$0187$i;
       $242 = ((($228)) + 12|0);
       HEAP32[$242>>2] = $231;
      }
      HEAP32[(127292)>>2] = $$0191$i;
      HEAP32[(127304)>>2] = $153;
     }
     $243 = ((($$0190$i)) + 8|0);
     $$0 = $243;
     STACKTOP = sp;return ($$0|0);
    }
   } else {
    $$0197 = $6;
   }
  } else {
   $244 = ($0>>>0)>(4294967231);
   if ($244) {
    $$0197 = -1;
   } else {
    $245 = (($0) + 11)|0;
    $246 = $245 & -8;
    $247 = HEAP32[(127288)>>2]|0;
    $248 = ($247|0)==(0);
    if ($248) {
     $$0197 = $246;
    } else {
     $249 = (0 - ($246))|0;
     $250 = $245 >>> 8;
     $251 = ($250|0)==(0);
     if ($251) {
      $$0356$i = 0;
     } else {
      $252 = ($246>>>0)>(16777215);
      if ($252) {
       $$0356$i = 31;
      } else {
       $253 = (($250) + 1048320)|0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = (($256) + 520192)|0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = (($261) + 245760)|0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = (14 - ($265))|0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = (($266) + ($268))|0;
       $270 = $269 << 1;
       $271 = (($269) + 7)|0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $$0356$i = $274;
      }
     }
     $275 = (127588 + ($$0356$i<<2)|0);
     $276 = HEAP32[$275>>2]|0;
     $277 = ($276|0)==(0|0);
     L123: do {
      if ($277) {
       $$2353$i = 0;$$3$i201 = 0;$$3348$i = $249;
       label = 86;
      } else {
       $278 = ($$0356$i|0)==(31);
       $279 = $$0356$i >>> 1;
       $280 = (25 - ($279))|0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $$0340$i = 0;$$0345$i = $249;$$0351$i = $276;$$0357$i = $282;$$0360$i = 0;
       while(1) {
        $283 = ((($$0351$i)) + 4|0);
        $284 = HEAP32[$283>>2]|0;
        $285 = $284 & -8;
        $286 = (($285) - ($246))|0;
        $287 = ($286>>>0)<($$0345$i>>>0);
        if ($287) {
         $288 = ($286|0)==(0);
         if ($288) {
          $$413$i = $$0351$i;$$434912$i = 0;$$435511$i = $$0351$i;
          label = 90;
          break L123;
         } else {
          $$1341$i = $$0351$i;$$1346$i = $286;
         }
        } else {
         $$1341$i = $$0340$i;$$1346$i = $$0345$i;
        }
        $289 = ((($$0351$i)) + 20|0);
        $290 = HEAP32[$289>>2]|0;
        $291 = $$0357$i >>> 31;
        $292 = (((($$0351$i)) + 16|0) + ($291<<2)|0);
        $293 = HEAP32[$292>>2]|0;
        $294 = ($290|0)==(0|0);
        $295 = ($290|0)==($293|0);
        $or$cond1$i = $294 | $295;
        $$1361$i = $or$cond1$i ? $$0360$i : $290;
        $296 = ($293|0)==(0|0);
        $297 = $296&1;
        $298 = $297 ^ 1;
        $$0357$$i = $$0357$i << $298;
        if ($296) {
         $$2353$i = $$1361$i;$$3$i201 = $$1341$i;$$3348$i = $$1346$i;
         label = 86;
         break;
        } else {
         $$0340$i = $$1341$i;$$0345$i = $$1346$i;$$0351$i = $293;$$0357$i = $$0357$$i;$$0360$i = $$1361$i;
        }
       }
      }
     } while(0);
     if ((label|0) == 86) {
      $299 = ($$2353$i|0)==(0|0);
      $300 = ($$3$i201|0)==(0|0);
      $or$cond$i = $299 & $300;
      if ($or$cond$i) {
       $301 = 2 << $$0356$i;
       $302 = (0 - ($301))|0;
       $303 = $301 | $302;
       $304 = $247 & $303;
       $305 = ($304|0)==(0);
       if ($305) {
        $$0197 = $246;
        break;
       }
       $306 = (0 - ($304))|0;
       $307 = $304 & $306;
       $308 = (($307) + -1)|0;
       $309 = $308 >>> 12;
       $310 = $309 & 16;
       $311 = $308 >>> $310;
       $312 = $311 >>> 5;
       $313 = $312 & 8;
       $314 = $313 | $310;
       $315 = $311 >>> $313;
       $316 = $315 >>> 2;
       $317 = $316 & 4;
       $318 = $314 | $317;
       $319 = $315 >>> $317;
       $320 = $319 >>> 1;
       $321 = $320 & 2;
       $322 = $318 | $321;
       $323 = $319 >>> $321;
       $324 = $323 >>> 1;
       $325 = $324 & 1;
       $326 = $322 | $325;
       $327 = $323 >>> $325;
       $328 = (($326) + ($327))|0;
       $329 = (127588 + ($328<<2)|0);
       $330 = HEAP32[$329>>2]|0;
       $$4355$ph$i = $330;
      } else {
       $$4355$ph$i = $$2353$i;
      }
      $331 = ($$4355$ph$i|0)==(0|0);
      if ($331) {
       $$4$lcssa$i = $$3$i201;$$4349$lcssa$i = $$3348$i;
      } else {
       $$413$i = $$3$i201;$$434912$i = $$3348$i;$$435511$i = $$4355$ph$i;
       label = 90;
      }
     }
     if ((label|0) == 90) {
      while(1) {
       label = 0;
       $332 = ((($$435511$i)) + 4|0);
       $333 = HEAP32[$332>>2]|0;
       $334 = $333 & -8;
       $335 = (($334) - ($246))|0;
       $336 = ($335>>>0)<($$434912$i>>>0);
       $$$4349$i = $336 ? $335 : $$434912$i;
       $$4355$$4$i = $336 ? $$435511$i : $$413$i;
       $337 = ((($$435511$i)) + 16|0);
       $338 = HEAP32[$337>>2]|0;
       $339 = ($338|0)==(0|0);
       if (!($339)) {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $338;
        label = 90;
        continue;
       }
       $340 = ((($$435511$i)) + 20|0);
       $341 = HEAP32[$340>>2]|0;
       $342 = ($341|0)==(0|0);
       if ($342) {
        $$4$lcssa$i = $$4355$$4$i;$$4349$lcssa$i = $$$4349$i;
        break;
       } else {
        $$413$i = $$4355$$4$i;$$434912$i = $$$4349$i;$$435511$i = $341;
        label = 90;
       }
      }
     }
     $343 = ($$4$lcssa$i|0)==(0|0);
     if ($343) {
      $$0197 = $246;
     } else {
      $344 = HEAP32[(127292)>>2]|0;
      $345 = (($344) - ($246))|0;
      $346 = ($$4349$lcssa$i>>>0)<($345>>>0);
      if ($346) {
       $347 = HEAP32[(127300)>>2]|0;
       $348 = ($$4$lcssa$i>>>0)<($347>>>0);
       if ($348) {
        _abort();
        // unreachable;
       }
       $349 = (($$4$lcssa$i) + ($246)|0);
       $350 = ($$4$lcssa$i>>>0)<($349>>>0);
       if (!($350)) {
        _abort();
        // unreachable;
       }
       $351 = ((($$4$lcssa$i)) + 24|0);
       $352 = HEAP32[$351>>2]|0;
       $353 = ((($$4$lcssa$i)) + 12|0);
       $354 = HEAP32[$353>>2]|0;
       $355 = ($354|0)==($$4$lcssa$i|0);
       do {
        if ($355) {
         $365 = ((($$4$lcssa$i)) + 20|0);
         $366 = HEAP32[$365>>2]|0;
         $367 = ($366|0)==(0|0);
         if ($367) {
          $368 = ((($$4$lcssa$i)) + 16|0);
          $369 = HEAP32[$368>>2]|0;
          $370 = ($369|0)==(0|0);
          if ($370) {
           $$3370$i = 0;
           break;
          } else {
           $$1368$i = $369;$$1372$i = $368;
          }
         } else {
          $$1368$i = $366;$$1372$i = $365;
         }
         while(1) {
          $371 = ((($$1368$i)) + 20|0);
          $372 = HEAP32[$371>>2]|0;
          $373 = ($372|0)==(0|0);
          if (!($373)) {
           $$1368$i = $372;$$1372$i = $371;
           continue;
          }
          $374 = ((($$1368$i)) + 16|0);
          $375 = HEAP32[$374>>2]|0;
          $376 = ($375|0)==(0|0);
          if ($376) {
           break;
          } else {
           $$1368$i = $375;$$1372$i = $374;
          }
         }
         $377 = ($$1372$i>>>0)<($347>>>0);
         if ($377) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$$1372$i>>2] = 0;
          $$3370$i = $$1368$i;
          break;
         }
        } else {
         $356 = ((($$4$lcssa$i)) + 8|0);
         $357 = HEAP32[$356>>2]|0;
         $358 = ($357>>>0)<($347>>>0);
         if ($358) {
          _abort();
          // unreachable;
         }
         $359 = ((($357)) + 12|0);
         $360 = HEAP32[$359>>2]|0;
         $361 = ($360|0)==($$4$lcssa$i|0);
         if (!($361)) {
          _abort();
          // unreachable;
         }
         $362 = ((($354)) + 8|0);
         $363 = HEAP32[$362>>2]|0;
         $364 = ($363|0)==($$4$lcssa$i|0);
         if ($364) {
          HEAP32[$359>>2] = $354;
          HEAP32[$362>>2] = $357;
          $$3370$i = $354;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       } while(0);
       $378 = ($352|0)==(0|0);
       do {
        if ($378) {
         $470 = $247;
        } else {
         $379 = ((($$4$lcssa$i)) + 28|0);
         $380 = HEAP32[$379>>2]|0;
         $381 = (127588 + ($380<<2)|0);
         $382 = HEAP32[$381>>2]|0;
         $383 = ($$4$lcssa$i|0)==($382|0);
         if ($383) {
          HEAP32[$381>>2] = $$3370$i;
          $cond$i204 = ($$3370$i|0)==(0|0);
          if ($cond$i204) {
           $384 = 1 << $380;
           $385 = $384 ^ -1;
           $386 = $247 & $385;
           HEAP32[(127288)>>2] = $386;
           $470 = $386;
           break;
          }
         } else {
          $387 = HEAP32[(127300)>>2]|0;
          $388 = ($352>>>0)<($387>>>0);
          if ($388) {
           _abort();
           // unreachable;
          }
          $389 = ((($352)) + 16|0);
          $390 = HEAP32[$389>>2]|0;
          $391 = ($390|0)==($$4$lcssa$i|0);
          if ($391) {
           HEAP32[$389>>2] = $$3370$i;
          } else {
           $392 = ((($352)) + 20|0);
           HEAP32[$392>>2] = $$3370$i;
          }
          $393 = ($$3370$i|0)==(0|0);
          if ($393) {
           $470 = $247;
           break;
          }
         }
         $394 = HEAP32[(127300)>>2]|0;
         $395 = ($$3370$i>>>0)<($394>>>0);
         if ($395) {
          _abort();
          // unreachable;
         }
         $396 = ((($$3370$i)) + 24|0);
         HEAP32[$396>>2] = $352;
         $397 = ((($$4$lcssa$i)) + 16|0);
         $398 = HEAP32[$397>>2]|0;
         $399 = ($398|0)==(0|0);
         do {
          if (!($399)) {
           $400 = ($398>>>0)<($394>>>0);
           if ($400) {
            _abort();
            // unreachable;
           } else {
            $401 = ((($$3370$i)) + 16|0);
            HEAP32[$401>>2] = $398;
            $402 = ((($398)) + 24|0);
            HEAP32[$402>>2] = $$3370$i;
            break;
           }
          }
         } while(0);
         $403 = ((($$4$lcssa$i)) + 20|0);
         $404 = HEAP32[$403>>2]|0;
         $405 = ($404|0)==(0|0);
         if ($405) {
          $470 = $247;
         } else {
          $406 = HEAP32[(127300)>>2]|0;
          $407 = ($404>>>0)<($406>>>0);
          if ($407) {
           _abort();
           // unreachable;
          } else {
           $408 = ((($$3370$i)) + 20|0);
           HEAP32[$408>>2] = $404;
           $409 = ((($404)) + 24|0);
           HEAP32[$409>>2] = $$3370$i;
           $470 = $247;
           break;
          }
         }
        }
       } while(0);
       $410 = ($$4349$lcssa$i>>>0)<(16);
       do {
        if ($410) {
         $411 = (($$4349$lcssa$i) + ($246))|0;
         $412 = $411 | 3;
         $413 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$413>>2] = $412;
         $414 = (($$4$lcssa$i) + ($411)|0);
         $415 = ((($414)) + 4|0);
         $416 = HEAP32[$415>>2]|0;
         $417 = $416 | 1;
         HEAP32[$415>>2] = $417;
        } else {
         $418 = $246 | 3;
         $419 = ((($$4$lcssa$i)) + 4|0);
         HEAP32[$419>>2] = $418;
         $420 = $$4349$lcssa$i | 1;
         $421 = ((($349)) + 4|0);
         HEAP32[$421>>2] = $420;
         $422 = (($349) + ($$4349$lcssa$i)|0);
         HEAP32[$422>>2] = $$4349$lcssa$i;
         $423 = $$4349$lcssa$i >>> 3;
         $424 = ($$4349$lcssa$i>>>0)<(256);
         if ($424) {
          $425 = $423 << 1;
          $426 = (127324 + ($425<<2)|0);
          $427 = HEAP32[31821]|0;
          $428 = 1 << $423;
          $429 = $427 & $428;
          $430 = ($429|0)==(0);
          if ($430) {
           $431 = $427 | $428;
           HEAP32[31821] = $431;
           $$pre$i205 = ((($426)) + 8|0);
           $$0366$i = $426;$$pre$phi$i206Z2D = $$pre$i205;
          } else {
           $432 = ((($426)) + 8|0);
           $433 = HEAP32[$432>>2]|0;
           $434 = HEAP32[(127300)>>2]|0;
           $435 = ($433>>>0)<($434>>>0);
           if ($435) {
            _abort();
            // unreachable;
           } else {
            $$0366$i = $433;$$pre$phi$i206Z2D = $432;
           }
          }
          HEAP32[$$pre$phi$i206Z2D>>2] = $349;
          $436 = ((($$0366$i)) + 12|0);
          HEAP32[$436>>2] = $349;
          $437 = ((($349)) + 8|0);
          HEAP32[$437>>2] = $$0366$i;
          $438 = ((($349)) + 12|0);
          HEAP32[$438>>2] = $426;
          break;
         }
         $439 = $$4349$lcssa$i >>> 8;
         $440 = ($439|0)==(0);
         if ($440) {
          $$0359$i = 0;
         } else {
          $441 = ($$4349$lcssa$i>>>0)>(16777215);
          if ($441) {
           $$0359$i = 31;
          } else {
           $442 = (($439) + 1048320)|0;
           $443 = $442 >>> 16;
           $444 = $443 & 8;
           $445 = $439 << $444;
           $446 = (($445) + 520192)|0;
           $447 = $446 >>> 16;
           $448 = $447 & 4;
           $449 = $448 | $444;
           $450 = $445 << $448;
           $451 = (($450) + 245760)|0;
           $452 = $451 >>> 16;
           $453 = $452 & 2;
           $454 = $449 | $453;
           $455 = (14 - ($454))|0;
           $456 = $450 << $453;
           $457 = $456 >>> 15;
           $458 = (($455) + ($457))|0;
           $459 = $458 << 1;
           $460 = (($458) + 7)|0;
           $461 = $$4349$lcssa$i >>> $460;
           $462 = $461 & 1;
           $463 = $462 | $459;
           $$0359$i = $463;
          }
         }
         $464 = (127588 + ($$0359$i<<2)|0);
         $465 = ((($349)) + 28|0);
         HEAP32[$465>>2] = $$0359$i;
         $466 = ((($349)) + 16|0);
         $467 = ((($466)) + 4|0);
         HEAP32[$467>>2] = 0;
         HEAP32[$466>>2] = 0;
         $468 = 1 << $$0359$i;
         $469 = $470 & $468;
         $471 = ($469|0)==(0);
         if ($471) {
          $472 = $470 | $468;
          HEAP32[(127288)>>2] = $472;
          HEAP32[$464>>2] = $349;
          $473 = ((($349)) + 24|0);
          HEAP32[$473>>2] = $464;
          $474 = ((($349)) + 12|0);
          HEAP32[$474>>2] = $349;
          $475 = ((($349)) + 8|0);
          HEAP32[$475>>2] = $349;
          break;
         }
         $476 = HEAP32[$464>>2]|0;
         $477 = ($$0359$i|0)==(31);
         $478 = $$0359$i >>> 1;
         $479 = (25 - ($478))|0;
         $480 = $477 ? 0 : $479;
         $481 = $$4349$lcssa$i << $480;
         $$0342$i = $481;$$0343$i = $476;
         while(1) {
          $482 = ((($$0343$i)) + 4|0);
          $483 = HEAP32[$482>>2]|0;
          $484 = $483 & -8;
          $485 = ($484|0)==($$4349$lcssa$i|0);
          if ($485) {
           label = 148;
           break;
          }
          $486 = $$0342$i >>> 31;
          $487 = (((($$0343$i)) + 16|0) + ($486<<2)|0);
          $488 = $$0342$i << 1;
          $489 = HEAP32[$487>>2]|0;
          $490 = ($489|0)==(0|0);
          if ($490) {
           label = 145;
           break;
          } else {
           $$0342$i = $488;$$0343$i = $489;
          }
         }
         if ((label|0) == 145) {
          $491 = HEAP32[(127300)>>2]|0;
          $492 = ($487>>>0)<($491>>>0);
          if ($492) {
           _abort();
           // unreachable;
          } else {
           HEAP32[$487>>2] = $349;
           $493 = ((($349)) + 24|0);
           HEAP32[$493>>2] = $$0343$i;
           $494 = ((($349)) + 12|0);
           HEAP32[$494>>2] = $349;
           $495 = ((($349)) + 8|0);
           HEAP32[$495>>2] = $349;
           break;
          }
         }
         else if ((label|0) == 148) {
          $496 = ((($$0343$i)) + 8|0);
          $497 = HEAP32[$496>>2]|0;
          $498 = HEAP32[(127300)>>2]|0;
          $499 = ($497>>>0)>=($498>>>0);
          $not$7$i = ($$0343$i>>>0)>=($498>>>0);
          $500 = $499 & $not$7$i;
          if ($500) {
           $501 = ((($497)) + 12|0);
           HEAP32[$501>>2] = $349;
           HEAP32[$496>>2] = $349;
           $502 = ((($349)) + 8|0);
           HEAP32[$502>>2] = $497;
           $503 = ((($349)) + 12|0);
           HEAP32[$503>>2] = $$0343$i;
           $504 = ((($349)) + 24|0);
           HEAP32[$504>>2] = 0;
           break;
          } else {
           _abort();
           // unreachable;
          }
         }
        }
       } while(0);
       $505 = ((($$4$lcssa$i)) + 8|0);
       $$0 = $505;
       STACKTOP = sp;return ($$0|0);
      } else {
       $$0197 = $246;
      }
     }
    }
   }
  }
 } while(0);
 $506 = HEAP32[(127292)>>2]|0;
 $507 = ($506>>>0)<($$0197>>>0);
 if (!($507)) {
  $508 = (($506) - ($$0197))|0;
  $509 = HEAP32[(127304)>>2]|0;
  $510 = ($508>>>0)>(15);
  if ($510) {
   $511 = (($509) + ($$0197)|0);
   HEAP32[(127304)>>2] = $511;
   HEAP32[(127292)>>2] = $508;
   $512 = $508 | 1;
   $513 = ((($511)) + 4|0);
   HEAP32[$513>>2] = $512;
   $514 = (($511) + ($508)|0);
   HEAP32[$514>>2] = $508;
   $515 = $$0197 | 3;
   $516 = ((($509)) + 4|0);
   HEAP32[$516>>2] = $515;
  } else {
   HEAP32[(127292)>>2] = 0;
   HEAP32[(127304)>>2] = 0;
   $517 = $506 | 3;
   $518 = ((($509)) + 4|0);
   HEAP32[$518>>2] = $517;
   $519 = (($509) + ($506)|0);
   $520 = ((($519)) + 4|0);
   $521 = HEAP32[$520>>2]|0;
   $522 = $521 | 1;
   HEAP32[$520>>2] = $522;
  }
  $523 = ((($509)) + 8|0);
  $$0 = $523;
  STACKTOP = sp;return ($$0|0);
 }
 $524 = HEAP32[(127296)>>2]|0;
 $525 = ($524>>>0)>($$0197>>>0);
 if ($525) {
  $526 = (($524) - ($$0197))|0;
  HEAP32[(127296)>>2] = $526;
  $527 = HEAP32[(127308)>>2]|0;
  $528 = (($527) + ($$0197)|0);
  HEAP32[(127308)>>2] = $528;
  $529 = $526 | 1;
  $530 = ((($528)) + 4|0);
  HEAP32[$530>>2] = $529;
  $531 = $$0197 | 3;
  $532 = ((($527)) + 4|0);
  HEAP32[$532>>2] = $531;
  $533 = ((($527)) + 8|0);
  $$0 = $533;
  STACKTOP = sp;return ($$0|0);
 }
 $534 = HEAP32[31939]|0;
 $535 = ($534|0)==(0);
 if ($535) {
  HEAP32[(127764)>>2] = 4096;
  HEAP32[(127760)>>2] = 4096;
  HEAP32[(127768)>>2] = -1;
  HEAP32[(127772)>>2] = -1;
  HEAP32[(127776)>>2] = 0;
  HEAP32[(127728)>>2] = 0;
  $536 = $1;
  $537 = $536 & -16;
  $538 = $537 ^ 1431655768;
  HEAP32[$1>>2] = $538;
  HEAP32[31939] = $538;
  $542 = 4096;
 } else {
  $$pre$i208 = HEAP32[(127764)>>2]|0;
  $542 = $$pre$i208;
 }
 $539 = (($$0197) + 48)|0;
 $540 = (($$0197) + 47)|0;
 $541 = (($542) + ($540))|0;
 $543 = (0 - ($542))|0;
 $544 = $541 & $543;
 $545 = ($544>>>0)>($$0197>>>0);
 if (!($545)) {
  $$0 = 0;
  STACKTOP = sp;return ($$0|0);
 }
 $546 = HEAP32[(127724)>>2]|0;
 $547 = ($546|0)==(0);
 if (!($547)) {
  $548 = HEAP32[(127716)>>2]|0;
  $549 = (($548) + ($544))|0;
  $550 = ($549>>>0)<=($548>>>0);
  $551 = ($549>>>0)>($546>>>0);
  $or$cond1$i210 = $550 | $551;
  if ($or$cond1$i210) {
   $$0 = 0;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $552 = HEAP32[(127728)>>2]|0;
 $553 = $552 & 4;
 $554 = ($553|0)==(0);
 L255: do {
  if ($554) {
   $555 = HEAP32[(127308)>>2]|0;
   $556 = ($555|0)==(0|0);
   L257: do {
    if ($556) {
     label = 172;
    } else {
     $$0$i17$i = (127732);
     while(1) {
      $557 = HEAP32[$$0$i17$i>>2]|0;
      $558 = ($557>>>0)>($555>>>0);
      if (!($558)) {
       $559 = ((($$0$i17$i)) + 4|0);
       $560 = HEAP32[$559>>2]|0;
       $561 = (($557) + ($560)|0);
       $562 = ($561>>>0)>($555>>>0);
       if ($562) {
        break;
       }
      }
      $563 = ((($$0$i17$i)) + 8|0);
      $564 = HEAP32[$563>>2]|0;
      $565 = ($564|0)==(0|0);
      if ($565) {
       label = 172;
       break L257;
      } else {
       $$0$i17$i = $564;
      }
     }
     $588 = (($541) - ($524))|0;
     $589 = $588 & $543;
     $590 = ($589>>>0)<(2147483647);
     if ($590) {
      $591 = (_sbrk(($589|0))|0);
      $592 = HEAP32[$$0$i17$i>>2]|0;
      $593 = HEAP32[$559>>2]|0;
      $594 = (($592) + ($593)|0);
      $595 = ($591|0)==($594|0);
      if ($595) {
       $596 = ($591|0)==((-1)|0);
       if (!($596)) {
        $$723947$i = $589;$$748$i = $591;
        label = 190;
        break L255;
       }
      } else {
       $$2247$ph$i = $591;$$2253$ph$i = $589;
       label = 180;
      }
     }
    }
   } while(0);
   do {
    if ((label|0) == 172) {
     $566 = (_sbrk(0)|0);
     $567 = ($566|0)==((-1)|0);
     if (!($567)) {
      $568 = $566;
      $569 = HEAP32[(127760)>>2]|0;
      $570 = (($569) + -1)|0;
      $571 = $570 & $568;
      $572 = ($571|0)==(0);
      $573 = (($570) + ($568))|0;
      $574 = (0 - ($569))|0;
      $575 = $573 & $574;
      $576 = (($575) - ($568))|0;
      $577 = $572 ? 0 : $576;
      $$$i = (($577) + ($544))|0;
      $578 = HEAP32[(127716)>>2]|0;
      $579 = (($$$i) + ($578))|0;
      $580 = ($$$i>>>0)>($$0197>>>0);
      $581 = ($$$i>>>0)<(2147483647);
      $or$cond$i211 = $580 & $581;
      if ($or$cond$i211) {
       $582 = HEAP32[(127724)>>2]|0;
       $583 = ($582|0)==(0);
       if (!($583)) {
        $584 = ($579>>>0)<=($578>>>0);
        $585 = ($579>>>0)>($582>>>0);
        $or$cond2$i = $584 | $585;
        if ($or$cond2$i) {
         break;
        }
       }
       $586 = (_sbrk(($$$i|0))|0);
       $587 = ($586|0)==($566|0);
       if ($587) {
        $$723947$i = $$$i;$$748$i = $566;
        label = 190;
        break L255;
       } else {
        $$2247$ph$i = $586;$$2253$ph$i = $$$i;
        label = 180;
       }
      }
     }
    }
   } while(0);
   L274: do {
    if ((label|0) == 180) {
     $597 = (0 - ($$2253$ph$i))|0;
     $598 = ($$2247$ph$i|0)!=((-1)|0);
     $599 = ($$2253$ph$i>>>0)<(2147483647);
     $or$cond7$i = $599 & $598;
     $600 = ($539>>>0)>($$2253$ph$i>>>0);
     $or$cond10$i = $600 & $or$cond7$i;
     do {
      if ($or$cond10$i) {
       $601 = HEAP32[(127764)>>2]|0;
       $602 = (($540) - ($$2253$ph$i))|0;
       $603 = (($602) + ($601))|0;
       $604 = (0 - ($601))|0;
       $605 = $603 & $604;
       $606 = ($605>>>0)<(2147483647);
       if ($606) {
        $607 = (_sbrk(($605|0))|0);
        $608 = ($607|0)==((-1)|0);
        if ($608) {
         (_sbrk(($597|0))|0);
         break L274;
        } else {
         $609 = (($605) + ($$2253$ph$i))|0;
         $$5256$i = $609;
         break;
        }
       } else {
        $$5256$i = $$2253$ph$i;
       }
      } else {
       $$5256$i = $$2253$ph$i;
      }
     } while(0);
     $610 = ($$2247$ph$i|0)==((-1)|0);
     if (!($610)) {
      $$723947$i = $$5256$i;$$748$i = $$2247$ph$i;
      label = 190;
      break L255;
     }
    }
   } while(0);
   $611 = HEAP32[(127728)>>2]|0;
   $612 = $611 | 4;
   HEAP32[(127728)>>2] = $612;
   label = 187;
  } else {
   label = 187;
  }
 } while(0);
 if ((label|0) == 187) {
  $613 = ($544>>>0)<(2147483647);
  if ($613) {
   $614 = (_sbrk(($544|0))|0);
   $615 = (_sbrk(0)|0);
   $616 = ($614|0)!=((-1)|0);
   $617 = ($615|0)!=((-1)|0);
   $or$cond5$i = $616 & $617;
   $618 = ($614>>>0)<($615>>>0);
   $or$cond11$i = $618 & $or$cond5$i;
   if ($or$cond11$i) {
    $619 = $615;
    $620 = $614;
    $621 = (($619) - ($620))|0;
    $622 = (($$0197) + 40)|0;
    $$not$i = ($621>>>0)>($622>>>0);
    if ($$not$i) {
     $$723947$i = $621;$$748$i = $614;
     label = 190;
    }
   }
  }
 }
 if ((label|0) == 190) {
  $623 = HEAP32[(127716)>>2]|0;
  $624 = (($623) + ($$723947$i))|0;
  HEAP32[(127716)>>2] = $624;
  $625 = HEAP32[(127720)>>2]|0;
  $626 = ($624>>>0)>($625>>>0);
  if ($626) {
   HEAP32[(127720)>>2] = $624;
  }
  $627 = HEAP32[(127308)>>2]|0;
  $628 = ($627|0)==(0|0);
  do {
   if ($628) {
    $629 = HEAP32[(127300)>>2]|0;
    $630 = ($629|0)==(0|0);
    $631 = ($$748$i>>>0)<($629>>>0);
    $or$cond12$i = $630 | $631;
    if ($or$cond12$i) {
     HEAP32[(127300)>>2] = $$748$i;
    }
    HEAP32[(127732)>>2] = $$748$i;
    HEAP32[(127736)>>2] = $$723947$i;
    HEAP32[(127744)>>2] = 0;
    $632 = HEAP32[31939]|0;
    HEAP32[(127320)>>2] = $632;
    HEAP32[(127316)>>2] = -1;
    $$01$i$i = 0;
    while(1) {
     $633 = $$01$i$i << 1;
     $634 = (127324 + ($633<<2)|0);
     $635 = ((($634)) + 12|0);
     HEAP32[$635>>2] = $634;
     $636 = ((($634)) + 8|0);
     HEAP32[$636>>2] = $634;
     $637 = (($$01$i$i) + 1)|0;
     $exitcond$i$i = ($637|0)==(32);
     if ($exitcond$i$i) {
      break;
     } else {
      $$01$i$i = $637;
     }
    }
    $638 = (($$723947$i) + -40)|0;
    $639 = ((($$748$i)) + 8|0);
    $640 = $639;
    $641 = $640 & 7;
    $642 = ($641|0)==(0);
    $643 = (0 - ($640))|0;
    $644 = $643 & 7;
    $645 = $642 ? 0 : $644;
    $646 = (($$748$i) + ($645)|0);
    $647 = (($638) - ($645))|0;
    HEAP32[(127308)>>2] = $646;
    HEAP32[(127296)>>2] = $647;
    $648 = $647 | 1;
    $649 = ((($646)) + 4|0);
    HEAP32[$649>>2] = $648;
    $650 = (($646) + ($647)|0);
    $651 = ((($650)) + 4|0);
    HEAP32[$651>>2] = 40;
    $652 = HEAP32[(127772)>>2]|0;
    HEAP32[(127312)>>2] = $652;
   } else {
    $$024370$i = (127732);
    while(1) {
     $653 = HEAP32[$$024370$i>>2]|0;
     $654 = ((($$024370$i)) + 4|0);
     $655 = HEAP32[$654>>2]|0;
     $656 = (($653) + ($655)|0);
     $657 = ($$748$i|0)==($656|0);
     if ($657) {
      label = 200;
      break;
     }
     $658 = ((($$024370$i)) + 8|0);
     $659 = HEAP32[$658>>2]|0;
     $660 = ($659|0)==(0|0);
     if ($660) {
      break;
     } else {
      $$024370$i = $659;
     }
    }
    if ((label|0) == 200) {
     $661 = ((($$024370$i)) + 12|0);
     $662 = HEAP32[$661>>2]|0;
     $663 = $662 & 8;
     $664 = ($663|0)==(0);
     if ($664) {
      $665 = ($627>>>0)>=($653>>>0);
      $666 = ($627>>>0)<($$748$i>>>0);
      $or$cond50$i = $666 & $665;
      if ($or$cond50$i) {
       $667 = (($655) + ($$723947$i))|0;
       HEAP32[$654>>2] = $667;
       $668 = HEAP32[(127296)>>2]|0;
       $669 = ((($627)) + 8|0);
       $670 = $669;
       $671 = $670 & 7;
       $672 = ($671|0)==(0);
       $673 = (0 - ($670))|0;
       $674 = $673 & 7;
       $675 = $672 ? 0 : $674;
       $676 = (($627) + ($675)|0);
       $677 = (($$723947$i) - ($675))|0;
       $678 = (($677) + ($668))|0;
       HEAP32[(127308)>>2] = $676;
       HEAP32[(127296)>>2] = $678;
       $679 = $678 | 1;
       $680 = ((($676)) + 4|0);
       HEAP32[$680>>2] = $679;
       $681 = (($676) + ($678)|0);
       $682 = ((($681)) + 4|0);
       HEAP32[$682>>2] = 40;
       $683 = HEAP32[(127772)>>2]|0;
       HEAP32[(127312)>>2] = $683;
       break;
      }
     }
    }
    $684 = HEAP32[(127300)>>2]|0;
    $685 = ($$748$i>>>0)<($684>>>0);
    if ($685) {
     HEAP32[(127300)>>2] = $$748$i;
     $749 = $$748$i;
    } else {
     $749 = $684;
    }
    $686 = (($$748$i) + ($$723947$i)|0);
    $$124469$i = (127732);
    while(1) {
     $687 = HEAP32[$$124469$i>>2]|0;
     $688 = ($687|0)==($686|0);
     if ($688) {
      label = 208;
      break;
     }
     $689 = ((($$124469$i)) + 8|0);
     $690 = HEAP32[$689>>2]|0;
     $691 = ($690|0)==(0|0);
     if ($691) {
      $$0$i$i$i = (127732);
      break;
     } else {
      $$124469$i = $690;
     }
    }
    if ((label|0) == 208) {
     $692 = ((($$124469$i)) + 12|0);
     $693 = HEAP32[$692>>2]|0;
     $694 = $693 & 8;
     $695 = ($694|0)==(0);
     if ($695) {
      HEAP32[$$124469$i>>2] = $$748$i;
      $696 = ((($$124469$i)) + 4|0);
      $697 = HEAP32[$696>>2]|0;
      $698 = (($697) + ($$723947$i))|0;
      HEAP32[$696>>2] = $698;
      $699 = ((($$748$i)) + 8|0);
      $700 = $699;
      $701 = $700 & 7;
      $702 = ($701|0)==(0);
      $703 = (0 - ($700))|0;
      $704 = $703 & 7;
      $705 = $702 ? 0 : $704;
      $706 = (($$748$i) + ($705)|0);
      $707 = ((($686)) + 8|0);
      $708 = $707;
      $709 = $708 & 7;
      $710 = ($709|0)==(0);
      $711 = (0 - ($708))|0;
      $712 = $711 & 7;
      $713 = $710 ? 0 : $712;
      $714 = (($686) + ($713)|0);
      $715 = $714;
      $716 = $706;
      $717 = (($715) - ($716))|0;
      $718 = (($706) + ($$0197)|0);
      $719 = (($717) - ($$0197))|0;
      $720 = $$0197 | 3;
      $721 = ((($706)) + 4|0);
      HEAP32[$721>>2] = $720;
      $722 = ($714|0)==($627|0);
      do {
       if ($722) {
        $723 = HEAP32[(127296)>>2]|0;
        $724 = (($723) + ($719))|0;
        HEAP32[(127296)>>2] = $724;
        HEAP32[(127308)>>2] = $718;
        $725 = $724 | 1;
        $726 = ((($718)) + 4|0);
        HEAP32[$726>>2] = $725;
       } else {
        $727 = HEAP32[(127304)>>2]|0;
        $728 = ($714|0)==($727|0);
        if ($728) {
         $729 = HEAP32[(127292)>>2]|0;
         $730 = (($729) + ($719))|0;
         HEAP32[(127292)>>2] = $730;
         HEAP32[(127304)>>2] = $718;
         $731 = $730 | 1;
         $732 = ((($718)) + 4|0);
         HEAP32[$732>>2] = $731;
         $733 = (($718) + ($730)|0);
         HEAP32[$733>>2] = $730;
         break;
        }
        $734 = ((($714)) + 4|0);
        $735 = HEAP32[$734>>2]|0;
        $736 = $735 & 3;
        $737 = ($736|0)==(1);
        if ($737) {
         $738 = $735 & -8;
         $739 = $735 >>> 3;
         $740 = ($735>>>0)<(256);
         L326: do {
          if ($740) {
           $741 = ((($714)) + 8|0);
           $742 = HEAP32[$741>>2]|0;
           $743 = ((($714)) + 12|0);
           $744 = HEAP32[$743>>2]|0;
           $745 = $739 << 1;
           $746 = (127324 + ($745<<2)|0);
           $747 = ($742|0)==($746|0);
           do {
            if (!($747)) {
             $748 = ($742>>>0)<($749>>>0);
             if ($748) {
              _abort();
              // unreachable;
             }
             $750 = ((($742)) + 12|0);
             $751 = HEAP32[$750>>2]|0;
             $752 = ($751|0)==($714|0);
             if ($752) {
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $753 = ($744|0)==($742|0);
           if ($753) {
            $754 = 1 << $739;
            $755 = $754 ^ -1;
            $756 = HEAP32[31821]|0;
            $757 = $756 & $755;
            HEAP32[31821] = $757;
            break;
           }
           $758 = ($744|0)==($746|0);
           do {
            if ($758) {
             $$pre9$i$i = ((($744)) + 8|0);
             $$pre$phi10$i$iZ2D = $$pre9$i$i;
            } else {
             $759 = ($744>>>0)<($749>>>0);
             if ($759) {
              _abort();
              // unreachable;
             }
             $760 = ((($744)) + 8|0);
             $761 = HEAP32[$760>>2]|0;
             $762 = ($761|0)==($714|0);
             if ($762) {
              $$pre$phi10$i$iZ2D = $760;
              break;
             }
             _abort();
             // unreachable;
            }
           } while(0);
           $763 = ((($742)) + 12|0);
           HEAP32[$763>>2] = $744;
           HEAP32[$$pre$phi10$i$iZ2D>>2] = $742;
          } else {
           $764 = ((($714)) + 24|0);
           $765 = HEAP32[$764>>2]|0;
           $766 = ((($714)) + 12|0);
           $767 = HEAP32[$766>>2]|0;
           $768 = ($767|0)==($714|0);
           do {
            if ($768) {
             $778 = ((($714)) + 16|0);
             $779 = ((($778)) + 4|0);
             $780 = HEAP32[$779>>2]|0;
             $781 = ($780|0)==(0|0);
             if ($781) {
              $782 = HEAP32[$778>>2]|0;
              $783 = ($782|0)==(0|0);
              if ($783) {
               $$3$i$i = 0;
               break;
              } else {
               $$1290$i$i = $782;$$1292$i$i = $778;
              }
             } else {
              $$1290$i$i = $780;$$1292$i$i = $779;
             }
             while(1) {
              $784 = ((($$1290$i$i)) + 20|0);
              $785 = HEAP32[$784>>2]|0;
              $786 = ($785|0)==(0|0);
              if (!($786)) {
               $$1290$i$i = $785;$$1292$i$i = $784;
               continue;
              }
              $787 = ((($$1290$i$i)) + 16|0);
              $788 = HEAP32[$787>>2]|0;
              $789 = ($788|0)==(0|0);
              if ($789) {
               break;
              } else {
               $$1290$i$i = $788;$$1292$i$i = $787;
              }
             }
             $790 = ($$1292$i$i>>>0)<($749>>>0);
             if ($790) {
              _abort();
              // unreachable;
             } else {
              HEAP32[$$1292$i$i>>2] = 0;
              $$3$i$i = $$1290$i$i;
              break;
             }
            } else {
             $769 = ((($714)) + 8|0);
             $770 = HEAP32[$769>>2]|0;
             $771 = ($770>>>0)<($749>>>0);
             if ($771) {
              _abort();
              // unreachable;
             }
             $772 = ((($770)) + 12|0);
             $773 = HEAP32[$772>>2]|0;
             $774 = ($773|0)==($714|0);
             if (!($774)) {
              _abort();
              // unreachable;
             }
             $775 = ((($767)) + 8|0);
             $776 = HEAP32[$775>>2]|0;
             $777 = ($776|0)==($714|0);
             if ($777) {
              HEAP32[$772>>2] = $767;
              HEAP32[$775>>2] = $770;
              $$3$i$i = $767;
              break;
             } else {
              _abort();
              // unreachable;
             }
            }
           } while(0);
           $791 = ($765|0)==(0|0);
           if ($791) {
            break;
           }
           $792 = ((($714)) + 28|0);
           $793 = HEAP32[$792>>2]|0;
           $794 = (127588 + ($793<<2)|0);
           $795 = HEAP32[$794>>2]|0;
           $796 = ($714|0)==($795|0);
           do {
            if ($796) {
             HEAP32[$794>>2] = $$3$i$i;
             $cond$i$i = ($$3$i$i|0)==(0|0);
             if (!($cond$i$i)) {
              break;
             }
             $797 = 1 << $793;
             $798 = $797 ^ -1;
             $799 = HEAP32[(127288)>>2]|0;
             $800 = $799 & $798;
             HEAP32[(127288)>>2] = $800;
             break L326;
            } else {
             $801 = HEAP32[(127300)>>2]|0;
             $802 = ($765>>>0)<($801>>>0);
             if ($802) {
              _abort();
              // unreachable;
             }
             $803 = ((($765)) + 16|0);
             $804 = HEAP32[$803>>2]|0;
             $805 = ($804|0)==($714|0);
             if ($805) {
              HEAP32[$803>>2] = $$3$i$i;
             } else {
              $806 = ((($765)) + 20|0);
              HEAP32[$806>>2] = $$3$i$i;
             }
             $807 = ($$3$i$i|0)==(0|0);
             if ($807) {
              break L326;
             }
            }
           } while(0);
           $808 = HEAP32[(127300)>>2]|0;
           $809 = ($$3$i$i>>>0)<($808>>>0);
           if ($809) {
            _abort();
            // unreachable;
           }
           $810 = ((($$3$i$i)) + 24|0);
           HEAP32[$810>>2] = $765;
           $811 = ((($714)) + 16|0);
           $812 = HEAP32[$811>>2]|0;
           $813 = ($812|0)==(0|0);
           do {
            if (!($813)) {
             $814 = ($812>>>0)<($808>>>0);
             if ($814) {
              _abort();
              // unreachable;
             } else {
              $815 = ((($$3$i$i)) + 16|0);
              HEAP32[$815>>2] = $812;
              $816 = ((($812)) + 24|0);
              HEAP32[$816>>2] = $$3$i$i;
              break;
             }
            }
           } while(0);
           $817 = ((($811)) + 4|0);
           $818 = HEAP32[$817>>2]|0;
           $819 = ($818|0)==(0|0);
           if ($819) {
            break;
           }
           $820 = HEAP32[(127300)>>2]|0;
           $821 = ($818>>>0)<($820>>>0);
           if ($821) {
            _abort();
            // unreachable;
           } else {
            $822 = ((($$3$i$i)) + 20|0);
            HEAP32[$822>>2] = $818;
            $823 = ((($818)) + 24|0);
            HEAP32[$823>>2] = $$3$i$i;
            break;
           }
          }
         } while(0);
         $824 = (($714) + ($738)|0);
         $825 = (($738) + ($719))|0;
         $$0$i18$i = $824;$$0286$i$i = $825;
        } else {
         $$0$i18$i = $714;$$0286$i$i = $719;
        }
        $826 = ((($$0$i18$i)) + 4|0);
        $827 = HEAP32[$826>>2]|0;
        $828 = $827 & -2;
        HEAP32[$826>>2] = $828;
        $829 = $$0286$i$i | 1;
        $830 = ((($718)) + 4|0);
        HEAP32[$830>>2] = $829;
        $831 = (($718) + ($$0286$i$i)|0);
        HEAP32[$831>>2] = $$0286$i$i;
        $832 = $$0286$i$i >>> 3;
        $833 = ($$0286$i$i>>>0)<(256);
        if ($833) {
         $834 = $832 << 1;
         $835 = (127324 + ($834<<2)|0);
         $836 = HEAP32[31821]|0;
         $837 = 1 << $832;
         $838 = $836 & $837;
         $839 = ($838|0)==(0);
         do {
          if ($839) {
           $840 = $836 | $837;
           HEAP32[31821] = $840;
           $$pre$i19$i = ((($835)) + 8|0);
           $$0294$i$i = $835;$$pre$phi$i20$iZ2D = $$pre$i19$i;
          } else {
           $841 = ((($835)) + 8|0);
           $842 = HEAP32[$841>>2]|0;
           $843 = HEAP32[(127300)>>2]|0;
           $844 = ($842>>>0)<($843>>>0);
           if (!($844)) {
            $$0294$i$i = $842;$$pre$phi$i20$iZ2D = $841;
            break;
           }
           _abort();
           // unreachable;
          }
         } while(0);
         HEAP32[$$pre$phi$i20$iZ2D>>2] = $718;
         $845 = ((($$0294$i$i)) + 12|0);
         HEAP32[$845>>2] = $718;
         $846 = ((($718)) + 8|0);
         HEAP32[$846>>2] = $$0294$i$i;
         $847 = ((($718)) + 12|0);
         HEAP32[$847>>2] = $835;
         break;
        }
        $848 = $$0286$i$i >>> 8;
        $849 = ($848|0)==(0);
        do {
         if ($849) {
          $$0295$i$i = 0;
         } else {
          $850 = ($$0286$i$i>>>0)>(16777215);
          if ($850) {
           $$0295$i$i = 31;
           break;
          }
          $851 = (($848) + 1048320)|0;
          $852 = $851 >>> 16;
          $853 = $852 & 8;
          $854 = $848 << $853;
          $855 = (($854) + 520192)|0;
          $856 = $855 >>> 16;
          $857 = $856 & 4;
          $858 = $857 | $853;
          $859 = $854 << $857;
          $860 = (($859) + 245760)|0;
          $861 = $860 >>> 16;
          $862 = $861 & 2;
          $863 = $858 | $862;
          $864 = (14 - ($863))|0;
          $865 = $859 << $862;
          $866 = $865 >>> 15;
          $867 = (($864) + ($866))|0;
          $868 = $867 << 1;
          $869 = (($867) + 7)|0;
          $870 = $$0286$i$i >>> $869;
          $871 = $870 & 1;
          $872 = $871 | $868;
          $$0295$i$i = $872;
         }
        } while(0);
        $873 = (127588 + ($$0295$i$i<<2)|0);
        $874 = ((($718)) + 28|0);
        HEAP32[$874>>2] = $$0295$i$i;
        $875 = ((($718)) + 16|0);
        $876 = ((($875)) + 4|0);
        HEAP32[$876>>2] = 0;
        HEAP32[$875>>2] = 0;
        $877 = HEAP32[(127288)>>2]|0;
        $878 = 1 << $$0295$i$i;
        $879 = $877 & $878;
        $880 = ($879|0)==(0);
        if ($880) {
         $881 = $877 | $878;
         HEAP32[(127288)>>2] = $881;
         HEAP32[$873>>2] = $718;
         $882 = ((($718)) + 24|0);
         HEAP32[$882>>2] = $873;
         $883 = ((($718)) + 12|0);
         HEAP32[$883>>2] = $718;
         $884 = ((($718)) + 8|0);
         HEAP32[$884>>2] = $718;
         break;
        }
        $885 = HEAP32[$873>>2]|0;
        $886 = ($$0295$i$i|0)==(31);
        $887 = $$0295$i$i >>> 1;
        $888 = (25 - ($887))|0;
        $889 = $886 ? 0 : $888;
        $890 = $$0286$i$i << $889;
        $$0287$i$i = $890;$$0288$i$i = $885;
        while(1) {
         $891 = ((($$0288$i$i)) + 4|0);
         $892 = HEAP32[$891>>2]|0;
         $893 = $892 & -8;
         $894 = ($893|0)==($$0286$i$i|0);
         if ($894) {
          label = 278;
          break;
         }
         $895 = $$0287$i$i >>> 31;
         $896 = (((($$0288$i$i)) + 16|0) + ($895<<2)|0);
         $897 = $$0287$i$i << 1;
         $898 = HEAP32[$896>>2]|0;
         $899 = ($898|0)==(0|0);
         if ($899) {
          label = 275;
          break;
         } else {
          $$0287$i$i = $897;$$0288$i$i = $898;
         }
        }
        if ((label|0) == 275) {
         $900 = HEAP32[(127300)>>2]|0;
         $901 = ($896>>>0)<($900>>>0);
         if ($901) {
          _abort();
          // unreachable;
         } else {
          HEAP32[$896>>2] = $718;
          $902 = ((($718)) + 24|0);
          HEAP32[$902>>2] = $$0288$i$i;
          $903 = ((($718)) + 12|0);
          HEAP32[$903>>2] = $718;
          $904 = ((($718)) + 8|0);
          HEAP32[$904>>2] = $718;
          break;
         }
        }
        else if ((label|0) == 278) {
         $905 = ((($$0288$i$i)) + 8|0);
         $906 = HEAP32[$905>>2]|0;
         $907 = HEAP32[(127300)>>2]|0;
         $908 = ($906>>>0)>=($907>>>0);
         $not$$i22$i = ($$0288$i$i>>>0)>=($907>>>0);
         $909 = $908 & $not$$i22$i;
         if ($909) {
          $910 = ((($906)) + 12|0);
          HEAP32[$910>>2] = $718;
          HEAP32[$905>>2] = $718;
          $911 = ((($718)) + 8|0);
          HEAP32[$911>>2] = $906;
          $912 = ((($718)) + 12|0);
          HEAP32[$912>>2] = $$0288$i$i;
          $913 = ((($718)) + 24|0);
          HEAP32[$913>>2] = 0;
          break;
         } else {
          _abort();
          // unreachable;
         }
        }
       }
      } while(0);
      $1044 = ((($706)) + 8|0);
      $$0 = $1044;
      STACKTOP = sp;return ($$0|0);
     } else {
      $$0$i$i$i = (127732);
     }
    }
    while(1) {
     $914 = HEAP32[$$0$i$i$i>>2]|0;
     $915 = ($914>>>0)>($627>>>0);
     if (!($915)) {
      $916 = ((($$0$i$i$i)) + 4|0);
      $917 = HEAP32[$916>>2]|0;
      $918 = (($914) + ($917)|0);
      $919 = ($918>>>0)>($627>>>0);
      if ($919) {
       break;
      }
     }
     $920 = ((($$0$i$i$i)) + 8|0);
     $921 = HEAP32[$920>>2]|0;
     $$0$i$i$i = $921;
    }
    $922 = ((($918)) + -47|0);
    $923 = ((($922)) + 8|0);
    $924 = $923;
    $925 = $924 & 7;
    $926 = ($925|0)==(0);
    $927 = (0 - ($924))|0;
    $928 = $927 & 7;
    $929 = $926 ? 0 : $928;
    $930 = (($922) + ($929)|0);
    $931 = ((($627)) + 16|0);
    $932 = ($930>>>0)<($931>>>0);
    $933 = $932 ? $627 : $930;
    $934 = ((($933)) + 8|0);
    $935 = ((($933)) + 24|0);
    $936 = (($$723947$i) + -40)|0;
    $937 = ((($$748$i)) + 8|0);
    $938 = $937;
    $939 = $938 & 7;
    $940 = ($939|0)==(0);
    $941 = (0 - ($938))|0;
    $942 = $941 & 7;
    $943 = $940 ? 0 : $942;
    $944 = (($$748$i) + ($943)|0);
    $945 = (($936) - ($943))|0;
    HEAP32[(127308)>>2] = $944;
    HEAP32[(127296)>>2] = $945;
    $946 = $945 | 1;
    $947 = ((($944)) + 4|0);
    HEAP32[$947>>2] = $946;
    $948 = (($944) + ($945)|0);
    $949 = ((($948)) + 4|0);
    HEAP32[$949>>2] = 40;
    $950 = HEAP32[(127772)>>2]|0;
    HEAP32[(127312)>>2] = $950;
    $951 = ((($933)) + 4|0);
    HEAP32[$951>>2] = 27;
    ;HEAP32[$934>>2]=HEAP32[(127732)>>2]|0;HEAP32[$934+4>>2]=HEAP32[(127732)+4>>2]|0;HEAP32[$934+8>>2]=HEAP32[(127732)+8>>2]|0;HEAP32[$934+12>>2]=HEAP32[(127732)+12>>2]|0;
    HEAP32[(127732)>>2] = $$748$i;
    HEAP32[(127736)>>2] = $$723947$i;
    HEAP32[(127744)>>2] = 0;
    HEAP32[(127740)>>2] = $934;
    $$0$i$i = $935;
    while(1) {
     $952 = ((($$0$i$i)) + 4|0);
     HEAP32[$952>>2] = 7;
     $953 = ((($952)) + 4|0);
     $954 = ($953>>>0)<($918>>>0);
     if ($954) {
      $$0$i$i = $952;
     } else {
      break;
     }
    }
    $955 = ($933|0)==($627|0);
    if (!($955)) {
     $956 = $933;
     $957 = $627;
     $958 = (($956) - ($957))|0;
     $959 = HEAP32[$951>>2]|0;
     $960 = $959 & -2;
     HEAP32[$951>>2] = $960;
     $961 = $958 | 1;
     $962 = ((($627)) + 4|0);
     HEAP32[$962>>2] = $961;
     HEAP32[$933>>2] = $958;
     $963 = $958 >>> 3;
     $964 = ($958>>>0)<(256);
     if ($964) {
      $965 = $963 << 1;
      $966 = (127324 + ($965<<2)|0);
      $967 = HEAP32[31821]|0;
      $968 = 1 << $963;
      $969 = $967 & $968;
      $970 = ($969|0)==(0);
      if ($970) {
       $971 = $967 | $968;
       HEAP32[31821] = $971;
       $$pre$i$i = ((($966)) + 8|0);
       $$0211$i$i = $966;$$pre$phi$i$iZ2D = $$pre$i$i;
      } else {
       $972 = ((($966)) + 8|0);
       $973 = HEAP32[$972>>2]|0;
       $974 = HEAP32[(127300)>>2]|0;
       $975 = ($973>>>0)<($974>>>0);
       if ($975) {
        _abort();
        // unreachable;
       } else {
        $$0211$i$i = $973;$$pre$phi$i$iZ2D = $972;
       }
      }
      HEAP32[$$pre$phi$i$iZ2D>>2] = $627;
      $976 = ((($$0211$i$i)) + 12|0);
      HEAP32[$976>>2] = $627;
      $977 = ((($627)) + 8|0);
      HEAP32[$977>>2] = $$0211$i$i;
      $978 = ((($627)) + 12|0);
      HEAP32[$978>>2] = $966;
      break;
     }
     $979 = $958 >>> 8;
     $980 = ($979|0)==(0);
     if ($980) {
      $$0212$i$i = 0;
     } else {
      $981 = ($958>>>0)>(16777215);
      if ($981) {
       $$0212$i$i = 31;
      } else {
       $982 = (($979) + 1048320)|0;
       $983 = $982 >>> 16;
       $984 = $983 & 8;
       $985 = $979 << $984;
       $986 = (($985) + 520192)|0;
       $987 = $986 >>> 16;
       $988 = $987 & 4;
       $989 = $988 | $984;
       $990 = $985 << $988;
       $991 = (($990) + 245760)|0;
       $992 = $991 >>> 16;
       $993 = $992 & 2;
       $994 = $989 | $993;
       $995 = (14 - ($994))|0;
       $996 = $990 << $993;
       $997 = $996 >>> 15;
       $998 = (($995) + ($997))|0;
       $999 = $998 << 1;
       $1000 = (($998) + 7)|0;
       $1001 = $958 >>> $1000;
       $1002 = $1001 & 1;
       $1003 = $1002 | $999;
       $$0212$i$i = $1003;
      }
     }
     $1004 = (127588 + ($$0212$i$i<<2)|0);
     $1005 = ((($627)) + 28|0);
     HEAP32[$1005>>2] = $$0212$i$i;
     $1006 = ((($627)) + 20|0);
     HEAP32[$1006>>2] = 0;
     HEAP32[$931>>2] = 0;
     $1007 = HEAP32[(127288)>>2]|0;
     $1008 = 1 << $$0212$i$i;
     $1009 = $1007 & $1008;
     $1010 = ($1009|0)==(0);
     if ($1010) {
      $1011 = $1007 | $1008;
      HEAP32[(127288)>>2] = $1011;
      HEAP32[$1004>>2] = $627;
      $1012 = ((($627)) + 24|0);
      HEAP32[$1012>>2] = $1004;
      $1013 = ((($627)) + 12|0);
      HEAP32[$1013>>2] = $627;
      $1014 = ((($627)) + 8|0);
      HEAP32[$1014>>2] = $627;
      break;
     }
     $1015 = HEAP32[$1004>>2]|0;
     $1016 = ($$0212$i$i|0)==(31);
     $1017 = $$0212$i$i >>> 1;
     $1018 = (25 - ($1017))|0;
     $1019 = $1016 ? 0 : $1018;
     $1020 = $958 << $1019;
     $$0206$i$i = $1020;$$0207$i$i = $1015;
     while(1) {
      $1021 = ((($$0207$i$i)) + 4|0);
      $1022 = HEAP32[$1021>>2]|0;
      $1023 = $1022 & -8;
      $1024 = ($1023|0)==($958|0);
      if ($1024) {
       label = 304;
       break;
      }
      $1025 = $$0206$i$i >>> 31;
      $1026 = (((($$0207$i$i)) + 16|0) + ($1025<<2)|0);
      $1027 = $$0206$i$i << 1;
      $1028 = HEAP32[$1026>>2]|0;
      $1029 = ($1028|0)==(0|0);
      if ($1029) {
       label = 301;
       break;
      } else {
       $$0206$i$i = $1027;$$0207$i$i = $1028;
      }
     }
     if ((label|0) == 301) {
      $1030 = HEAP32[(127300)>>2]|0;
      $1031 = ($1026>>>0)<($1030>>>0);
      if ($1031) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$1026>>2] = $627;
       $1032 = ((($627)) + 24|0);
       HEAP32[$1032>>2] = $$0207$i$i;
       $1033 = ((($627)) + 12|0);
       HEAP32[$1033>>2] = $627;
       $1034 = ((($627)) + 8|0);
       HEAP32[$1034>>2] = $627;
       break;
      }
     }
     else if ((label|0) == 304) {
      $1035 = ((($$0207$i$i)) + 8|0);
      $1036 = HEAP32[$1035>>2]|0;
      $1037 = HEAP32[(127300)>>2]|0;
      $1038 = ($1036>>>0)>=($1037>>>0);
      $not$$i$i = ($$0207$i$i>>>0)>=($1037>>>0);
      $1039 = $1038 & $not$$i$i;
      if ($1039) {
       $1040 = ((($1036)) + 12|0);
       HEAP32[$1040>>2] = $627;
       HEAP32[$1035>>2] = $627;
       $1041 = ((($627)) + 8|0);
       HEAP32[$1041>>2] = $1036;
       $1042 = ((($627)) + 12|0);
       HEAP32[$1042>>2] = $$0207$i$i;
       $1043 = ((($627)) + 24|0);
       HEAP32[$1043>>2] = 0;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    }
   }
  } while(0);
  $1045 = HEAP32[(127296)>>2]|0;
  $1046 = ($1045>>>0)>($$0197>>>0);
  if ($1046) {
   $1047 = (($1045) - ($$0197))|0;
   HEAP32[(127296)>>2] = $1047;
   $1048 = HEAP32[(127308)>>2]|0;
   $1049 = (($1048) + ($$0197)|0);
   HEAP32[(127308)>>2] = $1049;
   $1050 = $1047 | 1;
   $1051 = ((($1049)) + 4|0);
   HEAP32[$1051>>2] = $1050;
   $1052 = $$0197 | 3;
   $1053 = ((($1048)) + 4|0);
   HEAP32[$1053>>2] = $1052;
   $1054 = ((($1048)) + 8|0);
   $$0 = $1054;
   STACKTOP = sp;return ($$0|0);
  }
 }
 $1055 = (___errno_location()|0);
 HEAP32[$1055>>2] = 12;
 $$0 = 0;
 STACKTOP = sp;return ($$0|0);
}
function _free($0) {
 $0 = $0|0;
 var $$0211$i = 0, $$0211$in$i = 0, $$0381 = 0, $$0382 = 0, $$0394 = 0, $$0401 = 0, $$1 = 0, $$1380 = 0, $$1385 = 0, $$1388 = 0, $$1396 = 0, $$1400 = 0, $$2 = 0, $$3 = 0, $$3398 = 0, $$pre = 0, $$pre$phi439Z2D = 0, $$pre$phi441Z2D = 0, $$pre$phiZ2D = 0, $$pre438 = 0;
 var $$pre440 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cond418 = 0, $cond419 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $1 = ($0|0)==(0|0);
 if ($1) {
  return;
 }
 $2 = ((($0)) + -8|0);
 $3 = HEAP32[(127300)>>2]|0;
 $4 = ($2>>>0)<($3>>>0);
 if ($4) {
  _abort();
  // unreachable;
 }
 $5 = ((($0)) + -4|0);
 $6 = HEAP32[$5>>2]|0;
 $7 = $6 & 3;
 $8 = ($7|0)==(1);
 if ($8) {
  _abort();
  // unreachable;
 }
 $9 = $6 & -8;
 $10 = (($2) + ($9)|0);
 $11 = $6 & 1;
 $12 = ($11|0)==(0);
 do {
  if ($12) {
   $13 = HEAP32[$2>>2]|0;
   $14 = ($7|0)==(0);
   if ($14) {
    return;
   }
   $15 = (0 - ($13))|0;
   $16 = (($2) + ($15)|0);
   $17 = (($13) + ($9))|0;
   $18 = ($16>>>0)<($3>>>0);
   if ($18) {
    _abort();
    // unreachable;
   }
   $19 = HEAP32[(127304)>>2]|0;
   $20 = ($16|0)==($19|0);
   if ($20) {
    $105 = ((($10)) + 4|0);
    $106 = HEAP32[$105>>2]|0;
    $107 = $106 & 3;
    $108 = ($107|0)==(3);
    if (!($108)) {
     $$1 = $16;$$1380 = $17;
     break;
    }
    HEAP32[(127292)>>2] = $17;
    $109 = $106 & -2;
    HEAP32[$105>>2] = $109;
    $110 = $17 | 1;
    $111 = ((($16)) + 4|0);
    HEAP32[$111>>2] = $110;
    $112 = (($16) + ($17)|0);
    HEAP32[$112>>2] = $17;
    return;
   }
   $21 = $13 >>> 3;
   $22 = ($13>>>0)<(256);
   if ($22) {
    $23 = ((($16)) + 8|0);
    $24 = HEAP32[$23>>2]|0;
    $25 = ((($16)) + 12|0);
    $26 = HEAP32[$25>>2]|0;
    $27 = $21 << 1;
    $28 = (127324 + ($27<<2)|0);
    $29 = ($24|0)==($28|0);
    if (!($29)) {
     $30 = ($24>>>0)<($3>>>0);
     if ($30) {
      _abort();
      // unreachable;
     }
     $31 = ((($24)) + 12|0);
     $32 = HEAP32[$31>>2]|0;
     $33 = ($32|0)==($16|0);
     if (!($33)) {
      _abort();
      // unreachable;
     }
    }
    $34 = ($26|0)==($24|0);
    if ($34) {
     $35 = 1 << $21;
     $36 = $35 ^ -1;
     $37 = HEAP32[31821]|0;
     $38 = $37 & $36;
     HEAP32[31821] = $38;
     $$1 = $16;$$1380 = $17;
     break;
    }
    $39 = ($26|0)==($28|0);
    if ($39) {
     $$pre440 = ((($26)) + 8|0);
     $$pre$phi441Z2D = $$pre440;
    } else {
     $40 = ($26>>>0)<($3>>>0);
     if ($40) {
      _abort();
      // unreachable;
     }
     $41 = ((($26)) + 8|0);
     $42 = HEAP32[$41>>2]|0;
     $43 = ($42|0)==($16|0);
     if ($43) {
      $$pre$phi441Z2D = $41;
     } else {
      _abort();
      // unreachable;
     }
    }
    $44 = ((($24)) + 12|0);
    HEAP32[$44>>2] = $26;
    HEAP32[$$pre$phi441Z2D>>2] = $24;
    $$1 = $16;$$1380 = $17;
    break;
   }
   $45 = ((($16)) + 24|0);
   $46 = HEAP32[$45>>2]|0;
   $47 = ((($16)) + 12|0);
   $48 = HEAP32[$47>>2]|0;
   $49 = ($48|0)==($16|0);
   do {
    if ($49) {
     $59 = ((($16)) + 16|0);
     $60 = ((($59)) + 4|0);
     $61 = HEAP32[$60>>2]|0;
     $62 = ($61|0)==(0|0);
     if ($62) {
      $63 = HEAP32[$59>>2]|0;
      $64 = ($63|0)==(0|0);
      if ($64) {
       $$3 = 0;
       break;
      } else {
       $$1385 = $63;$$1388 = $59;
      }
     } else {
      $$1385 = $61;$$1388 = $60;
     }
     while(1) {
      $65 = ((($$1385)) + 20|0);
      $66 = HEAP32[$65>>2]|0;
      $67 = ($66|0)==(0|0);
      if (!($67)) {
       $$1385 = $66;$$1388 = $65;
       continue;
      }
      $68 = ((($$1385)) + 16|0);
      $69 = HEAP32[$68>>2]|0;
      $70 = ($69|0)==(0|0);
      if ($70) {
       break;
      } else {
       $$1385 = $69;$$1388 = $68;
      }
     }
     $71 = ($$1388>>>0)<($3>>>0);
     if ($71) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1388>>2] = 0;
      $$3 = $$1385;
      break;
     }
    } else {
     $50 = ((($16)) + 8|0);
     $51 = HEAP32[$50>>2]|0;
     $52 = ($51>>>0)<($3>>>0);
     if ($52) {
      _abort();
      // unreachable;
     }
     $53 = ((($51)) + 12|0);
     $54 = HEAP32[$53>>2]|0;
     $55 = ($54|0)==($16|0);
     if (!($55)) {
      _abort();
      // unreachable;
     }
     $56 = ((($48)) + 8|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==($16|0);
     if ($58) {
      HEAP32[$53>>2] = $48;
      HEAP32[$56>>2] = $51;
      $$3 = $48;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $72 = ($46|0)==(0|0);
   if ($72) {
    $$1 = $16;$$1380 = $17;
   } else {
    $73 = ((($16)) + 28|0);
    $74 = HEAP32[$73>>2]|0;
    $75 = (127588 + ($74<<2)|0);
    $76 = HEAP32[$75>>2]|0;
    $77 = ($16|0)==($76|0);
    if ($77) {
     HEAP32[$75>>2] = $$3;
     $cond418 = ($$3|0)==(0|0);
     if ($cond418) {
      $78 = 1 << $74;
      $79 = $78 ^ -1;
      $80 = HEAP32[(127288)>>2]|0;
      $81 = $80 & $79;
      HEAP32[(127288)>>2] = $81;
      $$1 = $16;$$1380 = $17;
      break;
     }
    } else {
     $82 = HEAP32[(127300)>>2]|0;
     $83 = ($46>>>0)<($82>>>0);
     if ($83) {
      _abort();
      // unreachable;
     }
     $84 = ((($46)) + 16|0);
     $85 = HEAP32[$84>>2]|0;
     $86 = ($85|0)==($16|0);
     if ($86) {
      HEAP32[$84>>2] = $$3;
     } else {
      $87 = ((($46)) + 20|0);
      HEAP32[$87>>2] = $$3;
     }
     $88 = ($$3|0)==(0|0);
     if ($88) {
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
    $89 = HEAP32[(127300)>>2]|0;
    $90 = ($$3>>>0)<($89>>>0);
    if ($90) {
     _abort();
     // unreachable;
    }
    $91 = ((($$3)) + 24|0);
    HEAP32[$91>>2] = $46;
    $92 = ((($16)) + 16|0);
    $93 = HEAP32[$92>>2]|0;
    $94 = ($93|0)==(0|0);
    do {
     if (!($94)) {
      $95 = ($93>>>0)<($89>>>0);
      if ($95) {
       _abort();
       // unreachable;
      } else {
       $96 = ((($$3)) + 16|0);
       HEAP32[$96>>2] = $93;
       $97 = ((($93)) + 24|0);
       HEAP32[$97>>2] = $$3;
       break;
      }
     }
    } while(0);
    $98 = ((($92)) + 4|0);
    $99 = HEAP32[$98>>2]|0;
    $100 = ($99|0)==(0|0);
    if ($100) {
     $$1 = $16;$$1380 = $17;
    } else {
     $101 = HEAP32[(127300)>>2]|0;
     $102 = ($99>>>0)<($101>>>0);
     if ($102) {
      _abort();
      // unreachable;
     } else {
      $103 = ((($$3)) + 20|0);
      HEAP32[$103>>2] = $99;
      $104 = ((($99)) + 24|0);
      HEAP32[$104>>2] = $$3;
      $$1 = $16;$$1380 = $17;
      break;
     }
    }
   }
  } else {
   $$1 = $2;$$1380 = $9;
  }
 } while(0);
 $113 = ($$1>>>0)<($10>>>0);
 if (!($113)) {
  _abort();
  // unreachable;
 }
 $114 = ((($10)) + 4|0);
 $115 = HEAP32[$114>>2]|0;
 $116 = $115 & 1;
 $117 = ($116|0)==(0);
 if ($117) {
  _abort();
  // unreachable;
 }
 $118 = $115 & 2;
 $119 = ($118|0)==(0);
 if ($119) {
  $120 = HEAP32[(127308)>>2]|0;
  $121 = ($10|0)==($120|0);
  if ($121) {
   $122 = HEAP32[(127296)>>2]|0;
   $123 = (($122) + ($$1380))|0;
   HEAP32[(127296)>>2] = $123;
   HEAP32[(127308)>>2] = $$1;
   $124 = $123 | 1;
   $125 = ((($$1)) + 4|0);
   HEAP32[$125>>2] = $124;
   $126 = HEAP32[(127304)>>2]|0;
   $127 = ($$1|0)==($126|0);
   if (!($127)) {
    return;
   }
   HEAP32[(127304)>>2] = 0;
   HEAP32[(127292)>>2] = 0;
   return;
  }
  $128 = HEAP32[(127304)>>2]|0;
  $129 = ($10|0)==($128|0);
  if ($129) {
   $130 = HEAP32[(127292)>>2]|0;
   $131 = (($130) + ($$1380))|0;
   HEAP32[(127292)>>2] = $131;
   HEAP32[(127304)>>2] = $$1;
   $132 = $131 | 1;
   $133 = ((($$1)) + 4|0);
   HEAP32[$133>>2] = $132;
   $134 = (($$1) + ($131)|0);
   HEAP32[$134>>2] = $131;
   return;
  }
  $135 = $115 & -8;
  $136 = (($135) + ($$1380))|0;
  $137 = $115 >>> 3;
  $138 = ($115>>>0)<(256);
  do {
   if ($138) {
    $139 = ((($10)) + 8|0);
    $140 = HEAP32[$139>>2]|0;
    $141 = ((($10)) + 12|0);
    $142 = HEAP32[$141>>2]|0;
    $143 = $137 << 1;
    $144 = (127324 + ($143<<2)|0);
    $145 = ($140|0)==($144|0);
    if (!($145)) {
     $146 = HEAP32[(127300)>>2]|0;
     $147 = ($140>>>0)<($146>>>0);
     if ($147) {
      _abort();
      // unreachable;
     }
     $148 = ((($140)) + 12|0);
     $149 = HEAP32[$148>>2]|0;
     $150 = ($149|0)==($10|0);
     if (!($150)) {
      _abort();
      // unreachable;
     }
    }
    $151 = ($142|0)==($140|0);
    if ($151) {
     $152 = 1 << $137;
     $153 = $152 ^ -1;
     $154 = HEAP32[31821]|0;
     $155 = $154 & $153;
     HEAP32[31821] = $155;
     break;
    }
    $156 = ($142|0)==($144|0);
    if ($156) {
     $$pre438 = ((($142)) + 8|0);
     $$pre$phi439Z2D = $$pre438;
    } else {
     $157 = HEAP32[(127300)>>2]|0;
     $158 = ($142>>>0)<($157>>>0);
     if ($158) {
      _abort();
      // unreachable;
     }
     $159 = ((($142)) + 8|0);
     $160 = HEAP32[$159>>2]|0;
     $161 = ($160|0)==($10|0);
     if ($161) {
      $$pre$phi439Z2D = $159;
     } else {
      _abort();
      // unreachable;
     }
    }
    $162 = ((($140)) + 12|0);
    HEAP32[$162>>2] = $142;
    HEAP32[$$pre$phi439Z2D>>2] = $140;
   } else {
    $163 = ((($10)) + 24|0);
    $164 = HEAP32[$163>>2]|0;
    $165 = ((($10)) + 12|0);
    $166 = HEAP32[$165>>2]|0;
    $167 = ($166|0)==($10|0);
    do {
     if ($167) {
      $178 = ((($10)) + 16|0);
      $179 = ((($178)) + 4|0);
      $180 = HEAP32[$179>>2]|0;
      $181 = ($180|0)==(0|0);
      if ($181) {
       $182 = HEAP32[$178>>2]|0;
       $183 = ($182|0)==(0|0);
       if ($183) {
        $$3398 = 0;
        break;
       } else {
        $$1396 = $182;$$1400 = $178;
       }
      } else {
       $$1396 = $180;$$1400 = $179;
      }
      while(1) {
       $184 = ((($$1396)) + 20|0);
       $185 = HEAP32[$184>>2]|0;
       $186 = ($185|0)==(0|0);
       if (!($186)) {
        $$1396 = $185;$$1400 = $184;
        continue;
       }
       $187 = ((($$1396)) + 16|0);
       $188 = HEAP32[$187>>2]|0;
       $189 = ($188|0)==(0|0);
       if ($189) {
        break;
       } else {
        $$1396 = $188;$$1400 = $187;
       }
      }
      $190 = HEAP32[(127300)>>2]|0;
      $191 = ($$1400>>>0)<($190>>>0);
      if ($191) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1400>>2] = 0;
       $$3398 = $$1396;
       break;
      }
     } else {
      $168 = ((($10)) + 8|0);
      $169 = HEAP32[$168>>2]|0;
      $170 = HEAP32[(127300)>>2]|0;
      $171 = ($169>>>0)<($170>>>0);
      if ($171) {
       _abort();
       // unreachable;
      }
      $172 = ((($169)) + 12|0);
      $173 = HEAP32[$172>>2]|0;
      $174 = ($173|0)==($10|0);
      if (!($174)) {
       _abort();
       // unreachable;
      }
      $175 = ((($166)) + 8|0);
      $176 = HEAP32[$175>>2]|0;
      $177 = ($176|0)==($10|0);
      if ($177) {
       HEAP32[$172>>2] = $166;
       HEAP32[$175>>2] = $169;
       $$3398 = $166;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $192 = ($164|0)==(0|0);
    if (!($192)) {
     $193 = ((($10)) + 28|0);
     $194 = HEAP32[$193>>2]|0;
     $195 = (127588 + ($194<<2)|0);
     $196 = HEAP32[$195>>2]|0;
     $197 = ($10|0)==($196|0);
     if ($197) {
      HEAP32[$195>>2] = $$3398;
      $cond419 = ($$3398|0)==(0|0);
      if ($cond419) {
       $198 = 1 << $194;
       $199 = $198 ^ -1;
       $200 = HEAP32[(127288)>>2]|0;
       $201 = $200 & $199;
       HEAP32[(127288)>>2] = $201;
       break;
      }
     } else {
      $202 = HEAP32[(127300)>>2]|0;
      $203 = ($164>>>0)<($202>>>0);
      if ($203) {
       _abort();
       // unreachable;
      }
      $204 = ((($164)) + 16|0);
      $205 = HEAP32[$204>>2]|0;
      $206 = ($205|0)==($10|0);
      if ($206) {
       HEAP32[$204>>2] = $$3398;
      } else {
       $207 = ((($164)) + 20|0);
       HEAP32[$207>>2] = $$3398;
      }
      $208 = ($$3398|0)==(0|0);
      if ($208) {
       break;
      }
     }
     $209 = HEAP32[(127300)>>2]|0;
     $210 = ($$3398>>>0)<($209>>>0);
     if ($210) {
      _abort();
      // unreachable;
     }
     $211 = ((($$3398)) + 24|0);
     HEAP32[$211>>2] = $164;
     $212 = ((($10)) + 16|0);
     $213 = HEAP32[$212>>2]|0;
     $214 = ($213|0)==(0|0);
     do {
      if (!($214)) {
       $215 = ($213>>>0)<($209>>>0);
       if ($215) {
        _abort();
        // unreachable;
       } else {
        $216 = ((($$3398)) + 16|0);
        HEAP32[$216>>2] = $213;
        $217 = ((($213)) + 24|0);
        HEAP32[$217>>2] = $$3398;
        break;
       }
      }
     } while(0);
     $218 = ((($212)) + 4|0);
     $219 = HEAP32[$218>>2]|0;
     $220 = ($219|0)==(0|0);
     if (!($220)) {
      $221 = HEAP32[(127300)>>2]|0;
      $222 = ($219>>>0)<($221>>>0);
      if ($222) {
       _abort();
       // unreachable;
      } else {
       $223 = ((($$3398)) + 20|0);
       HEAP32[$223>>2] = $219;
       $224 = ((($219)) + 24|0);
       HEAP32[$224>>2] = $$3398;
       break;
      }
     }
    }
   }
  } while(0);
  $225 = $136 | 1;
  $226 = ((($$1)) + 4|0);
  HEAP32[$226>>2] = $225;
  $227 = (($$1) + ($136)|0);
  HEAP32[$227>>2] = $136;
  $228 = HEAP32[(127304)>>2]|0;
  $229 = ($$1|0)==($228|0);
  if ($229) {
   HEAP32[(127292)>>2] = $136;
   return;
  } else {
   $$2 = $136;
  }
 } else {
  $230 = $115 & -2;
  HEAP32[$114>>2] = $230;
  $231 = $$1380 | 1;
  $232 = ((($$1)) + 4|0);
  HEAP32[$232>>2] = $231;
  $233 = (($$1) + ($$1380)|0);
  HEAP32[$233>>2] = $$1380;
  $$2 = $$1380;
 }
 $234 = $$2 >>> 3;
 $235 = ($$2>>>0)<(256);
 if ($235) {
  $236 = $234 << 1;
  $237 = (127324 + ($236<<2)|0);
  $238 = HEAP32[31821]|0;
  $239 = 1 << $234;
  $240 = $238 & $239;
  $241 = ($240|0)==(0);
  if ($241) {
   $242 = $238 | $239;
   HEAP32[31821] = $242;
   $$pre = ((($237)) + 8|0);
   $$0401 = $237;$$pre$phiZ2D = $$pre;
  } else {
   $243 = ((($237)) + 8|0);
   $244 = HEAP32[$243>>2]|0;
   $245 = HEAP32[(127300)>>2]|0;
   $246 = ($244>>>0)<($245>>>0);
   if ($246) {
    _abort();
    // unreachable;
   } else {
    $$0401 = $244;$$pre$phiZ2D = $243;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $247 = ((($$0401)) + 12|0);
  HEAP32[$247>>2] = $$1;
  $248 = ((($$1)) + 8|0);
  HEAP32[$248>>2] = $$0401;
  $249 = ((($$1)) + 12|0);
  HEAP32[$249>>2] = $237;
  return;
 }
 $250 = $$2 >>> 8;
 $251 = ($250|0)==(0);
 if ($251) {
  $$0394 = 0;
 } else {
  $252 = ($$2>>>0)>(16777215);
  if ($252) {
   $$0394 = 31;
  } else {
   $253 = (($250) + 1048320)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 8;
   $256 = $250 << $255;
   $257 = (($256) + 520192)|0;
   $258 = $257 >>> 16;
   $259 = $258 & 4;
   $260 = $259 | $255;
   $261 = $256 << $259;
   $262 = (($261) + 245760)|0;
   $263 = $262 >>> 16;
   $264 = $263 & 2;
   $265 = $260 | $264;
   $266 = (14 - ($265))|0;
   $267 = $261 << $264;
   $268 = $267 >>> 15;
   $269 = (($266) + ($268))|0;
   $270 = $269 << 1;
   $271 = (($269) + 7)|0;
   $272 = $$2 >>> $271;
   $273 = $272 & 1;
   $274 = $273 | $270;
   $$0394 = $274;
  }
 }
 $275 = (127588 + ($$0394<<2)|0);
 $276 = ((($$1)) + 28|0);
 HEAP32[$276>>2] = $$0394;
 $277 = ((($$1)) + 16|0);
 $278 = ((($$1)) + 20|0);
 HEAP32[$278>>2] = 0;
 HEAP32[$277>>2] = 0;
 $279 = HEAP32[(127288)>>2]|0;
 $280 = 1 << $$0394;
 $281 = $279 & $280;
 $282 = ($281|0)==(0);
 do {
  if ($282) {
   $283 = $279 | $280;
   HEAP32[(127288)>>2] = $283;
   HEAP32[$275>>2] = $$1;
   $284 = ((($$1)) + 24|0);
   HEAP32[$284>>2] = $275;
   $285 = ((($$1)) + 12|0);
   HEAP32[$285>>2] = $$1;
   $286 = ((($$1)) + 8|0);
   HEAP32[$286>>2] = $$1;
  } else {
   $287 = HEAP32[$275>>2]|0;
   $288 = ($$0394|0)==(31);
   $289 = $$0394 >>> 1;
   $290 = (25 - ($289))|0;
   $291 = $288 ? 0 : $290;
   $292 = $$2 << $291;
   $$0381 = $292;$$0382 = $287;
   while(1) {
    $293 = ((($$0382)) + 4|0);
    $294 = HEAP32[$293>>2]|0;
    $295 = $294 & -8;
    $296 = ($295|0)==($$2|0);
    if ($296) {
     label = 130;
     break;
    }
    $297 = $$0381 >>> 31;
    $298 = (((($$0382)) + 16|0) + ($297<<2)|0);
    $299 = $$0381 << 1;
    $300 = HEAP32[$298>>2]|0;
    $301 = ($300|0)==(0|0);
    if ($301) {
     label = 127;
     break;
    } else {
     $$0381 = $299;$$0382 = $300;
    }
   }
   if ((label|0) == 127) {
    $302 = HEAP32[(127300)>>2]|0;
    $303 = ($298>>>0)<($302>>>0);
    if ($303) {
     _abort();
     // unreachable;
    } else {
     HEAP32[$298>>2] = $$1;
     $304 = ((($$1)) + 24|0);
     HEAP32[$304>>2] = $$0382;
     $305 = ((($$1)) + 12|0);
     HEAP32[$305>>2] = $$1;
     $306 = ((($$1)) + 8|0);
     HEAP32[$306>>2] = $$1;
     break;
    }
   }
   else if ((label|0) == 130) {
    $307 = ((($$0382)) + 8|0);
    $308 = HEAP32[$307>>2]|0;
    $309 = HEAP32[(127300)>>2]|0;
    $310 = ($308>>>0)>=($309>>>0);
    $not$ = ($$0382>>>0)>=($309>>>0);
    $311 = $310 & $not$;
    if ($311) {
     $312 = ((($308)) + 12|0);
     HEAP32[$312>>2] = $$1;
     HEAP32[$307>>2] = $$1;
     $313 = ((($$1)) + 8|0);
     HEAP32[$313>>2] = $308;
     $314 = ((($$1)) + 12|0);
     HEAP32[$314>>2] = $$0382;
     $315 = ((($$1)) + 24|0);
     HEAP32[$315>>2] = 0;
     break;
    } else {
     _abort();
     // unreachable;
    }
   }
  }
 } while(0);
 $316 = HEAP32[(127316)>>2]|0;
 $317 = (($316) + -1)|0;
 HEAP32[(127316)>>2] = $317;
 $318 = ($317|0)==(0);
 if ($318) {
  $$0211$in$i = (127740);
 } else {
  return;
 }
 while(1) {
  $$0211$i = HEAP32[$$0211$in$i>>2]|0;
  $319 = ($$0211$i|0)==(0|0);
  $320 = ((($$0211$i)) + 8|0);
  if ($319) {
   break;
  } else {
   $$0211$in$i = $320;
  }
 }
 HEAP32[(127316)>>2] = -1;
 return;
}
function _calloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$ = 0, $$0 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0);
 if ($2) {
  $$0 = 0;
 } else {
  $3 = Math_imul($1, $0)|0;
  $4 = $1 | $0;
  $5 = ($4>>>0)>(65535);
  if ($5) {
   $6 = (($3>>>0) / ($0>>>0))&-1;
   $7 = ($6|0)==($1|0);
   $$ = $7 ? $3 : -1;
   $$0 = $$;
  } else {
   $$0 = $3;
  }
 }
 $8 = (_malloc($$0)|0);
 $9 = ($8|0)==(0|0);
 if ($9) {
  return ($8|0);
 }
 $10 = ((($8)) + -4|0);
 $11 = HEAP32[$10>>2]|0;
 $12 = $11 & 3;
 $13 = ($12|0)==(0);
 if ($13) {
  return ($8|0);
 }
 _memset(($8|0),0,($$0|0))|0;
 return ($8|0);
}
function _realloc($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ($0|0)==(0|0);
 if ($2) {
  $3 = (_malloc($1)|0);
  $$1 = $3;
  return ($$1|0);
 }
 $4 = ($1>>>0)>(4294967231);
 if ($4) {
  $5 = (___errno_location()|0);
  HEAP32[$5>>2] = 12;
  $$1 = 0;
  return ($$1|0);
 }
 $6 = ($1>>>0)<(11);
 $7 = (($1) + 11)|0;
 $8 = $7 & -8;
 $9 = $6 ? 16 : $8;
 $10 = ((($0)) + -8|0);
 $11 = (_try_realloc_chunk($10,$9)|0);
 $12 = ($11|0)==(0|0);
 if (!($12)) {
  $13 = ((($11)) + 8|0);
  $$1 = $13;
  return ($$1|0);
 }
 $14 = (_malloc($1)|0);
 $15 = ($14|0)==(0|0);
 if ($15) {
  $$1 = 0;
  return ($$1|0);
 }
 $16 = ((($0)) + -4|0);
 $17 = HEAP32[$16>>2]|0;
 $18 = $17 & -8;
 $19 = $17 & 3;
 $20 = ($19|0)==(0);
 $21 = $20 ? 8 : 4;
 $22 = (($18) - ($21))|0;
 $23 = ($22>>>0)<($1>>>0);
 $24 = $23 ? $22 : $1;
 _memcpy(($14|0),($0|0),($24|0))|0;
 _free($0);
 $$1 = $14;
 return ($$1|0);
}
function _try_realloc_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$1271 = 0, $$1274 = 0, $$2 = 0, $$3 = 0, $$pre = 0, $$pre$phiZ2D = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0;
 var $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0;
 var $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0;
 var $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0;
 var $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $cond = 0, $notlhs = 0, $notrhs = 0, $or$cond$not = 0, $or$cond3 = 0, $storemerge = 0, $storemerge1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = ((($0)) + 4|0);
 $3 = HEAP32[$2>>2]|0;
 $4 = $3 & -8;
 $5 = (($0) + ($4)|0);
 $6 = HEAP32[(127300)>>2]|0;
 $7 = $3 & 3;
 $notlhs = ($0>>>0)>=($6>>>0);
 $notrhs = ($7|0)!=(1);
 $or$cond$not = $notrhs & $notlhs;
 $8 = ($0>>>0)<($5>>>0);
 $or$cond3 = $or$cond$not & $8;
 if (!($or$cond3)) {
  _abort();
  // unreachable;
 }
 $9 = ((($5)) + 4|0);
 $10 = HEAP32[$9>>2]|0;
 $11 = $10 & 1;
 $12 = ($11|0)==(0);
 if ($12) {
  _abort();
  // unreachable;
 }
 $13 = ($7|0)==(0);
 if ($13) {
  $14 = ($1>>>0)<(256);
  if ($14) {
   $$2 = 0;
   return ($$2|0);
  }
  $15 = (($1) + 4)|0;
  $16 = ($4>>>0)<($15>>>0);
  if (!($16)) {
   $17 = (($4) - ($1))|0;
   $18 = HEAP32[(127764)>>2]|0;
   $19 = $18 << 1;
   $20 = ($17>>>0)>($19>>>0);
   if (!($20)) {
    $$2 = $0;
    return ($$2|0);
   }
  }
  $$2 = 0;
  return ($$2|0);
 }
 $21 = ($4>>>0)<($1>>>0);
 if (!($21)) {
  $22 = (($4) - ($1))|0;
  $23 = ($22>>>0)>(15);
  if (!($23)) {
   $$2 = $0;
   return ($$2|0);
  }
  $24 = (($0) + ($1)|0);
  $25 = $3 & 1;
  $26 = $25 | $1;
  $27 = $26 | 2;
  HEAP32[$2>>2] = $27;
  $28 = ((($24)) + 4|0);
  $29 = $22 | 3;
  HEAP32[$28>>2] = $29;
  $30 = (($24) + ($22)|0);
  $31 = ((($30)) + 4|0);
  $32 = HEAP32[$31>>2]|0;
  $33 = $32 | 1;
  HEAP32[$31>>2] = $33;
  _dispose_chunk($24,$22);
  $$2 = $0;
  return ($$2|0);
 }
 $34 = HEAP32[(127308)>>2]|0;
 $35 = ($5|0)==($34|0);
 if ($35) {
  $36 = HEAP32[(127296)>>2]|0;
  $37 = (($36) + ($4))|0;
  $38 = ($37>>>0)>($1>>>0);
  if (!($38)) {
   $$2 = 0;
   return ($$2|0);
  }
  $39 = (($37) - ($1))|0;
  $40 = (($0) + ($1)|0);
  $41 = $3 & 1;
  $42 = $41 | $1;
  $43 = $42 | 2;
  HEAP32[$2>>2] = $43;
  $44 = ((($40)) + 4|0);
  $45 = $39 | 1;
  HEAP32[$44>>2] = $45;
  HEAP32[(127308)>>2] = $40;
  HEAP32[(127296)>>2] = $39;
  $$2 = $0;
  return ($$2|0);
 }
 $46 = HEAP32[(127304)>>2]|0;
 $47 = ($5|0)==($46|0);
 if ($47) {
  $48 = HEAP32[(127292)>>2]|0;
  $49 = (($48) + ($4))|0;
  $50 = ($49>>>0)<($1>>>0);
  if ($50) {
   $$2 = 0;
   return ($$2|0);
  }
  $51 = (($49) - ($1))|0;
  $52 = ($51>>>0)>(15);
  if ($52) {
   $53 = (($0) + ($1)|0);
   $54 = (($53) + ($51)|0);
   $55 = $3 & 1;
   $56 = $55 | $1;
   $57 = $56 | 2;
   HEAP32[$2>>2] = $57;
   $58 = ((($53)) + 4|0);
   $59 = $51 | 1;
   HEAP32[$58>>2] = $59;
   HEAP32[$54>>2] = $51;
   $60 = ((($54)) + 4|0);
   $61 = HEAP32[$60>>2]|0;
   $62 = $61 & -2;
   HEAP32[$60>>2] = $62;
   $storemerge = $53;$storemerge1 = $51;
  } else {
   $63 = $3 & 1;
   $64 = $63 | $49;
   $65 = $64 | 2;
   HEAP32[$2>>2] = $65;
   $66 = (($0) + ($49)|0);
   $67 = ((($66)) + 4|0);
   $68 = HEAP32[$67>>2]|0;
   $69 = $68 | 1;
   HEAP32[$67>>2] = $69;
   $storemerge = 0;$storemerge1 = 0;
  }
  HEAP32[(127292)>>2] = $storemerge1;
  HEAP32[(127304)>>2] = $storemerge;
  $$2 = $0;
  return ($$2|0);
 }
 $70 = $10 & 2;
 $71 = ($70|0)==(0);
 if (!($71)) {
  $$2 = 0;
  return ($$2|0);
 }
 $72 = $10 & -8;
 $73 = (($72) + ($4))|0;
 $74 = ($73>>>0)<($1>>>0);
 if ($74) {
  $$2 = 0;
  return ($$2|0);
 }
 $75 = (($73) - ($1))|0;
 $76 = $10 >>> 3;
 $77 = ($10>>>0)<(256);
 do {
  if ($77) {
   $78 = ((($5)) + 8|0);
   $79 = HEAP32[$78>>2]|0;
   $80 = ((($5)) + 12|0);
   $81 = HEAP32[$80>>2]|0;
   $82 = $76 << 1;
   $83 = (127324 + ($82<<2)|0);
   $84 = ($79|0)==($83|0);
   if (!($84)) {
    $85 = ($79>>>0)<($6>>>0);
    if ($85) {
     _abort();
     // unreachable;
    }
    $86 = ((($79)) + 12|0);
    $87 = HEAP32[$86>>2]|0;
    $88 = ($87|0)==($5|0);
    if (!($88)) {
     _abort();
     // unreachable;
    }
   }
   $89 = ($81|0)==($79|0);
   if ($89) {
    $90 = 1 << $76;
    $91 = $90 ^ -1;
    $92 = HEAP32[31821]|0;
    $93 = $92 & $91;
    HEAP32[31821] = $93;
    break;
   }
   $94 = ($81|0)==($83|0);
   if ($94) {
    $$pre = ((($81)) + 8|0);
    $$pre$phiZ2D = $$pre;
   } else {
    $95 = ($81>>>0)<($6>>>0);
    if ($95) {
     _abort();
     // unreachable;
    }
    $96 = ((($81)) + 8|0);
    $97 = HEAP32[$96>>2]|0;
    $98 = ($97|0)==($5|0);
    if ($98) {
     $$pre$phiZ2D = $96;
    } else {
     _abort();
     // unreachable;
    }
   }
   $99 = ((($79)) + 12|0);
   HEAP32[$99>>2] = $81;
   HEAP32[$$pre$phiZ2D>>2] = $79;
  } else {
   $100 = ((($5)) + 24|0);
   $101 = HEAP32[$100>>2]|0;
   $102 = ((($5)) + 12|0);
   $103 = HEAP32[$102>>2]|0;
   $104 = ($103|0)==($5|0);
   do {
    if ($104) {
     $114 = ((($5)) + 16|0);
     $115 = ((($114)) + 4|0);
     $116 = HEAP32[$115>>2]|0;
     $117 = ($116|0)==(0|0);
     if ($117) {
      $118 = HEAP32[$114>>2]|0;
      $119 = ($118|0)==(0|0);
      if ($119) {
       $$3 = 0;
       break;
      } else {
       $$1271 = $118;$$1274 = $114;
      }
     } else {
      $$1271 = $116;$$1274 = $115;
     }
     while(1) {
      $120 = ((($$1271)) + 20|0);
      $121 = HEAP32[$120>>2]|0;
      $122 = ($121|0)==(0|0);
      if (!($122)) {
       $$1271 = $121;$$1274 = $120;
       continue;
      }
      $123 = ((($$1271)) + 16|0);
      $124 = HEAP32[$123>>2]|0;
      $125 = ($124|0)==(0|0);
      if ($125) {
       break;
      } else {
       $$1271 = $124;$$1274 = $123;
      }
     }
     $126 = ($$1274>>>0)<($6>>>0);
     if ($126) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1274>>2] = 0;
      $$3 = $$1271;
      break;
     }
    } else {
     $105 = ((($5)) + 8|0);
     $106 = HEAP32[$105>>2]|0;
     $107 = ($106>>>0)<($6>>>0);
     if ($107) {
      _abort();
      // unreachable;
     }
     $108 = ((($106)) + 12|0);
     $109 = HEAP32[$108>>2]|0;
     $110 = ($109|0)==($5|0);
     if (!($110)) {
      _abort();
      // unreachable;
     }
     $111 = ((($103)) + 8|0);
     $112 = HEAP32[$111>>2]|0;
     $113 = ($112|0)==($5|0);
     if ($113) {
      HEAP32[$108>>2] = $103;
      HEAP32[$111>>2] = $106;
      $$3 = $103;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $127 = ($101|0)==(0|0);
   if (!($127)) {
    $128 = ((($5)) + 28|0);
    $129 = HEAP32[$128>>2]|0;
    $130 = (127588 + ($129<<2)|0);
    $131 = HEAP32[$130>>2]|0;
    $132 = ($5|0)==($131|0);
    if ($132) {
     HEAP32[$130>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $133 = 1 << $129;
      $134 = $133 ^ -1;
      $135 = HEAP32[(127288)>>2]|0;
      $136 = $135 & $134;
      HEAP32[(127288)>>2] = $136;
      break;
     }
    } else {
     $137 = HEAP32[(127300)>>2]|0;
     $138 = ($101>>>0)<($137>>>0);
     if ($138) {
      _abort();
      // unreachable;
     }
     $139 = ((($101)) + 16|0);
     $140 = HEAP32[$139>>2]|0;
     $141 = ($140|0)==($5|0);
     if ($141) {
      HEAP32[$139>>2] = $$3;
     } else {
      $142 = ((($101)) + 20|0);
      HEAP32[$142>>2] = $$3;
     }
     $143 = ($$3|0)==(0|0);
     if ($143) {
      break;
     }
    }
    $144 = HEAP32[(127300)>>2]|0;
    $145 = ($$3>>>0)<($144>>>0);
    if ($145) {
     _abort();
     // unreachable;
    }
    $146 = ((($$3)) + 24|0);
    HEAP32[$146>>2] = $101;
    $147 = ((($5)) + 16|0);
    $148 = HEAP32[$147>>2]|0;
    $149 = ($148|0)==(0|0);
    do {
     if (!($149)) {
      $150 = ($148>>>0)<($144>>>0);
      if ($150) {
       _abort();
       // unreachable;
      } else {
       $151 = ((($$3)) + 16|0);
       HEAP32[$151>>2] = $148;
       $152 = ((($148)) + 24|0);
       HEAP32[$152>>2] = $$3;
       break;
      }
     }
    } while(0);
    $153 = ((($147)) + 4|0);
    $154 = HEAP32[$153>>2]|0;
    $155 = ($154|0)==(0|0);
    if (!($155)) {
     $156 = HEAP32[(127300)>>2]|0;
     $157 = ($154>>>0)<($156>>>0);
     if ($157) {
      _abort();
      // unreachable;
     } else {
      $158 = ((($$3)) + 20|0);
      HEAP32[$158>>2] = $154;
      $159 = ((($154)) + 24|0);
      HEAP32[$159>>2] = $$3;
      break;
     }
    }
   }
  }
 } while(0);
 $160 = ($75>>>0)<(16);
 if ($160) {
  $161 = $3 & 1;
  $162 = $73 | $161;
  $163 = $162 | 2;
  HEAP32[$2>>2] = $163;
  $164 = (($0) + ($73)|0);
  $165 = ((($164)) + 4|0);
  $166 = HEAP32[$165>>2]|0;
  $167 = $166 | 1;
  HEAP32[$165>>2] = $167;
  $$2 = $0;
  return ($$2|0);
 } else {
  $168 = (($0) + ($1)|0);
  $169 = $3 & 1;
  $170 = $169 | $1;
  $171 = $170 | 2;
  HEAP32[$2>>2] = $171;
  $172 = ((($168)) + 4|0);
  $173 = $75 | 3;
  HEAP32[$172>>2] = $173;
  $174 = (($168) + ($75)|0);
  $175 = ((($174)) + 4|0);
  $176 = HEAP32[$175>>2]|0;
  $177 = $176 | 1;
  HEAP32[$175>>2] = $177;
  _dispose_chunk($168,$75);
  $$2 = $0;
  return ($$2|0);
 }
 return (0)|0;
}
function _dispose_chunk($0,$1) {
 $0 = $0|0;
 $1 = $1|0;
 var $$0417 = 0, $$0418 = 0, $$0429 = 0, $$0436 = 0, $$1 = 0, $$1416 = 0, $$1424 = 0, $$1427 = 0, $$1431 = 0, $$1435 = 0, $$2 = 0, $$3 = 0, $$3433 = 0, $$pre = 0, $$pre$phi22Z2D = 0, $$pre$phi24Z2D = 0, $$pre$phiZ2D = 0, $$pre21 = 0, $$pre23 = 0, $10 = 0;
 var $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0;
 var $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0;
 var $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0;
 var $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0;
 var $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0;
 var $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0;
 var $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0;
 var $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0;
 var $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0;
 var $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0;
 var $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0;
 var $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cond = 0, $cond16 = 0, $not$ = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $2 = (($0) + ($1)|0);
 $3 = ((($0)) + 4|0);
 $4 = HEAP32[$3>>2]|0;
 $5 = $4 & 1;
 $6 = ($5|0)==(0);
 do {
  if ($6) {
   $7 = HEAP32[$0>>2]|0;
   $8 = $4 & 3;
   $9 = ($8|0)==(0);
   if ($9) {
    return;
   }
   $10 = (0 - ($7))|0;
   $11 = (($0) + ($10)|0);
   $12 = (($7) + ($1))|0;
   $13 = HEAP32[(127300)>>2]|0;
   $14 = ($11>>>0)<($13>>>0);
   if ($14) {
    _abort();
    // unreachable;
   }
   $15 = HEAP32[(127304)>>2]|0;
   $16 = ($11|0)==($15|0);
   if ($16) {
    $101 = ((($2)) + 4|0);
    $102 = HEAP32[$101>>2]|0;
    $103 = $102 & 3;
    $104 = ($103|0)==(3);
    if (!($104)) {
     $$1 = $11;$$1416 = $12;
     break;
    }
    HEAP32[(127292)>>2] = $12;
    $105 = $102 & -2;
    HEAP32[$101>>2] = $105;
    $106 = $12 | 1;
    $107 = ((($11)) + 4|0);
    HEAP32[$107>>2] = $106;
    $108 = (($11) + ($12)|0);
    HEAP32[$108>>2] = $12;
    return;
   }
   $17 = $7 >>> 3;
   $18 = ($7>>>0)<(256);
   if ($18) {
    $19 = ((($11)) + 8|0);
    $20 = HEAP32[$19>>2]|0;
    $21 = ((($11)) + 12|0);
    $22 = HEAP32[$21>>2]|0;
    $23 = $17 << 1;
    $24 = (127324 + ($23<<2)|0);
    $25 = ($20|0)==($24|0);
    if (!($25)) {
     $26 = ($20>>>0)<($13>>>0);
     if ($26) {
      _abort();
      // unreachable;
     }
     $27 = ((($20)) + 12|0);
     $28 = HEAP32[$27>>2]|0;
     $29 = ($28|0)==($11|0);
     if (!($29)) {
      _abort();
      // unreachable;
     }
    }
    $30 = ($22|0)==($20|0);
    if ($30) {
     $31 = 1 << $17;
     $32 = $31 ^ -1;
     $33 = HEAP32[31821]|0;
     $34 = $33 & $32;
     HEAP32[31821] = $34;
     $$1 = $11;$$1416 = $12;
     break;
    }
    $35 = ($22|0)==($24|0);
    if ($35) {
     $$pre23 = ((($22)) + 8|0);
     $$pre$phi24Z2D = $$pre23;
    } else {
     $36 = ($22>>>0)<($13>>>0);
     if ($36) {
      _abort();
      // unreachable;
     }
     $37 = ((($22)) + 8|0);
     $38 = HEAP32[$37>>2]|0;
     $39 = ($38|0)==($11|0);
     if ($39) {
      $$pre$phi24Z2D = $37;
     } else {
      _abort();
      // unreachable;
     }
    }
    $40 = ((($20)) + 12|0);
    HEAP32[$40>>2] = $22;
    HEAP32[$$pre$phi24Z2D>>2] = $20;
    $$1 = $11;$$1416 = $12;
    break;
   }
   $41 = ((($11)) + 24|0);
   $42 = HEAP32[$41>>2]|0;
   $43 = ((($11)) + 12|0);
   $44 = HEAP32[$43>>2]|0;
   $45 = ($44|0)==($11|0);
   do {
    if ($45) {
     $55 = ((($11)) + 16|0);
     $56 = ((($55)) + 4|0);
     $57 = HEAP32[$56>>2]|0;
     $58 = ($57|0)==(0|0);
     if ($58) {
      $59 = HEAP32[$55>>2]|0;
      $60 = ($59|0)==(0|0);
      if ($60) {
       $$3 = 0;
       break;
      } else {
       $$1424 = $59;$$1427 = $55;
      }
     } else {
      $$1424 = $57;$$1427 = $56;
     }
     while(1) {
      $61 = ((($$1424)) + 20|0);
      $62 = HEAP32[$61>>2]|0;
      $63 = ($62|0)==(0|0);
      if (!($63)) {
       $$1424 = $62;$$1427 = $61;
       continue;
      }
      $64 = ((($$1424)) + 16|0);
      $65 = HEAP32[$64>>2]|0;
      $66 = ($65|0)==(0|0);
      if ($66) {
       break;
      } else {
       $$1424 = $65;$$1427 = $64;
      }
     }
     $67 = ($$1427>>>0)<($13>>>0);
     if ($67) {
      _abort();
      // unreachable;
     } else {
      HEAP32[$$1427>>2] = 0;
      $$3 = $$1424;
      break;
     }
    } else {
     $46 = ((($11)) + 8|0);
     $47 = HEAP32[$46>>2]|0;
     $48 = ($47>>>0)<($13>>>0);
     if ($48) {
      _abort();
      // unreachable;
     }
     $49 = ((($47)) + 12|0);
     $50 = HEAP32[$49>>2]|0;
     $51 = ($50|0)==($11|0);
     if (!($51)) {
      _abort();
      // unreachable;
     }
     $52 = ((($44)) + 8|0);
     $53 = HEAP32[$52>>2]|0;
     $54 = ($53|0)==($11|0);
     if ($54) {
      HEAP32[$49>>2] = $44;
      HEAP32[$52>>2] = $47;
      $$3 = $44;
      break;
     } else {
      _abort();
      // unreachable;
     }
    }
   } while(0);
   $68 = ($42|0)==(0|0);
   if ($68) {
    $$1 = $11;$$1416 = $12;
   } else {
    $69 = ((($11)) + 28|0);
    $70 = HEAP32[$69>>2]|0;
    $71 = (127588 + ($70<<2)|0);
    $72 = HEAP32[$71>>2]|0;
    $73 = ($11|0)==($72|0);
    if ($73) {
     HEAP32[$71>>2] = $$3;
     $cond = ($$3|0)==(0|0);
     if ($cond) {
      $74 = 1 << $70;
      $75 = $74 ^ -1;
      $76 = HEAP32[(127288)>>2]|0;
      $77 = $76 & $75;
      HEAP32[(127288)>>2] = $77;
      $$1 = $11;$$1416 = $12;
      break;
     }
    } else {
     $78 = HEAP32[(127300)>>2]|0;
     $79 = ($42>>>0)<($78>>>0);
     if ($79) {
      _abort();
      // unreachable;
     }
     $80 = ((($42)) + 16|0);
     $81 = HEAP32[$80>>2]|0;
     $82 = ($81|0)==($11|0);
     if ($82) {
      HEAP32[$80>>2] = $$3;
     } else {
      $83 = ((($42)) + 20|0);
      HEAP32[$83>>2] = $$3;
     }
     $84 = ($$3|0)==(0|0);
     if ($84) {
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
    $85 = HEAP32[(127300)>>2]|0;
    $86 = ($$3>>>0)<($85>>>0);
    if ($86) {
     _abort();
     // unreachable;
    }
    $87 = ((($$3)) + 24|0);
    HEAP32[$87>>2] = $42;
    $88 = ((($11)) + 16|0);
    $89 = HEAP32[$88>>2]|0;
    $90 = ($89|0)==(0|0);
    do {
     if (!($90)) {
      $91 = ($89>>>0)<($85>>>0);
      if ($91) {
       _abort();
       // unreachable;
      } else {
       $92 = ((($$3)) + 16|0);
       HEAP32[$92>>2] = $89;
       $93 = ((($89)) + 24|0);
       HEAP32[$93>>2] = $$3;
       break;
      }
     }
    } while(0);
    $94 = ((($88)) + 4|0);
    $95 = HEAP32[$94>>2]|0;
    $96 = ($95|0)==(0|0);
    if ($96) {
     $$1 = $11;$$1416 = $12;
    } else {
     $97 = HEAP32[(127300)>>2]|0;
     $98 = ($95>>>0)<($97>>>0);
     if ($98) {
      _abort();
      // unreachable;
     } else {
      $99 = ((($$3)) + 20|0);
      HEAP32[$99>>2] = $95;
      $100 = ((($95)) + 24|0);
      HEAP32[$100>>2] = $$3;
      $$1 = $11;$$1416 = $12;
      break;
     }
    }
   }
  } else {
   $$1 = $0;$$1416 = $1;
  }
 } while(0);
 $109 = HEAP32[(127300)>>2]|0;
 $110 = ($2>>>0)<($109>>>0);
 if ($110) {
  _abort();
  // unreachable;
 }
 $111 = ((($2)) + 4|0);
 $112 = HEAP32[$111>>2]|0;
 $113 = $112 & 2;
 $114 = ($113|0)==(0);
 if ($114) {
  $115 = HEAP32[(127308)>>2]|0;
  $116 = ($2|0)==($115|0);
  if ($116) {
   $117 = HEAP32[(127296)>>2]|0;
   $118 = (($117) + ($$1416))|0;
   HEAP32[(127296)>>2] = $118;
   HEAP32[(127308)>>2] = $$1;
   $119 = $118 | 1;
   $120 = ((($$1)) + 4|0);
   HEAP32[$120>>2] = $119;
   $121 = HEAP32[(127304)>>2]|0;
   $122 = ($$1|0)==($121|0);
   if (!($122)) {
    return;
   }
   HEAP32[(127304)>>2] = 0;
   HEAP32[(127292)>>2] = 0;
   return;
  }
  $123 = HEAP32[(127304)>>2]|0;
  $124 = ($2|0)==($123|0);
  if ($124) {
   $125 = HEAP32[(127292)>>2]|0;
   $126 = (($125) + ($$1416))|0;
   HEAP32[(127292)>>2] = $126;
   HEAP32[(127304)>>2] = $$1;
   $127 = $126 | 1;
   $128 = ((($$1)) + 4|0);
   HEAP32[$128>>2] = $127;
   $129 = (($$1) + ($126)|0);
   HEAP32[$129>>2] = $126;
   return;
  }
  $130 = $112 & -8;
  $131 = (($130) + ($$1416))|0;
  $132 = $112 >>> 3;
  $133 = ($112>>>0)<(256);
  do {
   if ($133) {
    $134 = ((($2)) + 8|0);
    $135 = HEAP32[$134>>2]|0;
    $136 = ((($2)) + 12|0);
    $137 = HEAP32[$136>>2]|0;
    $138 = $132 << 1;
    $139 = (127324 + ($138<<2)|0);
    $140 = ($135|0)==($139|0);
    if (!($140)) {
     $141 = ($135>>>0)<($109>>>0);
     if ($141) {
      _abort();
      // unreachable;
     }
     $142 = ((($135)) + 12|0);
     $143 = HEAP32[$142>>2]|0;
     $144 = ($143|0)==($2|0);
     if (!($144)) {
      _abort();
      // unreachable;
     }
    }
    $145 = ($137|0)==($135|0);
    if ($145) {
     $146 = 1 << $132;
     $147 = $146 ^ -1;
     $148 = HEAP32[31821]|0;
     $149 = $148 & $147;
     HEAP32[31821] = $149;
     break;
    }
    $150 = ($137|0)==($139|0);
    if ($150) {
     $$pre21 = ((($137)) + 8|0);
     $$pre$phi22Z2D = $$pre21;
    } else {
     $151 = ($137>>>0)<($109>>>0);
     if ($151) {
      _abort();
      // unreachable;
     }
     $152 = ((($137)) + 8|0);
     $153 = HEAP32[$152>>2]|0;
     $154 = ($153|0)==($2|0);
     if ($154) {
      $$pre$phi22Z2D = $152;
     } else {
      _abort();
      // unreachable;
     }
    }
    $155 = ((($135)) + 12|0);
    HEAP32[$155>>2] = $137;
    HEAP32[$$pre$phi22Z2D>>2] = $135;
   } else {
    $156 = ((($2)) + 24|0);
    $157 = HEAP32[$156>>2]|0;
    $158 = ((($2)) + 12|0);
    $159 = HEAP32[$158>>2]|0;
    $160 = ($159|0)==($2|0);
    do {
     if ($160) {
      $170 = ((($2)) + 16|0);
      $171 = ((($170)) + 4|0);
      $172 = HEAP32[$171>>2]|0;
      $173 = ($172|0)==(0|0);
      if ($173) {
       $174 = HEAP32[$170>>2]|0;
       $175 = ($174|0)==(0|0);
       if ($175) {
        $$3433 = 0;
        break;
       } else {
        $$1431 = $174;$$1435 = $170;
       }
      } else {
       $$1431 = $172;$$1435 = $171;
      }
      while(1) {
       $176 = ((($$1431)) + 20|0);
       $177 = HEAP32[$176>>2]|0;
       $178 = ($177|0)==(0|0);
       if (!($178)) {
        $$1431 = $177;$$1435 = $176;
        continue;
       }
       $179 = ((($$1431)) + 16|0);
       $180 = HEAP32[$179>>2]|0;
       $181 = ($180|0)==(0|0);
       if ($181) {
        break;
       } else {
        $$1431 = $180;$$1435 = $179;
       }
      }
      $182 = ($$1435>>>0)<($109>>>0);
      if ($182) {
       _abort();
       // unreachable;
      } else {
       HEAP32[$$1435>>2] = 0;
       $$3433 = $$1431;
       break;
      }
     } else {
      $161 = ((($2)) + 8|0);
      $162 = HEAP32[$161>>2]|0;
      $163 = ($162>>>0)<($109>>>0);
      if ($163) {
       _abort();
       // unreachable;
      }
      $164 = ((($162)) + 12|0);
      $165 = HEAP32[$164>>2]|0;
      $166 = ($165|0)==($2|0);
      if (!($166)) {
       _abort();
       // unreachable;
      }
      $167 = ((($159)) + 8|0);
      $168 = HEAP32[$167>>2]|0;
      $169 = ($168|0)==($2|0);
      if ($169) {
       HEAP32[$164>>2] = $159;
       HEAP32[$167>>2] = $162;
       $$3433 = $159;
       break;
      } else {
       _abort();
       // unreachable;
      }
     }
    } while(0);
    $183 = ($157|0)==(0|0);
    if (!($183)) {
     $184 = ((($2)) + 28|0);
     $185 = HEAP32[$184>>2]|0;
     $186 = (127588 + ($185<<2)|0);
     $187 = HEAP32[$186>>2]|0;
     $188 = ($2|0)==($187|0);
     if ($188) {
      HEAP32[$186>>2] = $$3433;
      $cond16 = ($$3433|0)==(0|0);
      if ($cond16) {
       $189 = 1 << $185;
       $190 = $189 ^ -1;
       $191 = HEAP32[(127288)>>2]|0;
       $192 = $191 & $190;
       HEAP32[(127288)>>2] = $192;
       break;
      }
     } else {
      $193 = HEAP32[(127300)>>2]|0;
      $194 = ($157>>>0)<($193>>>0);
      if ($194) {
       _abort();
       // unreachable;
      }
      $195 = ((($157)) + 16|0);
      $196 = HEAP32[$195>>2]|0;
      $197 = ($196|0)==($2|0);
      if ($197) {
       HEAP32[$195>>2] = $$3433;
      } else {
       $198 = ((($157)) + 20|0);
       HEAP32[$198>>2] = $$3433;
      }
      $199 = ($$3433|0)==(0|0);
      if ($199) {
       break;
      }
     }
     $200 = HEAP32[(127300)>>2]|0;
     $201 = ($$3433>>>0)<($200>>>0);
     if ($201) {
      _abort();
      // unreachable;
     }
     $202 = ((($$3433)) + 24|0);
     HEAP32[$202>>2] = $157;
     $203 = ((($2)) + 16|0);
     $204 = HEAP32[$203>>2]|0;
     $205 = ($204|0)==(0|0);
     do {
      if (!($205)) {
       $206 = ($204>>>0)<($200>>>0);
       if ($206) {
        _abort();
        // unreachable;
       } else {
        $207 = ((($$3433)) + 16|0);
        HEAP32[$207>>2] = $204;
        $208 = ((($204)) + 24|0);
        HEAP32[$208>>2] = $$3433;
        break;
       }
      }
     } while(0);
     $209 = ((($203)) + 4|0);
     $210 = HEAP32[$209>>2]|0;
     $211 = ($210|0)==(0|0);
     if (!($211)) {
      $212 = HEAP32[(127300)>>2]|0;
      $213 = ($210>>>0)<($212>>>0);
      if ($213) {
       _abort();
       // unreachable;
      } else {
       $214 = ((($$3433)) + 20|0);
       HEAP32[$214>>2] = $210;
       $215 = ((($210)) + 24|0);
       HEAP32[$215>>2] = $$3433;
       break;
      }
     }
    }
   }
  } while(0);
  $216 = $131 | 1;
  $217 = ((($$1)) + 4|0);
  HEAP32[$217>>2] = $216;
  $218 = (($$1) + ($131)|0);
  HEAP32[$218>>2] = $131;
  $219 = HEAP32[(127304)>>2]|0;
  $220 = ($$1|0)==($219|0);
  if ($220) {
   HEAP32[(127292)>>2] = $131;
   return;
  } else {
   $$2 = $131;
  }
 } else {
  $221 = $112 & -2;
  HEAP32[$111>>2] = $221;
  $222 = $$1416 | 1;
  $223 = ((($$1)) + 4|0);
  HEAP32[$223>>2] = $222;
  $224 = (($$1) + ($$1416)|0);
  HEAP32[$224>>2] = $$1416;
  $$2 = $$1416;
 }
 $225 = $$2 >>> 3;
 $226 = ($$2>>>0)<(256);
 if ($226) {
  $227 = $225 << 1;
  $228 = (127324 + ($227<<2)|0);
  $229 = HEAP32[31821]|0;
  $230 = 1 << $225;
  $231 = $229 & $230;
  $232 = ($231|0)==(0);
  if ($232) {
   $233 = $229 | $230;
   HEAP32[31821] = $233;
   $$pre = ((($228)) + 8|0);
   $$0436 = $228;$$pre$phiZ2D = $$pre;
  } else {
   $234 = ((($228)) + 8|0);
   $235 = HEAP32[$234>>2]|0;
   $236 = HEAP32[(127300)>>2]|0;
   $237 = ($235>>>0)<($236>>>0);
   if ($237) {
    _abort();
    // unreachable;
   } else {
    $$0436 = $235;$$pre$phiZ2D = $234;
   }
  }
  HEAP32[$$pre$phiZ2D>>2] = $$1;
  $238 = ((($$0436)) + 12|0);
  HEAP32[$238>>2] = $$1;
  $239 = ((($$1)) + 8|0);
  HEAP32[$239>>2] = $$0436;
  $240 = ((($$1)) + 12|0);
  HEAP32[$240>>2] = $228;
  return;
 }
 $241 = $$2 >>> 8;
 $242 = ($241|0)==(0);
 if ($242) {
  $$0429 = 0;
 } else {
  $243 = ($$2>>>0)>(16777215);
  if ($243) {
   $$0429 = 31;
  } else {
   $244 = (($241) + 1048320)|0;
   $245 = $244 >>> 16;
   $246 = $245 & 8;
   $247 = $241 << $246;
   $248 = (($247) + 520192)|0;
   $249 = $248 >>> 16;
   $250 = $249 & 4;
   $251 = $250 | $246;
   $252 = $247 << $250;
   $253 = (($252) + 245760)|0;
   $254 = $253 >>> 16;
   $255 = $254 & 2;
   $256 = $251 | $255;
   $257 = (14 - ($256))|0;
   $258 = $252 << $255;
   $259 = $258 >>> 15;
   $260 = (($257) + ($259))|0;
   $261 = $260 << 1;
   $262 = (($260) + 7)|0;
   $263 = $$2 >>> $262;
   $264 = $263 & 1;
   $265 = $264 | $261;
   $$0429 = $265;
  }
 }
 $266 = (127588 + ($$0429<<2)|0);
 $267 = ((($$1)) + 28|0);
 HEAP32[$267>>2] = $$0429;
 $268 = ((($$1)) + 16|0);
 $269 = ((($$1)) + 20|0);
 HEAP32[$269>>2] = 0;
 HEAP32[$268>>2] = 0;
 $270 = HEAP32[(127288)>>2]|0;
 $271 = 1 << $$0429;
 $272 = $270 & $271;
 $273 = ($272|0)==(0);
 if ($273) {
  $274 = $270 | $271;
  HEAP32[(127288)>>2] = $274;
  HEAP32[$266>>2] = $$1;
  $275 = ((($$1)) + 24|0);
  HEAP32[$275>>2] = $266;
  $276 = ((($$1)) + 12|0);
  HEAP32[$276>>2] = $$1;
  $277 = ((($$1)) + 8|0);
  HEAP32[$277>>2] = $$1;
  return;
 }
 $278 = HEAP32[$266>>2]|0;
 $279 = ($$0429|0)==(31);
 $280 = $$0429 >>> 1;
 $281 = (25 - ($280))|0;
 $282 = $279 ? 0 : $281;
 $283 = $$2 << $282;
 $$0417 = $283;$$0418 = $278;
 while(1) {
  $284 = ((($$0418)) + 4|0);
  $285 = HEAP32[$284>>2]|0;
  $286 = $285 & -8;
  $287 = ($286|0)==($$2|0);
  if ($287) {
   label = 127;
   break;
  }
  $288 = $$0417 >>> 31;
  $289 = (((($$0418)) + 16|0) + ($288<<2)|0);
  $290 = $$0417 << 1;
  $291 = HEAP32[$289>>2]|0;
  $292 = ($291|0)==(0|0);
  if ($292) {
   label = 124;
   break;
  } else {
   $$0417 = $290;$$0418 = $291;
  }
 }
 if ((label|0) == 124) {
  $293 = HEAP32[(127300)>>2]|0;
  $294 = ($289>>>0)<($293>>>0);
  if ($294) {
   _abort();
   // unreachable;
  }
  HEAP32[$289>>2] = $$1;
  $295 = ((($$1)) + 24|0);
  HEAP32[$295>>2] = $$0418;
  $296 = ((($$1)) + 12|0);
  HEAP32[$296>>2] = $$1;
  $297 = ((($$1)) + 8|0);
  HEAP32[$297>>2] = $$1;
  return;
 }
 else if ((label|0) == 127) {
  $298 = ((($$0418)) + 8|0);
  $299 = HEAP32[$298>>2]|0;
  $300 = HEAP32[(127300)>>2]|0;
  $301 = ($299>>>0)>=($300>>>0);
  $not$ = ($$0418>>>0)>=($300>>>0);
  $302 = $301 & $not$;
  if (!($302)) {
   _abort();
   // unreachable;
  }
  $303 = ((($299)) + 12|0);
  HEAP32[$303>>2] = $$1;
  HEAP32[$298>>2] = $$1;
  $304 = ((($$1)) + 8|0);
  HEAP32[$304>>2] = $299;
  $305 = ((($$1)) + 12|0);
  HEAP32[$305>>2] = $$0418;
  $306 = ((($$1)) + 24|0);
  HEAP32[$306>>2] = 0;
  return;
 }
}
function runPostSets() {
}
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return ((tempRet0 = h,l|0)|0);
}
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return ((tempRet0 = h,l|0)|0);
}
function _memset(ptr, value, num) {
    ptr = ptr|0; value = value|0; num = num|0;
    var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
    stop = (ptr + num)|0;
    if ((num|0) >= 20) {
      // This is unaligned, but quite large, so work hard to get to aligned settings
      value = value & 0xff;
      unaligned = ptr & 3;
      value4 = value | (value << 8) | (value << 16) | (value << 24);
      stop4 = stop & ~3;
      if (unaligned) {
        unaligned = (ptr + 4 - unaligned)|0;
        while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
          HEAP8[((ptr)>>0)]=value;
          ptr = (ptr+1)|0;
        }
      }
      while ((ptr|0) < (stop4|0)) {
        HEAP32[((ptr)>>2)]=value4;
        ptr = (ptr+4)|0;
      }
    }
    while ((ptr|0) < (stop|0)) {
      HEAP8[((ptr)>>0)]=value;
      ptr = (ptr+1)|0;
    }
    return (ptr-num)|0;
}
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
}
function _memcpy(dest, src, num) {
    dest = dest|0; src = src|0; num = num|0;
    var ret = 0;
    if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
    ret = dest|0;
    if ((dest&3) == (src&3)) {
      while (dest & 3) {
        if ((num|0) == 0) return ret|0;
        HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      while ((num|0) >= 4) {
        HEAP32[((dest)>>2)]=((HEAP32[((src)>>2)])|0);
        dest = (dest+4)|0;
        src = (src+4)|0;
        num = (num-4)|0;
      }
    }
    while ((num|0) > 0) {
      HEAP8[((dest)>>0)]=((HEAP8[((src)>>0)])|0);
      dest = (dest+1)|0;
      src = (src+1)|0;
      num = (num-1)|0;
    }
    return ret|0;
}
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
}
function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = ((HEAP8[(((cttz_i8)+(x & 0xff))>>0)])|0);
    if ((ret|0) < 8) return ret|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 8)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = ((HEAP8[(((cttz_i8)+((x >> 16)&0xff))>>0)])|0);
    if ((ret|0) < 8) return (ret + 16)|0;
    return (((HEAP8[(((cttz_i8)+(x >>> 24))>>0)])|0) + 24)|0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    $rem = $rem | 0;
    var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
    $n_sroa_0_0_extract_trunc = $a$0;
    $n_sroa_1_4_extract_shift$0 = $a$1;
    $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
    $d_sroa_0_0_extract_trunc = $b$0;
    $d_sroa_1_4_extract_shift$0 = $b$1;
    $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
    if (($n_sroa_1_4_extract_trunc | 0) == 0) {
      $4 = ($rem | 0) != 0;
      if (($d_sroa_1_4_extract_trunc | 0) == 0) {
        if ($4) {
          HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$4) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
    $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
    do {
      if (($d_sroa_0_0_extract_trunc | 0) == 0) {
        if ($17) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
            HEAP32[$rem + 4 >> 2] = 0;
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        if (($n_sroa_0_0_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0;
            HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
          }
          $_0$1 = 0;
          $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
        if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
          if (($rem | 0) != 0) {
            HEAP32[$rem >> 2] = 0 | $a$0 & -1;
            HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
          }
          $_0$1 = 0;
          $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
        $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($51 >>> 0 <= 30) {
          $57 = $51 + 1 | 0;
          $58 = 31 - $51 | 0;
          $sr_1_ph = $57;
          $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        if (!$17) {
          $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
          $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          if ($119 >>> 0 <= 31) {
            $125 = $119 + 1 | 0;
            $126 = 31 - $119 | 0;
            $130 = $119 - 31 >> 31;
            $sr_1_ph = $125;
            $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
            $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
            $q_sroa_0_1_ph = 0;
            $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
            break;
          }
          if (($rem | 0) == 0) {
            $_0$1 = 0;
            $_0$0 = 0;
            return (tempRet0 = $_0$1, $_0$0) | 0;
          }
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
        if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
          $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
          $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
          $89 = 64 - $88 | 0;
          $91 = 32 - $88 | 0;
          $92 = $91 >> 31;
          $95 = $88 - 32 | 0;
          $105 = $95 >> 31;
          $sr_1_ph = $88;
          $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
          $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
          $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
          $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
          break;
        }
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
          HEAP32[$rem + 4 >> 2] = 0;
        }
        if (($d_sroa_0_0_extract_trunc | 0) == 1) {
          $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
          $_0$0 = 0 | $a$0 & -1;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        } else {
          $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
          $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
          $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
      }
    } while (0);
    if (($sr_1_ph | 0) == 0) {
      $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
      $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
      $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
      $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = 0;
    } else {
      $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
      $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
      $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
      $137$1 = tempRet0;
      $q_sroa_1_1198 = $q_sroa_1_1_ph;
      $q_sroa_0_1199 = $q_sroa_0_1_ph;
      $r_sroa_1_1200 = $r_sroa_1_1_ph;
      $r_sroa_0_1201 = $r_sroa_0_1_ph;
      $sr_1202 = $sr_1_ph;
      $carry_0203 = 0;
      while (1) {
        $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
        $149 = $carry_0203 | $q_sroa_0_1199 << 1;
        $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
        $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
        _i64Subtract($137$0 | 0, $137$1 | 0, $r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0) | 0;
        $150$1 = tempRet0;
        $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
        $152 = $151$0 & 1;
        $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0 | 0, $r_sroa_0_0_insert_insert42$1 | 0, $151$0 & $d_sroa_0_0_insert_insert99$0 | 0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1 | 0) | 0;
        $r_sroa_0_0_extract_trunc = $154$0;
        $r_sroa_1_4_extract_trunc = tempRet0;
        $155 = $sr_1202 - 1 | 0;
        if (($155 | 0) == 0) {
          break;
        } else {
          $q_sroa_1_1198 = $147;
          $q_sroa_0_1199 = $149;
          $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
          $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
          $sr_1202 = $155;
          $carry_0203 = $152;
        }
      }
      $q_sroa_1_1_lcssa = $147;
      $q_sroa_0_1_lcssa = $149;
      $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
      $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
      $carry_0_lcssa$1 = 0;
      $carry_0_lcssa$0 = $152;
    }
    $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
    $q_sroa_0_0_insert_ext75$1 = 0;
    $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
    if (($rem | 0) != 0) {
      HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
      HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
    }
    $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
    $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $1$0 = 0;
    $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
    return $1$0 | 0;
}
function ___muldsi3($a, $b) {
    $a = $a | 0;
    $b = $b | 0;
    var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
    $1 = $a & 65535;
    $2 = $b & 65535;
    $3 = Math_imul($2, $1) | 0;
    $6 = $a >>> 16;
    $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
    $11 = $b >>> 16;
    $12 = Math_imul($11, $1) | 0;
    return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
    $x_sroa_0_0_extract_trunc = $a$0;
    $y_sroa_0_0_extract_trunc = $b$0;
    $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
    $1$1 = tempRet0;
    $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
    return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function _sbrk(increment) {
    increment = increment|0;
    var oldDynamicTop = 0;
    var oldDynamicTopOnChange = 0;
    var newDynamicTop = 0;
    var totalMemory = 0;
    increment = ((increment + 15) & -16)|0;
    oldDynamicTop = HEAP32[DYNAMICTOP_PTR>>2]|0;
    newDynamicTop = oldDynamicTop + increment | 0;

    if (((increment|0) > 0 & (newDynamicTop|0) < (oldDynamicTop|0)) // Detect and fail if we would wrap around signed 32-bit int.
      | (newDynamicTop|0) < 0) { // Also underflow, sbrk() should be able to be used to subtract.
      abortOnCannotGrowMemory()|0;
      ___setErrNo(12);
      return -1;
    }

    HEAP32[DYNAMICTOP_PTR>>2] = newDynamicTop;
    totalMemory = getTotalMemory()|0;
    if ((newDynamicTop|0) > (totalMemory|0)) {
      if ((enlargeMemory()|0) == 0) {
        ___setErrNo(12);
        HEAP32[DYNAMICTOP_PTR>>2] = oldDynamicTop;
        return -1;
      }
    }
    return oldDynamicTop|0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
    $a$0 = $a$0 | 0;
    $a$1 = $a$1 | 0;
    $b$0 = $b$0 | 0;
    $b$1 = $b$1 | 0;
    var $rem = 0, __stackBase__ = 0;
    __stackBase__ = STACKTOP;
    STACKTOP = STACKTOP + 16 | 0;
    $rem = __stackBase__ | 0;
    ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
    STACKTOP = __stackBase__;
    return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function _llvm_bswap_i32(x) {
    x = x|0;
    return (((x&0xff)<<24) | (((x>>8)&0xff)<<16) | (((x>>16)&0xff)<<8) | (x>>>24))|0;
}
function _llvm_bswap_i16(x) {
    x = x|0;
    return (((x&0xff)<<8) | ((x>>8)&0xff))|0;
}
function _pthread_self() {
    return 0;
}

  
function dynCall_ii(index,a1) {
  index = index|0;
  a1=a1|0;
  return FUNCTION_TABLE_ii[index&1](a1|0)|0;
}


function dynCall_iiii(index,a1,a2,a3) {
  index = index|0;
  a1=a1|0; a2=a2|0; a3=a3|0;
  return FUNCTION_TABLE_iiii[index&7](a1|0,a2|0,a3|0)|0;
}


function dynCall_iii(index,a1,a2) {
  index = index|0;
  a1=a1|0; a2=a2|0;
  return FUNCTION_TABLE_iii[index&15](a1|0,a2|0)|0;
}


function dynCall_vi(index,a1) {
  index = index|0;
  a1=a1|0;
  FUNCTION_TABLE_vi[index&15](a1|0);
}

function b0(p0) {
 p0 = p0|0; nullFunc_ii(0);return 0;
}
function b1(p0,p1,p2) {
 p0 = p0|0;p1 = p1|0;p2 = p2|0; nullFunc_iiii(1);return 0;
}
function b2(p0,p1) {
 p0 = p0|0;p1 = p1|0; nullFunc_iii(2);return 0;
}
function b3(p0) {
 p0 = p0|0; nullFunc_vi(3);
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_ii = [b0,___stdio_close];
var FUNCTION_TABLE_iiii = [b1,b1,___stdio_read,___stdio_seek,___stdio_write,___stdout_write,_sn_write,b1];
var FUNCTION_TABLE_iii = [b2,b2,b2,b2,b2,b2,b2,b2,b2,_tre_compare_items,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vi = [b3,b3,b3,b3,b3,b3,b3,_cleanup,_cleanup_295,b3,b3,b3,b3,b3,b3,b3];

  return { _llvm_cttz_i32: _llvm_cttz_i32, _bitshift64Lshr: _bitshift64Lshr, ___udivmoddi4: ___udivmoddi4, _uBaikVersion: _uBaikVersion, _uBaik: _uBaik, _fflush: _fflush, _memset: _memset, _sbrk: _sbrk, _memcpy: _memcpy, _llvm_bswap_i32: _llvm_bswap_i32, ___muldi3: ___muldi3, _bitshift64Shl: _bitshift64Shl, ___uremdi3: ___uremdi3, _i64Subtract: _i64Subtract, _ntohs: _ntohs, _htonl: _htonl, _i64Add: _i64Add, _pthread_self: _pthread_self, _llvm_bswap_i16: _llvm_bswap_i16, _htons: _htons, ___udivdi3: ___udivdi3, ___errno_location: ___errno_location, ___muldsi3: ___muldsi3, _free: _free, _malloc: _malloc, runPostSets: runPostSets, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, dynCall_ii: dynCall_ii, dynCall_iiii: dynCall_iiii, dynCall_iii: dynCall_iii, dynCall_vi: dynCall_vi };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__ntohs = asm["_ntohs"]; asm["_ntohs"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__ntohs.apply(null, arguments);
};

var real__uBaikVersion = asm["_uBaikVersion"]; asm["_uBaikVersion"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__uBaikVersion.apply(null, arguments);
};

var real__uBaik = asm["_uBaik"]; asm["_uBaik"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__uBaik.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__llvm_cttz_i32 = asm["_llvm_cttz_i32"]; asm["_llvm_cttz_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_cttz_i32.apply(null, arguments);
};

var real__sbrk = asm["_sbrk"]; asm["_sbrk"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__sbrk.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real____muldi3 = asm["___muldi3"]; asm["___muldi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldi3.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};

var real____uremdi3 = asm["___uremdi3"]; asm["___uremdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____uremdi3.apply(null, arguments);
};

var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real____udivmoddi4 = asm["___udivmoddi4"]; asm["___udivmoddi4"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivmoddi4.apply(null, arguments);
};

var real__htonl = asm["_htonl"]; asm["_htonl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htonl.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__pthread_self = asm["_pthread_self"]; asm["_pthread_self"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__pthread_self.apply(null, arguments);
};

var real__llvm_bswap_i16 = asm["_llvm_bswap_i16"]; asm["_llvm_bswap_i16"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i16.apply(null, arguments);
};

var real__htons = asm["_htons"]; asm["_htons"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__htons.apply(null, arguments);
};

var real____udivdi3 = asm["___udivdi3"]; asm["___udivdi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____udivdi3.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real____muldsi3 = asm["___muldsi3"]; asm["___muldsi3"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____muldsi3.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};
var _memset = Module["_memset"] = asm["_memset"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _ntohs = Module["_ntohs"] = asm["_ntohs"];
var _uBaikVersion = Module["_uBaikVersion"] = asm["_uBaikVersion"];
var _uBaik = Module["_uBaik"] = asm["_uBaik"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var _llvm_cttz_i32 = Module["_llvm_cttz_i32"] = asm["_llvm_cttz_i32"];
var _sbrk = Module["_sbrk"] = asm["_sbrk"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var ___muldi3 = Module["___muldi3"] = asm["___muldi3"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var ___uremdi3 = Module["___uremdi3"] = asm["___uremdi3"];
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var ___udivmoddi4 = Module["___udivmoddi4"] = asm["___udivmoddi4"];
var _htonl = Module["_htonl"] = asm["_htonl"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _pthread_self = Module["_pthread_self"] = asm["_pthread_self"];
var _llvm_bswap_i16 = Module["_llvm_bswap_i16"] = asm["_llvm_bswap_i16"];
var _htons = Module["_htons"] = asm["_htons"];
var ___udivdi3 = Module["___udivdi3"] = asm["___udivdi3"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var ___muldsi3 = Module["___muldsi3"] = asm["___muldsi3"];
var _free = Module["_free"] = asm["_free"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===





function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  writeStackCookie();

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
  checkStackCookie();
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    process['exit'](status);
  } else if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}





// {{MODULE_ADDITIONS}}



